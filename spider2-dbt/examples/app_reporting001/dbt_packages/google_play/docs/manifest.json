{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.8.3", "generated_at": "2024-07-23T16:05:21.838278Z", "invocation_id": "bd58a6f5-da87-4544-a502-4605d7bbb612", "env": {}, "project_name": "google_play_integration_tests", "project_id": "29b01bb44a05dbfb41c17df377422ef4", "user_id": "8268eefe-e8f7-472e-ab2a-a92f0135d76d", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"seed.google_play_integration_tests.stats_ratings_app_version": {"database": "postgres", "schema": "zz_google_play", "name": "stats_ratings_app_version", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_ratings_app_version.csv", "original_file_path": "seeds/stats_ratings_app_version.csv", "unique_id": "seed.google_play_integration_tests.stats_ratings_app_version", "fqn": ["google_play_integration_tests", "stats_ratings_app_version"], "alias": "stats_ratings_app_version", "checksum": {"name": "sha256", "checksum": "265d8cc2c9b4d734de3811db808d80698eb63afbc395cfb5b9bfad46b35e3ceb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"app_version_code": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"app_version_code": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1721750695.4389608, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_ratings_app_version\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.stats_ratings_os_version": {"database": "postgres", "schema": "zz_google_play", "name": "stats_ratings_os_version", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_ratings_os_version.csv", "original_file_path": "seeds/stats_ratings_os_version.csv", "unique_id": "seed.google_play_integration_tests.stats_ratings_os_version", "fqn": ["google_play_integration_tests", "stats_ratings_os_version"], "alias": "stats_ratings_os_version", "checksum": {"name": "sha256", "checksum": "c83679bbd92b228bbfdee8d8c6065e8e60d28497a390af7a3e998f79b2ae1799"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.443439, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_ratings_os_version\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.stats_installs_overview": {"database": "postgres", "schema": "zz_google_play", "name": "stats_installs_overview", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_installs_overview.csv", "original_file_path": "seeds/stats_installs_overview.csv", "unique_id": "seed.google_play_integration_tests.stats_installs_overview", "fqn": ["google_play_integration_tests", "stats_installs_overview"], "alias": "stats_installs_overview", "checksum": {"name": "sha256", "checksum": "97de7a01163afc80130d3d311acea7a5a3070d60e132e51160f3788c25a9473a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"active_device_installs": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"active_device_installs": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1721750695.444766, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_installs_overview\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.stats_crashes_app_version": {"database": "postgres", "schema": "zz_google_play", "name": "stats_crashes_app_version", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_crashes_app_version.csv", "original_file_path": "seeds/stats_crashes_app_version.csv", "unique_id": "seed.google_play_integration_tests.stats_crashes_app_version", "fqn": ["google_play_integration_tests", "stats_crashes_app_version"], "alias": "stats_crashes_app_version", "checksum": {"name": "sha256", "checksum": "9ba35405365bc7e8502b064ade96f3213cb61c74176c8a5480221a0cda71e00d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.446252, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_crashes_app_version\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.stats_installs_app_version": {"database": "postgres", "schema": "zz_google_play", "name": "stats_installs_app_version", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_installs_app_version.csv", "original_file_path": "seeds/stats_installs_app_version.csv", "unique_id": "seed.google_play_integration_tests.stats_installs_app_version", "fqn": ["google_play_integration_tests", "stats_installs_app_version"], "alias": "stats_installs_app_version", "checksum": {"name": "sha256", "checksum": "ba9455f821cb0dd72cf3e84eeb09f9fa08ba502d6c490ec292aa3f18b6477b81"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.447693, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_installs_app_version\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.stats_installs_country": {"database": "postgres", "schema": "zz_google_play", "name": "stats_installs_country", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_installs_country.csv", "original_file_path": "seeds/stats_installs_country.csv", "unique_id": "seed.google_play_integration_tests.stats_installs_country", "fqn": ["google_play_integration_tests", "stats_installs_country"], "alias": "stats_installs_country", "checksum": {"name": "sha256", "checksum": "0079e4a0bab4d96f29029cb916d87cb86b7e9f9e4b4293884b9099986e17e706"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.4489841, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_installs_country\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.stats_ratings_device": {"database": "postgres", "schema": "zz_google_play", "name": "stats_ratings_device", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_ratings_device.csv", "original_file_path": "seeds/stats_ratings_device.csv", "unique_id": "seed.google_play_integration_tests.stats_ratings_device", "fqn": ["google_play_integration_tests", "stats_ratings_device"], "alias": "stats_ratings_device", "checksum": {"name": "sha256", "checksum": "6d9283d160da7a0424da7a9f3c042360aab548982842052de8c2ed7b132326c6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.450525, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_ratings_device\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.stats_crashes_os_version": {"database": "postgres", "schema": "zz_google_play", "name": "stats_crashes_os_version", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_crashes_os_version.csv", "original_file_path": "seeds/stats_crashes_os_version.csv", "unique_id": "seed.google_play_integration_tests.stats_crashes_os_version", "fqn": ["google_play_integration_tests", "stats_crashes_os_version"], "alias": "stats_crashes_os_version", "checksum": {"name": "sha256", "checksum": "5e915f7a337901a0ce1c20f1bd5d98510f00605b064ac3a259fb1604cdef9d38"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.451853, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_crashes_os_version\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.earnings": {"database": "postgres", "schema": "zz_google_play", "name": "earnings", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "earnings.csv", "original_file_path": "seeds/earnings.csv", "unique_id": "seed.google_play_integration_tests.earnings", "fqn": ["google_play_integration_tests", "earnings"], "alias": "earnings", "checksum": {"name": "sha256", "checksum": "0c9a158f8b6db25418157eea65a783f1b7059735d4ccab15303dda9579b9812d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.4531689, "relation_name": "\"postgres\".\"zz_google_play\".\"earnings\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.stats_installs_device": {"database": "postgres", "schema": "zz_google_play", "name": "stats_installs_device", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_installs_device.csv", "original_file_path": "seeds/stats_installs_device.csv", "unique_id": "seed.google_play_integration_tests.stats_installs_device", "fqn": ["google_play_integration_tests", "stats_installs_device"], "alias": "stats_installs_device", "checksum": {"name": "sha256", "checksum": "5e626a82b102d8fa25f8e9162112162409e8a33ddf0d451279cbe873034c45f8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.454453, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_installs_device\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.stats_ratings_country": {"database": "postgres", "schema": "zz_google_play", "name": "stats_ratings_country", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_ratings_country.csv", "original_file_path": "seeds/stats_ratings_country.csv", "unique_id": "seed.google_play_integration_tests.stats_ratings_country", "fqn": ["google_play_integration_tests", "stats_ratings_country"], "alias": "stats_ratings_country", "checksum": {"name": "sha256", "checksum": "c210136af0fc9462bb8d15ff76f19940738bf5e9f7733e9c8a06f6481bc10d7a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.455769, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_ratings_country\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.stats_ratings_overview": {"database": "postgres", "schema": "zz_google_play", "name": "stats_ratings_overview", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_ratings_overview.csv", "original_file_path": "seeds/stats_ratings_overview.csv", "unique_id": "seed.google_play_integration_tests.stats_ratings_overview", "fqn": ["google_play_integration_tests", "stats_ratings_overview"], "alias": "stats_ratings_overview", "checksum": {"name": "sha256", "checksum": "cd6ad5d63711659d6bbe8bdb35cb87fa0bb564917f5d50ea1c49d16ffb72bf6c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.4570508, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_ratings_overview\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.stats_store_performance_country": {"database": "postgres", "schema": "zz_google_play", "name": "stats_store_performance_country", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_store_performance_country.csv", "original_file_path": "seeds/stats_store_performance_country.csv", "unique_id": "seed.google_play_integration_tests.stats_store_performance_country", "fqn": ["google_play_integration_tests", "stats_store_performance_country"], "alias": "stats_store_performance_country", "checksum": {"name": "sha256", "checksum": "b303c6b8c45436d0cb8d61fabeb7e41222e51e9198099725c1114c7c12fb9ecc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.459786, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_store_performance_country\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.stats_store_performance_traffic_source": {"database": "postgres", "schema": "zz_google_play", "name": "stats_store_performance_traffic_source", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_store_performance_traffic_source.csv", "original_file_path": "seeds/stats_store_performance_traffic_source.csv", "unique_id": "seed.google_play_integration_tests.stats_store_performance_traffic_source", "fqn": ["google_play_integration_tests", "stats_store_performance_traffic_source"], "alias": "stats_store_performance_traffic_source", "checksum": {"name": "sha256", "checksum": "a6b59fbebbc194bee71bc66584b70e5c87b47e52c6d45c2e4fa70b360ff271de"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.461092, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_store_performance_traffic_source\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.financial_stats_subscriptions_country": {"database": "postgres", "schema": "zz_google_play", "name": "financial_stats_subscriptions_country", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "financial_stats_subscriptions_country.csv", "original_file_path": "seeds/financial_stats_subscriptions_country.csv", "unique_id": "seed.google_play_integration_tests.financial_stats_subscriptions_country", "fqn": ["google_play_integration_tests", "financial_stats_subscriptions_country"], "alias": "financial_stats_subscriptions_country", "checksum": {"name": "sha256", "checksum": "e9cecd052065123851c3edb2f4d829ba47f8b30adaf7c4e6bcc0f26f2aa9dcb5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.4623759, "relation_name": "\"postgres\".\"zz_google_play\".\"financial_stats_subscriptions_country\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.stats_crashes_overview": {"database": "postgres", "schema": "zz_google_play", "name": "stats_crashes_overview", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_crashes_overview.csv", "original_file_path": "seeds/stats_crashes_overview.csv", "unique_id": "seed.google_play_integration_tests.stats_crashes_overview", "fqn": ["google_play_integration_tests", "stats_crashes_overview"], "alias": "stats_crashes_overview", "checksum": {"name": "sha256", "checksum": "9f667645dae525824d2fab2f65817270338d629dc0c5152f2a804c284b0c7b12"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.463656, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_crashes_overview\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "seed.google_play_integration_tests.stats_installs_os_version": {"database": "postgres", "schema": "zz_google_play", "name": "stats_installs_os_version", "resource_type": "seed", "package_name": "google_play_integration_tests", "path": "stats_installs_os_version.csv", "original_file_path": "seeds/stats_installs_os_version.csv", "unique_id": "seed.google_play_integration_tests.stats_installs_os_version", "fqn": ["google_play_integration_tests", "stats_installs_os_version"], "alias": "stats_installs_os_version", "checksum": {"name": "sha256", "checksum": "a37fdc640284a1b53ba3686904ed97c73e5aa51cbfc58d1f200c1e74383b6406"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1721750695.4649339, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_installs_os_version\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "depends_on": {"macros": []}}, "model.google_play.google_play__app_version_report": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "google_play__app_version_report", "resource_type": "model", "package_name": "google_play", "path": "google_play__app_version_report.sql", "original_file_path": "models/google_play__app_version_report.sql", "unique_id": "model.google_play.google_play__app_version_report", "fqn": ["google_play", "google_play__app_version_report"], "alias": "google_play__app_version_report", "checksum": {"name": "sha256", "checksum": "d1f0c8fe03e25f146f396b2f16587dd33b09aca705063ae7edfac94892bd1bc1"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Daily report on installs, crashes and ANRs, and ratings by app and app_version.  Records with `NULL` app version codes are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_devices_last_30_days": {"name": "active_devices_last_30_days", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_version_code": {"name": "app_version_code", "description": "Integer value of the version of the app being reported on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_installs": {"name": "device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_uninstalls": {"name": "device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_upgrades": {"name": "device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_installs": {"name": "user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_uninstalls": {"name": "user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anrs": {"name": "anrs", "description": "Daily application not responding (ANR) reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "crashes": {"name": "crashes", "description": "Daily crash reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_average_rating": {"name": "rolling_total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_rating": {"name": "average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_device_installs": {"name": "total_device_installs", "description": "Cumulative number of device installs up to and including this day (aggregated on the dimension of this table). This does not take uninstalls into account and may contain duplicate devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_device_uninstalls": {"name": "total_device_uninstalls", "description": "Cumulative number of device uninstalls up to and including this day (aggregated on the dimension of this table). This does not take re-installs into account and may contain duplicate devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_device_installs": {"name": "net_device_installs", "description": "Cumulative net number of device installs up to and including this day (aggregated on the dimension of this table). This is the difference of `total_device_installs` and `total_device_uninstalls`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play://models/google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.0797791, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__app_version_report\"", "raw_code": "with installs as (\n\n    select *\n    from {{ var('stats_installs_app_version') }}\n), \n\nratings as (\n\n    select *\n    from {{ var('stats_ratings_app_version') }}\n), \n\ncrashes as (\n\n    select *\n    from {{ var('stats_crashes_app_version') }}\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\napp_version_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, crashes.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.app_version_code, ratings.app_version_code, crashes.app_version_code) as app_version_code,\n        coalesce(install_metrics.package_name, ratings.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple events in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- choosing an arbitrary negative integer as we can't coalesce with a string like 'null_version_code'. null app version codes will cause fanout\n        and coalesce(install_metrics.app_version_code, -5) = coalesce(ratings.app_version_code, -5) -- this really doesn't happen IRL but let's be safe\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day) = crashes.date_day\n        and coalesce(install_metrics.source_relation, ratings.source_relation) = crashes.source_relation\n        and coalesce(install_metrics.package_name, ratings.package_name) = crashes.package_name\n        and coalesce(install_metrics.app_version_code, ratings.app_version_code, -5) = coalesce(crashes.app_version_code, -5)\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *\n\n    {%- set rolling_metrics = ['rolling_total_average_rating', 'total_device_installs', 'total_device_uninstalls'] -%}\n\n    {% for metric in rolling_metrics -%}\n        , sum(case when {{ metric }} is null \n                then 0 else 1 end) over (partition by source_relation, app_version_code, package_name order by date_day asc rows unbounded preceding) as {{ metric | lower }}_partition\n    {%- endfor %}\n    from app_version_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        app_version_code,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        average_rating\n\n        {% for metric in rolling_metrics -%}\n\n        , first_value( {{ metric }} ) over (\n            partition by source_relation, {{ metric | lower }}_partition, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as {{ metric }}\n\n        {%- endfor %}\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        app_version_code,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_app_version", "package": null, "version": null}, {"name": "stg_google_play__stats_ratings_app_version", "package": null, "version": null}, {"name": "stg_google_play__stats_crashes_app_version", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.google_play_source.stg_google_play__stats_installs_app_version", "model.google_play_source.stg_google_play__stats_ratings_app_version", "model.google_play_source.stg_google_play__stats_crashes_app_version"]}, "compiled_path": "target/compiled/google_play/models/google_play__app_version_report.sql", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version\"\n), \n\ncrashes as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version\"\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\napp_version_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, crashes.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.app_version_code, ratings.app_version_code, crashes.app_version_code) as app_version_code,\n        coalesce(install_metrics.package_name, ratings.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple events in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- choosing an arbitrary negative integer as we can't coalesce with a string like 'null_version_code'. null app version codes will cause fanout\n        and coalesce(install_metrics.app_version_code, -5) = coalesce(ratings.app_version_code, -5) -- this really doesn't happen IRL but let's be safe\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day) = crashes.date_day\n        and coalesce(install_metrics.source_relation, ratings.source_relation) = crashes.source_relation\n        and coalesce(install_metrics.package_name, ratings.package_name) = crashes.package_name\n        and coalesce(install_metrics.app_version_code, ratings.app_version_code, -5) = coalesce(crashes.app_version_code, -5)\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, app_version_code, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, app_version_code, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, app_version_code, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition\n    from app_version_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        app_version_code,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        app_version_code,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play.google_play__device_report": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "google_play__device_report", "resource_type": "model", "package_name": "google_play", "path": "google_play__device_report.sql", "original_file_path": "models/google_play__device_report.sql", "unique_id": "model.google_play.google_play__device_report", "fqn": ["google_play", "google_play__device_report"], "alias": "google_play__device_report", "checksum": {"name": "sha256", "checksum": "6bc9efbc89c47a69752fe14964cb1ee8e71f653d4735b508833b275137e342b0"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Daily report on installs and ratings by app and device model type.  Records with `NULL` device types (ie did not consent to being tracked) are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_devices_last_30_days": {"name": "active_devices_last_30_days", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device": {"name": "device", "description": "Type of device model. May be NULL if users do not consent to being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_installs": {"name": "device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_uninstalls": {"name": "device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_upgrades": {"name": "device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_installs": {"name": "user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_uninstalls": {"name": "user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_average_rating": {"name": "rolling_total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_rating": {"name": "average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_device_installs": {"name": "total_device_installs", "description": "Cumulative number of device installs up to and including this day (aggregated on the dimension of this table). This does not take uninstalls into account and may contain duplicate devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_device_uninstalls": {"name": "total_device_uninstalls", "description": "Cumulative number of device uninstalls up to and including this day (aggregated on the dimension of this table). This does not take re-installs into account and may contain duplicate devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_device_installs": {"name": "net_device_installs", "description": "Cumulative net number of device installs up to and including this day (aggregated on the dimension of this table). This is the difference of `total_device_installs` and `total_device_uninstalls`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play://models/google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.070157, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__device_report\"", "raw_code": "with installs as (\n\n    select *\n    from {{ var('stats_installs_device') }}\n), \n\nratings as (\n\n    select *\n    from {{ var('stats_ratings_device') }}\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\ndevice_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day) as date_day,\n        coalesce(install_metrics.device, ratings.device) as device, -- device type\n        coalesce(install_metrics.package_name, ratings.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null device types otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.device, 'null_device') = coalesce(ratings.device, 'null_device') -- in the source package we aggregate all null device-type records together into one batch per day\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *\n\n    {%- set rolling_metrics = ['rolling_total_average_rating', 'total_device_installs', 'total_device_uninstalls'] -%}\n\n    {% for metric in rolling_metrics -%}\n        , sum(case when {{ metric }} is null \n                then 0 else 1 end) over (partition by source_relation, device, package_name order by date_day asc rows unbounded preceding) as {{ metric | lower }}_partition\n    {%- endfor %}\n    from device_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        device,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        average_rating\n\n        {% for metric in rolling_metrics -%}\n\n        , first_value( {{ metric }} ) over (\n            partition by source_relation, {{ metric | lower }}_partition, device, package_name order by date_day asc rows between unbounded preceding and current row) as {{ metric }}\n\n        {%- endfor %}\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        device,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_device", "package": null, "version": null}, {"name": "stg_google_play__stats_ratings_device", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.google_play_source.stg_google_play__stats_installs_device", "model.google_play_source.stg_google_play__stats_ratings_device"]}, "compiled_path": "target/compiled/google_play/models/google_play__device_report.sql", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device\"\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\ndevice_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day) as date_day,\n        coalesce(install_metrics.device, ratings.device) as device, -- device type\n        coalesce(install_metrics.package_name, ratings.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null device types otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.device, 'null_device') = coalesce(ratings.device, 'null_device') -- in the source package we aggregate all null device-type records together into one batch per day\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, device, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, device, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, device, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition\n    from device_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        device,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, device, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        device,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play.google_play__finance_report": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "google_play__finance_report", "resource_type": "model", "package_name": "google_play", "path": "google_play__finance_report.sql", "original_file_path": "models/google_play__finance_report.sql", "unique_id": "model.google_play.google_play__finance_report", "fqn": ["google_play", "google_play__finance_report"], "alias": "google_play__finance_report", "checksum": {"name": "sha256", "checksum": "cba984a233403ae3d74426ea1a1208c55e02ce4bb045fcb8a8f986a61b521959"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Daily report on revenue (in merchant currency) and subscriptions by product (defined by 'sku_id') and buyer country.  Includes financial metrics for each type of transaction that your app has completed. Note that this table draws from the `earnings` report and NOT `sales`. The Google Play UI draws from the `sales` data, and therefore this model will NOT tie out with the UI revenue reports. Google recommends using `earnings` data for financial analyses despite this -- `sales` does not include chargebacks and the like, making  it more appropriate for trend analyses than accounting ([source](https://support.google.com/googleplay/android-developer/answer/6135870)).\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_short": {"name": "country_short", "description": "Two-letter abbreviation of the country where the user\u2019s Google account is registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_long": {"name": "country_long", "description": "Full name of the country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "Geographical region of the country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sub_region": {"name": "sub_region", "description": "Geographical subregion of the country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sku_id": {"name": "sku_id", "description": "Developer-specified unique ID assigned to the ordered product. Subscription order IDs include the renewal cycle number at the end.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "merchant_currency": {"name": "merchant_currency", "description": "Currency to which the order was converted. This is the local currency you are paid in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_subscriptions": {"name": "new_subscriptions", "description": "The daily count of newly purchased subscriptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancelled_subscriptions": {"name": "cancelled_subscriptions", "description": "The daily count of cancelled subscriptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_active_subscriptions": {"name": "total_active_subscriptions", "description": "The rolling count of active subscriptions of this type in this country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_amount": {"name": "net_amount", "description": "Net amount of revenue summed across the different transaction types.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "Amount of revenue brought in through `charge` transaction types (ie charging a customer for a subscription).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_transactions": {"name": "charge_transactions", "description": "Number of distinct orders of the `charge` transaction type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "google_fee_amount": {"name": "google_fee_amount", "description": "Amount of revenue paid to Google in fees. Transactions made in the European Economic Area will not include Google fees.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "google_fee_transactions": {"name": "google_fee_transactions", "description": "Number of distinct transactions of the `charge` transaction type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "Amount paid in taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_transactions": {"name": "tax_transactions", "description": "Number of distinct transactions of `tax` type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_refund_amount": {"name": "charge_refund_amount", "description": "Amount paid in refunding users' charges.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_refund_transactions": {"name": "charge_refund_transactions", "description": "Number of distinct charge refunds made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "google_fee_refund_amount": {"name": "google_fee_refund_amount", "description": "Amount of revenue refunded to you from Google fees.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "google_fee_refund_transactions": {"name": "google_fee_refund_transactions", "description": "Number of distinct Google fee refunds made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_refund_amount": {"name": "tax_refund_amount", "description": "Amount of tax refunds paid to you.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_refund_transactions": {"name": "tax_refund_transactions", "description": "Number of distinct tax refunds made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "other_amount": {"name": "other_amount", "description": "Amount of revenue from `other` or `NULL` transaction types.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "other_transactions": {"name": "other_transactions", "description": "Number of distinct transactions of `other` or `NULL` transaction types.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transactions": {"name": "transactions", "description": "Total number of distinct transactions made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_title": {"name": "product_title", "description": "Developer-specified name of the product. Shown in the buyer's locale.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play://models/google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1721750696.078552, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__finance_report\"", "raw_code": "{{ config(enabled=var('google_play__using_earnings', False)) }}\n\nwith earnings as (\n\n    select *\n    from {{ ref('int_google_play__earnings') }}\n), \n\ncountry_codes as (\n\n    select *\n    from {{ var('country_codes') }}\n),\n\nproduct_info as (\n\n    select *\n    from {{ ref('int_google_play__latest_product_info') }}\n\n-- there's honestly quite a bit in here since we only need to do backfilling stuff if there is indeed a full outer join \n{% if var('google_play__using_subscriptions', False) -%}\n), \n\nsubscriptions as (\n\n    select *\n    from {{ var('financial_stats_subscriptions_country') }}\n), \n\ndaily_join as (\n\n-- these are dynamically set. perhaps we should extract into a variable in case people's tables get to wide?\n{% set earning_transaction_metrics = adapter.get_columns_in_relation(ref('int_google_play__earnings')) %}\n\n    select\n        -- these columns are the grain of this model (day + country + package_name + product (sku_id))\n        coalesce(earnings.source_relation, subscriptions.source_relation) as source_relation,\n        coalesce(earnings.date_day, subscriptions.date_day) as date_day,\n        coalesce(earnings.country_short, subscriptions.country) as country_short,\n        coalesce(earnings.package_name, subscriptions.package_name) as package_name,\n        coalesce(earnings.sku_id, subscriptions.product_id) as sku_id,\n        earnings.merchant_currency, -- this will just be null if there aren't transactions on a given day\n\n        {% for t in earning_transaction_metrics -%}\n            {% if t.column|lower not in ['source_relation', 'country_short', 'date_day', 'sku_id', 'package_name', 'merchant_currency'] -%}\n        coalesce( {{ t.column }}, 0) as {{ t.column|lower }},\n            {% endif %}\n        {%- endfor -%}\n\n        coalesce(subscriptions.new_subscriptions, 0) as new_subscriptions,\n        coalesce(subscriptions.cancelled_subscriptions, 0) as cancelled_subscriptions,\n\n        -- this is a rolling metric, so we'll use window functions to backfill instead of coalescing\n        subscriptions.total_active_subscriptions\n    from earnings\n    full outer join subscriptions\n        on earnings.date_day = subscriptions.date_day\n        and earnings.source_relation = subscriptions.source_relation\n        and earnings.package_name = subscriptions.package_name\n        -- coalesce null countries otherwise they'll cause fanout with the full outer join\n        and coalesce(earnings.country_short, 'null_country') = coalesce(subscriptions.country, 'null_country') -- in the source package we aggregate all null country records together into one batch per day\n        and earnings.sku_id = subscriptions.product_id\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create a partition to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select \n        *,\n        sum(case when total_active_subscriptions is null \n                then 0 else 1 end) over (partition by source_relation, country_short, sku_id order by date_day asc rows unbounded preceding) as total_active_subscriptions_partition\n    from daily_join\n), \n\nfill_values as (\n\n    select \n        -- we can include these in earning_transaction_metrics but wanna keep them in this column position\n        source_relation,\n        date_day,\n        country_short,\n        package_name, \n        sku_id,\n        merchant_currency,\n        {% for t in earning_transaction_metrics -%}\n            {%- if t.column|lower not in ['source_relation', 'country_short', 'date_day', 'sku_id', 'package_name', 'merchant_currency'] -%}\n        {{ t.column | lower }},\n            {% endif %}\n        {%- endfor -%}\n\n        new_subscriptions,\n        cancelled_subscriptions,\n\n        -- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\n        first_value( total_active_subscriptions ) over (\n            partition by source_relation, total_active_subscriptions_partition, country_short, sku_id order by date_day asc rows between unbounded preceding and current row) as total_active_subscriptions\n    from create_partitions\n), \n\nfinal_values as (\n\n    select \n        source_relation,\n        date_day,\n        country_short,\n        package_name, \n        sku_id,\n        merchant_currency,\n        {% for t in earning_transaction_metrics -%}\n            {%- if t.column|lower not in ['source_relation', 'country_short', 'date_day', 'sku_id', 'package_name', 'merchant_currency'] -%}\n        {{ t.column | lower }},\n            {% endif %}\n        {%- endfor -%}\n        new_subscriptions,\n        cancelled_subscriptions,\n        \n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_active_subscriptions, 0) as total_active_subscriptions\n    from fill_values\n{%- endif %}\n\n), \n\nadd_product_country_info as (\n\n    select \n        base.*,\n        product_info.product_title,\n        coalesce(country_codes.alternative_country_name, country_codes.country_name) as country_long,\n        country_codes.region,\n        country_codes.sub_region\n    from {{ 'final_values' if var('google_play__using_subscriptions', False) else 'earnings' }} as base\n    left join product_info \n        on base.package_name = product_info.package_name\n        and base.source_relation = product_info.source_relation\n        and base.sku_id = product_info.sku_id\n    left join country_codes \n        on country_codes.country_code_alpha_2 = base.country_short\n)\n\nselect *\nfrom add_product_country_info", "language": "sql", "refs": [{"name": "int_google_play__earnings", "package": null, "version": null}, {"name": "google_play__country_codes", "package": null, "version": null}, {"name": "int_google_play__latest_product_info", "package": null, "version": null}, {"name": "stg_google_play__subscriptions_country", "package": null, "version": null}, {"name": "int_google_play__earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.google_play.int_google_play__earnings", "seed.google_play_source.google_play__country_codes", "model.google_play.int_google_play__latest_product_info", "model.google_play_source.stg_google_play__subscriptions_country"]}, "compiled_path": "target/compiled/google_play/models/google_play__finance_report.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_google_play__latest_product_info as (\n \n\nwith earnings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__earnings\"\n), \n\n-- figure out when the latest transaction involving this product was to find the latest product title used for it\ntransaction_recency as (\n\n    select\n        source_relation,\n        package_name,\n        product_title,\n        sku_id,\n        max(transaction_pt_timestamp) as last_transaction_at\n    from earnings\n    group by 1,2,3,4\n), \n\norder_product_records as (\n\n    select \n        *,\n        row_number() over(partition by source_relation, sku_id order by last_transaction_at desc) as n\n    from transaction_recency\n), \n\nlatest_product_record as (\n\n    select\n        source_relation,\n        package_name,\n        product_title,\n        sku_id\n    from order_product_records\n    where n = 1\n)\n\nselect *\nfrom latest_product_record\n), earnings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"int_google_play__earnings\"\n), \n\ncountry_codes as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_source\".\"google_play__country_codes\"\n),\n\nproduct_info as (\n\n    select *\n    from __dbt__cte__int_google_play__latest_product_info\n\n-- there's honestly quite a bit in here since we only need to do backfilling stuff if there is indeed a full outer join \n), \n\nsubscriptions as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__subscriptions_country\"\n), \n\ndaily_join as (\n\n-- these are dynamically set. perhaps we should extract into a variable in case people's tables get to wide?\n\n\n    select\n        -- these columns are the grain of this model (day + country + package_name + product (sku_id))\n        coalesce(earnings.source_relation, subscriptions.source_relation) as source_relation,\n        coalesce(earnings.date_day, subscriptions.date_day) as date_day,\n        coalesce(earnings.country_short, subscriptions.country) as country_short,\n        coalesce(earnings.package_name, subscriptions.package_name) as package_name,\n        coalesce(earnings.sku_id, subscriptions.product_id) as sku_id,\n        earnings.merchant_currency, -- this will just be null if there aren't transactions on a given day\n\n        coalesce( net_amount, 0) as net_amount,\n            coalesce( transactions, 0) as transactions,\n            coalesce( charge_amount, 0) as charge_amount,\n            coalesce( charge_transactions, 0) as charge_transactions,\n            coalesce( google_fee_amount, 0) as google_fee_amount,\n            coalesce( google_fee_transactions, 0) as google_fee_transactions,\n            coalesce(subscriptions.new_subscriptions, 0) as new_subscriptions,\n        coalesce(subscriptions.cancelled_subscriptions, 0) as cancelled_subscriptions,\n\n        -- this is a rolling metric, so we'll use window functions to backfill instead of coalescing\n        subscriptions.total_active_subscriptions\n    from earnings\n    full outer join subscriptions\n        on earnings.date_day = subscriptions.date_day\n        and earnings.source_relation = subscriptions.source_relation\n        and earnings.package_name = subscriptions.package_name\n        -- coalesce null countries otherwise they'll cause fanout with the full outer join\n        and coalesce(earnings.country_short, 'null_country') = coalesce(subscriptions.country, 'null_country') -- in the source package we aggregate all null country records together into one batch per day\n        and earnings.sku_id = subscriptions.product_id\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create a partition to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select \n        *,\n        sum(case when total_active_subscriptions is null \n                then 0 else 1 end) over (partition by source_relation, country_short, sku_id order by date_day asc rows unbounded preceding) as total_active_subscriptions_partition\n    from daily_join\n), \n\nfill_values as (\n\n    select \n        -- we can include these in earning_transaction_metrics but wanna keep them in this column position\n        source_relation,\n        date_day,\n        country_short,\n        package_name, \n        sku_id,\n        merchant_currency,\n        net_amount,\n            transactions,\n            charge_amount,\n            charge_transactions,\n            google_fee_amount,\n            google_fee_transactions,\n            new_subscriptions,\n        cancelled_subscriptions,\n\n        -- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\n        first_value( total_active_subscriptions ) over (\n            partition by source_relation, total_active_subscriptions_partition, country_short, sku_id order by date_day asc rows between unbounded preceding and current row) as total_active_subscriptions\n    from create_partitions\n), \n\nfinal_values as (\n\n    select \n        source_relation,\n        date_day,\n        country_short,\n        package_name, \n        sku_id,\n        merchant_currency,\n        net_amount,\n            transactions,\n            charge_amount,\n            charge_transactions,\n            google_fee_amount,\n            google_fee_transactions,\n            new_subscriptions,\n        cancelled_subscriptions,\n        \n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_active_subscriptions, 0) as total_active_subscriptions\n    from fill_values\n\n), \n\nadd_product_country_info as (\n\n    select \n        base.*,\n        product_info.product_title,\n        coalesce(country_codes.alternative_country_name, country_codes.country_name) as country_long,\n        country_codes.region,\n        country_codes.sub_region\n    from final_values as base\n    left join product_info \n        on base.package_name = product_info.package_name\n        and base.source_relation = product_info.source_relation\n        and base.sku_id = product_info.sku_id\n    left join country_codes \n        on country_codes.country_code_alpha_2 = base.country_short\n)\n\nselect *\nfrom add_product_country_info", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.google_play.int_google_play__latest_product_info", "sql": " __dbt__cte__int_google_play__latest_product_info as (\n \n\nwith earnings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__earnings\"\n), \n\n-- figure out when the latest transaction involving this product was to find the latest product title used for it\ntransaction_recency as (\n\n    select\n        source_relation,\n        package_name,\n        product_title,\n        sku_id,\n        max(transaction_pt_timestamp) as last_transaction_at\n    from earnings\n    group by 1,2,3,4\n), \n\norder_product_records as (\n\n    select \n        *,\n        row_number() over(partition by source_relation, sku_id order by last_transaction_at desc) as n\n    from transaction_recency\n), \n\nlatest_product_record as (\n\n    select\n        source_relation,\n        package_name,\n        product_title,\n        sku_id\n    from order_product_records\n    where n = 1\n)\n\nselect *\nfrom latest_product_record\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play.google_play__country_report": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "google_play__country_report", "resource_type": "model", "package_name": "google_play", "path": "google_play__country_report.sql", "original_file_path": "models/google_play__country_report.sql", "unique_id": "model.google_play.google_play__country_report", "fqn": ["google_play", "google_play__country_report"], "alias": "google_play__country_report", "checksum": {"name": "sha256", "checksum": "d145b9020b9849a56e9e81b5f9e119868b906eef5164223c89f64449044dba8c"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Daily report on installs, ratings, and store performance by app and user country.  Records with `NULL` countries (ie did not consent to being tracked) are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_devices_last_30_days": {"name": "active_devices_last_30_days", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_short": {"name": "country_short", "description": "Two-letter abbreviation of the country where the user\u2019s Google account is registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_long": {"name": "country_long", "description": "Full name of the country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "Geographical region of the country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sub_region": {"name": "sub_region", "description": "Geographical subregion of the country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_installs": {"name": "device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_uninstalls": {"name": "device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_upgrades": {"name": "device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_installs": {"name": "user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_uninstalls": {"name": "user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_average_rating": {"name": "rolling_total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_rating": {"name": "average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_device_installs": {"name": "total_device_installs", "description": "Cumulative number of device installs up to and including this day (aggregated on the dimension of this table). This does not take uninstalls into account and may contain duplicate devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_device_uninstalls": {"name": "total_device_uninstalls", "description": "Cumulative number of device uninstalls up to and including this day (aggregated on the dimension of this table). This does not take re-installs into account and may contain duplicate devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_device_installs": {"name": "net_device_installs", "description": "Cumulative net number of device installs up to and including this day (aggregated on the dimension of this table). This is the difference of `total_device_installs` and `total_device_uninstalls`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_acquisitions": {"name": "store_listing_acquisitions", "description": "The number of users that visited your store listing and installed your app, who did not have your app installed on any device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_conversion_rate": {"name": "store_listing_conversion_rate", "description": "The percentage of store listing visitors who installed your app on a given day.\n\nNote: Does not include visits or installs from users who already have your app installed on another device", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_visitors": {"name": "store_listing_visitors", "description": "The number of users that visited your store listing who did not have your app installed on any device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_store_acquisitions": {"name": "total_store_acquisitions", "description": "Cumulative number of users that visited your store listing and installed your app, who did not have your app installed on any device prior to this.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_store_visitors": {"name": "total_store_visitors", "description": "Cumulative number of users that visited your store listing who did not have your app installed on any device at the time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_store_conversion_rate": {"name": "rolling_store_conversion_rate", "description": "Rolling percentage of store listing visitors who installed your app within a given country. The ratio of `total_store_acquisitions` to `total_store_visitors`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play://models/google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.073348, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__country_report\"", "raw_code": "with installs as (\n\n    select *\n    from {{ var('stats_installs_country') }}\n), \n\nratings as (\n\n    select *\n    from {{ var('stats_ratings_country') }}\n), \n\nstore_performance as (\n\n    select *\n    from {{ var('stats_store_performance_country') }}\n), \n\ncountry_codes as (\n\n    select *\n    from {{ var('country_codes') }}\n),\n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\nstore_performance_metrics as (\n\n    select\n        *,\n        sum(store_listing_acquisitions) over (partition by source_relation, country_region, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions,\n        sum(store_listing_visitors) over (partition by source_relation, country_region, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from store_performance\n), \n\ncountry_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, store_performance_metrics.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, store_performance_metrics.date_day) as date_day,\n        coalesce(install_metrics.country, ratings.country, store_performance_metrics.country_region) as country,\n        coalesce(install_metrics.package_name, ratings.package_name, store_performance_metrics.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        coalesce(store_performance_metrics.store_listing_acquisitions, 0) as store_listing_acquisitions,\n        coalesce(store_performance_metrics.store_listing_visitors, 0) as store_listing_visitors,\n        store_performance_metrics.store_listing_conversion_rate, -- not coalescing if there aren't any visitors \n        \n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except %'s') are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating,\n        store_performance_metrics.total_store_acquisitions,\n        store_performance_metrics.total_store_visitors\n        \n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null countries otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.country, 'null_country') = coalesce(ratings.country, 'null_country') -- in the source package we aggregate all null country records together into one batch per day\n    full outer join store_performance_metrics\n        on store_performance_metrics.date_day = coalesce(install_metrics.date_day, ratings.date_day)\n        and store_performance_metrics.source_relation = coalesce(install_metrics.source_relation, ratings.source_relation)\n        and store_performance_metrics.package_name = coalesce(install_metrics.package_name, ratings.package_name)\n        and coalesce(store_performance_metrics.country_region, 'null_country') = coalesce(install_metrics.country, ratings.country, 'null_country')\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *\n\n    {%- set rolling_metrics = ['rolling_total_average_rating', 'total_device_installs', 'total_device_uninstalls', 'total_store_acquisitions', 'total_store_visitors'] -%}\n\n    {% for metric in rolling_metrics -%}\n        , sum(case when {{ metric }} is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as {{ metric | lower }}_partition\n    {%- endfor %}\n    from country_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        country,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions, \n        store_listing_visitors,\n        store_listing_conversion_rate,\n        average_rating\n\n        {% for metric in rolling_metrics -%}\n\n        , first_value( {{ metric }} ) over (\n            partition by source_relation, {{ metric | lower }}_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as {{ metric }}\n\n        {%- endfor %}\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        country as country_short,\n        coalesce(country_codes.alternative_country_name, country_codes.country_name) as country_long,\n        country_codes.region,\n        country_codes.sub_region,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating, \n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n        coalesce(total_store_acquisitions, 0) as total_store_acquisitions,\n        coalesce(total_store_visitors, 0) as total_store_visitors,\n\n        -- calculate percentage and difference rolling metrics\n        round(cast(total_store_acquisitions as {{ dbt.type_numeric() }}) / nullif(total_store_visitors, 0), 4) as rolling_store_conversion_rate,\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n    left join country_codes\n        on country_codes.country_code_alpha_2 = fill_values.country\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_country", "package": null, "version": null}, {"name": "stg_google_play__stats_ratings_country", "package": null, "version": null}, {"name": "stg_google_play__store_performance_country", "package": null, "version": null}, {"name": "google_play__country_codes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_numeric"], "nodes": ["model.google_play_source.stg_google_play__stats_installs_country", "model.google_play_source.stg_google_play__stats_ratings_country", "model.google_play_source.stg_google_play__store_performance_country", "seed.google_play_source.google_play__country_codes"]}, "compiled_path": "target/compiled/google_play/models/google_play__country_report.sql", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country\"\n), \n\nstore_performance as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country\"\n), \n\ncountry_codes as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_source\".\"google_play__country_codes\"\n),\n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\nstore_performance_metrics as (\n\n    select\n        *,\n        sum(store_listing_acquisitions) over (partition by source_relation, country_region, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions,\n        sum(store_listing_visitors) over (partition by source_relation, country_region, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from store_performance\n), \n\ncountry_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, store_performance_metrics.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, store_performance_metrics.date_day) as date_day,\n        coalesce(install_metrics.country, ratings.country, store_performance_metrics.country_region) as country,\n        coalesce(install_metrics.package_name, ratings.package_name, store_performance_metrics.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        coalesce(store_performance_metrics.store_listing_acquisitions, 0) as store_listing_acquisitions,\n        coalesce(store_performance_metrics.store_listing_visitors, 0) as store_listing_visitors,\n        store_performance_metrics.store_listing_conversion_rate, -- not coalescing if there aren't any visitors \n        \n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except %'s') are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating,\n        store_performance_metrics.total_store_acquisitions,\n        store_performance_metrics.total_store_visitors\n        \n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null countries otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.country, 'null_country') = coalesce(ratings.country, 'null_country') -- in the source package we aggregate all null country records together into one batch per day\n    full outer join store_performance_metrics\n        on store_performance_metrics.date_day = coalesce(install_metrics.date_day, ratings.date_day)\n        and store_performance_metrics.source_relation = coalesce(install_metrics.source_relation, ratings.source_relation)\n        and store_performance_metrics.package_name = coalesce(install_metrics.package_name, ratings.package_name)\n        and coalesce(store_performance_metrics.country_region, 'null_country') = coalesce(install_metrics.country, ratings.country, 'null_country')\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition, sum(case when total_store_acquisitions is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as total_store_acquisitions_partition, sum(case when total_store_visitors is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as total_store_visitors_partition\n    from country_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        country,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions, \n        store_listing_visitors,\n        store_listing_conversion_rate,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls, first_value( total_store_acquisitions ) over (\n            partition by source_relation, total_store_acquisitions_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions, first_value( total_store_visitors ) over (\n            partition by source_relation, total_store_visitors_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        country as country_short,\n        coalesce(country_codes.alternative_country_name, country_codes.country_name) as country_long,\n        country_codes.region,\n        country_codes.sub_region,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating, \n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n        coalesce(total_store_acquisitions, 0) as total_store_acquisitions,\n        coalesce(total_store_visitors, 0) as total_store_visitors,\n\n        -- calculate percentage and difference rolling metrics\n        round(cast(total_store_acquisitions as numeric(28,6)) / nullif(total_store_visitors, 0), 4) as rolling_store_conversion_rate,\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n    left join country_codes\n        on country_codes.country_code_alpha_2 = fill_values.country\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play.google_play__os_version_report": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "google_play__os_version_report", "resource_type": "model", "package_name": "google_play", "path": "google_play__os_version_report.sql", "original_file_path": "models/google_play__os_version_report.sql", "unique_id": "model.google_play.google_play__os_version_report", "fqn": ["google_play", "google_play__os_version_report"], "alias": "google_play__os_version_report", "checksum": {"name": "sha256", "checksum": "8069c8fc27a97f3697e6978113328b85f702aac5e45182db6f066e2fef2075a2"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Daily report on installs, crashes and ANRs, and ratings by app and android os version.  Records with `NULL` os versions (ie they do not consent to being tracked) are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_devices_last_30_days": {"name": "active_devices_last_30_days", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "android_os_version": {"name": "android_os_version", "description": "Operation System of the android being used. May be NULL if users do not consent to being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_installs": {"name": "device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_uninstalls": {"name": "device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_upgrades": {"name": "device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_installs": {"name": "user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_uninstalls": {"name": "user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anrs": {"name": "anrs", "description": "Daily application not responding (ANR) reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "crashes": {"name": "crashes", "description": "Daily crash reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_average_rating": {"name": "rolling_total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_rating": {"name": "average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_device_installs": {"name": "total_device_installs", "description": "Cumulative number of device installs up to and including this day (aggregated on the dimension of this table). This does not take uninstalls into account and may contain duplicate devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_device_uninstalls": {"name": "total_device_uninstalls", "description": "Cumulative number of device uninstalls up to and including this day (aggregated on the dimension of this table). This does not take re-installs into account and may contain duplicate devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_device_installs": {"name": "net_device_installs", "description": "Cumulative net number of device installs up to and including this day (aggregated on the dimension of this table). This is the difference of `total_device_installs` and `total_device_uninstalls`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play://models/google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.080738, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__os_version_report\"", "raw_code": "with installs as (\n\n    select *\n    from {{ var('stats_installs_os_version') }}\n), \n\nratings as (\n\n    select *\n    from {{ var('stats_ratings_os_version') }}\n), \n\ncrashes as (\n\n    select *\n    from {{ var('stats_crashes_os_version') }}\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\napp_version_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, crashes.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.android_os_version, ratings.android_os_version, crashes.android_os_version) as android_os_version,\n        coalesce(install_metrics.package_name, ratings.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple events in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null os versions otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.android_os_version, 'null_os_version') = coalesce(ratings.android_os_version, 'null_os_version') -- in the source package we aggregate all null device-type records together into one batch per day\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day) = crashes.date_day\n        and coalesce(install_metrics.source_relation, ratings.source_relation) = crashes.source_relation\n        and coalesce(install_metrics.package_name, ratings.package_name) = crashes.package_name\n        -- coalesce null countries otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.android_os_version, ratings.android_os_version, 'null_os_version') = coalesce(crashes.android_os_version, 'null_os_version') -- in the source package we aggregate all null device-type records together into one batch per day\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *\n\n    {%- set rolling_metrics = ['rolling_total_average_rating', 'total_device_installs', 'total_device_uninstalls'] -%}\n\n    {% for metric in rolling_metrics -%}\n        , sum(case when {{ metric }} is null \n                then 0 else 1 end) over (partition by source_relation, android_os_version, package_name order by date_day asc rows unbounded preceding) as {{ metric | lower }}_partition\n    {%- endfor %}\n    from app_version_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        android_os_version,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating\n\n        {% for metric in rolling_metrics -%}\n\n        , first_value( {{ metric }} ) over (\n            partition by source_relation, {{ metric | lower }}_partition, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as {{ metric }}\n\n        {%- endfor %}\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        android_os_version,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_os_version", "package": null, "version": null}, {"name": "stg_google_play__stats_ratings_os_version", "package": null, "version": null}, {"name": "stg_google_play__stats_crashes_os_version", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.google_play_source.stg_google_play__stats_installs_os_version", "model.google_play_source.stg_google_play__stats_ratings_os_version", "model.google_play_source.stg_google_play__stats_crashes_os_version"]}, "compiled_path": "target/compiled/google_play/models/google_play__os_version_report.sql", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version\"\n), \n\ncrashes as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version\"\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\napp_version_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, crashes.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.android_os_version, ratings.android_os_version, crashes.android_os_version) as android_os_version,\n        coalesce(install_metrics.package_name, ratings.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple events in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null os versions otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.android_os_version, 'null_os_version') = coalesce(ratings.android_os_version, 'null_os_version') -- in the source package we aggregate all null device-type records together into one batch per day\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day) = crashes.date_day\n        and coalesce(install_metrics.source_relation, ratings.source_relation) = crashes.source_relation\n        and coalesce(install_metrics.package_name, ratings.package_name) = crashes.package_name\n        -- coalesce null countries otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.android_os_version, ratings.android_os_version, 'null_os_version') = coalesce(crashes.android_os_version, 'null_os_version') -- in the source package we aggregate all null device-type records together into one batch per day\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, android_os_version, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, android_os_version, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, android_os_version, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition\n    from app_version_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        android_os_version,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        android_os_version,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play.google_play__overview_report": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "google_play__overview_report", "resource_type": "model", "package_name": "google_play", "path": "google_play__overview_report.sql", "original_file_path": "models/google_play__overview_report.sql", "unique_id": "model.google_play.google_play__overview_report", "fqn": ["google_play", "google_play__overview_report"], "alias": "google_play__overview_report", "checksum": {"name": "sha256", "checksum": "1834e3bec46cdf001487cced7437d7e53a98f50bb34ddacef92f3c70e8f05e44"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Daily overview report on installs, crashes and ANRs, ratings, and store performance by app. \n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_devices_last_30_days": {"name": "active_devices_last_30_days", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "android_os_version": {"name": "android_os_version", "description": "Operation System of the android being used. May be NULL if users do not consent to being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_installs": {"name": "device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_uninstalls": {"name": "device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_upgrades": {"name": "device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_installs": {"name": "user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_uninstalls": {"name": "user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anrs": {"name": "anrs", "description": "Daily application not responding (ANR) reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "crashes": {"name": "crashes", "description": "Daily crash reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_average_rating": {"name": "rolling_total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_rating": {"name": "average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_device_installs": {"name": "total_device_installs", "description": "Cumulative number of device installs up to and including this day (aggregated on the dimension of this table). This does not take uninstalls into account and may contain duplicate devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_device_uninstalls": {"name": "total_device_uninstalls", "description": "Cumulative number of device uninstalls up to and including this day (aggregated on the dimension of this table). This does not take re-installs into account and may contain duplicate devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_device_installs": {"name": "net_device_installs", "description": "Cumulative net number of device installs up to and including this day (aggregated on the dimension of this table). This is the difference of `total_device_installs` and `total_device_uninstalls`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_acquisitions": {"name": "store_listing_acquisitions", "description": "The number of users that visited your store listing and installed your app, who did not have your app installed on any device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_conversion_rate": {"name": "store_listing_conversion_rate", "description": "The percentage of store listing visitors who installed your app on a given day.\n\nNote: Does not include visits or installs from users who already have your app installed on another device", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_visitors": {"name": "store_listing_visitors", "description": "The number of users that visited your store listing who did not have your app installed on any device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_store_acquisitions": {"name": "total_store_acquisitions", "description": "Cumulative number of users that visited your store listing and installed your app, who did not have your app installed on any device prior to this.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_store_visitors": {"name": "total_store_visitors", "description": "Cumulative number of users that visited your store listing who did not have your app installed on any device at the time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_store_conversion_rate": {"name": "rolling_store_conversion_rate", "description": "Rolling percentage of store listing visitors who installed your app within a given country. The ratio of `total_store_acquisitions` to `total_store_visitors`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play://models/google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.081681, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__overview_report\"", "raw_code": "with installs as (\n\n    select *\n    from {{ var('stats_installs_overview') }}\n), \n\nratings as (\n\n    select *\n    from {{ var('stats_ratings_overview') }}\n), \n\ncrashes as (\n\n    select *\n    from {{ var('stats_crashes_overview') }}\n), \n\nstore_performance as (\n\n    select *\n    from {{ ref('int_google_play__store_performance') }} -- country rollup\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\noverview_join as (\n\n    select \n        -- these 3 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, store_performance.source_relation, crashes.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, store_performance.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.package_name, ratings.package_name, store_performance.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        coalesce(store_performance.store_listing_acquisitions, 0) as store_listing_acquisitions,\n        coalesce(store_performance.store_listing_visitors, 0) as store_listing_visitors,\n        store_performance.store_listing_conversion_rate, -- not coalescing if there aren't any visitors \n\n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating. todo: move\n        ratings.rolling_total_average_rating,\n        store_performance.total_store_acquisitions,\n        store_performance.total_store_visitors\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n    full outer join store_performance\n        on store_performance.date_day = coalesce(install_metrics.date_day, ratings.date_day)\n        and store_performance.source_relation = coalesce(install_metrics.source_relation, ratings.source_relation)\n        and store_performance.package_name = coalesce(install_metrics.package_name, ratings.package_name)\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day, store_performance.date_day) = crashes.date_day\n        and coalesce(install_metrics.source_relation, ratings.source_relation, store_performance.source_relation) = crashes.source_relation\n        and coalesce(install_metrics.package_name, ratings.package_name, store_performance.package_name) = crashes.package_name\n),\n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *\n\n    {%- set rolling_metrics = ['rolling_total_average_rating', 'total_device_installs', 'total_device_uninstalls', 'total_store_acquisitions', 'total_store_visitors'] -%}\n\n    {% for metric in rolling_metrics -%}\n        , sum(case when {{ metric }} is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as {{ metric | lower }}_partition\n    {%- endfor %}\n    from overview_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        average_rating\n\n        {% for metric in rolling_metrics -%}\n\n        , first_value( {{ metric }} ) over (\n            partition by source_relation, {{ metric | lower }}_partition, package_name order by date_day asc rows between unbounded preceding and current row) as {{ metric }}\n\n        {%- endfor %}\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating, \n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n        coalesce(total_store_acquisitions, 0) as total_store_acquisitions,\n        coalesce(total_store_visitors, 0) as total_store_visitors,\n\n        -- calculate percentage and difference rolling metrics\n        round( cast(total_store_acquisitions as {{ dbt.type_numeric() }}) / nullif(total_store_visitors, 0), 4) as rolling_store_conversion_rate,\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_overview", "package": null, "version": null}, {"name": "stg_google_play__stats_ratings_overview", "package": null, "version": null}, {"name": "stg_google_play__stats_crashes_overview", "package": null, "version": null}, {"name": "int_google_play__store_performance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_numeric"], "nodes": ["model.google_play_source.stg_google_play__stats_installs_overview", "model.google_play_source.stg_google_play__stats_ratings_overview", "model.google_play_source.stg_google_play__stats_crashes_overview", "model.google_play.int_google_play__store_performance"]}, "compiled_path": "target/compiled/google_play/models/google_play__overview_report.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_google_play__store_performance as (\nwith store_performance as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country\"\n), \n\nstore_performance_rollup as (\n\n    select \n        source_relation,\n        date_day,\n        package_name,\n        sum(store_listing_acquisitions) as store_listing_acquisitions,\n        sum(store_listing_visitors) as store_listing_visitors\n    from store_performance\n    group by 1,2,3\n),\n\nstore_performance_metrics as (\n\n    select\n        *,\n        round(store_listing_acquisitions * 1.0 / nullif(store_listing_visitors, 0), 4) as store_listing_conversion_rate,\n        sum(store_listing_acquisitions) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions,\n        sum(store_listing_visitors) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from store_performance_rollup\n)\n\nselect *\nfrom store_performance_metrics\n), installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview\"\n), \n\ncrashes as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview\"\n), \n\nstore_performance as (\n\n    select *\n    from __dbt__cte__int_google_play__store_performance -- country rollup\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\noverview_join as (\n\n    select \n        -- these 3 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, store_performance.source_relation, crashes.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, store_performance.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.package_name, ratings.package_name, store_performance.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        coalesce(store_performance.store_listing_acquisitions, 0) as store_listing_acquisitions,\n        coalesce(store_performance.store_listing_visitors, 0) as store_listing_visitors,\n        store_performance.store_listing_conversion_rate, -- not coalescing if there aren't any visitors \n\n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating. todo: move\n        ratings.rolling_total_average_rating,\n        store_performance.total_store_acquisitions,\n        store_performance.total_store_visitors\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n    full outer join store_performance\n        on store_performance.date_day = coalesce(install_metrics.date_day, ratings.date_day)\n        and store_performance.source_relation = coalesce(install_metrics.source_relation, ratings.source_relation)\n        and store_performance.package_name = coalesce(install_metrics.package_name, ratings.package_name)\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day, store_performance.date_day) = crashes.date_day\n        and coalesce(install_metrics.source_relation, ratings.source_relation, store_performance.source_relation) = crashes.source_relation\n        and coalesce(install_metrics.package_name, ratings.package_name, store_performance.package_name) = crashes.package_name\n),\n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition, sum(case when total_store_acquisitions is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as total_store_acquisitions_partition, sum(case when total_store_visitors is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as total_store_visitors_partition\n    from overview_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls, first_value( total_store_acquisitions ) over (\n            partition by source_relation, total_store_acquisitions_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions, first_value( total_store_visitors ) over (\n            partition by source_relation, total_store_visitors_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating, \n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n        coalesce(total_store_acquisitions, 0) as total_store_acquisitions,\n        coalesce(total_store_visitors, 0) as total_store_visitors,\n\n        -- calculate percentage and difference rolling metrics\n        round( cast(total_store_acquisitions as numeric(28,6)) / nullif(total_store_visitors, 0), 4) as rolling_store_conversion_rate,\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.google_play.int_google_play__store_performance", "sql": " __dbt__cte__int_google_play__store_performance as (\nwith store_performance as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country\"\n), \n\nstore_performance_rollup as (\n\n    select \n        source_relation,\n        date_day,\n        package_name,\n        sum(store_listing_acquisitions) as store_listing_acquisitions,\n        sum(store_listing_visitors) as store_listing_visitors\n    from store_performance\n    group by 1,2,3\n),\n\nstore_performance_metrics as (\n\n    select\n        *,\n        round(store_listing_acquisitions * 1.0 / nullif(store_listing_visitors, 0), 4) as store_listing_conversion_rate,\n        sum(store_listing_acquisitions) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions,\n        sum(store_listing_visitors) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from store_performance_rollup\n)\n\nselect *\nfrom store_performance_metrics\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play.int_google_play__store_performance": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "int_google_play__store_performance", "resource_type": "model", "package_name": "google_play", "path": "intermediate/int_google_play__store_performance.sql", "original_file_path": "models/intermediate/int_google_play__store_performance.sql", "unique_id": "model.google_play.int_google_play__store_performance", "fqn": ["google_play", "intermediate", "int_google_play__store_performance"], "alias": "int_google_play__store_performance", "checksum": {"name": "sha256", "checksum": "ec10d4e402a339713f08bc5acb25f513f6db7b959597af445abcb52e2d6060ec"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "ephemeral"}, "created_at": 1721750695.659858, "relation_name": null, "raw_code": "with store_performance as (\n\n    select *\n    from {{ var('stats_store_performance_country') }}\n), \n\nstore_performance_rollup as (\n\n    select \n        source_relation,\n        date_day,\n        package_name,\n        sum(store_listing_acquisitions) as store_listing_acquisitions,\n        sum(store_listing_visitors) as store_listing_visitors\n    from store_performance\n    {{ dbt_utils.group_by(3) }}\n),\n\nstore_performance_metrics as (\n\n    select\n        *,\n        round(store_listing_acquisitions * 1.0 / nullif(store_listing_visitors, 0), 4) as store_listing_conversion_rate,\n        sum(store_listing_acquisitions) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions,\n        sum(store_listing_visitors) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from store_performance_rollup\n)\n\nselect *\nfrom store_performance_metrics", "language": "sql", "refs": [{"name": "stg_google_play__store_performance_country", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__store_performance_country"]}, "compiled_path": "target/compiled/google_play/models/intermediate/int_google_play__store_performance.sql", "compiled": true, "compiled_code": "with store_performance as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country\"\n), \n\nstore_performance_rollup as (\n\n    select \n        source_relation,\n        date_day,\n        package_name,\n        sum(store_listing_acquisitions) as store_listing_acquisitions,\n        sum(store_listing_visitors) as store_listing_visitors\n    from store_performance\n    group by 1,2,3\n),\n\nstore_performance_metrics as (\n\n    select\n        *,\n        round(store_listing_acquisitions * 1.0 / nullif(store_listing_visitors, 0), 4) as store_listing_conversion_rate,\n        sum(store_listing_acquisitions) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions,\n        sum(store_listing_visitors) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from store_performance_rollup\n)\n\nselect *\nfrom store_performance_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play.int_google_play__earnings": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "int_google_play__earnings", "resource_type": "model", "package_name": "google_play", "path": "intermediate/int_google_play__earnings.sql", "original_file_path": "models/intermediate/int_google_play__earnings.sql", "unique_id": "model.google_play.int_google_play__earnings", "fqn": ["google_play", "intermediate", "int_google_play__earnings"], "alias": "int_google_play__earnings", "checksum": {"name": "sha256", "checksum": "5e6f07efcf46b81bcd2cfa056b6f62f5cf487425d54175e7941887328b45c722"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1721750695.6656299, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"int_google_play__earnings\"", "raw_code": "{{ config(enabled=var('google_play__using_earnings', False)) }} \n\nwith earnings as (\n\n    select *\n    from {{ var('earnings') }}\n), \n\ncalc_net_amounts as (\n\n    select \n        *,\n        sum(amount_merchant_currency) over (partition by source_relation, order_id) as net_order_amount\n    from earnings\n),\n\ndaily_country_metrics as (\n\n-- let's pivot out revenue metrics associated wit each type of transaction type\n{% set transaction_types = dbt_utils.get_column_values(table=ref('stg_google_play__earnings'), column=\"transaction_type\") %}\n\n    select \n        source_relation,\n        transaction_date as date_day,\n        buyer_country as country_short, -- rolling up past states/territories\n        sku_id, -- this will be a subscription or in-app product\n        package_name,\n        merchant_currency,\n        sum(net_order_amount) as net_amount,\n        count(distinct order_id) as transactions\n        {% for t in transaction_types %}\n        , sum( case when lower(transaction_type) = '{{ t | lower }}' then amount_merchant_currency else 0 end ) as {{ t | replace(' ', '_') | lower }}_amount\n        , count( distinct case when lower(transaction_type) = '{{ t | lower }}' then order_id end ) as {{ t | replace(' ', '_') | lower }}_transactions\n        {% endfor %}\n    from calc_net_amounts\n    {{ dbt_utils.group_by(6) }}\n)\n\nselect *\nfrom daily_country_metrics", "language": "sql", "refs": [{"name": "stg_google_play__earnings", "package": null, "version": null}, {"name": "stg_google_play__earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__earnings"]}, "compiled_path": "target/compiled/google_play/models/intermediate/int_google_play__earnings.sql", "compiled": true, "compiled_code": " \n\nwith earnings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__earnings\"\n), \n\ncalc_net_amounts as (\n\n    select \n        *,\n        sum(amount_merchant_currency) over (partition by source_relation, order_id) as net_order_amount\n    from earnings\n),\n\ndaily_country_metrics as (\n\n-- let's pivot out revenue metrics associated wit each type of transaction type\n\n\n    select \n        source_relation,\n        transaction_date as date_day,\n        buyer_country as country_short, -- rolling up past states/territories\n        sku_id, -- this will be a subscription or in-app product\n        package_name,\n        merchant_currency,\n        sum(net_order_amount) as net_amount,\n        count(distinct order_id) as transactions\n        \n        , sum( case when lower(transaction_type) = 'charge' then amount_merchant_currency else 0 end ) as charge_amount\n        , count( distinct case when lower(transaction_type) = 'charge' then order_id end ) as charge_transactions\n        \n        , sum( case when lower(transaction_type) = 'google fee' then amount_merchant_currency else 0 end ) as google_fee_amount\n        , count( distinct case when lower(transaction_type) = 'google fee' then order_id end ) as google_fee_transactions\n        \n    from calc_net_amounts\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom daily_country_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play.int_google_play__latest_product_info": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "int_google_play__latest_product_info", "resource_type": "model", "package_name": "google_play", "path": "intermediate/int_google_play__latest_product_info.sql", "original_file_path": "models/intermediate/int_google_play__latest_product_info.sql", "unique_id": "model.google_play.int_google_play__latest_product_info", "fqn": ["google_play", "intermediate", "int_google_play__latest_product_info"], "alias": "int_google_play__latest_product_info", "checksum": {"name": "sha256", "checksum": "79818574d536368650bc2310414a032f157c7e7bb87854048bdde4b59bc762c4"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "ephemeral", "enabled": true}, "created_at": 1721750695.675992, "relation_name": null, "raw_code": "{{ config(enabled=var('google_play__using_earnings', False)) }} \n\nwith earnings as (\n\n    select *\n    from {{ var('earnings') }}\n), \n\n-- figure out when the latest transaction involving this product was to find the latest product title used for it\ntransaction_recency as (\n\n    select\n        source_relation,\n        package_name,\n        product_title,\n        sku_id,\n        max(transaction_pt_timestamp) as last_transaction_at\n    from earnings\n    {{ dbt_utils.group_by(4) }}\n), \n\norder_product_records as (\n\n    select \n        *,\n        row_number() over(partition by source_relation, sku_id order by last_transaction_at desc) as n\n    from transaction_recency\n), \n\nlatest_product_record as (\n\n    select\n        source_relation,\n        package_name,\n        product_title,\n        sku_id\n    from order_product_records\n    where n = 1\n)\n\nselect *\nfrom latest_product_record", "language": "sql", "refs": [{"name": "stg_google_play__earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__earnings"]}, "compiled_path": "target/compiled/google_play/models/intermediate/int_google_play__latest_product_info.sql", "compiled": true, "compiled_code": " \n\nwith earnings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__earnings\"\n), \n\n-- figure out when the latest transaction involving this product was to find the latest product title used for it\ntransaction_recency as (\n\n    select\n        source_relation,\n        package_name,\n        product_title,\n        sku_id,\n        max(transaction_pt_timestamp) as last_transaction_at\n    from earnings\n    group by 1,2,3,4\n), \n\norder_product_records as (\n\n    select \n        *,\n        row_number() over(partition by source_relation, sku_id order by last_transaction_at desc) as n\n    from transaction_recency\n), \n\nlatest_product_record as (\n\n    select\n        source_relation,\n        package_name,\n        product_title,\n        sku_id\n    from order_product_records\n    where n = 1\n)\n\nselect *\nfrom latest_product_record", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_installs_overview": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_installs_overview", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__stats_installs_overview.sql", "original_file_path": "models/stg_google_play__stats_installs_overview.sql", "unique_id": "model.google_play_source.stg_google_play__stats_installs_overview", "fqn": ["google_play_source", "stg_google_play__stats_installs_overview"], "alias": "stg_google_play__stats_installs_overview", "checksum": {"name": "sha256", "checksum": "2acc4d6fba55ce451cbc94eb10a6b37b5884b77e79203bc20f798541d4aa1641"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly overview installs report by app.", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_devices_last_30_days": {"name": "active_devices_last_30_days", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_installs": {"name": "device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_uninstalls": {"name": "device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_upgrades": {"name": "device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_installs": {"name": "user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_uninstalls": {"name": "user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.16621, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__stats_installs_overview_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__stats_installs_overview_tmp')),\n                staging_columns=get_stats_installs_overview_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        cast(active_device_installs as {{ dbt.type_bigint() }}) as active_devices_last_30_days,\n        cast(daily_device_installs as {{ dbt.type_bigint() }}) as device_installs,\n        cast(daily_device_uninstalls as {{ dbt.type_bigint() }}) as device_uninstalls,\n        cast(daily_device_upgrades as {{ dbt.type_bigint() }}) as device_upgrades,\n        cast(daily_user_installs as {{ dbt.type_bigint() }}) as user_installs,\n        cast(daily_user_uninstalls as {{ dbt.type_bigint() }}) as user_uninstalls,\n        cast(install_events as {{ dbt.type_bigint() }}) as install_events,\n        cast(uninstall_events as {{ dbt.type_bigint() }}) as uninstall_events,\n        cast(update_events as {{ dbt.type_bigint() }}) as update_events,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_overview_tmp", "package": null, "version": null}, {"name": "stg_google_play__stats_installs_overview_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_installs_overview_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_bigint"], "nodes": ["model.google_play_source.stg_google_play__stats_installs_overview_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__stats_installs_overview.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        cast(active_device_installs as bigint) as active_devices_last_30_days,\n        cast(daily_device_installs as bigint) as device_installs,\n        cast(daily_device_uninstalls as bigint) as device_uninstalls,\n        cast(daily_device_upgrades as bigint) as device_upgrades,\n        cast(daily_user_installs as bigint) as user_installs,\n        cast(daily_user_uninstalls as bigint) as user_uninstalls,\n        cast(install_events as bigint) as install_events,\n        cast(uninstall_events as bigint) as uninstall_events,\n        cast(update_events as bigint) as update_events,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_crashes_os_version": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_crashes_os_version", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__stats_crashes_os_version.sql", "original_file_path": "models/stg_google_play__stats_crashes_os_version.sql", "unique_id": "model.google_play_source.stg_google_play__stats_crashes_os_version", "fqn": ["google_play_source", "stg_google_play__stats_crashes_os_version"], "alias": "stg_google_play__stats_crashes_os_version", "checksum": {"name": "sha256", "checksum": "b07514a4e7eed0c56b2b338f3c8c0ca6aa23c44bd273b08e4ba0fe30287e833d"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly crashes report by app and user OS version. Records with `NULL` os versions are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "android_os_version": {"name": "android_os_version", "description": "Operation System of the android being used. May be NULL if users do not consent to being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anrs": {"name": "anrs", "description": "Daily application not responding (ANR) reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "crashes": {"name": "crashes", "description": "Daily crash reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.162573, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__stats_crashes_os_version_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__stats_crashes_os_version_tmp')),\n                staging_columns=get_stats_crashes_os_version_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(android_os_version as {{ dbt.type_string() }}) as android_os_version,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        sum(cast(daily_anrs as {{ dbt.type_bigint() }})) as anrs,\n        sum(cast(daily_crashes as {{ dbt.type_bigint() }})) as crashes\n    from fields\n    {{ dbt_utils.group_by(4) }}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_crashes_os_version_tmp", "package": null, "version": null}, {"name": "stg_google_play__stats_crashes_os_version_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_crashes_os_version_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_bigint", "macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__stats_crashes_os_version_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__stats_crashes_os_version.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    android_os_version\n    \n as \n    \n    android_os_version\n    \n, \n    \n    \n    daily_anrs\n    \n as \n    \n    daily_anrs\n    \n, \n    \n    \n    daily_crashes\n    \n as \n    \n    daily_crashes\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(android_os_version as TEXT) as android_os_version,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(daily_anrs as bigint)) as anrs,\n        sum(cast(daily_crashes as bigint)) as crashes\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_crashes_app_version": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_crashes_app_version", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__stats_crashes_app_version.sql", "original_file_path": "models/stg_google_play__stats_crashes_app_version.sql", "unique_id": "model.google_play_source.stg_google_play__stats_crashes_app_version", "fqn": ["google_play_source", "stg_google_play__stats_crashes_app_version"], "alias": "stg_google_play__stats_crashes_app_version", "checksum": {"name": "sha256", "checksum": "b31e584b322b5678c6b898f19d6dbad451f9825db9bf966beca800278eaccbaa"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly crashes report by app version and app. Records with `NULL` app version codes are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_version_code": {"name": "app_version_code", "description": "Integer value of the version of the app being reported on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anrs": {"name": "anrs", "description": "Daily application not responding (ANR) reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "crashes": {"name": "crashes", "description": "Daily crash reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.159704, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__stats_crashes_app_version_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__stats_crashes_app_version_tmp')),\n                staging_columns=get_stats_crashes_app_version_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(app_version_code as {{ dbt.type_int() }}) as app_version_code,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        sum(cast(daily_anrs as {{ dbt.type_bigint() }})) as anrs,\n        sum(cast(daily_crashes as {{ dbt.type_bigint() }})) as crashes\n    from fields\n    {{ dbt_utils.group_by(4) }}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_crashes_app_version_tmp", "package": null, "version": null}, {"name": "stg_google_play__stats_crashes_app_version_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_crashes_app_version_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_bigint", "macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__stats_crashes_app_version_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__stats_crashes_app_version.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    app_version_code\n    \n as \n    \n    app_version_code\n    \n, \n    \n    \n    daily_anrs\n    \n as \n    \n    daily_anrs\n    \n, \n    \n    \n    daily_crashes\n    \n as \n    \n    daily_crashes\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(app_version_code as integer) as app_version_code,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(daily_anrs as bigint)) as anrs,\n        sum(cast(daily_crashes as bigint)) as crashes\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__store_performance_source": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__store_performance_source", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__store_performance_source.sql", "original_file_path": "models/stg_google_play__store_performance_source.sql", "unique_id": "model.google_play_source.stg_google_play__store_performance_source", "fqn": ["google_play_source", "stg_google_play__store_performance_source"], "alias": "stg_google_play__store_performance_source", "checksum": {"name": "sha256", "checksum": "5fef61beded382039e5d6591e4b4392e456f330c2e96976e8c1e17addc7c0543"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly store performance report by app and type of traffic source.", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "traffic_source_unique_key": {"name": "traffic_source_unique_key", "description": "Surrogate key hashed on `source_relation`, `date_day`, `package_name`, `traffic_source`, `search_term`, `utm_campaign`, and `utm_source`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "search_term": {"name": "search_term", "description": "The term the user searched for before navigating to your store listing. Only available when the traffic source is Google Play search.\nNote: Can be Other this value does not reach certain minimum thresholds\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_acquisitions": {"name": "store_listing_acquisitions", "description": "The number of users that visited your store listing and installed your app, who did not have your app installed on any device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_conversion_rate": {"name": "store_listing_conversion_rate", "description": "The percentage of store listing visitors who installed your app on a given day.\n\nNote: Does not include visits or installs from users who already have your app installed on another device", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_visitors": {"name": "store_listing_visitors", "description": "The number of users that visited your store listing who did not have your app installed on any device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "traffic_source": {"name": "traffic_source", "description": "How the user got to your store listing: Google Play search, Third-party referral, Google Play explore, or Other.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The value of the utm_campaign URL parameter in deep links to your store listing. Only available when the traffic source is a third-party referral.\nNote: Can be Other this value does not reach certain minimum thresholds\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The value of the utm_source URL parameter in deep links to your store listing. Only available when the traffic source is a third-party referral.\nNote: Can be Other this value does not reach certain minimum thresholds\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.165676, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_source\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__store_performance_source_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__store_performance_source_tmp')),\n                staging_columns=get_stats_store_performance_traffic_source_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        traffic_source,\n        search_term,\n        utm_campaign,\n        utm_source,\n        cast(store_listing_acquisitions as {{ dbt.type_bigint() }}) as store_listing_acquisitions,\n        store_listing_conversion_rate,\n        cast(store_listing_visitors as {{ dbt.type_bigint() }}) as store_listing_visitors,\n        -- make a surrogate key as the PK involves quite a few columns\n        {{ dbt_utils.generate_surrogate_key(['source_relation', 'date', 'package_name', 'traffic_source', 'search_term', 'utm_campaign', 'utm_source']) }} as traffic_source_unique_key,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__store_performance_source_tmp", "package": null, "version": null}, {"name": "stg_google_play__store_performance_source_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_store_performance_traffic_source_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_bigint", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.google_play_source.stg_google_play__store_performance_source_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__store_performance_source.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_source_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    search_term\n    \n as \n    \n    search_term\n    \n, \n    \n    \n    store_listing_acquisitions\n    \n as \n    \n    store_listing_acquisitions\n    \n, \n    \n    \n    store_listing_conversion_rate\n    \n as \n    \n    store_listing_conversion_rate\n    \n, \n    \n    \n    store_listing_visitors\n    \n as \n    \n    store_listing_visitors\n    \n, \n    \n    \n    traffic_source\n    \n as \n    \n    traffic_source\n    \n, \n    \n    \n    utm_campaign\n    \n as \n    \n    utm_campaign\n    \n, \n    \n    \n    utm_source\n    \n as \n    \n    utm_source\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        traffic_source,\n        search_term,\n        utm_campaign,\n        utm_source,\n        cast(store_listing_acquisitions as bigint) as store_listing_acquisitions,\n        store_listing_conversion_rate,\n        cast(store_listing_visitors as bigint) as store_listing_visitors,\n        -- make a surrogate key as the PK involves quite a few columns\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(package_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(traffic_source as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(search_term as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(utm_campaign as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(utm_source as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as traffic_source_unique_key,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_ratings_country": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_ratings_country", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__stats_ratings_country.sql", "original_file_path": "models/stg_google_play__stats_ratings_country.sql", "unique_id": "model.google_play_source.stg_google_play__stats_ratings_country", "fqn": ["google_play_source", "stg_google_play__stats_ratings_country"], "alias": "stg_google_play__stats_ratings_country", "checksum": {"name": "sha256", "checksum": "6632a2121900103581e6c08de305dfe36ccc2a8c06469eb4ef2d313d513da15a"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly ratings report by app and country. Records with `NULL` countries are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "Two-letter abbreviation of the country where the user\u2019s Google account is registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_rating": {"name": "average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_average_rating": {"name": "rolling_total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.163719, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__stats_ratings_country_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__stats_ratings_country_tmp')),\n                staging_columns=get_stats_ratings_country_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(country as {{ dbt.type_string() }}) as country,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        case when country is null then null else cast( nullif(cast(daily_average_rating as {{ dbt.type_string() }}), 'NA') as {{ dbt.type_float() }} ) end as average_rating,\n        case when country is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    {{ dbt_utils.group_by(6) }}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_ratings_country_tmp", "package": null, "version": null}, {"name": "stg_google_play__stats_ratings_country_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_ratings_country_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__stats_ratings_country_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__stats_ratings_country.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(country as TEXT) as country,\n        cast(package_name as TEXT) as package_name,\n        case when country is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when country is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_installs_device": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_installs_device", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__stats_installs_device.sql", "original_file_path": "models/stg_google_play__stats_installs_device.sql", "unique_id": "model.google_play_source.stg_google_play__stats_installs_device", "fqn": ["google_play_source", "stg_google_play__stats_installs_device"], "alias": "stg_google_play__stats_installs_device", "checksum": {"name": "sha256", "checksum": "bea0008a6bb4279dc2fc54de4c18cba26cd2e6141c1928716bf46c4ca8b2b0ec"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly installs report by app and type of device model. Records with `NULL` device types are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_devices_last_30_days": {"name": "active_devices_last_30_days", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_installs": {"name": "device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_uninstalls": {"name": "device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_upgrades": {"name": "device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_installs": {"name": "user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_uninstalls": {"name": "user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device": {"name": "device", "description": "Type of device model. May be NULL if users do not consent to being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.160737, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__stats_installs_device_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__stats_installs_device_tmp')),\n                staging_columns=get_stats_installs_device_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(device as {{ dbt.type_string() }}) as device, -- device_type\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        sum(cast(active_device_installs as {{ dbt.type_bigint() }})) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as {{ dbt.type_bigint() }})) as device_installs,\n        sum(cast(daily_device_uninstalls as {{ dbt.type_bigint() }})) as device_uninstalls,\n        sum(cast(daily_device_upgrades as {{ dbt.type_bigint() }})) as device_upgrades,\n        sum(cast(daily_user_installs as {{ dbt.type_bigint() }})) as user_installs,\n        sum(cast(daily_user_uninstalls as {{ dbt.type_bigint() }})) as user_uninstalls,\n        sum(cast(install_events as {{ dbt.type_bigint() }})) as install_events,\n        sum(cast(uninstall_events as {{ dbt.type_bigint() }})) as uninstall_events,\n        sum(cast(update_events as {{ dbt.type_bigint() }})) as update_events\n    from fields\n    {{ dbt_utils.group_by(4) }}\n\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_device_tmp", "package": null, "version": null}, {"name": "stg_google_play__stats_installs_device_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_installs_device_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_bigint", "macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__stats_installs_device_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__stats_installs_device.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    device\n    \n as \n    \n    device\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(device as TEXT) as device, -- device_type\n        cast(package_name as TEXT) as package_name,\n        sum(cast(active_device_installs as bigint)) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as bigint)) as device_installs,\n        sum(cast(daily_device_uninstalls as bigint)) as device_uninstalls,\n        sum(cast(daily_device_upgrades as bigint)) as device_upgrades,\n        sum(cast(daily_user_installs as bigint)) as user_installs,\n        sum(cast(daily_user_uninstalls as bigint)) as user_uninstalls,\n        sum(cast(install_events as bigint)) as install_events,\n        sum(cast(uninstall_events as bigint)) as uninstall_events,\n        sum(cast(update_events as bigint)) as update_events\n    from fields\n    group by 1,2,3,4\n\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_ratings_overview": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_ratings_overview", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__stats_ratings_overview.sql", "original_file_path": "models/stg_google_play__stats_ratings_overview.sql", "unique_id": "model.google_play_source.stg_google_play__stats_ratings_overview", "fqn": ["google_play_source", "stg_google_play__stats_ratings_overview"], "alias": "stg_google_play__stats_ratings_overview", "checksum": {"name": "sha256", "checksum": "2668dae79ca77d155e47c72561030499cfb6faad7a4f80cfc4e7b9d561256304"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly overview ratings report by app.", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_rating": {"name": "average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_average_rating": {"name": "rolling_total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.1670122, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__stats_ratings_overview_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__stats_ratings_overview_tmp')),\n                staging_columns=get_stats_ratings_overview_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        cast( nullif(cast(daily_average_rating as {{ dbt.type_string() }}), 'NA') as {{ dbt.type_float() }} ) as average_rating,\n        total_average_rating as rolling_total_average_rating,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_ratings_overview_tmp", "package": null, "version": null}, {"name": "stg_google_play__stats_ratings_overview_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_ratings_overview_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_float"], "nodes": ["model.google_play_source.stg_google_play__stats_ratings_overview_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__stats_ratings_overview.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) as average_rating,\n        total_average_rating as rolling_total_average_rating,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_ratings_app_version": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_ratings_app_version", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__stats_ratings_app_version.sql", "original_file_path": "models/stg_google_play__stats_ratings_app_version.sql", "unique_id": "model.google_play_source.stg_google_play__stats_ratings_app_version", "fqn": ["google_play_source", "stg_google_play__stats_ratings_app_version"], "alias": "stg_google_play__stats_ratings_app_version", "checksum": {"name": "sha256", "checksum": "5de9bd134bca288aa3fc094668561b4eae33e64235082f3b1bf5fbe71f76e7f7"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly ratings report by app and app version. Records with `NULL` app version codes are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_version_code": {"name": "app_version_code", "description": "Integer value of the version of the app being reported on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_rating": {"name": "average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_average_rating": {"name": "rolling_total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.1601841, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__stats_ratings_app_version_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__stats_ratings_app_version_tmp')),\n                staging_columns=get_stats_ratings_app_version_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(app_version_code as {{ dbt.type_int() }}) as app_version_code,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        case when app_version_code is null then null else cast( nullif(cast(daily_average_rating as {{ dbt.type_string() }}), 'NA') as {{ dbt.type_float() }} ) end as average_rating,\n        case when app_version_code is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    {{ dbt_utils.group_by(6) }}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_ratings_app_version_tmp", "package": null, "version": null}, {"name": "stg_google_play__stats_ratings_app_version_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_ratings_app_version_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_float", "macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__stats_ratings_app_version_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__stats_ratings_app_version.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    app_version_code\n    \n as \n    \n    app_version_code\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(app_version_code as integer) as app_version_code,\n        cast(package_name as TEXT) as package_name,\n        case when app_version_code is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when app_version_code is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_crashes_overview": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_crashes_overview", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__stats_crashes_overview.sql", "original_file_path": "models/stg_google_play__stats_crashes_overview.sql", "unique_id": "model.google_play_source.stg_google_play__stats_crashes_overview", "fqn": ["google_play_source", "stg_google_play__stats_crashes_overview"], "alias": "stg_google_play__stats_crashes_overview", "checksum": {"name": "sha256", "checksum": "5f3032f6d8492c3b08f900c3d95f49593e1eee954db53f2b2437bbfff40384e1"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly overview crashes report by app.", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anrs": {"name": "anrs", "description": "Daily application not responding (ANR) reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "crashes": {"name": "crashes", "description": "Daily crash reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.166592, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__stats_crashes_overview_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__stats_crashes_overview_tmp')),\n                staging_columns=get_stats_crashes_overview_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        cast(daily_anrs as {{ dbt.type_bigint() }}) as anrs,\n        cast(daily_crashes as {{ dbt.type_bigint() }}) as crashes,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_crashes_overview_tmp", "package": null, "version": null}, {"name": "stg_google_play__stats_crashes_overview_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_crashes_overview_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_bigint"], "nodes": ["model.google_play_source.stg_google_play__stats_crashes_overview_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__stats_crashes_overview.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    daily_anrs\n    \n as \n    \n    daily_anrs\n    \n, \n    \n    \n    daily_crashes\n    \n as \n    \n    daily_crashes\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        cast(daily_anrs as bigint) as anrs,\n        cast(daily_crashes as bigint) as crashes,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__earnings": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__earnings", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__earnings.sql", "original_file_path": "models/stg_google_play__earnings.sql", "unique_id": "model.google_play_source.stg_google_play__earnings", "fqn": ["google_play_source", "stg_google_play__earnings"], "alias": "stg_google_play__earnings", "checksum": {"name": "sha256", "checksum": "79631629f9e220230f4b4b0d270bd4a205f4484cbe5f4f21b3b56c95e2d78d19"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line in the report represents a type of transaction, like when you charge a customer money or pay Google a fee, along with the original and converted amounts. Does not include chargebacks. No transactions made in the European Economic Area will not be Google fees. \n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_buyer_currency": {"name": "amount_buyer_currency", "description": "Total amount for this invoice line before currency conversion.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_merchant_currency": {"name": "amount_merchant_currency", "description": "Total amount for this invoice line after currency conversion.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "base_plan_id": {"name": "base_plan_id", "description": "Base plan id of the subscription product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buyer_country": {"name": "buyer_country", "description": "Two-letter abbreviation of the country where the user\u2019s Google account is registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buyer_currency": {"name": "buyer_currency", "description": "Currency the order was converted from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buyer_postal_code": {"name": "buyer_postal_code", "description": "Postal code of the buyer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buyer_state": {"name": "buyer_state", "description": "State in which the buyer resides.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_conversion_rate": {"name": "currency_conversion_rate", "description": "Exchange rate used when converting buyer amounts to payout amounts in merchant currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "Unique ID assigned to this order. Subscription order IDs include the renewal cycle number at the end. Renamed from `description`. One order will have a record for every kind of transaction associated with it.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buyer_hardware": {"name": "buyer_hardware", "description": "Android device model used to make the purchase. For subscription orders, this refers to the model used for the original purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "merchant_currency": {"name": "merchant_currency", "description": "Currency to which the order was converted. This is the local currency you are paid in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "offer_id": {"name": "offer_id", "description": "ID of the offer used to purchase the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Package name of the app where the product was sold. Renamed from `product_id`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_title": {"name": "product_title", "description": "Developer-specified name of the product. Shown in the buyer's locale.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "Used to identify the type of product sold. '0' represents the sale of a paid app, '1' represents the sale of an in-app product or subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_type": {"name": "refund_type", "description": "Refunds where the buyer was reimbursed their full spend will be marked as 'Full'. Refunds for part of a user\u2019s payment amount will be marked as 'Partial'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sku_id": {"name": "sku_id", "description": "Developer-specified unique ID assigned to the ordered product. Subscription order IDs include the renewal cycle number at the end.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_type": {"name": "tax_type", "description": "Kind of tax for tax lines; null for non-tax lines.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of this order based on the PDT time zone (in 'MMM DD, YYYY' format).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "Type of transaction - Charge, Google fee, Tax, Charge refund, Google fee refund, Charge rebill, Tax rebill, Google fee rebill, etc. Nulls are coalesced into 'Other'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_pt_timestamp": {"name": "transaction_pt_timestamp", "description": "Timestamp (in Pacific Time) of  when the order was placed. This is cast as a `dbt.type_timestamp()` which compiles to a timestamp WITHOUT a timezone.  However, all times reported in Google Play are in Pacific Time.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_timezone": {"name": "transaction_timezone", "description": "Timezone in which the order was placed (PDT or PST).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1721750696.170437, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__earnings\"", "raw_code": "{{ config(enabled=var('google_play__using_earnings', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_google_play__earnings_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__earnings_tmp')),\n                staging_columns=get_earnings_columns()\n            )\n        }}\n        \n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation, \n        cast(amount_buyer_currency_ as {{ dbt.type_numeric() }}) as amount_buyer_currency,\n        cast(amount_merchant_currency_ as {{ dbt.type_numeric() }}) as amount_merchant_currency,\n        base_plan_id,\n        cast(buyer_country as {{ dbt.type_string() }}) as buyer_country,\n        buyer_currency,\n        buyer_postal_code,\n        buyer_state,\n        currency_conversion_rate,\n        description as order_id,\n        hardware as buyer_hardware,\n        merchant_currency,\n        offer_id,\n        product_id as package_name,\n        product_title,\n        product_type,\n        refund_type,\n        cast(sku_id as {{ dbt.type_string() }}) as sku_id,\n        tax_type,\n\n        -- dates are stored like 'Apr 1, 2022' -> gotta convert these to YYYY-MM-DD\n        -- times are like '1:23:45 AM PDT'\n        {% if target.type == 'bigquery' %}\n        parse_date(\"%b %e, %Y\", transaction_date) as transaction_date,\n        parse_timestamp(\"%F %T %p\", parse_date(\"%b %e, %Y\", transaction_date) || ' ' || left(lpad(transaction_time, 15, '0'), 11))\n\n        {% elif target.type == 'snowflake' %}\n        date(transaction_date, 'mon dd, yyyy') as transaction_date,\n        to_timestamp_ntz(date(transaction_date, 'mon dd, yyyy') || ' ' || left(lpad(transaction_time, 15, '0'), 11), 'yyyy-mm-dd hh12:mi:ss am') \n\n        {% elif target.type in ('spark','databricks') %}\n        to_date(transaction_date, 'MMM d, y') as transaction_date,\n        to_timestamp(to_date(transaction_date, 'MMM d, y') || ' ' || left(lpad(transaction_time, 15, '0'), 11), 'yyyy-MM-dd h:m:s a') \n\n        {% else %}\n        cast(transaction_date as date) as transaction_date,\n        cast(cast(transaction_date as date) || ' ' || lpad(transaction_time, 15, '0') as {{ dbt.type_timestamp() }})\n        \n        {%- endif -%} \n            as transaction_pt_timestamp, -- the data type will be timestamp in UTC/no timezone but all timestamps in google play are PDT or PST\n\n        right(transaction_time, 3) as transaction_timezone, -- either PST or PDT\n        coalesce(transaction_type, 'Other') as transaction_type,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__earnings_tmp", "package": null, "version": null}, {"name": "stg_google_play__earnings_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_earnings_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_numeric", "macro.dbt.type_timestamp"], "nodes": ["model.google_play_source.stg_google_play__earnings_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__earnings.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__earnings_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    amount_buyer_currency_\n    \n as \n    \n    amount_buyer_currency_\n    \n, \n    \n    \n    amount_merchant_currency_\n    \n as \n    \n    amount_merchant_currency_\n    \n, \n    \n    \n    base_plan_id\n    \n as \n    \n    base_plan_id\n    \n, \n    \n    \n    buyer_country\n    \n as \n    \n    buyer_country\n    \n, \n    \n    \n    buyer_currency\n    \n as \n    \n    buyer_currency\n    \n, \n    \n    \n    buyer_postal_code\n    \n as \n    \n    buyer_postal_code\n    \n, \n    \n    \n    buyer_state\n    \n as \n    \n    buyer_state\n    \n, \n    \n    \n    currency_conversion_rate\n    \n as \n    \n    currency_conversion_rate\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    hardware\n    \n as \n    \n    hardware\n    \n, \n    \n    \n    merchant_currency\n    \n as \n    \n    merchant_currency\n    \n, \n    \n    \n    offer_id\n    \n as \n    \n    offer_id\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_title\n    \n as \n    \n    product_title\n    \n, \n    \n    \n    product_type\n    \n as \n    \n    product_type\n    \n, \n    \n    \n    refund_type\n    \n as \n    \n    refund_type\n    \n, \n    \n    \n    sku_id\n    \n as \n    \n    sku_id\n    \n, \n    \n    \n    tax_type\n    \n as \n    \n    tax_type\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_time\n    \n as \n    \n    transaction_time\n    \n, \n    \n    \n    transaction_type\n    \n as \n    \n    transaction_type\n    \n\n\n\n        \n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation, \n        cast(amount_buyer_currency_ as numeric(28,6)) as amount_buyer_currency,\n        cast(amount_merchant_currency_ as numeric(28,6)) as amount_merchant_currency,\n        base_plan_id,\n        cast(buyer_country as TEXT) as buyer_country,\n        buyer_currency,\n        buyer_postal_code,\n        buyer_state,\n        currency_conversion_rate,\n        description as order_id,\n        hardware as buyer_hardware,\n        merchant_currency,\n        offer_id,\n        product_id as package_name,\n        product_title,\n        product_type,\n        refund_type,\n        cast(sku_id as TEXT) as sku_id,\n        tax_type,\n\n        -- dates are stored like 'Apr 1, 2022' -> gotta convert these to YYYY-MM-DD\n        -- times are like '1:23:45 AM PDT'\n        \n        cast(transaction_date as date) as transaction_date,\n        cast(cast(transaction_date as date) || ' ' || lpad(transaction_time, 15, '0') as timestamp)as transaction_pt_timestamp, -- the data type will be timestamp in UTC/no timezone but all timestamps in google play are PDT or PST\n\n        right(transaction_time, 3) as transaction_timezone, -- either PST or PDT\n        coalesce(transaction_type, 'Other') as transaction_type,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_installs_os_version": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_installs_os_version", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__stats_installs_os_version.sql", "original_file_path": "models/stg_google_play__stats_installs_os_version.sql", "unique_id": "model.google_play_source.stg_google_play__stats_installs_os_version", "fqn": ["google_play_source", "stg_google_play__stats_installs_os_version"], "alias": "stg_google_play__stats_installs_os_version", "checksum": {"name": "sha256", "checksum": "7ffbad0fb7cdda116183e8febf6348d0ce687179ee5b0b39ca1e9b67daf7e9d2"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly installs report by app and user OS version. Records with `NULL` os versions are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_devices_last_30_days": {"name": "active_devices_last_30_days", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "android_os_version": {"name": "android_os_version", "description": "Operation System of the android being used. May be NULL if users do not consent to being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_installs": {"name": "device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_uninstalls": {"name": "device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_upgrades": {"name": "device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_installs": {"name": "user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_uninstalls": {"name": "user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.161707, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__stats_installs_os_version_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__stats_installs_os_version_tmp')),\n                staging_columns=get_stats_installs_os_version_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        cast(android_os_version as {{ dbt.type_string() }}) as android_os_version,\n        sum(cast(active_device_installs as {{ dbt.type_bigint() }})) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as {{ dbt.type_bigint() }})) as device_installs,\n        sum(cast(daily_device_uninstalls as {{ dbt.type_bigint() }})) as device_uninstalls,\n        sum(cast(daily_device_upgrades as {{ dbt.type_bigint() }})) as device_upgrades,\n        sum(cast(daily_user_installs as {{ dbt.type_bigint() }})) as user_installs,\n        sum(cast(daily_user_uninstalls as {{ dbt.type_bigint() }})) as user_uninstalls,\n        sum(cast(install_events as {{ dbt.type_bigint() }})) as install_events,\n        sum(cast(uninstall_events as {{ dbt.type_bigint() }})) as uninstall_events,\n        sum(cast(update_events as {{ dbt.type_bigint() }})) as update_events\n    from fields\n    {{ dbt_utils.group_by(4) }}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_os_version_tmp", "package": null, "version": null}, {"name": "stg_google_play__stats_installs_os_version_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_installs_os_version_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_bigint", "macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__stats_installs_os_version_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__stats_installs_os_version.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    android_os_version\n    \n as \n    \n    android_os_version\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        cast(android_os_version as TEXT) as android_os_version,\n        sum(cast(active_device_installs as bigint)) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as bigint)) as device_installs,\n        sum(cast(daily_device_uninstalls as bigint)) as device_uninstalls,\n        sum(cast(daily_device_upgrades as bigint)) as device_upgrades,\n        sum(cast(daily_user_installs as bigint)) as user_installs,\n        sum(cast(daily_user_uninstalls as bigint)) as user_uninstalls,\n        sum(cast(install_events as bigint)) as install_events,\n        sum(cast(uninstall_events as bigint)) as uninstall_events,\n        sum(cast(update_events as bigint)) as update_events\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__subscriptions_country": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__subscriptions_country", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__subscriptions_country.sql", "original_file_path": "models/stg_google_play__subscriptions_country.sql", "unique_id": "model.google_play_source.stg_google_play__subscriptions_country", "fqn": ["google_play_source", "stg_google_play__subscriptions_country"], "alias": "stg_google_play__subscriptions_country", "checksum": {"name": "sha256", "checksum": "dc5386071e80910a2d87f5acaecb3446324722b48d8d161fbbad58ec8af98edc"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly subscriptions report by individual country, app, and subscription product. Records with `NULL` countries are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_active_subscriptions": {"name": "total_active_subscriptions", "description": "The rolling count of active subscriptions of this type in this country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancelled_subscriptions": {"name": "cancelled_subscriptions", "description": "The daily count of cancelled subscriptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "Two-letter abbreviation of the country where the user\u2019s Google account is registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_subscriptions": {"name": "new_subscriptions", "description": "The daily count of newly purchased subscriptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "Developer-specified unique ID assigned to the ordered product. Subscription order IDs include the renewal cycle number at the end.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1721750696.171201, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__subscriptions_country\"", "raw_code": "{{ config(enabled=var('google_play__using_subscriptions', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_google_play__subscriptions_country_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__subscriptions_country_tmp')),\n                staging_columns=get_financial_stats_subscriptions_country_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(country as {{ dbt.type_string() }}) as country,\n        cast(product_id as {{ dbt.type_string() }}) as product_id,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        sum(cast(active_subscriptions as {{ dbt.type_bigint() }})) as total_active_subscriptions,\n        sum(cast(cancelled_subscriptions as {{ dbt.type_bigint() }})) as cancelled_subscriptions,\n        sum(cast(new_subscriptions as {{ dbt.type_bigint() }})) as new_subscriptions\n    from fields\n    {{ dbt_utils.group_by(5) }}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__subscriptions_country_tmp", "package": null, "version": null}, {"name": "stg_google_play__subscriptions_country_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_financial_stats_subscriptions_country_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_bigint", "macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__subscriptions_country_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__subscriptions_country.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__subscriptions_country_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_subscriptions\n    \n as \n    \n    active_subscriptions\n    \n, \n    \n    \n    cancelled_subscriptions\n    \n as \n    \n    cancelled_subscriptions\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    new_subscriptions\n    \n as \n    \n    new_subscriptions\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(country as TEXT) as country,\n        cast(product_id as TEXT) as product_id,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(active_subscriptions as bigint)) as total_active_subscriptions,\n        sum(cast(cancelled_subscriptions as bigint)) as cancelled_subscriptions,\n        sum(cast(new_subscriptions as bigint)) as new_subscriptions\n    from fields\n    group by 1,2,3,4,5\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_ratings_os_version": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_ratings_os_version", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__stats_ratings_os_version.sql", "original_file_path": "models/stg_google_play__stats_ratings_os_version.sql", "unique_id": "model.google_play_source.stg_google_play__stats_ratings_os_version", "fqn": ["google_play_source", "stg_google_play__stats_ratings_os_version"], "alias": "stg_google_play__stats_ratings_os_version", "checksum": {"name": "sha256", "checksum": "b847ff4ff4ee6225b3cb4e6011f072bc2c6b5d2d583456d14e704b7bc1fa722a"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly ratings report by app and user OS version. Records with `NULL` os versions are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_rating": {"name": "average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "android_os_version": {"name": "android_os_version", "description": "Type of device model. May be NULL if users do not consent to being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_average_rating": {"name": "rolling_total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.162158, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__stats_ratings_os_version_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__stats_ratings_os_version_tmp')),\n                staging_columns=get_stats_ratings_os_version_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(android_os_version as {{ dbt.type_string() }}) as android_os_version,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        case when android_os_version is null then null else cast( nullif(cast(daily_average_rating as {{ dbt.type_string() }}), 'NA') as {{ dbt.type_float() }} ) end as average_rating,\n        case when android_os_version is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    {{ dbt_utils.group_by(6) }}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_ratings_os_version_tmp", "package": null, "version": null}, {"name": "stg_google_play__stats_ratings_os_version_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_ratings_os_version_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__stats_ratings_os_version_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__stats_ratings_os_version.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    android_os_version\n    \n as \n    \n    android_os_version\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(android_os_version as TEXT) as android_os_version,\n        cast(package_name as TEXT) as package_name,\n        case when android_os_version is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when android_os_version is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_installs_app_version": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_installs_app_version", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__stats_installs_app_version.sql", "original_file_path": "models/stg_google_play__stats_installs_app_version.sql", "unique_id": "model.google_play_source.stg_google_play__stats_installs_app_version", "fqn": ["google_play_source", "stg_google_play__stats_installs_app_version"], "alias": "stg_google_play__stats_installs_app_version", "checksum": {"name": "sha256", "checksum": "3c93fe01a588f901f5a024ede4af4bbe0b7a0f3fd571c38900b0eb283c52ad46"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly installs report by app and app version. Records with `NULL` app version codes are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_devices_last_30_days": {"name": "active_devices_last_30_days", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_version_code": {"name": "app_version_code", "description": "Integer value of the version of the app being reported on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_installs": {"name": "device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_uninstalls": {"name": "device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_upgrades": {"name": "device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_installs": {"name": "user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_uninstalls": {"name": "user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.159255, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__stats_installs_app_version_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__stats_installs_app_version_tmp')),\n                staging_columns=get_stats_installs_app_version_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(app_version_code as {{ dbt.type_int() }}) as app_version_code,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        sum(cast(active_device_installs as {{ dbt.type_bigint() }})) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as {{ dbt.type_bigint() }})) as device_installs,\n        sum(cast(daily_device_uninstalls as {{ dbt.type_bigint() }})) as device_uninstalls,\n        sum(cast(daily_device_upgrades as {{ dbt.type_bigint() }})) as device_upgrades,\n        sum(cast(daily_user_installs as {{ dbt.type_bigint() }})) as user_installs,\n        sum(cast(daily_user_uninstalls as {{ dbt.type_bigint() }})) as user_uninstalls,\n        sum(cast(install_events as {{ dbt.type_bigint() }})) as install_events,\n        sum(cast(uninstall_events as {{ dbt.type_bigint() }})) as uninstall_events,\n        sum(cast(update_events as {{ dbt.type_bigint() }})) as update_events\n    from fields\n    {{ dbt_utils.group_by(4) }}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_app_version_tmp", "package": null, "version": null}, {"name": "stg_google_play__stats_installs_app_version_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_installs_app_version_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_bigint", "macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__stats_installs_app_version_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__stats_installs_app_version.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    app_version_code\n    \n as \n    \n    app_version_code\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(app_version_code as integer) as app_version_code,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(active_device_installs as bigint)) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as bigint)) as device_installs,\n        sum(cast(daily_device_uninstalls as bigint)) as device_uninstalls,\n        sum(cast(daily_device_upgrades as bigint)) as device_upgrades,\n        sum(cast(daily_user_installs as bigint)) as user_installs,\n        sum(cast(daily_user_uninstalls as bigint)) as user_uninstalls,\n        sum(cast(install_events as bigint)) as install_events,\n        sum(cast(uninstall_events as bigint)) as uninstall_events,\n        sum(cast(update_events as bigint)) as update_events\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_ratings_device": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_ratings_device", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__stats_ratings_device.sql", "original_file_path": "models/stg_google_play__stats_ratings_device.sql", "unique_id": "model.google_play_source.stg_google_play__stats_ratings_device", "fqn": ["google_play_source", "stg_google_play__stats_ratings_device"], "alias": "stg_google_play__stats_ratings_device", "checksum": {"name": "sha256", "checksum": "feb34a1c5f59afebf081ebea44e4632c2857d90a791f6dbbfc007028425dfc7c"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly ratings report by app and type of device model. Records with `NULL` device types are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_rating": {"name": "average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device": {"name": "device", "description": "Type of device model. May be NULL if users do not consent to being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_average_rating": {"name": "rolling_total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.161145, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__stats_ratings_device_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__stats_ratings_device_tmp')),\n                staging_columns=get_stats_ratings_device_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(device as {{ dbt.type_string() }}) as device,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        case when device is null then null else cast( nullif(cast(daily_average_rating as {{ dbt.type_string() }}), 'NA') as {{ dbt.type_float() }} ) end as average_rating,\n        case when device is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    {{ dbt_utils.group_by(6) }}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_ratings_device_tmp", "package": null, "version": null}, {"name": "stg_google_play__stats_ratings_device_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_ratings_device_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__stats_ratings_device_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__stats_ratings_device.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    device\n    \n as \n    \n    device\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(device as TEXT) as device,\n        cast(package_name as TEXT) as package_name,\n        case when device is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when device is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__store_performance_country": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__store_performance_country", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__store_performance_country.sql", "original_file_path": "models/stg_google_play__store_performance_country.sql", "unique_id": "model.google_play_source.stg_google_play__store_performance_country", "fqn": ["google_play_source", "stg_google_play__store_performance_country"], "alias": "stg_google_play__store_performance_country", "checksum": {"name": "sha256", "checksum": "4aa7d5a13c93338f719018650803babaf6ed1b83ad2377d764dc56a63d2ea538"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly store performance report by app and country. Records with `NULL` countries are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_region": {"name": "country_region", "description": "Two-letter abbreviation of the country or region where the user\u2019s Google account is registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_acquisitions": {"name": "store_listing_acquisitions", "description": "The number of users that visited your store listing and installed your app, who did not have your app installed on any device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_conversion_rate": {"name": "store_listing_conversion_rate", "description": "The percentage of store listing visitors who installed your app on a given day.\n\nNote: Does not include visits or installs from users who already have your app installed on another device", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_visitors": {"name": "store_listing_visitors", "description": "The number of users that visited your store listing who did not have your app installed on any device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.164326, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__store_performance_country_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__store_performance_country_tmp')),\n                staging_columns=get_stats_store_performance_country_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(country_region as {{ dbt.type_string() }}) as country_region,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        sum(cast(store_listing_acquisitions as {{ dbt.type_bigint() }})) as store_listing_acquisitions,\n        avg(store_listing_conversion_rate) as store_listing_conversion_rate,\n        sum(cast(store_listing_visitors as {{ dbt.type_bigint() }})) as store_listing_visitors\n    from fields\n    {{ dbt_utils.group_by(4) }}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__store_performance_country_tmp", "package": null, "version": null}, {"name": "stg_google_play__store_performance_country_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_store_performance_country_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_bigint", "macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__store_performance_country_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__store_performance_country.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    country_region\n    \n as \n    \n    country_region\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    store_listing_acquisitions\n    \n as \n    \n    store_listing_acquisitions\n    \n, \n    \n    \n    store_listing_conversion_rate\n    \n as \n    \n    store_listing_conversion_rate\n    \n, \n    \n    \n    store_listing_visitors\n    \n as \n    \n    store_listing_visitors\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(country_region as TEXT) as country_region,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(store_listing_acquisitions as bigint)) as store_listing_acquisitions,\n        avg(store_listing_conversion_rate) as store_listing_conversion_rate,\n        sum(cast(store_listing_visitors as bigint)) as store_listing_visitors\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_installs_country": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_installs_country", "resource_type": "model", "package_name": "google_play_source", "path": "stg_google_play__stats_installs_country.sql", "original_file_path": "models/stg_google_play__stats_installs_country.sql", "unique_id": "model.google_play_source.stg_google_play__stats_installs_country", "fqn": ["google_play_source", "stg_google_play__stats_installs_country"], "alias": "stg_google_play__stats_installs_country", "checksum": {"name": "sha256", "checksum": "cd290bba0e23cadb945dbc94ed662b5aab29ce0c9690625341e4e1d383bcdd34"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each line is a daily snapshot of the monthly installs report by app and user country. Records with `NULL` countries are aggregated together into daily batches.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_devices_last_30_days": {"name": "active_devices_last_30_days", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "Two-letter abbreviation of the country where the user\u2019s Google account is registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_installs": {"name": "device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_uninstalls": {"name": "device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_upgrades": {"name": "device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_installs": {"name": "user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_uninstalls": {"name": "user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1721750696.163297, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_google_play__stats_installs_country_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_play__stats_installs_country_tmp')),\n                staging_columns=get_stats_installs_country_columns()\n            )\n        }}\n\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='google_play_union_schemas', \n            union_database_variable='google_play_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as {{ dbt.type_string() }}) as source_relation,\n        cast(date as date) as date_day,\n        cast(country as {{ dbt.type_string() }}) as country,\n        cast(package_name as {{ dbt.type_string() }}) as package_name,\n        sum(cast(active_device_installs as {{ dbt.type_bigint() }})) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as {{ dbt.type_bigint() }})) as device_installs,\n        sum(cast(daily_device_uninstalls as {{ dbt.type_bigint() }})) as device_uninstalls,\n        sum(cast(daily_device_upgrades as {{ dbt.type_bigint() }})) as device_upgrades,\n        sum(cast(daily_user_installs as {{ dbt.type_bigint() }})) as user_installs,\n        sum(cast(daily_user_uninstalls as {{ dbt.type_bigint() }})) as user_uninstalls,\n        sum(cast(install_events as {{ dbt.type_bigint() }})) as install_events,\n        sum(cast(uninstall_events as {{ dbt.type_bigint() }})) as uninstall_events,\n        sum(cast(update_events as {{ dbt.type_bigint() }})) as update_events\n    from fields\n    {{ dbt_utils.group_by(4) }}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_country_tmp", "package": null, "version": null}, {"name": "stg_google_play__stats_installs_country_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.google_play_source.get_stats_installs_country_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.type_bigint", "macro.dbt_utils.group_by"], "nodes": ["model.google_play_source.stg_google_play__stats_installs_country_tmp"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play__stats_installs_country.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(country as TEXT) as country,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(active_device_installs as bigint)) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as bigint)) as device_installs,\n        sum(cast(daily_device_uninstalls as bigint)) as device_uninstalls,\n        sum(cast(daily_device_upgrades as bigint)) as device_upgrades,\n        sum(cast(daily_user_installs as bigint)) as user_installs,\n        sum(cast(daily_user_uninstalls as bigint)) as user_uninstalls,\n        sum(cast(install_events as bigint)) as install_events,\n        sum(cast(uninstall_events as bigint)) as uninstall_events,\n        sum(cast(update_events as bigint)) as update_events\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_installs_country_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_installs_country_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__stats_installs_country_tmp.sql", "original_file_path": "models/tmp/stg_google_play__stats_installs_country_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__stats_installs_country_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__stats_installs_country_tmp"], "alias": "stg_google_play__stats_installs_country_tmp", "checksum": {"name": "sha256", "checksum": "563672c6ccd2c5aca783861553634c5dce94a1eb296b3490de36c2e632a1dd6c"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750695.888032, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_installs_country', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='stats_installs_country',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_installs_country"], ["google_play", "stats_installs_country"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_installs_country"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__stats_installs_country_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_country\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_ratings_os_version_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_ratings_os_version_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__stats_ratings_os_version_tmp.sql", "original_file_path": "models/tmp/stg_google_play__stats_ratings_os_version_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__stats_ratings_os_version_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__stats_ratings_os_version_tmp"], "alias": "stg_google_play__stats_ratings_os_version_tmp", "checksum": {"name": "sha256", "checksum": "621ef4ab1954f25f25fe5a9aa862b5ec93af3d83d559fa3a4617cec0af8e06e7"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750695.940607, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_ratings_os_version', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='stats_ratings_os_version',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_ratings_os_version"], ["google_play", "stats_ratings_os_version"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_ratings_os_version"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__stats_ratings_os_version_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_os_version\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__earnings_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__earnings_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__earnings_tmp.sql", "original_file_path": "models/tmp/stg_google_play__earnings_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__earnings_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__earnings_tmp"], "alias": "stg_google_play__earnings_tmp", "checksum": {"name": "sha256", "checksum": "2792a6dc6c57c4f43bb17f07c7b6429f3bc84c67597838f55c855421994a94c2"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1721750695.945827, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__earnings_tmp\"", "raw_code": "{{ config(enabled=var('google_play__using_earnings', False)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='earnings', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='earnings',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "earnings"], ["google_play", "earnings"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.earnings"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__earnings_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"earnings\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_ratings_app_version_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_ratings_app_version_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__stats_ratings_app_version_tmp.sql", "original_file_path": "models/tmp/stg_google_play__stats_ratings_app_version_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__stats_ratings_app_version_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__stats_ratings_app_version_tmp"], "alias": "stg_google_play__stats_ratings_app_version_tmp", "checksum": {"name": "sha256", "checksum": "5f532c0754d3d8c71d9e1308391f20a8f0cccb07993e41a935214964c2f0b4c8"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750695.95042, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_ratings_app_version', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='stats_ratings_app_version',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_ratings_app_version"], ["google_play", "stats_ratings_app_version"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_ratings_app_version"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__stats_ratings_app_version_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_app_version\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_ratings_device_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_ratings_device_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__stats_ratings_device_tmp.sql", "original_file_path": "models/tmp/stg_google_play__stats_ratings_device_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__stats_ratings_device_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__stats_ratings_device_tmp"], "alias": "stg_google_play__stats_ratings_device_tmp", "checksum": {"name": "sha256", "checksum": "c1976a241a745813513c3e13e0f0b15c1d52b129f7679b1e6701b3290d8b2f7d"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750695.954676, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_ratings_device', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='stats_ratings_device',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_ratings_device"], ["google_play", "stats_ratings_device"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_ratings_device"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__stats_ratings_device_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_device\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_crashes_os_version_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_crashes_os_version_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__stats_crashes_os_version_tmp.sql", "original_file_path": "models/tmp/stg_google_play__stats_crashes_os_version_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__stats_crashes_os_version_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__stats_crashes_os_version_tmp"], "alias": "stg_google_play__stats_crashes_os_version_tmp", "checksum": {"name": "sha256", "checksum": "9ed4554ef4bcdc9245810709b306ba0e382110270a1fcd67e10b83d26ab73a87"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750695.959554, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_crashes_os_version', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='stats_crashes_os_version',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_crashes_os_version"], ["google_play", "stats_crashes_os_version"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_crashes_os_version"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__stats_crashes_os_version_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_crashes_os_version\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_ratings_overview_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_ratings_overview_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__stats_ratings_overview_tmp.sql", "original_file_path": "models/tmp/stg_google_play__stats_ratings_overview_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__stats_ratings_overview_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__stats_ratings_overview_tmp"], "alias": "stg_google_play__stats_ratings_overview_tmp", "checksum": {"name": "sha256", "checksum": "8530a7f48e11557431c84c8024185f8dfb6e6cb1de0c66d32f8ae718ddc702f0"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750695.96359, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_ratings_overview', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='stats_ratings_overview',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_ratings_overview"], ["google_play", "stats_ratings_overview"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_ratings_overview"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__stats_ratings_overview_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_overview\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_installs_device_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_installs_device_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__stats_installs_device_tmp.sql", "original_file_path": "models/tmp/stg_google_play__stats_installs_device_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__stats_installs_device_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__stats_installs_device_tmp"], "alias": "stg_google_play__stats_installs_device_tmp", "checksum": {"name": "sha256", "checksum": "d865ed1792159d8c34e36743623f13e077a694fc83d1b90f88b3fb40765e8a88"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750695.967795, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_installs_device', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='stats_installs_device',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_installs_device"], ["google_play", "stats_installs_device"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_installs_device"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__stats_installs_device_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_device\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__store_performance_source_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__store_performance_source_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__store_performance_source_tmp.sql", "original_file_path": "models/tmp/stg_google_play__store_performance_source_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__store_performance_source_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__store_performance_source_tmp"], "alias": "stg_google_play__store_performance_source_tmp", "checksum": {"name": "sha256", "checksum": "d10c42ed6b63ef8844f4b9c2e197df81204b2def020d3ecb7c00dc2a2ea85a02"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750695.971807, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_source_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_store_performance_traffic_source', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='stats_store_performance_traffic_source',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_store_performance_traffic_source"], ["google_play", "stats_store_performance_traffic_source"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_store_performance_traffic_source"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__store_performance_source_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_store_performance_traffic_source\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__store_performance_country_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__store_performance_country_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__store_performance_country_tmp.sql", "original_file_path": "models/tmp/stg_google_play__store_performance_country_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__store_performance_country_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__store_performance_country_tmp"], "alias": "stg_google_play__store_performance_country_tmp", "checksum": {"name": "sha256", "checksum": "bf8bee15e27ac2e8c0956e0caf201a6d890dc4799360f1267c635ead149bd15d"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750695.975904, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_store_performance_country', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='store_perfstats_store_performance_countryormance_country',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_store_performance_country"], ["google_play", "stats_store_performance_country"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_store_performance_country"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__store_performance_country_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_store_performance_country\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_installs_overview_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_installs_overview_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__stats_installs_overview_tmp.sql", "original_file_path": "models/tmp/stg_google_play__stats_installs_overview_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__stats_installs_overview_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__stats_installs_overview_tmp"], "alias": "stg_google_play__stats_installs_overview_tmp", "checksum": {"name": "sha256", "checksum": "b8c885300551716bb90b547c56c2e4711eef866ec23c609804a49df75871fa4a"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750695.980889, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_installs_overview', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='stats_installs_overview',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_installs_overview"], ["google_play", "stats_installs_overview"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_installs_overview"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__stats_installs_overview_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_overview\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_installs_os_version_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_installs_os_version_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__stats_installs_os_version_tmp.sql", "original_file_path": "models/tmp/stg_google_play__stats_installs_os_version_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__stats_installs_os_version_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__stats_installs_os_version_tmp"], "alias": "stg_google_play__stats_installs_os_version_tmp", "checksum": {"name": "sha256", "checksum": "fca2a1f51f8ed943a9d3c220eaac6063e26e63c1a6d88cc7b18dc7d79e201894"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750695.984899, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_installs_os_version', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='stats_installs_os_version',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_installs_os_version"], ["google_play", "stats_installs_os_version"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_installs_os_version"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__stats_installs_os_version_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_os_version\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_ratings_country_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_ratings_country_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__stats_ratings_country_tmp.sql", "original_file_path": "models/tmp/stg_google_play__stats_ratings_country_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__stats_ratings_country_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__stats_ratings_country_tmp"], "alias": "stg_google_play__stats_ratings_country_tmp", "checksum": {"name": "sha256", "checksum": "3a4bccc4c8d7483005e831fd00cdcfcca7d2100bfc984072d8f77e71fd2d2ea1"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750695.989185, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_ratings_country', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='stats_ratings_country',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_ratings_country"], ["google_play", "stats_ratings_country"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_ratings_country"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__stats_ratings_country_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_country\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_crashes_app_version_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_crashes_app_version_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__stats_crashes_app_version_tmp.sql", "original_file_path": "models/tmp/stg_google_play__stats_crashes_app_version_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__stats_crashes_app_version_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__stats_crashes_app_version_tmp"], "alias": "stg_google_play__stats_crashes_app_version_tmp", "checksum": {"name": "sha256", "checksum": "01d8cdc2911bdddb9e04ebf869138e9ef3ee17da1825565d826758ed409e8d86"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750695.993206, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_crashes_app_version', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='stats_crashes_app_version',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_crashes_app_version"], ["google_play", "stats_crashes_app_version"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_crashes_app_version"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__stats_crashes_app_version_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_crashes_app_version\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_crashes_overview_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_crashes_overview_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__stats_crashes_overview_tmp.sql", "original_file_path": "models/tmp/stg_google_play__stats_crashes_overview_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__stats_crashes_overview_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__stats_crashes_overview_tmp"], "alias": "stg_google_play__stats_crashes_overview_tmp", "checksum": {"name": "sha256", "checksum": "cfc40adc6ebead2988ca0d1231d002e509964dfb60a33f5d83ac851343fbdbec"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750695.9971352, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_crashes_overview', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='stats_crashes_overview',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_crashes_overview"], ["google_play", "stats_crashes_overview"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_crashes_overview"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__stats_crashes_overview_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_crashes_overview\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__stats_installs_app_version_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__stats_installs_app_version_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__stats_installs_app_version_tmp.sql", "original_file_path": "models/tmp/stg_google_play__stats_installs_app_version_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__stats_installs_app_version_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__stats_installs_app_version_tmp"], "alias": "stg_google_play__stats_installs_app_version_tmp", "checksum": {"name": "sha256", "checksum": "10a180717460fdb8aea8bc58ff1d89777b9663eab356102ec93fb23e4d396551"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1721750696.002599, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='stats_installs_app_version', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='stats_installs_app_version',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "stats_installs_app_version"], ["google_play", "stats_installs_app_version"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.stats_installs_app_version"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__stats_installs_app_version_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_app_version\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.google_play_source.stg_google_play__subscriptions_country_tmp": {"database": "postgres", "schema": "zz_google_play_google_play_dev", "name": "stg_google_play__subscriptions_country_tmp", "resource_type": "model", "package_name": "google_play_source", "path": "tmp/stg_google_play__subscriptions_country_tmp.sql", "original_file_path": "models/tmp/stg_google_play__subscriptions_country_tmp.sql", "unique_id": "model.google_play_source.stg_google_play__subscriptions_country_tmp", "fqn": ["google_play_source", "tmp", "stg_google_play__subscriptions_country_tmp"], "alias": "stg_google_play__subscriptions_country_tmp", "checksum": {"name": "sha256", "checksum": "baa7054f771fd3a014e55952342db073184188f2ef2b4ae5e48441a80ae44cce"}, "config": {"enabled": true, "alias": null, "schema": "google_play_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "google_play_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1721750696.0069919, "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__subscriptions_country_tmp\"", "raw_code": "{{ config(enabled=var('google_play__using_subscriptions', False)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='financial_stats_subscriptions_country', \n        database_variable='google_play_database', \n        schema_variable='google_play_schema', \n        default_database=target.database,\n        default_schema='google_play',\n        default_variable='financial_stats_subscriptions_country',\n        union_schema_variable='google_play_union_schemas',\n        union_database_variable='google_play_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["google_play", "financial_stats_subscriptions_country"], ["google_play", "financial_stats_subscriptions_country"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.google_play_source.google_play.financial_stats_subscriptions_country"]}, "compiled_path": "target/compiled/google_play_source/models/tmp/stg_google_play__subscriptions_country_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"financial_stats_subscriptions_country\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "seed.google_play_source.google_play__country_codes": {"database": "postgres", "schema": "zz_google_play_google_play_source", "name": "google_play__country_codes", "resource_type": "seed", "package_name": "google_play_source", "path": "google_play__country_codes.csv", "original_file_path": "seeds/google_play__country_codes.csv", "unique_id": "seed.google_play_source.google_play__country_codes", "fqn": ["google_play_source", "google_play__country_codes"], "alias": "google_play__country_codes", "checksum": {"name": "sha256", "checksum": "944b50dd921118d2c2cb08fcbaedc79c4ff8e366575ad6be1d5eedb61ba1b1f2"}, "config": {"enabled": true, "alias": null, "schema": "google_play_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"country_name": "varchar(255)", "alternative_country_name": "varchar(255)", "region": "varchar(255)", "sub_region": "varchar(255)"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "ISO-3166 country mapping table", "columns": {"country_name": {"name": "country_name", "description": "The ISO-3166 English country name sent by Google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alternative_country_name": {"name": "alternative_country_name", "description": "Due to differences in the official ISO country names used by Google and Apple's naming convention, we've added an alternative territory name that will allow us to join downstream reports.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_code_numeric": {"name": "country_code_numeric", "description": "The 3 digit ISO-3166 country code. ([Original Source](https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes/blob/master/all/all.csv))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_code_alpha_2": {"name": "country_code_alpha_2", "description": "The 2 character ISO-3166 country code. ([Original Source](https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes/blob/master/all/all.csv))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_code_alpha_3": {"name": "country_code_alpha_3", "description": "The 3 character ISO-3166 country code. ([Original Source](https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes/blob/master/all/all.csv))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "The UN Statistics region name assignment. ([Original Source](https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes/blob/master/all/all.csv))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region_code": {"name": "region_code", "description": "The UN Statistics region numerical code assignment. ([Original Source](https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes/blob/master/all/all.csv))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sub_region": {"name": "sub_region", "description": "The UN Statistics sub-region name. ([Original Source](https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes/blob/master/all/all.csv))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sub_region_code": {"name": "sub_region_code", "description": "The UN Statistics sub-region numerical code. ([Original Source](https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes/blob/master/all/all.csv))", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "google_play_source://models/stg_google_play.yml", "build_path": null, "unrendered_config": {"schema": "google_play_source", "column_types": {"country_name": "{{ 'string' if target.type in ['bigquery','spark','databricks'] else 'varchar(255)' }}", "alternative_country_name": "{{ 'string' if target.type in ['bigquery','spark','databricks'] else 'varchar(255)' }}", "region": "{{ 'string' if target.type in ['bigquery','spark','databricks'] else 'varchar(255)' }}", "sub_region": "{{ 'string' if target.type in ['bigquery','spark','databricks'] else 'varchar(255)' }}"}}, "created_at": 1721750696.2319272, "relation_name": "\"postgres\".\"zz_google_play_google_play_source\".\"google_play__country_codes\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests/dbt_packages/google_play_source", "depends_on": {"macros": []}}, "test.google_play.dbt_utils_unique_combination_of_columns_google_play__device_report_source_relation__package_name__date_day__device.266c6d5429": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_google_play__device_report_source_relation__package_name__date_day__device", "resource_type": "test", "package_name": "google_play", "path": "dbt_utils_unique_combination_o_6617147b3947e9e1c9af0b3757306d22.sql", "original_file_path": "models/google_play.yml", "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__device_report_source_relation__package_name__date_day__device.266c6d5429", "fqn": ["google_play", "dbt_utils_unique_combination_of_columns_google_play__device_report_source_relation__package_name__date_day__device"], "alias": "dbt_utils_unique_combination_o_6617147b3947e9e1c9af0b3757306d22", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6617147b3947e9e1c9af0b3757306d22", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6617147b3947e9e1c9af0b3757306d22"}, "created_at": 1721750696.122742, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6617147b3947e9e1c9af0b3757306d22\") }}", "language": "sql", "refs": [{"name": "google_play__device_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play.google_play__device_report"]}, "compiled_path": "target/compiled/google_play/models/google_play.yml/dbt_utils_unique_combination_o_6617147b3947e9e1c9af0b3757306d22.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, device\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__device_report\"\n    group by source_relation, package_name, date_day, device\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.google_play__device_report", "attached_node": "model.google_play.google_play__device_report", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "device"], "model": "{{ get_where_subquery(ref('google_play__device_report')) }}"}, "namespace": "dbt_utils"}}, "test.google_play.dbt_utils_unique_combination_of_columns_google_play__country_report_source_relation__package_name__date_day__country_short.1f14b27373": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_google_play__country_report_source_relation__package_name__date_day__country_short", "resource_type": "test", "package_name": "google_play", "path": "dbt_utils_unique_combination_o_281a11c96960c5c92e94a68f79f58d5f.sql", "original_file_path": "models/google_play.yml", "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__country_report_source_relation__package_name__date_day__country_short.1f14b27373", "fqn": ["google_play", "dbt_utils_unique_combination_of_columns_google_play__country_report_source_relation__package_name__date_day__country_short"], "alias": "dbt_utils_unique_combination_o_281a11c96960c5c92e94a68f79f58d5f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_281a11c96960c5c92e94a68f79f58d5f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_281a11c96960c5c92e94a68f79f58d5f"}, "created_at": 1721750696.135792, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_281a11c96960c5c92e94a68f79f58d5f\") }}", "language": "sql", "refs": [{"name": "google_play__country_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play.google_play__country_report"]}, "compiled_path": "target/compiled/google_play/models/google_play.yml/dbt_utils_unique_combination_o_281a11c96960c5c92e94a68f79f58d5f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, country_short\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__country_report\"\n    group by source_relation, package_name, date_day, country_short\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.google_play__country_report", "attached_node": "model.google_play.google_play__country_report", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "country_short"], "model": "{{ get_where_subquery(ref('google_play__country_report')) }}"}, "namespace": "dbt_utils"}}, "test.google_play.dbt_utils_unique_combination_of_columns_google_play__finance_report_source_relation__sku_id__country_short__date_day.0609b46134": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_google_play__finance_report_source_relation__sku_id__country_short__date_day", "resource_type": "test", "package_name": "google_play", "path": "dbt_utils_unique_combination_o_4d10c12696fe430c3cc81c2888284470.sql", "original_file_path": "models/google_play.yml", "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__finance_report_source_relation__sku_id__country_short__date_day.0609b46134", "fqn": ["google_play", "dbt_utils_unique_combination_of_columns_google_play__finance_report_source_relation__sku_id__country_short__date_day"], "alias": "dbt_utils_unique_combination_o_4d10c12696fe430c3cc81c2888284470", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4d10c12696fe430c3cc81c2888284470", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4d10c12696fe430c3cc81c2888284470"}, "created_at": 1721750696.138447, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4d10c12696fe430c3cc81c2888284470\") }}", "language": "sql", "refs": [{"name": "google_play__finance_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play.google_play__finance_report"]}, "compiled_path": "target/compiled/google_play/models/google_play.yml/dbt_utils_unique_combination_o_4d10c12696fe430c3cc81c2888284470.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, sku_id, country_short, date_day\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__finance_report\"\n    group by source_relation, sku_id, country_short, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.google_play__finance_report", "attached_node": "model.google_play.google_play__finance_report", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "sku_id", "country_short", "date_day"], "model": "{{ get_where_subquery(ref('google_play__finance_report')) }}"}, "namespace": "dbt_utils"}}, "test.google_play.dbt_utils_unique_combination_of_columns_google_play__app_version_report_source_relation__package_name__date_day__app_version_code.7abbf03304": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_google_play__app_version_report_source_relation__package_name__date_day__app_version_code", "resource_type": "test", "package_name": "google_play", "path": "dbt_utils_unique_combination_o_3c7fdb167882b91fd911c109ad626056.sql", "original_file_path": "models/google_play.yml", "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__app_version_report_source_relation__package_name__date_day__app_version_code.7abbf03304", "fqn": ["google_play", "dbt_utils_unique_combination_of_columns_google_play__app_version_report_source_relation__package_name__date_day__app_version_code"], "alias": "dbt_utils_unique_combination_o_3c7fdb167882b91fd911c109ad626056", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3c7fdb167882b91fd911c109ad626056", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3c7fdb167882b91fd911c109ad626056"}, "created_at": 1721750696.142345, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3c7fdb167882b91fd911c109ad626056\") }}", "language": "sql", "refs": [{"name": "google_play__app_version_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play.google_play__app_version_report"]}, "compiled_path": "target/compiled/google_play/models/google_play.yml/dbt_utils_unique_combination_o_3c7fdb167882b91fd911c109ad626056.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, app_version_code\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__app_version_report\"\n    group by source_relation, package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.google_play__app_version_report", "attached_node": "model.google_play.google_play__app_version_report", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "app_version_code"], "model": "{{ get_where_subquery(ref('google_play__app_version_report')) }}"}, "namespace": "dbt_utils"}}, "test.google_play.dbt_utils_unique_combination_of_columns_google_play__os_version_report_source_relation__package_name__date_day__android_os_version.8520366a30": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_google_play__os_version_report_source_relation__package_name__date_day__android_os_version", "resource_type": "test", "package_name": "google_play", "path": "dbt_utils_unique_combination_o_68661c8802205f3044a71e3f8cb43bbe.sql", "original_file_path": "models/google_play.yml", "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__os_version_report_source_relation__package_name__date_day__android_os_version.8520366a30", "fqn": ["google_play", "dbt_utils_unique_combination_of_columns_google_play__os_version_report_source_relation__package_name__date_day__android_os_version"], "alias": "dbt_utils_unique_combination_o_68661c8802205f3044a71e3f8cb43bbe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_68661c8802205f3044a71e3f8cb43bbe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_68661c8802205f3044a71e3f8cb43bbe"}, "created_at": 1721750696.145201, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_68661c8802205f3044a71e3f8cb43bbe\") }}", "language": "sql", "refs": [{"name": "google_play__os_version_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play.google_play__os_version_report"]}, "compiled_path": "target/compiled/google_play/models/google_play.yml/dbt_utils_unique_combination_o_68661c8802205f3044a71e3f8cb43bbe.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, android_os_version\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__os_version_report\"\n    group by source_relation, package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.google_play__os_version_report", "attached_node": "model.google_play.google_play__os_version_report", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "android_os_version"], "model": "{{ get_where_subquery(ref('google_play__os_version_report')) }}"}, "namespace": "dbt_utils"}}, "test.google_play.dbt_utils_unique_combination_of_columns_google_play__overview_report_source_relation__package_name__date_day.00e17d5062": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_google_play__overview_report_source_relation__package_name__date_day", "resource_type": "test", "package_name": "google_play", "path": "dbt_utils_unique_combination_o_f2dff9a4e9244bfe4ea6400f3dad5e8d.sql", "original_file_path": "models/google_play.yml", "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__overview_report_source_relation__package_name__date_day.00e17d5062", "fqn": ["google_play", "dbt_utils_unique_combination_of_columns_google_play__overview_report_source_relation__package_name__date_day"], "alias": "dbt_utils_unique_combination_o_f2dff9a4e9244bfe4ea6400f3dad5e8d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f2dff9a4e9244bfe4ea6400f3dad5e8d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f2dff9a4e9244bfe4ea6400f3dad5e8d"}, "created_at": 1721750696.1479292, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f2dff9a4e9244bfe4ea6400f3dad5e8d\") }}", "language": "sql", "refs": [{"name": "google_play__overview_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play.google_play__overview_report"]}, "compiled_path": "target/compiled/google_play/models/google_play.yml/dbt_utils_unique_combination_o_f2dff9a4e9244bfe4ea6400f3dad5e8d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__overview_report\"\n    group by source_relation, package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.google_play__overview_report", "attached_node": "model.google_play.google_play__overview_report", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day"], "model": "{{ get_where_subquery(ref('google_play__overview_report')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_app_version_source_relation__package_name__date_day__app_version_code.827301f79d": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_app_version_source_relation__package_name__date_day__app_version_code", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_900e67e2fb6aecffeba0736e47b1ecf3.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_app_version_source_relation__package_name__date_day__app_version_code.827301f79d", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_app_version_source_relation__package_name__date_day__app_version_code"], "alias": "dbt_utils_unique_combination_o_900e67e2fb6aecffeba0736e47b1ecf3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_900e67e2fb6aecffeba0736e47b1ecf3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_900e67e2fb6aecffeba0736e47b1ecf3"}, "created_at": 1721750696.171914, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_900e67e2fb6aecffeba0736e47b1ecf3\") }}", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_app_version", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__stats_installs_app_version"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_900e67e2fb6aecffeba0736e47b1ecf3.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, app_version_code\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version\"\n    group by source_relation, package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__stats_installs_app_version", "attached_node": "model.google_play_source.stg_google_play__stats_installs_app_version", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "app_version_code"], "model": "{{ get_where_subquery(ref('stg_google_play__stats_installs_app_version')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_app_version_source_relation__package_name__date_day__app_version_code.16488408eb": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_app_version_source_relation__package_name__date_day__app_version_code", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_d83cda15e359f25acc84a07b3b1b9c89.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_app_version_source_relation__package_name__date_day__app_version_code.16488408eb", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_app_version_source_relation__package_name__date_day__app_version_code"], "alias": "dbt_utils_unique_combination_o_d83cda15e359f25acc84a07b3b1b9c89", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d83cda15e359f25acc84a07b3b1b9c89", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d83cda15e359f25acc84a07b3b1b9c89"}, "created_at": 1721750696.174827, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d83cda15e359f25acc84a07b3b1b9c89\") }}", "language": "sql", "refs": [{"name": "stg_google_play__stats_crashes_app_version", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__stats_crashes_app_version"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_d83cda15e359f25acc84a07b3b1b9c89.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, app_version_code\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version\"\n    group by source_relation, package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__stats_crashes_app_version", "attached_node": "model.google_play_source.stg_google_play__stats_crashes_app_version", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "app_version_code"], "model": "{{ get_where_subquery(ref('stg_google_play__stats_crashes_app_version')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_app_version_source_relation__package_name__date_day__app_version_code.bcbc07a5b6": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_app_version_source_relation__package_name__date_day__app_version_code", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_713b5eeae21435f60ef0b27e5aa123f9.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_app_version_source_relation__package_name__date_day__app_version_code.bcbc07a5b6", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_app_version_source_relation__package_name__date_day__app_version_code"], "alias": "dbt_utils_unique_combination_o_713b5eeae21435f60ef0b27e5aa123f9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_713b5eeae21435f60ef0b27e5aa123f9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_713b5eeae21435f60ef0b27e5aa123f9"}, "created_at": 1721750696.17738, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_713b5eeae21435f60ef0b27e5aa123f9\") }}", "language": "sql", "refs": [{"name": "stg_google_play__stats_ratings_app_version", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__stats_ratings_app_version"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_713b5eeae21435f60ef0b27e5aa123f9.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, app_version_code\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version\"\n    group by source_relation, package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__stats_ratings_app_version", "attached_node": "model.google_play_source.stg_google_play__stats_ratings_app_version", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "app_version_code"], "model": "{{ get_where_subquery(ref('stg_google_play__stats_ratings_app_version')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_device_source_relation__package_name__date_day__device.e59a1803ff": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_device_source_relation__package_name__date_day__device", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_2652d1da5a4755d767e07ccfa3cbd708.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_device_source_relation__package_name__date_day__device.e59a1803ff", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_device_source_relation__package_name__date_day__device"], "alias": "dbt_utils_unique_combination_o_2652d1da5a4755d767e07ccfa3cbd708", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2652d1da5a4755d767e07ccfa3cbd708", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2652d1da5a4755d767e07ccfa3cbd708"}, "created_at": 1721750696.1801422, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2652d1da5a4755d767e07ccfa3cbd708\") }}", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_device", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__stats_installs_device"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_2652d1da5a4755d767e07ccfa3cbd708.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, device\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device\"\n    group by source_relation, package_name, date_day, device\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__stats_installs_device", "attached_node": "model.google_play_source.stg_google_play__stats_installs_device", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "device"], "model": "{{ get_where_subquery(ref('stg_google_play__stats_installs_device')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_device_source_relation__package_name__date_day__device.856ffd1245": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_device_source_relation__package_name__date_day__device", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_eec143f8f9b6a000a3af8909ad67d413.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_device_source_relation__package_name__date_day__device.856ffd1245", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_device_source_relation__package_name__date_day__device"], "alias": "dbt_utils_unique_combination_o_eec143f8f9b6a000a3af8909ad67d413", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_eec143f8f9b6a000a3af8909ad67d413", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_eec143f8f9b6a000a3af8909ad67d413"}, "created_at": 1721750696.182886, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_eec143f8f9b6a000a3af8909ad67d413\") }}", "language": "sql", "refs": [{"name": "stg_google_play__stats_ratings_device", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__stats_ratings_device"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_eec143f8f9b6a000a3af8909ad67d413.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, device\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device\"\n    group by source_relation, package_name, date_day, device\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__stats_ratings_device", "attached_node": "model.google_play_source.stg_google_play__stats_ratings_device", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "device"], "model": "{{ get_where_subquery(ref('stg_google_play__stats_ratings_device')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_os_version_source_relation__package_name__date_day__android_os_version.b30d0583ac": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_os_version_source_relation__package_name__date_day__android_os_version", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_5aa4fbbb942c5cebf1da13d466b7a214.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_os_version_source_relation__package_name__date_day__android_os_version.b30d0583ac", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_os_version_source_relation__package_name__date_day__android_os_version"], "alias": "dbt_utils_unique_combination_o_5aa4fbbb942c5cebf1da13d466b7a214", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_5aa4fbbb942c5cebf1da13d466b7a214", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_5aa4fbbb942c5cebf1da13d466b7a214"}, "created_at": 1721750696.185447, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_5aa4fbbb942c5cebf1da13d466b7a214\") }}", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_os_version", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__stats_installs_os_version"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_5aa4fbbb942c5cebf1da13d466b7a214.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, android_os_version\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version\"\n    group by source_relation, package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__stats_installs_os_version", "attached_node": "model.google_play_source.stg_google_play__stats_installs_os_version", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "android_os_version"], "model": "{{ get_where_subquery(ref('stg_google_play__stats_installs_os_version')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_os_version_source_relation__package_name__date_day__android_os_version.e42db18deb": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_os_version_source_relation__package_name__date_day__android_os_version", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_f8512973a60bdbad33c9365fface814e.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_os_version_source_relation__package_name__date_day__android_os_version.e42db18deb", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_os_version_source_relation__package_name__date_day__android_os_version"], "alias": "dbt_utils_unique_combination_o_f8512973a60bdbad33c9365fface814e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f8512973a60bdbad33c9365fface814e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f8512973a60bdbad33c9365fface814e"}, "created_at": 1721750696.188855, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f8512973a60bdbad33c9365fface814e\") }}", "language": "sql", "refs": [{"name": "stg_google_play__stats_ratings_os_version", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__stats_ratings_os_version"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_f8512973a60bdbad33c9365fface814e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, android_os_version\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version\"\n    group by source_relation, package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__stats_ratings_os_version", "attached_node": "model.google_play_source.stg_google_play__stats_ratings_os_version", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "android_os_version"], "model": "{{ get_where_subquery(ref('stg_google_play__stats_ratings_os_version')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_os_version_source_relation__package_name__date_day__android_os_version.a6241d4e33": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_os_version_source_relation__package_name__date_day__android_os_version", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_7fe83d4e7856182eead9d6e301e6a4c8.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_os_version_source_relation__package_name__date_day__android_os_version.a6241d4e33", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_os_version_source_relation__package_name__date_day__android_os_version"], "alias": "dbt_utils_unique_combination_o_7fe83d4e7856182eead9d6e301e6a4c8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7fe83d4e7856182eead9d6e301e6a4c8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7fe83d4e7856182eead9d6e301e6a4c8"}, "created_at": 1721750696.191613, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7fe83d4e7856182eead9d6e301e6a4c8\") }}", "language": "sql", "refs": [{"name": "stg_google_play__stats_crashes_os_version", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__stats_crashes_os_version"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_7fe83d4e7856182eead9d6e301e6a4c8.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, android_os_version\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version\"\n    group by source_relation, package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__stats_crashes_os_version", "attached_node": "model.google_play_source.stg_google_play__stats_crashes_os_version", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "android_os_version"], "model": "{{ get_where_subquery(ref('stg_google_play__stats_crashes_os_version')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_country_source_relation__package_name__date_day__country.78328bbca0": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_country_source_relation__package_name__date_day__country", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_7656fb3e70c39cbddcda54a9f86de788.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_country_source_relation__package_name__date_day__country.78328bbca0", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_country_source_relation__package_name__date_day__country"], "alias": "dbt_utils_unique_combination_o_7656fb3e70c39cbddcda54a9f86de788", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7656fb3e70c39cbddcda54a9f86de788", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7656fb3e70c39cbddcda54a9f86de788"}, "created_at": 1721750696.194259, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7656fb3e70c39cbddcda54a9f86de788\") }}", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_country", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__stats_installs_country"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_7656fb3e70c39cbddcda54a9f86de788.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, country\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country\"\n    group by source_relation, package_name, date_day, country\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__stats_installs_country", "attached_node": "model.google_play_source.stg_google_play__stats_installs_country", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "country"], "model": "{{ get_where_subquery(ref('stg_google_play__stats_installs_country')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_country_source_relation__package_name__date_day__country.5c4427c5b6": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_country_source_relation__package_name__date_day__country", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_e759443a30a0c6d08f7ef31858ab7d80.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_country_source_relation__package_name__date_day__country.5c4427c5b6", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_country_source_relation__package_name__date_day__country"], "alias": "dbt_utils_unique_combination_o_e759443a30a0c6d08f7ef31858ab7d80", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e759443a30a0c6d08f7ef31858ab7d80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e759443a30a0c6d08f7ef31858ab7d80"}, "created_at": 1721750696.196894, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e759443a30a0c6d08f7ef31858ab7d80\") }}", "language": "sql", "refs": [{"name": "stg_google_play__stats_ratings_country", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__stats_ratings_country"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_e759443a30a0c6d08f7ef31858ab7d80.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, country\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country\"\n    group by source_relation, package_name, date_day, country\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__stats_ratings_country", "attached_node": "model.google_play_source.stg_google_play__stats_ratings_country", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "country"], "model": "{{ get_where_subquery(ref('stg_google_play__stats_ratings_country')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__store_performance_country_source_relation__package_name__date_day__country_region.b285211a0d": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__store_performance_country_source_relation__package_name__date_day__country_region", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_a339f225afc00a13114f63446f1cc031.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__store_performance_country_source_relation__package_name__date_day__country_region.b285211a0d", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__store_performance_country_source_relation__package_name__date_day__country_region"], "alias": "dbt_utils_unique_combination_o_a339f225afc00a13114f63446f1cc031", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a339f225afc00a13114f63446f1cc031", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a339f225afc00a13114f63446f1cc031"}, "created_at": 1721750696.199544, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a339f225afc00a13114f63446f1cc031\") }}", "language": "sql", "refs": [{"name": "stg_google_play__store_performance_country", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__store_performance_country"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_a339f225afc00a13114f63446f1cc031.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, country_region\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country\"\n    group by source_relation, package_name, date_day, country_region\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__store_performance_country", "attached_node": "model.google_play_source.stg_google_play__store_performance_country", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "country_region"], "model": "{{ get_where_subquery(ref('stg_google_play__store_performance_country')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.unique_stg_google_play__store_performance_source_traffic_source_unique_key.c42051d73b": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "unique_stg_google_play__store_performance_source_traffic_source_unique_key", "resource_type": "test", "package_name": "google_play_source", "path": "unique_stg_google_play__store__69f1cc60b686e2170ee65342f7de3916.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.unique_stg_google_play__store_performance_source_traffic_source_unique_key.c42051d73b", "fqn": ["google_play_source", "unique_stg_google_play__store_performance_source_traffic_source_unique_key"], "alias": "unique_stg_google_play__store__69f1cc60b686e2170ee65342f7de3916", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_stg_google_play__store__69f1cc60b686e2170ee65342f7de3916", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "unique_stg_google_play__store__69f1cc60b686e2170ee65342f7de3916"}, "created_at": 1721750696.201869, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_google_play__store__69f1cc60b686e2170ee65342f7de3916\") }}", "language": "sql", "refs": [{"name": "stg_google_play__store_performance_source", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__store_performance_source"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/unique_stg_google_play__store__69f1cc60b686e2170ee65342f7de3916.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    traffic_source_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_source\"\nwhere traffic_source_unique_key is not null\ngroup by traffic_source_unique_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "traffic_source_unique_key", "file_key_name": "models.stg_google_play__store_performance_source", "attached_node": "model.google_play_source.stg_google_play__store_performance_source", "test_metadata": {"name": "unique", "kwargs": {"column_name": "traffic_source_unique_key", "model": "{{ get_where_subquery(ref('stg_google_play__store_performance_source')) }}"}, "namespace": null}}, "test.google_play_source.not_null_stg_google_play__store_performance_source_traffic_source_unique_key.f2423ab9a8": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "not_null_stg_google_play__store_performance_source_traffic_source_unique_key", "resource_type": "test", "package_name": "google_play_source", "path": "not_null_stg_google_play__stor_bdb710be651e9509ffe38dd8361e5ce2.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.not_null_stg_google_play__store_performance_source_traffic_source_unique_key.f2423ab9a8", "fqn": ["google_play_source", "not_null_stg_google_play__store_performance_source_traffic_source_unique_key"], "alias": "not_null_stg_google_play__stor_bdb710be651e9509ffe38dd8361e5ce2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_google_play__stor_bdb710be651e9509ffe38dd8361e5ce2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_google_play__stor_bdb710be651e9509ffe38dd8361e5ce2"}, "created_at": 1721750696.202964, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_google_play__stor_bdb710be651e9509ffe38dd8361e5ce2\") }}", "language": "sql", "refs": [{"name": "stg_google_play__store_performance_source", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__store_performance_source"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/not_null_stg_google_play__stor_bdb710be651e9509ffe38dd8361e5ce2.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect traffic_source_unique_key\nfrom \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_source\"\nwhere traffic_source_unique_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "traffic_source_unique_key", "file_key_name": "models.stg_google_play__store_performance_source", "attached_node": "model.google_play_source.stg_google_play__store_performance_source", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "traffic_source_unique_key", "model": "{{ get_where_subquery(ref('stg_google_play__store_performance_source')) }}"}, "namespace": null}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_overview_source_relation__package_name__date_day.5fe2d4c377": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_overview_source_relation__package_name__date_day", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_700739166ecb0647d0130ea4d7108c6b.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_overview_source_relation__package_name__date_day.5fe2d4c377", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_overview_source_relation__package_name__date_day"], "alias": "dbt_utils_unique_combination_o_700739166ecb0647d0130ea4d7108c6b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_700739166ecb0647d0130ea4d7108c6b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_700739166ecb0647d0130ea4d7108c6b"}, "created_at": 1721750696.203993, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_700739166ecb0647d0130ea4d7108c6b\") }}", "language": "sql", "refs": [{"name": "stg_google_play__stats_installs_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__stats_installs_overview"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_700739166ecb0647d0130ea4d7108c6b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview\"\n    group by source_relation, package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__stats_installs_overview", "attached_node": "model.google_play_source.stg_google_play__stats_installs_overview", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day"], "model": "{{ get_where_subquery(ref('stg_google_play__stats_installs_overview')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_overview_source_relation__package_name__date_day.15c14bf5fb": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_overview_source_relation__package_name__date_day", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_59a1b708be2911e9d705054bd541829b.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_overview_source_relation__package_name__date_day.15c14bf5fb", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_overview_source_relation__package_name__date_day"], "alias": "dbt_utils_unique_combination_o_59a1b708be2911e9d705054bd541829b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_59a1b708be2911e9d705054bd541829b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_59a1b708be2911e9d705054bd541829b"}, "created_at": 1721750696.206611, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_59a1b708be2911e9d705054bd541829b\") }}", "language": "sql", "refs": [{"name": "stg_google_play__stats_crashes_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__stats_crashes_overview"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_59a1b708be2911e9d705054bd541829b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview\"\n    group by source_relation, package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__stats_crashes_overview", "attached_node": "model.google_play_source.stg_google_play__stats_crashes_overview", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day"], "model": "{{ get_where_subquery(ref('stg_google_play__stats_crashes_overview')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_overview_source_relation__package_name__date_day.d0ee2b4dd6": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_overview_source_relation__package_name__date_day", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_c6eacbb299d1ad6a76eb3d6f38f06e78.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_overview_source_relation__package_name__date_day.d0ee2b4dd6", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_overview_source_relation__package_name__date_day"], "alias": "dbt_utils_unique_combination_o_c6eacbb299d1ad6a76eb3d6f38f06e78", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c6eacbb299d1ad6a76eb3d6f38f06e78", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c6eacbb299d1ad6a76eb3d6f38f06e78"}, "created_at": 1721750696.2091131, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c6eacbb299d1ad6a76eb3d6f38f06e78\") }}", "language": "sql", "refs": [{"name": "stg_google_play__stats_ratings_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__stats_ratings_overview"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_c6eacbb299d1ad6a76eb3d6f38f06e78.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview\"\n    group by source_relation, package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__stats_ratings_overview", "attached_node": "model.google_play_source.stg_google_play__stats_ratings_overview", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day"], "model": "{{ get_where_subquery(ref('stg_google_play__stats_ratings_overview')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__earnings_source_relation__order_id__transaction_type__tax_type__amount_buyer_currency.cbb0102898": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__earnings_source_relation__order_id__transaction_type__tax_type__amount_buyer_currency", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_0acc96beb091ec9fe9b0fa9143b28a31.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__earnings_source_relation__order_id__transaction_type__tax_type__amount_buyer_currency.cbb0102898", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__earnings_source_relation__order_id__transaction_type__tax_type__amount_buyer_currency"], "alias": "dbt_utils_unique_combination_o_0acc96beb091ec9fe9b0fa9143b28a31", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0acc96beb091ec9fe9b0fa9143b28a31", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0acc96beb091ec9fe9b0fa9143b28a31"}, "created_at": 1721750696.2116742, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0acc96beb091ec9fe9b0fa9143b28a31\") }}", "language": "sql", "refs": [{"name": "stg_google_play__earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__earnings"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_0acc96beb091ec9fe9b0fa9143b28a31.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, order_id, transaction_type, tax_type, amount_buyer_currency\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__earnings\"\n    group by source_relation, order_id, transaction_type, tax_type, amount_buyer_currency\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__earnings", "attached_node": "model.google_play_source.stg_google_play__earnings", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "order_id", "transaction_type", "tax_type", "amount_buyer_currency"], "model": "{{ get_where_subquery(ref('stg_google_play__earnings')) }}"}, "namespace": "dbt_utils"}}, "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__subscriptions_country_source_relation__package_name__date_day__country__product_id.7023b963b3": {"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_google_play__subscriptions_country_source_relation__package_name__date_day__country__product_id", "resource_type": "test", "package_name": "google_play_source", "path": "dbt_utils_unique_combination_o_af257b29308ff1c90b279a307b27db98.sql", "original_file_path": "models/stg_google_play.yml", "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__subscriptions_country_source_relation__package_name__date_day__country__product_id.7023b963b3", "fqn": ["google_play_source", "dbt_utils_unique_combination_of_columns_stg_google_play__subscriptions_country_source_relation__package_name__date_day__country__product_id"], "alias": "dbt_utils_unique_combination_o_af257b29308ff1c90b279a307b27db98", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_af257b29308ff1c90b279a307b27db98", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_af257b29308ff1c90b279a307b27db98"}, "created_at": 1721750696.214405, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_af257b29308ff1c90b279a307b27db98\") }}", "language": "sql", "refs": [{"name": "stg_google_play__subscriptions_country", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.google_play_source.stg_google_play__subscriptions_country"]}, "compiled_path": "target/compiled/google_play_source/models/stg_google_play.yml/dbt_utils_unique_combination_o_af257b29308ff1c90b279a307b27db98.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, country, product_id\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__subscriptions_country\"\n    group by source_relation, package_name, date_day, country, product_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_google_play__subscriptions_country", "attached_node": "model.google_play_source.stg_google_play__subscriptions_country", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "package_name", "date_day", "country", "product_id"], "model": "{{ get_where_subquery(ref('stg_google_play__subscriptions_country')) }}"}, "namespace": "dbt_utils"}}}, "sources": {"source.google_play_source.google_play.stats_installs_app_version": {"database": "postgres", "schema": "zz_google_play", "name": "stats_installs_app_version", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_installs_app_version", "fqn": ["google_play_source", "google_play", "stats_installs_app_version"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_installs_app_version", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly installs report by app and app version.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_device_installs": {"name": "active_device_installs", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_version_code": {"name": "app_version_code", "description": "Integer value of the version of the app being reported on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_device_installs": {"name": "current_device_installs", "description": "Seemingly deprecated column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_user_installs": {"name": "current_user_installs", "description": "Seemingly deprecated column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_installs": {"name": "daily_device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_uninstalls": {"name": "daily_device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_upgrades": {"name": "daily_device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_user_installs": {"name": "daily_user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_user_uninstalls": {"name": "daily_user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_user_installs": {"name": "total_user_installs", "description": "Seemingly deprecated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_installs_app_version\"", "created_at": 1721750696.3020952}, "source.google_play_source.google_play.stats_crashes_app_version": {"database": "postgres", "schema": "zz_google_play", "name": "stats_crashes_app_version", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_crashes_app_version", "fqn": ["google_play_source", "google_play", "stats_crashes_app_version"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_crashes_app_version", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly crashes report by app version and app.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_version_code": {"name": "app_version_code", "description": "Integer value of the version of the app being reported on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_anrs": {"name": "daily_anrs", "description": "Daily application not responding (ANR) reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_crashes": {"name": "daily_crashes", "description": "Daily crash reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_crashes_app_version\"", "created_at": 1721750696.302885}, "source.google_play_source.google_play.stats_ratings_app_version": {"database": "postgres", "schema": "zz_google_play", "name": "stats_ratings_app_version", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_ratings_app_version", "fqn": ["google_play_source", "google_play", "stats_ratings_app_version"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_ratings_app_version", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly ratings report by app and app version.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_version_code": {"name": "app_version_code", "description": "Integer value of the version of the app being reported on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_average_rating": {"name": "daily_average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_average_rating": {"name": "total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_ratings_app_version\"", "created_at": 1721750696.3030012}, "source.google_play_source.google_play.stats_installs_device": {"database": "postgres", "schema": "zz_google_play", "name": "stats_installs_device", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_installs_device", "fqn": ["google_play_source", "google_play", "stats_installs_device"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_installs_device", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly installs report by app and type of device model.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_device_installs": {"name": "active_device_installs", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_device_installs": {"name": "current_device_installs", "description": "Seemingly deprecated column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_user_installs": {"name": "current_user_installs", "description": "Seemingly deprecated column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_installs": {"name": "daily_device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_uninstalls": {"name": "daily_device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_upgrades": {"name": "daily_device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_user_installs": {"name": "daily_user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_user_uninstalls": {"name": "daily_user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device": {"name": "device", "description": "Type of device model. May be NULL if users do not consent to being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_user_installs": {"name": "total_user_installs", "description": "Seemingly deprecated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_installs_device\"", "created_at": 1721750696.303125}, "source.google_play_source.google_play.stats_ratings_device": {"database": "postgres", "schema": "zz_google_play", "name": "stats_ratings_device", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_ratings_device", "fqn": ["google_play_source", "google_play", "stats_ratings_device"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_ratings_device", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly ratings report by app and type of device model.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_average_rating": {"name": "daily_average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device": {"name": "device", "description": "Type of device model. May be NULL if users do not consent to being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_average_rating": {"name": "total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_ratings_device\"", "created_at": 1721750696.303308}, "source.google_play_source.google_play.stats_installs_os_version": {"database": "postgres", "schema": "zz_google_play", "name": "stats_installs_os_version", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_installs_os_version", "fqn": ["google_play_source", "google_play", "stats_installs_os_version"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_installs_os_version", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly installs report by app and user OS version.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_device_installs": {"name": "active_device_installs", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "android_os_version": {"name": "android_os_version", "description": "Operation System of the android being used. May be NULL if users do not consent to being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_device_installs": {"name": "current_device_installs", "description": "Seemingly deprecated column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_user_installs": {"name": "current_user_installs", "description": "Seemingly deprecated column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_installs": {"name": "daily_device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_uninstalls": {"name": "daily_device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_upgrades": {"name": "daily_device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_user_installs": {"name": "daily_user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_user_uninstalls": {"name": "daily_user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_user_installs": {"name": "total_user_installs", "description": "Seemingly deprecated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_installs_os_version\"", "created_at": 1721750696.303433}, "source.google_play_source.google_play.stats_ratings_os_version": {"database": "postgres", "schema": "zz_google_play", "name": "stats_ratings_os_version", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_ratings_os_version", "fqn": ["google_play_source", "google_play", "stats_ratings_os_version"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_ratings_os_version", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly ratings report by app and user OS version.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "android_os_version": {"name": "android_os_version", "description": "Operation System of the android being used. May be NULL if users do not consent to being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_average_rating": {"name": "daily_average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_average_rating": {"name": "total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_ratings_os_version\"", "created_at": 1721750696.303539}, "source.google_play_source.google_play.stats_crashes_os_version": {"database": "postgres", "schema": "zz_google_play", "name": "stats_crashes_os_version", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_crashes_os_version", "fqn": ["google_play_source", "google_play", "stats_crashes_os_version"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_crashes_os_version", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly crashes report by app and user OS version.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "android_os_version": {"name": "android_os_version", "description": "Operation System of the android being used. May be NULL if users do not consent to being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_anrs": {"name": "daily_anrs", "description": "Daily application not responding (ANR) reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_crashes": {"name": "daily_crashes", "description": "Daily crash reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_crashes_os_version\"", "created_at": 1721750696.303642}, "source.google_play_source.google_play.stats_installs_country": {"database": "postgres", "schema": "zz_google_play", "name": "stats_installs_country", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_installs_country", "fqn": ["google_play_source", "google_play", "stats_installs_country"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_installs_country", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly installs report by app and user country.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_device_installs": {"name": "active_device_installs", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "Two-letter abbreviation of the country where the user\u2019s Google account is registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_device_installs": {"name": "current_device_installs", "description": "Seemingly deprecated column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_user_installs": {"name": "current_user_installs", "description": "Seemingly deprecated column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_installs": {"name": "daily_device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_uninstalls": {"name": "daily_device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_upgrades": {"name": "daily_device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_user_installs": {"name": "daily_user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_user_uninstalls": {"name": "daily_user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_user_installs": {"name": "total_user_installs", "description": "Seemingly deprecated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_installs_country\"", "created_at": 1721750696.3037682}, "source.google_play_source.google_play.stats_ratings_country": {"database": "postgres", "schema": "zz_google_play", "name": "stats_ratings_country", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_ratings_country", "fqn": ["google_play_source", "google_play", "stats_ratings_country"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_ratings_country", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly ratings report by app and country.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "Two-letter abbreviation of the country where the user\u2019s Google account is registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_average_rating": {"name": "daily_average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_average_rating": {"name": "total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_ratings_country\"", "created_at": 1721750696.303874}, "source.google_play_source.google_play.stats_store_performance_country": {"database": "postgres", "schema": "zz_google_play", "name": "stats_store_performance_country", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_store_performance_country", "fqn": ["google_play_source", "google_play", "stats_store_performance_country"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_store_performance_country", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly store performance report by app and country.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_region": {"name": "country_region", "description": "Two-letter abbreviation of the country or region where the user\u2019s Google account is registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_acquisitions": {"name": "store_listing_acquisitions", "description": "The number of users that visited your store listing and installed your app, who did not have your app installed on any device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_conversion_rate": {"name": "store_listing_conversion_rate", "description": "The percentage of store listing visitors who installed your app on a given day.\n\nNote: Does not include visits or installs from users who already have your app installed on another device", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_visitors": {"name": "store_listing_visitors", "description": "The number of users that visited your store listing who did not have your app installed on any device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_store_performance_country\"", "created_at": 1721750696.303978}, "source.google_play_source.google_play.stats_store_performance_traffic_source": {"database": "postgres", "schema": "zz_google_play", "name": "stats_store_performance_traffic_source", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_store_performance_traffic_source", "fqn": ["google_play_source", "google_play", "stats_store_performance_traffic_source"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_store_performance_traffic_source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly store performance report by app and type of traffic source.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "search_term": {"name": "search_term", "description": "The term the user searched for before navigating to your store listing. Only available when the traffic source is Google Play search.\nNote: Can be Other this value does not reach certain minimum thresholds\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_acquisitions": {"name": "store_listing_acquisitions", "description": "The number of users that visited your store listing and installed your app, who did not have your app installed on any device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_conversion_rate": {"name": "store_listing_conversion_rate", "description": "The percentage of store listing visitors who installed your app on a given day.\n\nNote: Does not include visits or installs from users who already have your app installed on another device", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "store_listing_visitors": {"name": "store_listing_visitors", "description": "The number of users that visited your store listing who did not have your app installed on any device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "traffic_source": {"name": "traffic_source", "description": "How the user got to your store listing: Google Play search, Third-party referral, Google Play explore, or Other.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The value of the utm_campaign URL parameter in deep links to your store listing. Only available when the traffic source is a third-party referral.\nNote: Can be Other this value does not reach certain minimum thresholds\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The value of the utm_source URL parameter in deep links to your store listing. Only available when the traffic source is a third-party referral.\nNote: Can be Other this value does not reach certain minimum thresholds\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_store_performance_traffic_source\"", "created_at": 1721750696.304089}, "source.google_play_source.google_play.stats_installs_overview": {"database": "postgres", "schema": "zz_google_play", "name": "stats_installs_overview", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_installs_overview", "fqn": ["google_play_source", "google_play", "stats_installs_overview"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_installs_overview", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly overview installs report by app.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_device_installs": {"name": "active_device_installs", "description": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_device_installs": {"name": "current_device_installs", "description": "Seemingly deprecated column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_user_installs": {"name": "current_user_installs", "description": "Seemingly deprecated column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_installs": {"name": "daily_device_installs", "description": "Devices on which users installed your app on this day. An individual user can have multiple device installs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_uninstalls": {"name": "daily_device_uninstalls", "description": "The number of devices from which users uninstalled your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_device_upgrades": {"name": "daily_device_upgrades", "description": "The number of devices from which users upgraded your app on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_user_installs": {"name": "daily_user_installs", "description": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_user_uninstalls": {"name": "daily_user_uninstalls", "description": "The number of users who uninstalled your app from all of their devices on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "install_events": {"name": "install_events", "description": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_user_installs": {"name": "total_user_installs", "description": "Seemingly deprecated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uninstall_events": {"name": "uninstall_events", "description": "The number of times your app was uninstalled. This does not include inactive devices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "update_events": {"name": "update_events", "description": "The number of times your app was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_installs_overview\"", "created_at": 1721750696.304205}, "source.google_play_source.google_play.stats_crashes_overview": {"database": "postgres", "schema": "zz_google_play", "name": "stats_crashes_overview", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_crashes_overview", "fqn": ["google_play_source", "google_play", "stats_crashes_overview"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_crashes_overview", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly overview crashes report by app.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_anrs": {"name": "daily_anrs", "description": "Daily application not responding (ANR) reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_crashes": {"name": "daily_crashes", "description": "Daily crash reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_crashes_overview\"", "created_at": 1721750696.3043048}, "source.google_play_source.google_play.stats_ratings_overview": {"database": "postgres", "schema": "zz_google_play", "name": "stats_ratings_overview", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.stats_ratings_overview", "fqn": ["google_play_source", "google_play", "stats_ratings_overview"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "stats_ratings_overview", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly overview ratings report by app.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_average_rating": {"name": "daily_average_rating", "description": "Average star rating this app has received across all ratings submitted on a given day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_average_rating": {"name": "total_average_rating", "description": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_google_play\".\"stats_ratings_overview\"", "created_at": 1721750696.304405}, "source.google_play_source.google_play.earnings": {"database": "postgres", "schema": "zz_google_play", "name": "earnings", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.earnings", "fqn": ["google_play_source", "google_play", "earnings"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "earnings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line in the report represents a type of transaction, like when you charge a customer money or pay Google a fee, along with the original and converted amounts. Does not include chargebacks. No transactions made in the European Economic Area will not be Google fees. \n", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_buyer_currency_": {"name": "amount_buyer_currency_", "description": "Total amount for this invoice line before currency conversion.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_merchant_currency_": {"name": "amount_merchant_currency_", "description": "Total amount for this invoice line after currency conversion.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "base_plan_id": {"name": "base_plan_id", "description": "Base plan id of the subscription product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buyer_country": {"name": "buyer_country", "description": "Two-letter abbreviation of the country where the user\u2019s Google account is registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buyer_currency": {"name": "buyer_currency", "description": "Currency the order was converted from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buyer_postal_code": {"name": "buyer_postal_code", "description": "Postal code of the buyer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buyer_state": {"name": "buyer_state", "description": "State in which the buyer resides.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_conversion_rate": {"name": "currency_conversion_rate", "description": "Exchange rate used when converting buyer amounts to payout amounts in merchant currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Unique ID assigned to this order. Subscription order IDs include the renewal cycle number at the end. Renamed to `order_id` in the staging layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hardware": {"name": "hardware", "description": "Android device model used to make the purchase. For subscription orders, this refers to the model used for the original purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "merchant_currency": {"name": "merchant_currency", "description": "Currency to which the order was converted. This is the local currency you are paid in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "offer_id": {"name": "offer_id", "description": "ID of the offer used to purchase the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "Package name of the app where the product was sold. Renamed to `package_name`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_title": {"name": "product_title", "description": "Developer-specified name of the product. Shown in the buyer's locale.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "Used to identify the type of product sold. '0' represents the sale of a paid app, '1' represents the sale of an in-app product or subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_type": {"name": "refund_type", "description": "Refunds where the buyer was reimbursed their full spend will be marked as 'Full'. Refunds for part of a user\u2019s payment amount will be marked as 'Partial'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sku_id": {"name": "sku_id", "description": "Developer-specified unique ID assigned to the ordered product. Subscription order IDs include the renewal cycle number at the end.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_type": {"name": "tax_type", "description": "Kind of tax for tax lines; null for non-tax lines.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of this order based on the PDT time zone (in 'MMM DD, YYYY' string format).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_time": {"name": "transaction_time", "description": "Time of this order based on the PDT time zone (in 'hh:mm:ss PM PDT' string format). Note that single-digit hours are not prepended with a 0.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "Type of transaction - Charge, Google fee, Tax, Charge refund, Google fee refund, Charge rebill, Tax rebill, Google fee rebill, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"zz_google_play\".\"earnings\"", "created_at": 1721750696.3045719}, "source.google_play_source.google_play.financial_stats_subscriptions_country": {"database": "postgres", "schema": "zz_google_play", "name": "financial_stats_subscriptions_country", "resource_type": "source", "package_name": "google_play_source", "path": "models/src_google_play.yml", "original_file_path": "models/src_google_play.yml", "unique_id": "source.google_play_source.google_play.financial_stats_subscriptions_country", "fqn": ["google_play_source", "google_play", "financial_stats_subscriptions_country"], "source_name": "google_play", "source_description": "", "loader": "Fivetran", "identifier": "financial_stats_subscriptions_country", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each line is a daily snapshot of the monthly subscriptions report by individual country, app, and subscription product.", "columns": {"_file": {"name": "_file", "description": "The title of the monthly report csv from google.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_line": {"name": "_line", "description": "Line of the monthly csv report that this record was read from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_modified": {"name": "_modified", "description": "Timestamp of when the line was read from the monthly earnings report csv.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_subscriptions": {"name": "active_subscriptions", "description": "The rolling count of active subscriptions of this type in this country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancelled_subscriptions": {"name": "cancelled_subscriptions", "description": "The daily count of cancelled subscriptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "Two-letter abbreviation of the country where the user\u2019s Google account is registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "The date on which the data is reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_subscriptions": {"name": "new_subscriptions", "description": "The daily count of newly purchased subscriptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "The package name of the app owning the report data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "Developer-specified unique ID assigned to the ordered product. Subscription order IDs include the renewal cycle number at the end.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"zz_google_play\".\"financial_stats_subscriptions_country\"", "created_at": 1721750696.3046882}}, "macros": {"macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.476851, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.4770792, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.477194, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.4773061, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.477417, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.478962, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.479312, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.47999, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.480119, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.489473, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.4899719, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.4903529, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.490693, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.491153, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.4916632, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.491831, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.492162, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.492527, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.493313, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.493508, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.493812, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.4940732, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.494474, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.494687, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.4952588, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.495453, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.4955678, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.495748, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.495883, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.496257, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.49696, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.497099, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.4973838, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.4975219, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.4976902, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.498639, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }}\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\t{{ ';' if not loop.last else \"\" }}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.499155, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.499445, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}{{ ';' if not loop.last else \"\" }}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.4998772, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.500015, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5006862, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.500857, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.500988, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.501548, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.501728, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5019462, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.502553, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.505842, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.505997, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5064871, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5068831, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.507936, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5081291, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.508268, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.508405, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5085409, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.508903, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.509193, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.509484, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.509923, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.510188, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.514285, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5144892, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.514741, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5155861, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.515774, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.515948, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.517303, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.518593, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.523108, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.523381, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.523545, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.523631, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.523772, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.523883, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5240839, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.524936, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.525126, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5253718, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.52578, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5317671, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.534375, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.535491, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5357802, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.53598, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.536559, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5369558, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.537345, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.539048, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.544339, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.544805, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.54509, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5465002, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.546756, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.547413, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.550428, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5534668, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.555155, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5556989, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.556354, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.556598, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.557328, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.564055, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5657852, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5660548, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.567013, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.567274, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5678961, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5685172, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.569383, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.569618, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.569806, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.570086, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.570265, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.570546, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5709, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.571189, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5713751, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5715299, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5718, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5766242, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.582478, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.583634, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.584754, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.585567, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.585802, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.585918, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.586196, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.5863261, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.589858, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.593261, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.598615, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.599529, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.599766, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.600232, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.600422, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.600558, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.600705, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.600827, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.600985, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.60111, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6015942, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.601774, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6029902, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6034482, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.603921, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.604598, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.604882, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.605168, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.605581, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.605844, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.606571, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.606931, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.607109, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.607305, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6074932, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.608261, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.609519, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6099122, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.610163, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.610431, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.610641, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.610956, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.611161, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.611874, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6123, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6125, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.612766, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6131, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.613357, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.613976, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.614573, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.614968, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.615205, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.615596, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6157272, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.616052, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6163032, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.616622, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.616756, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.617026, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.617168, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.61777, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6179478, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6182232, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.618361, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.618627, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.618769, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.619751, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6198661, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6203809, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.620544, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.620675, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.621983, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.622356, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6226969, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6229498, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.623057, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.623328, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.623473, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.623821, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.624104, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.625163, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.625379, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.625813, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.626475, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.626925, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.627102, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6272798, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.627539, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6276438, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.628544, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.628725, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.630131, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.630327, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.630541, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.63082, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.630961, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.631377, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.631535, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.631708, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6321201, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.632492, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.632798, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6330528, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6336231, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.635256, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.635818, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6360981, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.637953, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.639176, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.639903, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.640129, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6403542, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6404328, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.641176, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6417332, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.641957, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6423092, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6426299, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6428978, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.643213, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.64337, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.643602, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6437209, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.644821, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.645343, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6455538, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6460721, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6463518, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.646467, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6468108, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.647094, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.647336, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.647421, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.64769, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.647839, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.648136, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.648273, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.648911, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.649308, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.649639, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.649798, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.650078, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.650213, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.650465, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.650621, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.650859, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6510139, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6512809, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.651414, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.651665, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.651855, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6521542, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.652292, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.652541, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.652645, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.653593, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.653745, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.653974, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.654148, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.65431, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.654453, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.65461, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6547809, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6549382, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.655086, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.655244, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.655384, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.65554, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6556811, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.655952, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.656151, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.656388, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.656488, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6568162, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.657075, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.657225, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.657751, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.657912, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.658132, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.658398, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.658525, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.658886, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6591208, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.65939, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6595159, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6598778, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.660055, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.660209, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6603851, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6608589, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.66107, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.661212, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.661315, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6614752, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6615539, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.66172, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6618931, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.66276, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6628978, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.663052, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6634371, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.663616, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6637492, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6639, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.664226, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.666413, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.666593, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.666806, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.667091, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.667416, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.667736, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.667926, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.668093, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.668349, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.668881, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.669101, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.669239, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6696582, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6700459, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.670319, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.67054, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.672205, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.672317, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6724732, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.672588, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6729128, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6730921, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6731899, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.673401, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6736698, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6738849, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.674252, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6745658, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.675327, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.675544, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.675811, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.676055, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.67727, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.677859, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.678078, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6782222, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.679026, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.67921, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6794188, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.679594, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.679877, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.68047, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6835089, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.683767, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.683966, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6843789, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.684618, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.684785, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.68497, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6852381, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.685458, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.685764, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6859531, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.686118, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.686315, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.686535, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.686808, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.687006, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6893592, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6895208, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6899111, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.690121, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6903172, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.690489, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.691623, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.691977, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.69217, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.69252, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.692747, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6933062, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.693551, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6945002, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.6977012, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.698302, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.69935, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.700992, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.70114, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.70191, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.702293, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.702836, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.703302, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7033758, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.703889, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.704122, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.704588, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.70494, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.705363, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.705873, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7063942, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.707056, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7073762, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7077692, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.708951, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.710133, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.711083, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7123148, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.713085, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.713443, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.714196, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.715059, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7155252, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7159822, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.716622, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.71711, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.717709, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.718107, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.718824, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.719632, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.720253, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.721206, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.721756, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.72208, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7224598, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7227972, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.723435, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.724419, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7254028, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7263, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7282612, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.732138, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7326741, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.73296, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7368698, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.738552, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7388742, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.739056, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.73969, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.740003, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7401972, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7404501, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.740617, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7412019, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7419982, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.742702, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7432609, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.743486, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7438312, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.744202, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.745069, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7454789, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.745842, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.746565, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.747411, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7483442, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.748746, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7489269, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.749425, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7501152, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.750947, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7513542, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.751637, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.752903, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.754336, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7557352, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7572422, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.757535, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.757668, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.761049, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.765067, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7654662, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.765731, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.766737, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7669592, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.767126, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.767309, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.767471, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.767634, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7678, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.768188, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.768428, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.76882, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.76938, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7697432, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7700732, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7736928, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.77408, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7749498, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.775721, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.776254, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.777494, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7789812, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.780152, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7810361, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.781666, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.782458, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.783265, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.783711, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.783904, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.784311, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.784889, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7853482, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.785963, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.786508, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.786648, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7867851, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7869298, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.787458, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.788277, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.789394, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.789695, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.790276, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7910678, "supported_languages": null}, "macro.spark_utils.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7964852, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"name": "get_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.797168, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"name": "get_statistic_columns", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.798008, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"name": "spark_optimize_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.7987041, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"name": "spark_vacuum_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.799393, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"name": "spark_analyze_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.80034, "supported_languages": null}, "macro.spark_utils.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "unique_id": "macro.spark_utils.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.800524, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"name": "spark__type_numeric", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "unique_id": "macro.spark_utils.spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.800641, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "unique_id": "macro.spark_utils.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.803547, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "unique_id": "macro.spark_utils.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.811162, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.811303, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"name": "spark__current_timestamp_in_utc", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8113768, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "unique_id": "macro.spark_utils.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.811937, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"name": "spark__get_relations_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.813527, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"name": "spark__get_relations_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.813848, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"name": "spark__get_tables_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.814115, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"name": "spark__get_tables_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.81438, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.814692, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"name": "default__assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.814889, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "unique_id": "macro.spark_utils.spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.815088, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.815464, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.816412, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.816575, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.816732, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.816899, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8170428, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.817199, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.81803, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.818654, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8202748, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.820571, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.820837, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.821086, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.821336, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8216162, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.821892, "supported_languages": null}, "macro.fivetran_utils.sqlserver__json_parse": {"name": "sqlserver__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.sqlserver__json_parse", "macro_sql": "{% macro sqlserver__json_parse(string, string_path) %}\n\n  json_value({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.822149, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8225121, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.822628, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.822749, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.822863, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8233862, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8241, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.825185, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.825744, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.826494, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.826962, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.827102, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.827234, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8273652, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.827499, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8308449, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.831111, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.831284, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.831437, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8331149, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.834046, "supported_languages": null}, "macro.fivetran_utils.default__try_cast": {"name": "default__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__try_cast", "macro_sql": "{% macro default__try_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.834181, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.834441, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.834713, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.834839, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.834959, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.835076, "supported_languages": null}, "macro.fivetran_utils.sqlserver__try_cast": {"name": "sqlserver__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.sqlserver__try_cast", "macro_sql": "{% macro sqlserver__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.835197, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8356721, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.836236, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.83675, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.836957, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8371809, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.837439, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.838752, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.84339, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8439748, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.845355, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.847637, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.848213, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.848814, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.848976, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.849131, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.849313, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.849469, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.849625, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.850473, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n\n  {% if dbt_version.split('.') | map('int') | list >= [1, 5, 0]  %}\n    {{ return(load_result('collect_freshness')) }}\n  {% else %}\n    {{ return(load_result('collect_freshness').table) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.851989, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.852791, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8529642, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8531919, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8533812, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8535528, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.853794, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.854066, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.854173, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.854275, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.854939, "supported_languages": null}, "macro.fivetran_utils.fivetran_date_spine": {"name": "fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.fivetran_date_spine", "macro_sql": "{% macro fivetran_date_spine(datepart, start_date, end_date) -%}\n\n{{ return(adapter.dispatch('fivetran_date_spine', 'fivetran_utils') (datepart, start_date, end_date)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__fivetran_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.856368, "supported_languages": null}, "macro.fivetran_utils.default__fivetran_date_spine": {"name": "default__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.default__fivetran_date_spine", "macro_sql": "{% macro default__fivetran_date_spine(datepart, start_date, end_date) %}\n\n    {{ dbt_utils.date_spine(datepart, start_date, end_date) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.856547, "supported_languages": null}, "macro.fivetran_utils.sqlserver__fivetran_date_spine": {"name": "sqlserver__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.sqlserver__fivetran_date_spine", "macro_sql": "{% macro sqlserver__fivetran_date_spine(datepart, start_date, end_date) -%}\n\n    {% set date_spine_query %}\n        with\n\n        l0 as (\n\n            select c\n            from (select 1 union all select 1) as d(c)\n\n        ),\n        l1 as (\n\n            select\n                1 as c\n            from l0 as a\n            cross join l0 as b\n\n        ),\n\n        l2 as (\n\n            select 1 as c\n            from l1 as a\n            cross join l1 as b\n        ),\n\n        l3 as (\n\n            select 1 as c\n            from l2 as a\n            cross join l2 as b\n        ),\n\n        l4 as (\n\n            select 1 as c\n            from l3 as a\n            cross join l3 as b\n        ),\n\n        l5 as (\n\n            select 1 as c\n            from l4 as a\n            cross join l4 as b\n        ),\n\n        nums as (\n\n            select row_number() over (order by (select null)) as rownum\n            from l5\n        ),\n\n        rawdata as (\n\n            select top ({{dbt.datediff(start_date, end_date, datepart)}}) rownum -1 as n\n            from nums\n            order by rownum\n        ),\n\n        all_periods as (\n\n            select (\n                {{\n                    dbt.dateadd(\n                        datepart,\n                        'n',\n                        start_date\n                    )\n                }}\n            ) as date_{{datepart}}\n            from rawdata\n        ),\n\n        filtered as (\n\n            select *\n            from all_periods\n            where date_{{datepart}} <= {{ end_date }}\n\n        )\n\n        select * from filtered\n        order by 1\n\n    {% endset %}\n\n    {% set results = run_query(date_spine_query) %}\n\n    {% if execute %}\n\n        {% set results_list = results.columns[0].values() %}\n    \n    {% else %}\n\n        {% set results_list = [] %}\n\n    {% endif %}\n\n    {%- for date_field in results_list %}\n        select cast('{{ date_field }}' as date) as date_{{datepart}} {{ 'union all ' if not loop.last else '' }}\n    {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.dateadd", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.857383, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.860993, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.865889, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.867305, "supported_languages": null}, "macro.fivetran_utils.extract_url_parameter": {"name": "extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.extract_url_parameter", "macro_sql": "{% macro extract_url_parameter(field, url_parameter) -%}\n\n{{ adapter.dispatch('extract_url_parameter', 'fivetran_utils') (field, url_parameter) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__extract_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.867656, "supported_languages": null}, "macro.fivetran_utils.default__extract_url_parameter": {"name": "default__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.default__extract_url_parameter", "macro_sql": "{% macro default__extract_url_parameter(field, url_parameter) -%}\n\n{{ dbt_utils.get_url_parameter(field, url_parameter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.867815, "supported_languages": null}, "macro.fivetran_utils.spark__extract_url_parameter": {"name": "spark__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.spark__extract_url_parameter", "macro_sql": "{% macro spark__extract_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"=([^&]+)'\" -%}\nnullif(regexp_extract({{ field }}, {{ formatted_url_parameter }}, 1), '')\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8680232, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.postgres__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.868366, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.868478, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.86859, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8686929, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.868793, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.869056, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.869171, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8692741, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.869665, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.870048, "supported_languages": null}, "macro.google_play_source.get_stats_ratings_country_columns": {"name": "get_stats_ratings_country_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_ratings_country_columns.sql", "original_file_path": "macros/get_stats_ratings_country_columns.sql", "unique_id": "macro.google_play_source.get_stats_ratings_country_columns", "macro_sql": "{% macro get_stats_ratings_country_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"daily_average_rating\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_average_rating\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.871058, "supported_languages": null}, "macro.google_play_source.get_stats_ratings_device_columns": {"name": "get_stats_ratings_device_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_ratings_device_columns.sql", "original_file_path": "macros/get_stats_ratings_device_columns.sql", "unique_id": "macro.google_play_source.get_stats_ratings_device_columns", "macro_sql": "{% macro get_stats_ratings_device_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"daily_average_rating\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"device\", \"datatype\": dbt.type_string()},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_average_rating\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.872459, "supported_languages": null}, "macro.google_play_source.get_stats_ratings_app_version_columns": {"name": "get_stats_ratings_app_version_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_ratings_app_version_columns.sql", "original_file_path": "macros/get_stats_ratings_app_version_columns.sql", "unique_id": "macro.google_play_source.get_stats_ratings_app_version_columns", "macro_sql": "{% macro get_stats_ratings_app_version_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"app_version_code\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_average_rating\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_average_rating\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8735669, "supported_languages": null}, "macro.google_play_source.get_stats_installs_device_columns": {"name": "get_stats_installs_device_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_installs_device_columns.sql", "original_file_path": "macros/get_stats_installs_device_columns.sql", "unique_id": "macro.google_play_source.get_stats_installs_device_columns", "macro_sql": "{% macro get_stats_installs_device_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"current_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"current_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_uninstalls\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_upgrades\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_user_uninstalls\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"device\", \"datatype\": dbt.type_string()},\n    {\"name\": \"install_events\", \"datatype\": dbt.type_int()},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"uninstall_events\", \"datatype\": dbt.type_int()},\n    {\"name\": \"update_events\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.875604, "supported_languages": null}, "macro.google_play_source.get_earnings_columns": {"name": "get_earnings_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_earnings_columns.sql", "original_file_path": "macros/get_earnings_columns.sql", "unique_id": "macro.google_play_source.get_earnings_columns", "macro_sql": "{% macro get_earnings_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount_buyer_currency_\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amount_merchant_currency_\", \"datatype\": dbt.type_float()},\n    {\"name\": \"base_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buyer_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buyer_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buyer_postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buyer_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency_conversion_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hardware\", \"datatype\": dbt.type_string()},\n    {\"name\": \"merchant_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"offer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_type\", \"datatype\": dbt.type_int()},\n    {\"name\": \"refund_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sku_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_date\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_time\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.878222, "supported_languages": null}, "macro.google_play_source.get_stats_installs_overview_columns": {"name": "get_stats_installs_overview_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_installs_overview_columns.sql", "original_file_path": "macros/get_stats_installs_overview_columns.sql", "unique_id": "macro.google_play_source.get_stats_installs_overview_columns", "macro_sql": "{% macro get_stats_installs_overview_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"current_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"current_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_uninstalls\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_upgrades\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_user_uninstalls\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"install_events\", \"datatype\": dbt.type_int()},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"uninstall_events\", \"datatype\": dbt.type_int()},\n    {\"name\": \"update_events\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8801851, "supported_languages": null}, "macro.google_play_source.get_stats_installs_app_version_columns": {"name": "get_stats_installs_app_version_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_installs_app_version_columns.sql", "original_file_path": "macros/get_stats_installs_app_version_columns.sql", "unique_id": "macro.google_play_source.get_stats_installs_app_version_columns", "macro_sql": "{% macro get_stats_installs_app_version_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"app_version_code\", \"datatype\": dbt.type_int()},\n    {\"name\": \"current_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"current_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_uninstalls\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_upgrades\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_user_uninstalls\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"install_events\", \"datatype\": dbt.type_int()},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"uninstall_events\", \"datatype\": dbt.type_int()},\n    {\"name\": \"update_events\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.882282, "supported_languages": null}, "macro.google_play_source.get_stats_installs_os_version_columns": {"name": "get_stats_installs_os_version_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_installs_os_version_columns.sql", "original_file_path": "macros/get_stats_installs_os_version_columns.sql", "unique_id": "macro.google_play_source.get_stats_installs_os_version_columns", "macro_sql": "{% macro get_stats_installs_os_version_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"android_os_version\", \"datatype\": dbt.type_string()},\n    {\"name\": \"current_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"current_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_uninstalls\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_upgrades\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_user_uninstalls\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"install_events\", \"datatype\": dbt.type_int()},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"uninstall_events\", \"datatype\": dbt.type_int()},\n    {\"name\": \"update_events\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.884476, "supported_languages": null}, "macro.google_play_source.get_stats_ratings_overview_columns": {"name": "get_stats_ratings_overview_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_ratings_overview_columns.sql", "original_file_path": "macros/get_stats_ratings_overview_columns.sql", "unique_id": "macro.google_play_source.get_stats_ratings_overview_columns", "macro_sql": "{% macro get_stats_ratings_overview_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"daily_average_rating\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_average_rating\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.885555, "supported_languages": null}, "macro.google_play_source.get_stats_installs_country_columns": {"name": "get_stats_installs_country_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_installs_country_columns.sql", "original_file_path": "macros/get_stats_installs_country_columns.sql", "unique_id": "macro.google_play_source.get_stats_installs_country_columns", "macro_sql": "{% macro get_stats_installs_country_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"current_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"current_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_uninstalls\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_device_upgrades\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_user_uninstalls\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"install_events\", \"datatype\": dbt.type_int()},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_user_installs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"uninstall_events\", \"datatype\": dbt.type_int()},\n    {\"name\": \"update_events\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.887653, "supported_languages": null}, "macro.google_play_source.get_stats_crashes_os_version_columns": {"name": "get_stats_crashes_os_version_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_crashes_os_version_columns.sql", "original_file_path": "macros/get_stats_crashes_os_version_columns.sql", "unique_id": "macro.google_play_source.get_stats_crashes_os_version_columns", "macro_sql": "{% macro get_stats_crashes_os_version_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"android_os_version\", \"datatype\": dbt.type_string()},\n    {\"name\": \"daily_anrs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_crashes\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.888723, "supported_languages": null}, "macro.google_play_source.get_stats_store_performance_country_columns": {"name": "get_stats_store_performance_country_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_store_performance_country_columns.sql", "original_file_path": "macros/get_stats_store_performance_country_columns.sql", "unique_id": "macro.google_play_source.get_stats_store_performance_country_columns", "macro_sql": "{% macro get_stats_store_performance_country_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"country_region\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"store_listing_acquisitions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"store_listing_conversion_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"store_listing_visitors\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8899, "supported_languages": null}, "macro.google_play_source.get_stats_ratings_os_version_columns": {"name": "get_stats_ratings_os_version_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_ratings_os_version_columns.sql", "original_file_path": "macros/get_stats_ratings_os_version_columns.sql", "unique_id": "macro.google_play_source.get_stats_ratings_os_version_columns", "macro_sql": "{% macro get_stats_ratings_os_version_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"android_os_version\", \"datatype\": dbt.type_string()},\n    {\"name\": \"daily_average_rating\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_average_rating\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.890971, "supported_languages": null}, "macro.google_play_source.get_stats_crashes_overview_columns": {"name": "get_stats_crashes_overview_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_crashes_overview_columns.sql", "original_file_path": "macros/get_stats_crashes_overview_columns.sql", "unique_id": "macro.google_play_source.get_stats_crashes_overview_columns", "macro_sql": "{% macro get_stats_crashes_overview_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"daily_anrs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_crashes\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8919392, "supported_languages": null}, "macro.google_play_source.get_stats_store_performance_traffic_source_columns": {"name": "get_stats_store_performance_traffic_source_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_store_performance_traffic_source_columns.sql", "original_file_path": "macros/get_stats_store_performance_traffic_source_columns.sql", "unique_id": "macro.google_play_source.get_stats_store_performance_traffic_source_columns", "macro_sql": "{% macro get_stats_store_performance_traffic_source_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"search_term\", \"datatype\": dbt.type_string()},\n    {\"name\": \"store_listing_acquisitions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"store_listing_conversion_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"store_listing_visitors\", \"datatype\": dbt.type_int()},\n    {\"name\": \"traffic_source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"utm_campaign\", \"datatype\": dbt.type_string()},\n    {\"name\": \"utm_source\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.893535, "supported_languages": null}, "macro.google_play_source.get_financial_stats_subscriptions_country_columns": {"name": "get_financial_stats_subscriptions_country_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_financial_stats_subscriptions_country_columns.sql", "original_file_path": "macros/get_financial_stats_subscriptions_country_columns.sql", "unique_id": "macro.google_play_source.get_financial_stats_subscriptions_country_columns", "macro_sql": "{% macro get_financial_stats_subscriptions_country_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active_subscriptions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"cancelled_subscriptions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"new_subscriptions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.8948538, "supported_languages": null}, "macro.google_play_source.get_stats_crashes_app_version_columns": {"name": "get_stats_crashes_app_version_columns", "resource_type": "macro", "package_name": "google_play_source", "path": "macros/get_stats_crashes_app_version_columns.sql", "original_file_path": "macros/get_stats_crashes_app_version_columns.sql", "unique_id": "macro.google_play_source.get_stats_crashes_app_version_columns", "macro_sql": "{% macro get_stats_crashes_app_version_columns() %}\n\n{% set columns = [\n    {\"name\": \"_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_line\", \"datatype\": dbt.type_int()},\n    {\"name\": \"_modified\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"app_version_code\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_anrs\", \"datatype\": dbt.type_int()},\n    {\"name\": \"daily_crashes\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"package_name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721750694.895942, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.google_play.total_device_installs": {"name": "total_device_installs", "resource_type": "doc", "package_name": "google_play", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play.total_device_installs", "block_contents": "Cumulative number of device installs up to and including this day (aggregated on the dimension of this table). This does not take uninstalls into account and may contain duplicate devices."}, "doc.google_play.total_device_uninstalls": {"name": "total_device_uninstalls", "resource_type": "doc", "package_name": "google_play", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play.total_device_uninstalls", "block_contents": "Cumulative number of device uninstalls up to and including this day (aggregated on the dimension of this table). This does not take re-installs into account and may contain duplicate devices."}, "doc.google_play.net_device_installs": {"name": "net_device_installs", "resource_type": "doc", "package_name": "google_play", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play.net_device_installs", "block_contents": "Cumulative net number of device installs up to and including this day (aggregated on the dimension of this table). This is the difference of `total_device_installs` and `total_device_uninstalls`."}, "doc.google_play.total_store_visitors": {"name": "total_store_visitors", "resource_type": "doc", "package_name": "google_play", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play.total_store_visitors", "block_contents": "Cumulative number of users that visited your store listing who did not have your app installed on any device at the time."}, "doc.google_play.total_store_acquisitions": {"name": "total_store_acquisitions", "resource_type": "doc", "package_name": "google_play", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play.total_store_acquisitions", "block_contents": "Cumulative number of users that visited your store listing and installed your app, who did not have your app installed on any device prior to this."}, "doc.google_play.rolling_store_conversion_rate": {"name": "rolling_store_conversion_rate", "resource_type": "doc", "package_name": "google_play", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play.rolling_store_conversion_rate", "block_contents": "Rolling percentage of store listing visitors who installed your app within a given country. The ratio of `total_store_acquisitions` to `total_store_visitors`."}, "doc.google_play.source_relation": {"name": "source_relation", "resource_type": "doc", "package_name": "google_play", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play.source_relation", "block_contents": "The source of the record if the unioning functionality is being used. If not this field will be empty."}, "doc.google_play_source._fivetran_synced": {"name": "_fivetran_synced", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source._fivetran_synced", "block_contents": "Timestamp of when Fivetran synced a record."}, "doc.google_play_source._file": {"name": "_file", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source._file", "block_contents": "The title of the monthly report csv from google."}, "doc.google_play_source._line": {"name": "_line", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source._line", "block_contents": "Line of the monthly csv report that this record was read from."}, "doc.google_play_source._modified": {"name": "_modified", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source._modified", "block_contents": "Timestamp of when the line was read from the monthly earnings report csv."}, "doc.google_play_source.date": {"name": "date", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.date", "block_contents": "The date on which the data is reported."}, "doc.google_play_source.package_name": {"name": "package_name", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.package_name", "block_contents": "The package name of the app owning the report data."}, "doc.google_play_source.daily_anrs": {"name": "daily_anrs", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.daily_anrs", "block_contents": "Daily application not responding (ANR) reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data."}, "doc.google_play_source.daily_crashes": {"name": "daily_crashes", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.daily_crashes", "block_contents": "Daily crash reports collected from Android devices whose users have opted in to automatically share usage and diagnostics data."}, "doc.google_play_source.active_device_installs": {"name": "active_device_installs", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.active_device_installs", "block_contents": "The number of active devices on which your app is installed. An active device is one that has been turned on at least once in the past 30 days."}, "doc.google_play_source.current_device_installs": {"name": "current_device_installs", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.current_device_installs", "block_contents": "Seemingly deprecated column."}, "doc.google_play_source.current_user_installs": {"name": "current_user_installs", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.current_user_installs", "block_contents": "Seemingly deprecated column."}, "doc.google_play_source.daily_device_installs": {"name": "daily_device_installs", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.daily_device_installs", "block_contents": "Devices on which users installed your app on this day. An individual user can have multiple device installs."}, "doc.google_play_source.daily_device_uninstalls": {"name": "daily_device_uninstalls", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.daily_device_uninstalls", "block_contents": "The number of devices from which users uninstalled your app on a given day."}, "doc.google_play_source.daily_device_upgrades": {"name": "daily_device_upgrades", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.daily_device_upgrades", "block_contents": "The number of devices from which users upgraded your app on a given day."}, "doc.google_play_source.daily_user_installs": {"name": "daily_user_installs", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.daily_user_installs", "block_contents": "The number of users who installed your app and did not have it installed on any other devices at the time on a given day."}, "doc.google_play_source.daily_user_uninstalls": {"name": "daily_user_uninstalls", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.daily_user_uninstalls", "block_contents": "The number of users who uninstalled your app from all of their devices on this day."}, "doc.google_play_source.install_events": {"name": "install_events", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.install_events", "block_contents": "The number of times your app was installed, including devices on which the app had been installed previously. This does not include pre-installs or device reactivations."}, "doc.google_play_source.uninstall_events": {"name": "uninstall_events", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.uninstall_events", "block_contents": "The number of times your app was uninstalled. This does not include inactive devices."}, "doc.google_play_source.update_events": {"name": "update_events", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.update_events", "block_contents": "The number of times your app was updated."}, "doc.google_play_source.total_user_installs": {"name": "total_user_installs", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.total_user_installs", "block_contents": "Seemingly deprecated."}, "doc.google_play_source.daily_average_rating": {"name": "daily_average_rating", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.daily_average_rating", "block_contents": "Average star rating this app has received across all ratings submitted on a given day."}, "doc.google_play_source.total_average_rating": {"name": "total_average_rating", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.total_average_rating", "block_contents": "Average star rating this app received across all ratings submitted up to and including the past day. For each user submitting a rating, only their most recent rating of the app is counted."}, "doc.google_play_source.store_listing_acquisitions": {"name": "store_listing_acquisitions", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.store_listing_acquisitions", "block_contents": "The number of users that visited your store listing and installed your app, who did not have your app installed on any device."}, "doc.google_play_source.store_listing_visitors": {"name": "store_listing_visitors", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.store_listing_visitors", "block_contents": "The number of users that visited your store listing who did not have your app installed on any device."}, "doc.google_play_source.store_listing_conversion_rate": {"name": "store_listing_conversion_rate", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.store_listing_conversion_rate", "block_contents": "The percentage of store listing visitors who installed your app on a given day.\n\nNote: Does not include visits or installs from users who already have your app installed on another device"}, "doc.google_play_source.total_active_subscriptions": {"name": "total_active_subscriptions", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.total_active_subscriptions", "block_contents": "The rolling count of active subscriptions of this type in this country."}, "doc.google_play_source.cancelled_subscriptions": {"name": "cancelled_subscriptions", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.cancelled_subscriptions", "block_contents": "The daily count of cancelled subscriptions."}, "doc.google_play_source.new_subscriptions": {"name": "new_subscriptions", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.new_subscriptions", "block_contents": "The daily count of newly purchased subscriptions."}, "doc.google_play_source.traffic_source": {"name": "traffic_source", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.traffic_source", "block_contents": "How the user got to your store listing: Google Play search, Third-party referral, Google Play explore, or Other."}, "doc.google_play_source.country": {"name": "country", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.country", "block_contents": "Two-letter abbreviation of the country where the user\u2019s Google account is registered."}, "doc.google_play_source.country_region": {"name": "country_region", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.country_region", "block_contents": "Two-letter abbreviation of the country or region where the user\u2019s Google account is registered."}, "doc.google_play_source.app_version_code": {"name": "app_version_code", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.app_version_code", "block_contents": "Integer value of the version of the app being reported on."}, "doc.google_play_source.device": {"name": "device", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.device", "block_contents": "Type of device model. May be NULL if users do not consent to being tracked."}, "doc.google_play_source.android_os_version": {"name": "android_os_version", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.android_os_version", "block_contents": "Operation System of the android being used. May be NULL if users do not consent to being tracked."}, "doc.google_play_source.sku_id": {"name": "sku_id", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.sku_id", "block_contents": "Developer-specified unique ID assigned to the ordered product. Subscription order IDs include the renewal cycle number at the end."}, "doc.google_play_source.source_relation": {"name": "source_relation", "resource_type": "doc", "package_name": "google_play_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.google_play_source.source_relation", "block_contents": "The source of the record if the unioning functionality is being used. If not this field will be empty."}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"test.google_play_integration_tests.consistency_finance_report_count": [{"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "consistency_finance_report_count", "resource_type": "test", "package_name": "google_play_integration_tests", "path": "consistency/row_counts/consistency_finance_report_count.sql", "original_file_path": "tests/consistency/row_counts/consistency_finance_report_count.sql", "unique_id": "test.google_play_integration_tests.consistency_finance_report_count", "fqn": ["google_play_integration_tests", "consistency", "row_counts", "consistency_finance_report_count"], "alias": "consistency_finance_report_count", "checksum": {"name": "sha256", "checksum": "ebe860df96f6c4785b9cddae2611e4e70157534a6f32079d515aec7300d56720"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1721750695.309303, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- this test is to make sure the rows counts are the same between versions\nwith prod as (\n    select count(*) as prod_rows\n    from {{ target.schema }}_google_play_prod.google_play__finance_report\n),\n\ndev as (\n    select count(*) as dev_rows\n    from {{ target.schema }}_google_play_dev.google_play__finance_report\n)\n\n-- test will return values and fail if the row counts don't match\nselect *\nfrom prod\njoin dev\n    on prod.prod_rows != dev.dev_rows", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.google_play_integration_tests.consistency_country_report_count": [{"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "consistency_country_report_count", "resource_type": "test", "package_name": "google_play_integration_tests", "path": "consistency/row_counts/consistency_country_report_count.sql", "original_file_path": "tests/consistency/row_counts/consistency_country_report_count.sql", "unique_id": "test.google_play_integration_tests.consistency_country_report_count", "fqn": ["google_play_integration_tests", "consistency", "row_counts", "consistency_country_report_count"], "alias": "consistency_country_report_count", "checksum": {"name": "sha256", "checksum": "e8bf1aad35b18283613ca07a06adaddb566868d2d2cfd8993c40dc10618b7384"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1721750695.325854, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- this test is to make sure the rows counts are the same between versions\nwith prod as (\n    select count(*) as prod_rows\n    from {{ target.schema }}_google_play_prod.google_play__country_report\n),\n\ndev as (\n    select count(*) as dev_rows\n    from {{ target.schema }}_google_play_dev.google_play__country_report\n)\n\n-- test will return values and fail if the row counts don't match\nselect *\nfrom prod\njoin dev\n    on prod.prod_rows != dev.dev_rows", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.google_play_integration_tests.consistency_overview_report_count": [{"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "consistency_overview_report_count", "resource_type": "test", "package_name": "google_play_integration_tests", "path": "consistency/row_counts/consistency_overview_report_count.sql", "original_file_path": "tests/consistency/row_counts/consistency_overview_report_count.sql", "unique_id": "test.google_play_integration_tests.consistency_overview_report_count", "fqn": ["google_play_integration_tests", "consistency", "row_counts", "consistency_overview_report_count"], "alias": "consistency_overview_report_count", "checksum": {"name": "sha256", "checksum": "7ca86d548c6f39d824bd3bac2b5156d156e870e551fd75353dd62b1a6b2d0809"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1721750695.3289988, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- this test is to make sure the rows counts are the same between versions\nwith prod as (\n    select count(*) as prod_rows\n    from {{ target.schema }}_google_play_prod.google_play__overview_report\n),\n\ndev as (\n    select count(*) as dev_rows\n    from {{ target.schema }}_google_play_dev.google_play__overview_report\n)\n\n-- test will return values and fail if the row counts don't match\nselect *\nfrom prod\njoin dev\n    on prod.prod_rows != dev.dev_rows", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.google_play_integration_tests.consistency_os_version_report_count": [{"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "consistency_os_version_report_count", "resource_type": "test", "package_name": "google_play_integration_tests", "path": "consistency/row_counts/consistency_os_version_report_count.sql", "original_file_path": "tests/consistency/row_counts/consistency_os_version_report_count.sql", "unique_id": "test.google_play_integration_tests.consistency_os_version_report_count", "fqn": ["google_play_integration_tests", "consistency", "row_counts", "consistency_os_version_report_count"], "alias": "consistency_os_version_report_count", "checksum": {"name": "sha256", "checksum": "1a25a65ece29da213136ab4cdfd4b9c92a2d93b5352d84e9acc87aa6178ff998"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1721750695.332253, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- this test is to make sure the rows counts are the same between versions\nwith prod as (\n    select count(*) as prod_rows\n    from {{ target.schema }}_google_play_prod.google_play__os_version_report\n),\n\ndev as (\n    select count(*) as dev_rows\n    from {{ target.schema }}_google_play_dev.google_play__os_version_report\n)\n\n-- test will return values and fail if the row counts don't match\nselect *\nfrom prod\njoin dev\n    on prod.prod_rows != dev.dev_rows", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.google_play_integration_tests.consistency_app_version_report_count": [{"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "consistency_app_version_report_count", "resource_type": "test", "package_name": "google_play_integration_tests", "path": "consistency/row_counts/consistency_app_version_report_count.sql", "original_file_path": "tests/consistency/row_counts/consistency_app_version_report_count.sql", "unique_id": "test.google_play_integration_tests.consistency_app_version_report_count", "fqn": ["google_play_integration_tests", "consistency", "row_counts", "consistency_app_version_report_count"], "alias": "consistency_app_version_report_count", "checksum": {"name": "sha256", "checksum": "d77f11e0ba085472c893b4e29b7f0f7a055073eedcaa14c69f9d6067fee86ded"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1721750695.33581, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- this test is to make sure the rows counts are the same between versions\nwith prod as (\n    select count(*) as prod_rows\n    from {{ target.schema }}_google_play_prod.google_play__app_version_report\n),\n\ndev as (\n    select count(*) as dev_rows\n    from {{ target.schema }}_google_play_dev.google_play__app_version_report\n)\n\n-- test will return values and fail if the row counts don't match\nselect *\nfrom prod\njoin dev\n    on prod.prod_rows != dev.dev_rows", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.google_play_integration_tests.consistency_device_report_count": [{"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "consistency_device_report_count", "resource_type": "test", "package_name": "google_play_integration_tests", "path": "consistency/row_counts/consistency_device_report_count.sql", "original_file_path": "tests/consistency/row_counts/consistency_device_report_count.sql", "unique_id": "test.google_play_integration_tests.consistency_device_report_count", "fqn": ["google_play_integration_tests", "consistency", "row_counts", "consistency_device_report_count"], "alias": "consistency_device_report_count", "checksum": {"name": "sha256", "checksum": "e3a003aab75f593c6b56633f0ea292a87ceae723b6741b67ea9a23168e5c54e3"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1721750695.3397892, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- this test is to make sure the rows counts are the same between versions\nwith prod as (\n    select count(*) as prod_rows\n    from {{ target.schema }}_google_play_prod.google_play__device_report_count\n\ndev as (\n    select count(*) as dev_rows\n    from {{ target.schema }}_google_play_dev.google_play__device_report_count\n)\n\n-- test will return values and fail if the row counts don't match\nselect *\nfrom prod\njoin dev\n    on prod.prod_rows != dev.dev_rows", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.google_play_integration_tests.consistency_device_report": [{"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "consistency_device_report", "resource_type": "test", "package_name": "google_play_integration_tests", "path": "consistency/row_comparisons/consistency_device_report.sql", "original_file_path": "tests/consistency/row_comparisons/consistency_device_report.sql", "unique_id": "test.google_play_integration_tests.consistency_device_report", "fqn": ["google_play_integration_tests", "consistency", "row_comparisons", "consistency_device_report"], "alias": "consistency_device_report", "checksum": {"name": "sha256", "checksum": "828ef8b890b9daeb2a568dedfc6d4345e682c68eb01050df961f39f7e3ccc07d"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1721750695.342714, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- this test ensures the daily_activity end model matches the prior version\nwith prod as (\n    select *\n    from {{ target.schema }}_google_play_prod.google_play__device_report\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_google_play_dev.google_play__device_report\n),\n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.google_play_integration_tests.consistency_app_version_report": [{"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "consistency_app_version_report", "resource_type": "test", "package_name": "google_play_integration_tests", "path": "consistency/row_comparisons/consistency_app_version_report.sql", "original_file_path": "tests/consistency/row_comparisons/consistency_app_version_report.sql", "unique_id": "test.google_play_integration_tests.consistency_app_version_report", "fqn": ["google_play_integration_tests", "consistency", "row_comparisons", "consistency_app_version_report"], "alias": "consistency_app_version_report", "checksum": {"name": "sha256", "checksum": "22f4c5b4504305ef6afdf73a30b8906827438b991765d22e16630b16903e6f99"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1721750695.345711, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- this test ensures the daily_activity end model matches the prior version\nwith prod as (\n    select *\n    from {{ target.schema }}_google_play_prod.google_play__app_version_report\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_google_play_dev.google_play__app_version_report\n),\n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.google_play_integration_tests.consistency_overview_report": [{"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "consistency_overview_report", "resource_type": "test", "package_name": "google_play_integration_tests", "path": "consistency/row_comparisons/consistency_overview_report.sql", "original_file_path": "tests/consistency/row_comparisons/consistency_overview_report.sql", "unique_id": "test.google_play_integration_tests.consistency_overview_report", "fqn": ["google_play_integration_tests", "consistency", "row_comparisons", "consistency_overview_report"], "alias": "consistency_overview_report", "checksum": {"name": "sha256", "checksum": "b2343aa58a9a5b6aa4005c57469bebfeb65f6bcfa402530a93094ab64dfb83c9"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1721750695.3488882, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- this test ensures the daily_activity end model matches the prior version\nwith prod as (\n    select *\n    from {{ target.schema }}_google_play_prod.google_play__overview_report\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_google_play_dev.google_play__overview_report\n),\n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.google_play_integration_tests.consistency_finance_report": [{"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "consistency_finance_report", "resource_type": "test", "package_name": "google_play_integration_tests", "path": "consistency/row_comparisons/consistency_finance_report.sql", "original_file_path": "tests/consistency/row_comparisons/consistency_finance_report.sql", "unique_id": "test.google_play_integration_tests.consistency_finance_report", "fqn": ["google_play_integration_tests", "consistency", "row_comparisons", "consistency_finance_report"], "alias": "consistency_finance_report", "checksum": {"name": "sha256", "checksum": "63529b223b4dcf7c96d7cb0bfc1ca6fb11715843513715b78f009baf1574bc37"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1721750695.352215, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- this test ensures the daily_activity end model matches the prior version\nwith prod as (\n    select *\n    from {{ target.schema }}_google_play_prod.google_play__finance_report\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_google_play_dev.google_play__finance_report\n),\n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.google_play_integration_tests.consistency_country_report": [{"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "consistency_country_report", "resource_type": "test", "package_name": "google_play_integration_tests", "path": "consistency/row_comparisons/consistency_country_report.sql", "original_file_path": "tests/consistency/row_comparisons/consistency_country_report.sql", "unique_id": "test.google_play_integration_tests.consistency_country_report", "fqn": ["google_play_integration_tests", "consistency", "row_comparisons", "consistency_country_report"], "alias": "consistency_country_report", "checksum": {"name": "sha256", "checksum": "d35dfa3e07825adec73c2dbad3ff531483e66d704847f17c14b537742c23a15b"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1721750695.355974, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- this test ensures the daily_activity end model matches the prior version\nwith prod as (\n    select *\n    from {{ target.schema }}_google_play_prod.google_play__country_report\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_google_play_dev.google_play__country_report\n),\n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.google_play_integration_tests.consistency_os_version_report": [{"database": "postgres", "schema": "zz_google_play_dbt_test__audit", "name": "consistency_os_version_report", "resource_type": "test", "package_name": "google_play_integration_tests", "path": "consistency/row_comparisons/consistency_os_version_report.sql", "original_file_path": "tests/consistency/row_comparisons/consistency_os_version_report.sql", "unique_id": "test.google_play_integration_tests.consistency_os_version_report", "fqn": ["google_play_integration_tests", "consistency", "row_comparisons", "consistency_os_version_report"], "alias": "consistency_os_version_report", "checksum": {"name": "sha256", "checksum": "72fe77a39d8716c05c356f07385c0f40b7a9eb93e127d45a9e7632f6dc3b2a87"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1721750695.358988, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- this test ensures the daily_activity end model matches the prior version\nwith prod as (\n    select *\n    from {{ target.schema }}_google_play_prod.google_play__subscription_report\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_google_play_dev.google_play__subscription_report\n),\n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}]}, "parent_map": {"seed.google_play_integration_tests.stats_ratings_app_version": [], "seed.google_play_integration_tests.stats_ratings_os_version": [], "seed.google_play_integration_tests.stats_installs_overview": [], "seed.google_play_integration_tests.stats_crashes_app_version": [], "seed.google_play_integration_tests.stats_installs_app_version": [], "seed.google_play_integration_tests.stats_installs_country": [], "seed.google_play_integration_tests.stats_ratings_device": [], "seed.google_play_integration_tests.stats_crashes_os_version": [], "seed.google_play_integration_tests.earnings": [], "seed.google_play_integration_tests.stats_installs_device": [], "seed.google_play_integration_tests.stats_ratings_country": [], "seed.google_play_integration_tests.stats_ratings_overview": [], "seed.google_play_integration_tests.stats_store_performance_country": [], "seed.google_play_integration_tests.stats_store_performance_traffic_source": [], "seed.google_play_integration_tests.financial_stats_subscriptions_country": [], "seed.google_play_integration_tests.stats_crashes_overview": [], "seed.google_play_integration_tests.stats_installs_os_version": [], "model.google_play.google_play__app_version_report": ["model.google_play_source.stg_google_play__stats_crashes_app_version", "model.google_play_source.stg_google_play__stats_installs_app_version", "model.google_play_source.stg_google_play__stats_ratings_app_version"], "model.google_play.google_play__device_report": ["model.google_play_source.stg_google_play__stats_installs_device", "model.google_play_source.stg_google_play__stats_ratings_device"], "model.google_play.google_play__finance_report": ["model.google_play.int_google_play__earnings", "model.google_play.int_google_play__latest_product_info", "model.google_play_source.stg_google_play__subscriptions_country", "seed.google_play_source.google_play__country_codes"], "model.google_play.google_play__country_report": ["model.google_play_source.stg_google_play__stats_installs_country", "model.google_play_source.stg_google_play__stats_ratings_country", "model.google_play_source.stg_google_play__store_performance_country", "seed.google_play_source.google_play__country_codes"], "model.google_play.google_play__os_version_report": ["model.google_play_source.stg_google_play__stats_crashes_os_version", "model.google_play_source.stg_google_play__stats_installs_os_version", "model.google_play_source.stg_google_play__stats_ratings_os_version"], "model.google_play.google_play__overview_report": ["model.google_play.int_google_play__store_performance", "model.google_play_source.stg_google_play__stats_crashes_overview", "model.google_play_source.stg_google_play__stats_installs_overview", "model.google_play_source.stg_google_play__stats_ratings_overview"], "model.google_play.int_google_play__store_performance": ["model.google_play_source.stg_google_play__store_performance_country"], "model.google_play.int_google_play__earnings": ["model.google_play_source.stg_google_play__earnings"], "model.google_play.int_google_play__latest_product_info": ["model.google_play_source.stg_google_play__earnings"], "model.google_play_source.stg_google_play__stats_installs_overview": ["model.google_play_source.stg_google_play__stats_installs_overview_tmp"], "model.google_play_source.stg_google_play__stats_crashes_os_version": ["model.google_play_source.stg_google_play__stats_crashes_os_version_tmp"], "model.google_play_source.stg_google_play__stats_crashes_app_version": ["model.google_play_source.stg_google_play__stats_crashes_app_version_tmp"], "model.google_play_source.stg_google_play__store_performance_source": ["model.google_play_source.stg_google_play__store_performance_source_tmp"], "model.google_play_source.stg_google_play__stats_ratings_country": ["model.google_play_source.stg_google_play__stats_ratings_country_tmp"], "model.google_play_source.stg_google_play__stats_installs_device": ["model.google_play_source.stg_google_play__stats_installs_device_tmp"], "model.google_play_source.stg_google_play__stats_ratings_overview": ["model.google_play_source.stg_google_play__stats_ratings_overview_tmp"], "model.google_play_source.stg_google_play__stats_ratings_app_version": ["model.google_play_source.stg_google_play__stats_ratings_app_version_tmp"], "model.google_play_source.stg_google_play__stats_crashes_overview": ["model.google_play_source.stg_google_play__stats_crashes_overview_tmp"], "model.google_play_source.stg_google_play__earnings": ["model.google_play_source.stg_google_play__earnings_tmp"], "model.google_play_source.stg_google_play__stats_installs_os_version": ["model.google_play_source.stg_google_play__stats_installs_os_version_tmp"], "model.google_play_source.stg_google_play__subscriptions_country": ["model.google_play_source.stg_google_play__subscriptions_country_tmp"], "model.google_play_source.stg_google_play__stats_ratings_os_version": ["model.google_play_source.stg_google_play__stats_ratings_os_version_tmp"], "model.google_play_source.stg_google_play__stats_installs_app_version": ["model.google_play_source.stg_google_play__stats_installs_app_version_tmp"], "model.google_play_source.stg_google_play__stats_ratings_device": ["model.google_play_source.stg_google_play__stats_ratings_device_tmp"], "model.google_play_source.stg_google_play__store_performance_country": ["model.google_play_source.stg_google_play__store_performance_country_tmp"], "model.google_play_source.stg_google_play__stats_installs_country": ["model.google_play_source.stg_google_play__stats_installs_country_tmp"], "model.google_play_source.stg_google_play__stats_installs_country_tmp": ["source.google_play_source.google_play.stats_installs_country"], "model.google_play_source.stg_google_play__stats_ratings_os_version_tmp": ["source.google_play_source.google_play.stats_ratings_os_version"], "model.google_play_source.stg_google_play__earnings_tmp": ["source.google_play_source.google_play.earnings"], "model.google_play_source.stg_google_play__stats_ratings_app_version_tmp": ["source.google_play_source.google_play.stats_ratings_app_version"], "model.google_play_source.stg_google_play__stats_ratings_device_tmp": ["source.google_play_source.google_play.stats_ratings_device"], "model.google_play_source.stg_google_play__stats_crashes_os_version_tmp": ["source.google_play_source.google_play.stats_crashes_os_version"], "model.google_play_source.stg_google_play__stats_ratings_overview_tmp": ["source.google_play_source.google_play.stats_ratings_overview"], "model.google_play_source.stg_google_play__stats_installs_device_tmp": ["source.google_play_source.google_play.stats_installs_device"], "model.google_play_source.stg_google_play__store_performance_source_tmp": ["source.google_play_source.google_play.stats_store_performance_traffic_source"], "model.google_play_source.stg_google_play__store_performance_country_tmp": ["source.google_play_source.google_play.stats_store_performance_country"], "model.google_play_source.stg_google_play__stats_installs_overview_tmp": ["source.google_play_source.google_play.stats_installs_overview"], "model.google_play_source.stg_google_play__stats_installs_os_version_tmp": ["source.google_play_source.google_play.stats_installs_os_version"], "model.google_play_source.stg_google_play__stats_ratings_country_tmp": ["source.google_play_source.google_play.stats_ratings_country"], "model.google_play_source.stg_google_play__stats_crashes_app_version_tmp": ["source.google_play_source.google_play.stats_crashes_app_version"], "model.google_play_source.stg_google_play__stats_crashes_overview_tmp": ["source.google_play_source.google_play.stats_crashes_overview"], "model.google_play_source.stg_google_play__stats_installs_app_version_tmp": ["source.google_play_source.google_play.stats_installs_app_version"], "model.google_play_source.stg_google_play__subscriptions_country_tmp": ["source.google_play_source.google_play.financial_stats_subscriptions_country"], "seed.google_play_source.google_play__country_codes": [], "test.google_play.dbt_utils_unique_combination_of_columns_google_play__device_report_source_relation__package_name__date_day__device.266c6d5429": ["model.google_play.google_play__device_report"], "test.google_play.dbt_utils_unique_combination_of_columns_google_play__country_report_source_relation__package_name__date_day__country_short.1f14b27373": ["model.google_play.google_play__country_report"], "test.google_play.dbt_utils_unique_combination_of_columns_google_play__finance_report_source_relation__sku_id__country_short__date_day.0609b46134": ["model.google_play.google_play__finance_report"], "test.google_play.dbt_utils_unique_combination_of_columns_google_play__app_version_report_source_relation__package_name__date_day__app_version_code.7abbf03304": ["model.google_play.google_play__app_version_report"], "test.google_play.dbt_utils_unique_combination_of_columns_google_play__os_version_report_source_relation__package_name__date_day__android_os_version.8520366a30": ["model.google_play.google_play__os_version_report"], "test.google_play.dbt_utils_unique_combination_of_columns_google_play__overview_report_source_relation__package_name__date_day.00e17d5062": ["model.google_play.google_play__overview_report"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_app_version_source_relation__package_name__date_day__app_version_code.827301f79d": ["model.google_play_source.stg_google_play__stats_installs_app_version"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_app_version_source_relation__package_name__date_day__app_version_code.16488408eb": ["model.google_play_source.stg_google_play__stats_crashes_app_version"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_app_version_source_relation__package_name__date_day__app_version_code.bcbc07a5b6": ["model.google_play_source.stg_google_play__stats_ratings_app_version"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_device_source_relation__package_name__date_day__device.e59a1803ff": ["model.google_play_source.stg_google_play__stats_installs_device"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_device_source_relation__package_name__date_day__device.856ffd1245": ["model.google_play_source.stg_google_play__stats_ratings_device"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_os_version_source_relation__package_name__date_day__android_os_version.b30d0583ac": ["model.google_play_source.stg_google_play__stats_installs_os_version"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_os_version_source_relation__package_name__date_day__android_os_version.e42db18deb": ["model.google_play_source.stg_google_play__stats_ratings_os_version"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_os_version_source_relation__package_name__date_day__android_os_version.a6241d4e33": ["model.google_play_source.stg_google_play__stats_crashes_os_version"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_country_source_relation__package_name__date_day__country.78328bbca0": ["model.google_play_source.stg_google_play__stats_installs_country"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_country_source_relation__package_name__date_day__country.5c4427c5b6": ["model.google_play_source.stg_google_play__stats_ratings_country"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__store_performance_country_source_relation__package_name__date_day__country_region.b285211a0d": ["model.google_play_source.stg_google_play__store_performance_country"], "test.google_play_source.unique_stg_google_play__store_performance_source_traffic_source_unique_key.c42051d73b": ["model.google_play_source.stg_google_play__store_performance_source"], "test.google_play_source.not_null_stg_google_play__store_performance_source_traffic_source_unique_key.f2423ab9a8": ["model.google_play_source.stg_google_play__store_performance_source"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_overview_source_relation__package_name__date_day.5fe2d4c377": ["model.google_play_source.stg_google_play__stats_installs_overview"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_overview_source_relation__package_name__date_day.15c14bf5fb": ["model.google_play_source.stg_google_play__stats_crashes_overview"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_overview_source_relation__package_name__date_day.d0ee2b4dd6": ["model.google_play_source.stg_google_play__stats_ratings_overview"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__earnings_source_relation__order_id__transaction_type__tax_type__amount_buyer_currency.cbb0102898": ["model.google_play_source.stg_google_play__earnings"], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__subscriptions_country_source_relation__package_name__date_day__country__product_id.7023b963b3": ["model.google_play_source.stg_google_play__subscriptions_country"], "source.google_play_source.google_play.stats_installs_app_version": [], "source.google_play_source.google_play.stats_crashes_app_version": [], "source.google_play_source.google_play.stats_ratings_app_version": [], "source.google_play_source.google_play.stats_installs_device": [], "source.google_play_source.google_play.stats_ratings_device": [], "source.google_play_source.google_play.stats_installs_os_version": [], "source.google_play_source.google_play.stats_ratings_os_version": [], "source.google_play_source.google_play.stats_crashes_os_version": [], "source.google_play_source.google_play.stats_installs_country": [], "source.google_play_source.google_play.stats_ratings_country": [], "source.google_play_source.google_play.stats_store_performance_country": [], "source.google_play_source.google_play.stats_store_performance_traffic_source": [], "source.google_play_source.google_play.stats_installs_overview": [], "source.google_play_source.google_play.stats_crashes_overview": [], "source.google_play_source.google_play.stats_ratings_overview": [], "source.google_play_source.google_play.earnings": [], "source.google_play_source.google_play.financial_stats_subscriptions_country": []}, "child_map": {"seed.google_play_integration_tests.stats_ratings_app_version": [], "seed.google_play_integration_tests.stats_ratings_os_version": [], "seed.google_play_integration_tests.stats_installs_overview": [], "seed.google_play_integration_tests.stats_crashes_app_version": [], "seed.google_play_integration_tests.stats_installs_app_version": [], "seed.google_play_integration_tests.stats_installs_country": [], "seed.google_play_integration_tests.stats_ratings_device": [], "seed.google_play_integration_tests.stats_crashes_os_version": [], "seed.google_play_integration_tests.earnings": [], "seed.google_play_integration_tests.stats_installs_device": [], "seed.google_play_integration_tests.stats_ratings_country": [], "seed.google_play_integration_tests.stats_ratings_overview": [], "seed.google_play_integration_tests.stats_store_performance_country": [], "seed.google_play_integration_tests.stats_store_performance_traffic_source": [], "seed.google_play_integration_tests.financial_stats_subscriptions_country": [], "seed.google_play_integration_tests.stats_crashes_overview": [], "seed.google_play_integration_tests.stats_installs_os_version": [], "model.google_play.google_play__app_version_report": ["test.google_play.dbt_utils_unique_combination_of_columns_google_play__app_version_report_source_relation__package_name__date_day__app_version_code.7abbf03304"], "model.google_play.google_play__device_report": ["test.google_play.dbt_utils_unique_combination_of_columns_google_play__device_report_source_relation__package_name__date_day__device.266c6d5429"], "model.google_play.google_play__finance_report": ["test.google_play.dbt_utils_unique_combination_of_columns_google_play__finance_report_source_relation__sku_id__country_short__date_day.0609b46134"], "model.google_play.google_play__country_report": ["test.google_play.dbt_utils_unique_combination_of_columns_google_play__country_report_source_relation__package_name__date_day__country_short.1f14b27373"], "model.google_play.google_play__os_version_report": ["test.google_play.dbt_utils_unique_combination_of_columns_google_play__os_version_report_source_relation__package_name__date_day__android_os_version.8520366a30"], "model.google_play.google_play__overview_report": ["test.google_play.dbt_utils_unique_combination_of_columns_google_play__overview_report_source_relation__package_name__date_day.00e17d5062"], "model.google_play.int_google_play__store_performance": ["model.google_play.google_play__overview_report"], "model.google_play.int_google_play__earnings": ["model.google_play.google_play__finance_report"], "model.google_play.int_google_play__latest_product_info": ["model.google_play.google_play__finance_report"], "model.google_play_source.stg_google_play__stats_installs_overview": ["model.google_play.google_play__overview_report", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_overview_source_relation__package_name__date_day.5fe2d4c377"], "model.google_play_source.stg_google_play__stats_crashes_os_version": ["model.google_play.google_play__os_version_report", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_os_version_source_relation__package_name__date_day__android_os_version.a6241d4e33"], "model.google_play_source.stg_google_play__stats_crashes_app_version": ["model.google_play.google_play__app_version_report", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_app_version_source_relation__package_name__date_day__app_version_code.16488408eb"], "model.google_play_source.stg_google_play__store_performance_source": ["test.google_play_source.not_null_stg_google_play__store_performance_source_traffic_source_unique_key.f2423ab9a8", "test.google_play_source.unique_stg_google_play__store_performance_source_traffic_source_unique_key.c42051d73b"], "model.google_play_source.stg_google_play__stats_ratings_country": ["model.google_play.google_play__country_report", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_country_source_relation__package_name__date_day__country.5c4427c5b6"], "model.google_play_source.stg_google_play__stats_installs_device": ["model.google_play.google_play__device_report", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_device_source_relation__package_name__date_day__device.e59a1803ff"], "model.google_play_source.stg_google_play__stats_ratings_overview": ["model.google_play.google_play__overview_report", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_overview_source_relation__package_name__date_day.d0ee2b4dd6"], "model.google_play_source.stg_google_play__stats_ratings_app_version": ["model.google_play.google_play__app_version_report", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_app_version_source_relation__package_name__date_day__app_version_code.bcbc07a5b6"], "model.google_play_source.stg_google_play__stats_crashes_overview": ["model.google_play.google_play__overview_report", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_overview_source_relation__package_name__date_day.15c14bf5fb"], "model.google_play_source.stg_google_play__earnings": ["model.google_play.int_google_play__earnings", "model.google_play.int_google_play__latest_product_info", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__earnings_source_relation__order_id__transaction_type__tax_type__amount_buyer_currency.cbb0102898"], "model.google_play_source.stg_google_play__stats_installs_os_version": ["model.google_play.google_play__os_version_report", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_os_version_source_relation__package_name__date_day__android_os_version.b30d0583ac"], "model.google_play_source.stg_google_play__subscriptions_country": ["model.google_play.google_play__finance_report", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__subscriptions_country_source_relation__package_name__date_day__country__product_id.7023b963b3"], "model.google_play_source.stg_google_play__stats_ratings_os_version": ["model.google_play.google_play__os_version_report", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_os_version_source_relation__package_name__date_day__android_os_version.e42db18deb"], "model.google_play_source.stg_google_play__stats_installs_app_version": ["model.google_play.google_play__app_version_report", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_app_version_source_relation__package_name__date_day__app_version_code.827301f79d"], "model.google_play_source.stg_google_play__stats_ratings_device": ["model.google_play.google_play__device_report", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_device_source_relation__package_name__date_day__device.856ffd1245"], "model.google_play_source.stg_google_play__store_performance_country": ["model.google_play.google_play__country_report", "model.google_play.int_google_play__store_performance", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__store_performance_country_source_relation__package_name__date_day__country_region.b285211a0d"], "model.google_play_source.stg_google_play__stats_installs_country": ["model.google_play.google_play__country_report", "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_country_source_relation__package_name__date_day__country.78328bbca0"], "model.google_play_source.stg_google_play__stats_installs_country_tmp": ["model.google_play_source.stg_google_play__stats_installs_country"], "model.google_play_source.stg_google_play__stats_ratings_os_version_tmp": ["model.google_play_source.stg_google_play__stats_ratings_os_version"], "model.google_play_source.stg_google_play__earnings_tmp": ["model.google_play_source.stg_google_play__earnings"], "model.google_play_source.stg_google_play__stats_ratings_app_version_tmp": ["model.google_play_source.stg_google_play__stats_ratings_app_version"], "model.google_play_source.stg_google_play__stats_ratings_device_tmp": ["model.google_play_source.stg_google_play__stats_ratings_device"], "model.google_play_source.stg_google_play__stats_crashes_os_version_tmp": ["model.google_play_source.stg_google_play__stats_crashes_os_version"], "model.google_play_source.stg_google_play__stats_ratings_overview_tmp": ["model.google_play_source.stg_google_play__stats_ratings_overview"], "model.google_play_source.stg_google_play__stats_installs_device_tmp": ["model.google_play_source.stg_google_play__stats_installs_device"], "model.google_play_source.stg_google_play__store_performance_source_tmp": ["model.google_play_source.stg_google_play__store_performance_source"], "model.google_play_source.stg_google_play__store_performance_country_tmp": ["model.google_play_source.stg_google_play__store_performance_country"], "model.google_play_source.stg_google_play__stats_installs_overview_tmp": ["model.google_play_source.stg_google_play__stats_installs_overview"], "model.google_play_source.stg_google_play__stats_installs_os_version_tmp": ["model.google_play_source.stg_google_play__stats_installs_os_version"], "model.google_play_source.stg_google_play__stats_ratings_country_tmp": ["model.google_play_source.stg_google_play__stats_ratings_country"], "model.google_play_source.stg_google_play__stats_crashes_app_version_tmp": ["model.google_play_source.stg_google_play__stats_crashes_app_version"], "model.google_play_source.stg_google_play__stats_crashes_overview_tmp": ["model.google_play_source.stg_google_play__stats_crashes_overview"], "model.google_play_source.stg_google_play__stats_installs_app_version_tmp": ["model.google_play_source.stg_google_play__stats_installs_app_version"], "model.google_play_source.stg_google_play__subscriptions_country_tmp": ["model.google_play_source.stg_google_play__subscriptions_country"], "seed.google_play_source.google_play__country_codes": ["model.google_play.google_play__country_report", "model.google_play.google_play__finance_report"], "test.google_play.dbt_utils_unique_combination_of_columns_google_play__device_report_source_relation__package_name__date_day__device.266c6d5429": [], "test.google_play.dbt_utils_unique_combination_of_columns_google_play__country_report_source_relation__package_name__date_day__country_short.1f14b27373": [], "test.google_play.dbt_utils_unique_combination_of_columns_google_play__finance_report_source_relation__sku_id__country_short__date_day.0609b46134": [], "test.google_play.dbt_utils_unique_combination_of_columns_google_play__app_version_report_source_relation__package_name__date_day__app_version_code.7abbf03304": [], "test.google_play.dbt_utils_unique_combination_of_columns_google_play__os_version_report_source_relation__package_name__date_day__android_os_version.8520366a30": [], "test.google_play.dbt_utils_unique_combination_of_columns_google_play__overview_report_source_relation__package_name__date_day.00e17d5062": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_app_version_source_relation__package_name__date_day__app_version_code.827301f79d": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_app_version_source_relation__package_name__date_day__app_version_code.16488408eb": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_app_version_source_relation__package_name__date_day__app_version_code.bcbc07a5b6": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_device_source_relation__package_name__date_day__device.e59a1803ff": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_device_source_relation__package_name__date_day__device.856ffd1245": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_os_version_source_relation__package_name__date_day__android_os_version.b30d0583ac": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_os_version_source_relation__package_name__date_day__android_os_version.e42db18deb": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_os_version_source_relation__package_name__date_day__android_os_version.a6241d4e33": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_country_source_relation__package_name__date_day__country.78328bbca0": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_country_source_relation__package_name__date_day__country.5c4427c5b6": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__store_performance_country_source_relation__package_name__date_day__country_region.b285211a0d": [], "test.google_play_source.unique_stg_google_play__store_performance_source_traffic_source_unique_key.c42051d73b": [], "test.google_play_source.not_null_stg_google_play__store_performance_source_traffic_source_unique_key.f2423ab9a8": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_overview_source_relation__package_name__date_day.5fe2d4c377": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_overview_source_relation__package_name__date_day.15c14bf5fb": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_overview_source_relation__package_name__date_day.d0ee2b4dd6": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__earnings_source_relation__order_id__transaction_type__tax_type__amount_buyer_currency.cbb0102898": [], "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__subscriptions_country_source_relation__package_name__date_day__country__product_id.7023b963b3": [], "source.google_play_source.google_play.stats_installs_app_version": ["model.google_play_source.stg_google_play__stats_installs_app_version_tmp"], "source.google_play_source.google_play.stats_crashes_app_version": ["model.google_play_source.stg_google_play__stats_crashes_app_version_tmp"], "source.google_play_source.google_play.stats_ratings_app_version": ["model.google_play_source.stg_google_play__stats_ratings_app_version_tmp"], "source.google_play_source.google_play.stats_installs_device": ["model.google_play_source.stg_google_play__stats_installs_device_tmp"], "source.google_play_source.google_play.stats_ratings_device": ["model.google_play_source.stg_google_play__stats_ratings_device_tmp"], "source.google_play_source.google_play.stats_installs_os_version": ["model.google_play_source.stg_google_play__stats_installs_os_version_tmp"], "source.google_play_source.google_play.stats_ratings_os_version": ["model.google_play_source.stg_google_play__stats_ratings_os_version_tmp"], "source.google_play_source.google_play.stats_crashes_os_version": ["model.google_play_source.stg_google_play__stats_crashes_os_version_tmp"], "source.google_play_source.google_play.stats_installs_country": ["model.google_play_source.stg_google_play__stats_installs_country_tmp"], "source.google_play_source.google_play.stats_ratings_country": ["model.google_play_source.stg_google_play__stats_ratings_country_tmp"], "source.google_play_source.google_play.stats_store_performance_country": ["model.google_play_source.stg_google_play__store_performance_country_tmp"], "source.google_play_source.google_play.stats_store_performance_traffic_source": ["model.google_play_source.stg_google_play__store_performance_source_tmp"], "source.google_play_source.google_play.stats_installs_overview": ["model.google_play_source.stg_google_play__stats_installs_overview_tmp"], "source.google_play_source.google_play.stats_crashes_overview": ["model.google_play_source.stg_google_play__stats_crashes_overview_tmp"], "source.google_play_source.google_play.stats_ratings_overview": ["model.google_play_source.stg_google_play__stats_ratings_overview_tmp"], "source.google_play_source.google_play.earnings": ["model.google_play_source.stg_google_play__earnings_tmp"], "source.google_play_source.google_play.financial_stats_subscriptions_country": ["model.google_play_source.stg_google_play__subscriptions_country_tmp"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}