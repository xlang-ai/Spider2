{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.3", "generated_at": "2024-07-23T16:05:28.406724Z", "invocation_id": "bd58a6f5-da87-4544-a502-4605d7bbb612", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.599659Z", "completed_at": "2024-07-23T16:05:24.642319Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.648504Z", "completed_at": "2024-07-23T16:05:24.648513Z"}], "thread_id": "Thread-1", "execution_time": 0.05354118347167969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__earnings_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"earnings\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__earnings_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.625492Z", "completed_at": "2024-07-23T16:05:24.647982Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.649410Z", "completed_at": "2024-07-23T16:05:24.649417Z"}], "thread_id": "Thread-2", "execution_time": 0.05320596694946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_app_version_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_crashes_app_version\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.632521Z", "completed_at": "2024-07-23T16:05:24.649117Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.651232Z", "completed_at": "2024-07-23T16:05:24.651235Z"}], "thread_id": "Thread-4", "execution_time": 0.053260087966918945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_overview_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_crashes_overview\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.635308Z", "completed_at": "2024-07-23T16:05:24.649867Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.652108Z", "completed_at": "2024-07-23T16:05:24.652114Z"}], "thread_id": "Thread-5", "execution_time": 0.05377006530761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_app_version_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_app_version\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.629198Z", "completed_at": "2024-07-23T16:05:24.650078Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.652627Z", "completed_at": "2024-07-23T16:05:24.652631Z"}], "thread_id": "Thread-3", "execution_time": 0.0550081729888916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_os_version_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_crashes_os_version\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.638671Z", "completed_at": "2024-07-23T16:05:24.650277Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.653014Z", "completed_at": "2024-07-23T16:05:24.653017Z"}], "thread_id": "Thread-6", "execution_time": 0.05406999588012695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_country_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_country\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.645112Z", "completed_at": "2024-07-23T16:05:24.650792Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.653648Z", "completed_at": "2024-07-23T16:05:24.653651Z"}], "thread_id": "Thread-8", "execution_time": 0.035539865493774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_os_version_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_os_version\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.642562Z", "completed_at": "2024-07-23T16:05:24.650986Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.654002Z", "completed_at": "2024-07-23T16:05:24.654008Z"}], "thread_id": "Thread-7", "execution_time": 0.054718017578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_device_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_device\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.657934Z", "completed_at": "2024-07-23T16:05:24.672538Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.684695Z", "completed_at": "2024-07-23T16:05:24.684702Z"}], "thread_id": "Thread-1", "execution_time": 0.0313878059387207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_overview_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_overview\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.661794Z", "completed_at": "2024-07-23T16:05:24.681636Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.685396Z", "completed_at": "2024-07-23T16:05:24.685400Z"}], "thread_id": "Thread-2", "execution_time": 0.03078603744506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_app_version_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_app_version\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.669628Z", "completed_at": "2024-07-23T16:05:24.685822Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.687643Z", "completed_at": "2024-07-23T16:05:24.687647Z"}], "thread_id": "Thread-5", "execution_time": 0.03052210807800293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_device_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_device\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.666028Z", "completed_at": "2024-07-23T16:05:24.686062Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.688029Z", "completed_at": "2024-07-23T16:05:24.688032Z"}], "thread_id": "Thread-4", "execution_time": 0.03137516975402832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_country_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_country\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.675718Z", "completed_at": "2024-07-23T16:05:24.686296Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.689502Z", "completed_at": "2024-07-23T16:05:24.689506Z"}], "thread_id": "Thread-6", "execution_time": 0.03186607360839844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_overview_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_overview\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.678346Z", "completed_at": "2024-07-23T16:05:24.686486Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.689878Z", "completed_at": "2024-07-23T16:05:24.689882Z"}], "thread_id": "Thread-8", "execution_time": 0.028876781463623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__store_performance_country_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_store_performance_country\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.672822Z", "completed_at": "2024-07-23T16:05:24.686702Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.690240Z", "completed_at": "2024-07-23T16:05:24.690243Z"}], "thread_id": "Thread-3", "execution_time": 0.03282618522644043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_os_version_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_os_version\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.681886Z", "completed_at": "2024-07-23T16:05:24.689288Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.691675Z", "completed_at": "2024-07-23T16:05:24.691678Z"}], "thread_id": "Thread-7", "execution_time": 0.030410051345825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__store_performance_source_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_store_performance_traffic_source\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_source_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.698467Z", "completed_at": "2024-07-23T16:05:24.699791Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.701357Z", "completed_at": "2024-07-23T16:05:24.701363Z"}], "thread_id": "Thread-2", "execution_time": 0.010582685470581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.earnings", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.701750Z", "completed_at": "2024-07-23T16:05:24.702970Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.710781Z", "completed_at": "2024-07-23T16:05:24.710786Z"}], "thread_id": "Thread-5", "execution_time": 0.017612934112548828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.financial_stats_subscriptions_country", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.703211Z", "completed_at": "2024-07-23T16:05:24.704458Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.711286Z", "completed_at": "2024-07-23T16:05:24.711290Z"}], "thread_id": "Thread-4", "execution_time": 0.017757177352905273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_crashes_app_version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.704997Z", "completed_at": "2024-07-23T16:05:24.706342Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.713308Z", "completed_at": "2024-07-23T16:05:24.713314Z"}], "thread_id": "Thread-6", "execution_time": 0.019216060638427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_crashes_os_version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.694939Z", "completed_at": "2024-07-23T16:05:24.706578Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.713777Z", "completed_at": "2024-07-23T16:05:24.713782Z"}], "thread_id": "Thread-1", "execution_time": 0.02325916290283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__subscriptions_country_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"financial_stats_subscriptions_country\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__subscriptions_country_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.706812Z", "completed_at": "2024-07-23T16:05:24.708823Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.714190Z", "completed_at": "2024-07-23T16:05:24.714199Z"}], "thread_id": "Thread-8", "execution_time": 0.019794940948486328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_crashes_overview", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.709063Z", "completed_at": "2024-07-23T16:05:24.710261Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.714588Z", "completed_at": "2024-07-23T16:05:24.714592Z"}], "thread_id": "Thread-3", "execution_time": 0.019944190979003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_installs_app_version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.711682Z", "completed_at": "2024-07-23T16:05:24.713007Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.715679Z", "completed_at": "2024-07-23T16:05:24.715682Z"}], "thread_id": "Thread-7", "execution_time": 0.015233039855957031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_installs_country", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.718744Z", "completed_at": "2024-07-23T16:05:24.720149Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.721965Z", "completed_at": "2024-07-23T16:05:24.721973Z"}], "thread_id": "Thread-2", "execution_time": 0.00709080696105957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_installs_device", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.722364Z", "completed_at": "2024-07-23T16:05:24.723704Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.731705Z", "completed_at": "2024-07-23T16:05:24.731711Z"}], "thread_id": "Thread-5", "execution_time": 0.01456308364868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_installs_os_version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.723959Z", "completed_at": "2024-07-23T16:05:24.725086Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.732121Z", "completed_at": "2024-07-23T16:05:24.732124Z"}], "thread_id": "Thread-4", "execution_time": 0.014722108840942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_installs_overview", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.725484Z", "completed_at": "2024-07-23T16:05:24.727366Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.733730Z", "completed_at": "2024-07-23T16:05:24.733733Z"}], "thread_id": "Thread-6", "execution_time": 0.015892982482910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_ratings_app_version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.727573Z", "completed_at": "2024-07-23T16:05:24.728672Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.734054Z", "completed_at": "2024-07-23T16:05:24.734056Z"}], "thread_id": "Thread-1", "execution_time": 0.015991926193237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_ratings_country", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.728872Z", "completed_at": "2024-07-23T16:05:24.729978Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.734366Z", "completed_at": "2024-07-23T16:05:24.734368Z"}], "thread_id": "Thread-8", "execution_time": 0.01609206199645996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_ratings_device", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.730180Z", "completed_at": "2024-07-23T16:05:24.731267Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.734759Z", "completed_at": "2024-07-23T16:05:24.734770Z"}], "thread_id": "Thread-3", "execution_time": 0.016376972198486328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_ratings_os_version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.732445Z", "completed_at": "2024-07-23T16:05:24.733538Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.736301Z", "completed_at": "2024-07-23T16:05:24.736306Z"}], "thread_id": "Thread-7", "execution_time": 0.015571117401123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_ratings_overview", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.739729Z", "completed_at": "2024-07-23T16:05:24.741968Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.743573Z", "completed_at": "2024-07-23T16:05:24.743580Z"}], "thread_id": "Thread-2", "execution_time": 0.008244037628173828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_store_performance_country", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.743938Z", "completed_at": "2024-07-23T16:05:24.745210Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.774809Z", "completed_at": "2024-07-23T16:05:24.774816Z"}], "thread_id": "Thread-5", "execution_time": 0.03697681427001953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_store_performance_traffic_source", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.745477Z", "completed_at": "2024-07-23T16:05:24.746642Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:24.775403Z", "completed_at": "2024-07-23T16:05:24.775408Z"}], "thread_id": "Thread-4", "execution_time": 0.0372462272644043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_source.google_play__country_codes", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.747044Z", "completed_at": "2024-07-23T16:05:25.562950Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:25.563189Z", "completed_at": "2024-07-23T16:05:25.563193Z"}], "thread_id": "Thread-6", "execution_time": 0.8871700763702393, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__earnings", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__earnings_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    amount_buyer_currency_\n    \n as \n    \n    amount_buyer_currency_\n    \n, \n    \n    \n    amount_merchant_currency_\n    \n as \n    \n    amount_merchant_currency_\n    \n, \n    \n    \n    base_plan_id\n    \n as \n    \n    base_plan_id\n    \n, \n    \n    \n    buyer_country\n    \n as \n    \n    buyer_country\n    \n, \n    \n    \n    buyer_currency\n    \n as \n    \n    buyer_currency\n    \n, \n    \n    \n    buyer_postal_code\n    \n as \n    \n    buyer_postal_code\n    \n, \n    \n    \n    buyer_state\n    \n as \n    \n    buyer_state\n    \n, \n    \n    \n    currency_conversion_rate\n    \n as \n    \n    currency_conversion_rate\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    hardware\n    \n as \n    \n    hardware\n    \n, \n    \n    \n    merchant_currency\n    \n as \n    \n    merchant_currency\n    \n, \n    \n    \n    offer_id\n    \n as \n    \n    offer_id\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_title\n    \n as \n    \n    product_title\n    \n, \n    \n    \n    product_type\n    \n as \n    \n    product_type\n    \n, \n    \n    \n    refund_type\n    \n as \n    \n    refund_type\n    \n, \n    \n    \n    sku_id\n    \n as \n    \n    sku_id\n    \n, \n    \n    \n    tax_type\n    \n as \n    \n    tax_type\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_time\n    \n as \n    \n    transaction_time\n    \n, \n    \n    \n    transaction_type\n    \n as \n    \n    transaction_type\n    \n\n\n\n        \n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation, \n        cast(amount_buyer_currency_ as numeric(28,6)) as amount_buyer_currency,\n        cast(amount_merchant_currency_ as numeric(28,6)) as amount_merchant_currency,\n        base_plan_id,\n        cast(buyer_country as TEXT) as buyer_country,\n        buyer_currency,\n        buyer_postal_code,\n        buyer_state,\n        currency_conversion_rate,\n        description as order_id,\n        hardware as buyer_hardware,\n        merchant_currency,\n        offer_id,\n        product_id as package_name,\n        product_title,\n        product_type,\n        refund_type,\n        cast(sku_id as TEXT) as sku_id,\n        tax_type,\n\n        -- dates are stored like 'Apr 1, 2022' -> gotta convert these to YYYY-MM-DD\n        -- times are like '1:23:45 AM PDT'\n        \n        cast(transaction_date as date) as transaction_date,\n        cast(cast(transaction_date as date) || ' ' || lpad(transaction_time, 15, '0') as timestamp)as transaction_pt_timestamp, -- the data type will be timestamp in UTC/no timezone but all timestamps in google play are PDT or PST\n\n        right(transaction_time, 3) as transaction_timezone, -- either PST or PDT\n        coalesce(transaction_type, 'Other') as transaction_type,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__earnings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.764662Z", "completed_at": "2024-07-23T16:05:25.562362Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:25.562654Z", "completed_at": "2024-07-23T16:05:25.562664Z"}], "thread_id": "Thread-8", "execution_time": 0.8872690200805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_overview", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    daily_anrs\n    \n as \n    \n    daily_anrs\n    \n, \n    \n    \n    daily_crashes\n    \n as \n    \n    daily_crashes\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        cast(daily_anrs as bigint) as anrs,\n        cast(daily_crashes as bigint) as crashes,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.823862Z", "completed_at": "2024-07-23T16:05:25.674173Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:25.674547Z", "completed_at": "2024-07-23T16:05:25.674555Z"}], "thread_id": "Thread-5", "execution_time": 1.0352799892425537, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_os_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    android_os_version\n    \n as \n    \n    android_os_version\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        cast(android_os_version as TEXT) as android_os_version,\n        sum(cast(active_device_installs as bigint)) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as bigint)) as device_installs,\n        sum(cast(daily_device_uninstalls as bigint)) as device_uninstalls,\n        sum(cast(daily_device_upgrades as bigint)) as device_upgrades,\n        sum(cast(daily_user_installs as bigint)) as user_installs,\n        sum(cast(daily_user_uninstalls as bigint)) as user_uninstalls,\n        sum(cast(install_events as bigint)) as install_events,\n        sum(cast(uninstall_events as bigint)) as uninstall_events,\n        sum(cast(update_events as bigint)) as update_events\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.817293Z", "completed_at": "2024-07-23T16:05:25.673476Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:25.673808Z", "completed_at": "2024-07-23T16:05:25.673816Z"}], "thread_id": "Thread-2", "execution_time": 1.051750898361206, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_country", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(country as TEXT) as country,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(active_device_installs as bigint)) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as bigint)) as device_installs,\n        sum(cast(daily_device_uninstalls as bigint)) as device_uninstalls,\n        sum(cast(daily_device_upgrades as bigint)) as device_upgrades,\n        sum(cast(daily_user_installs as bigint)) as user_installs,\n        sum(cast(daily_user_uninstalls as bigint)) as user_uninstalls,\n        sum(cast(install_events as bigint)) as install_events,\n        sum(cast(uninstall_events as bigint)) as uninstall_events,\n        sum(cast(update_events as bigint)) as update_events\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.768841Z", "completed_at": "2024-07-23T16:05:25.866337Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:25.868076Z", "completed_at": "2024-07-23T16:05:25.868079Z"}], "thread_id": "Thread-3", "execution_time": 1.2846059799194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_app_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    app_version_code\n    \n as \n    \n    app_version_code\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(app_version_code as integer) as app_version_code,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(active_device_installs as bigint)) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as bigint)) as device_installs,\n        sum(cast(daily_device_uninstalls as bigint)) as device_uninstalls,\n        sum(cast(daily_device_upgrades as bigint)) as device_upgrades,\n        sum(cast(daily_user_installs as bigint)) as user_installs,\n        sum(cast(daily_user_uninstalls as bigint)) as user_uninstalls,\n        sum(cast(install_events as bigint)) as install_events,\n        sum(cast(uninstall_events as bigint)) as uninstall_events,\n        sum(cast(update_events as bigint)) as update_events\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.830456Z", "completed_at": "2024-07-23T16:05:25.867828Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:25.869037Z", "completed_at": "2024-07-23T16:05:25.869040Z"}], "thread_id": "Thread-4", "execution_time": 1.20859694480896, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_device", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    device\n    \n as \n    \n    device\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(device as TEXT) as device, -- device_type\n        cast(package_name as TEXT) as package_name,\n        sum(cast(active_device_installs as bigint)) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as bigint)) as device_installs,\n        sum(cast(daily_device_uninstalls as bigint)) as device_uninstalls,\n        sum(cast(daily_device_upgrades as bigint)) as device_upgrades,\n        sum(cast(daily_user_installs as bigint)) as user_installs,\n        sum(cast(daily_user_uninstalls as bigint)) as user_uninstalls,\n        sum(cast(install_events as bigint)) as install_events,\n        sum(cast(uninstall_events as bigint)) as uninstall_events,\n        sum(cast(update_events as bigint)) as update_events\n    from fields\n    group by 1,2,3,4\n\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.759543Z", "completed_at": "2024-07-23T16:05:25.867253Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:25.868789Z", "completed_at": "2024-07-23T16:05:25.868792Z"}], "thread_id": "Thread-1", "execution_time": 1.287045955657959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_app_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    app_version_code\n    \n as \n    \n    app_version_code\n    \n, \n    \n    \n    daily_anrs\n    \n as \n    \n    daily_anrs\n    \n, \n    \n    \n    daily_crashes\n    \n as \n    \n    daily_crashes\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(app_version_code as integer) as app_version_code,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(daily_anrs as bigint)) as anrs,\n        sum(cast(daily_crashes as bigint)) as crashes\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:24.775782Z", "completed_at": "2024-07-23T16:05:25.866086Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:25.867552Z", "completed_at": "2024-07-23T16:05:25.867556Z"}], "thread_id": "Thread-7", "execution_time": 1.2840981483459473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_os_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    android_os_version\n    \n as \n    \n    android_os_version\n    \n, \n    \n    \n    daily_anrs\n    \n as \n    \n    daily_anrs\n    \n, \n    \n    \n    daily_crashes\n    \n as \n    \n    daily_crashes\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(android_os_version as TEXT) as android_os_version,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(daily_anrs as bigint)) as anrs,\n        sum(cast(daily_crashes as bigint)) as crashes\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:25.635534Z", "completed_at": "2024-07-23T16:05:26.548438Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.548955Z", "completed_at": "2024-07-23T16:05:26.548963Z"}], "thread_id": "Thread-8", "execution_time": 0.9952361583709717, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_app_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    app_version_code\n    \n as \n    \n    app_version_code\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(app_version_code as integer) as app_version_code,\n        cast(package_name as TEXT) as package_name,\n        case when app_version_code is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when app_version_code is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:25.629269Z", "completed_at": "2024-07-23T16:05:26.548694Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.549299Z", "completed_at": "2024-07-23T16:05:26.549305Z"}], "thread_id": "Thread-6", "execution_time": 0.9972190856933594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_overview", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        cast(active_device_installs as bigint) as active_devices_last_30_days,\n        cast(daily_device_installs as bigint) as device_installs,\n        cast(daily_device_uninstalls as bigint) as device_uninstalls,\n        cast(daily_device_upgrades as bigint) as device_upgrades,\n        cast(daily_user_installs as bigint) as user_installs,\n        cast(daily_user_uninstalls as bigint) as user_uninstalls,\n        cast(install_events as bigint) as install_events,\n        cast(uninstall_events as bigint) as uninstall_events,\n        cast(update_events as bigint) as update_events,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:25.869290Z", "completed_at": "2024-07-23T16:05:26.715702Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.715992Z", "completed_at": "2024-07-23T16:05:26.716001Z"}], "thread_id": "Thread-5", "execution_time": 0.9035429954528809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_device", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    device\n    \n as \n    \n    device\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(device as TEXT) as device,\n        cast(package_name as TEXT) as package_name,\n        case when device is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when device is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.777199Z", "completed_at": "2024-07-23T16:05:26.802542Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.803065Z", "completed_at": "2024-07-23T16:05:26.803069Z"}], "thread_id": "Thread-5", "execution_time": 0.026712894439697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__earnings_source_relation__order_id__transaction_type__tax_type__amount_buyer_currency.cbb0102898", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, order_id, transaction_type, tax_type, amount_buyer_currency\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__earnings\"\n    group by source_relation, order_id, transaction_type, tax_type, amount_buyer_currency\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.804596Z", "completed_at": "2024-07-23T16:05:26.809321Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.809546Z", "completed_at": "2024-07-23T16:05:26.809553Z"}], "thread_id": "Thread-5", "execution_time": 0.0055119991302490234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_overview_source_relation__package_name__date_day.15c14bf5fb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview\"\n    group by source_relation, package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.810630Z", "completed_at": "2024-07-23T16:05:26.814074Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.814294Z", "completed_at": "2024-07-23T16:05:26.814301Z"}], "thread_id": "Thread-5", "execution_time": 0.004166841506958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_os_version_source_relation__package_name__date_day__android_os_version.b30d0583ac", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, android_os_version\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version\"\n    group by source_relation, package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.046525Z", "completed_at": "2024-07-23T16:05:26.759489Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.759748Z", "completed_at": "2024-07-23T16:05:26.759754Z"}], "thread_id": "Thread-1", "execution_time": 0.790132999420166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_os_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    android_os_version\n    \n as \n    \n    android_os_version\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(android_os_version as TEXT) as android_os_version,\n        cast(package_name as TEXT) as package_name,\n        case when android_os_version is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when android_os_version is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:25.875655Z", "completed_at": "2024-07-23T16:05:26.739101Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.739422Z", "completed_at": "2024-07-23T16:05:26.739430Z"}], "thread_id": "Thread-2", "execution_time": 0.9522597789764404, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_country", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(country as TEXT) as country,\n        cast(package_name as TEXT) as package_name,\n        case when country is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when country is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.815575Z", "completed_at": "2024-07-23T16:05:26.821756Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.822571Z", "completed_at": "2024-07-23T16:05:26.822576Z"}], "thread_id": "Thread-5", "execution_time": 0.007666110992431641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_country_source_relation__package_name__date_day__country.78328bbca0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, country\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country\"\n    group by source_relation, package_name, date_day, country\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.822995Z", "completed_at": "2024-07-23T16:05:26.831412Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.835520Z", "completed_at": "2024-07-23T16:05:26.835530Z"}], "thread_id": "Thread-1", "execution_time": 0.014458179473876953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_app_version_source_relation__package_name__date_day__app_version_code.827301f79d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, app_version_code\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version\"\n    group by source_relation, package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.827119Z", "completed_at": "2024-07-23T16:05:26.836431Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.836949Z", "completed_at": "2024-07-23T16:05:26.836953Z"}], "thread_id": "Thread-2", "execution_time": 0.014711141586303711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_device_source_relation__package_name__date_day__device.e59a1803ff", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, device\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device\"\n    group by source_relation, package_name, date_day, device\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.831642Z", "completed_at": "2024-07-23T16:05:26.837617Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.841124Z", "completed_at": "2024-07-23T16:05:26.841133Z"}], "thread_id": "Thread-5", "execution_time": 0.010447978973388672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_app_version_source_relation__package_name__date_day__app_version_code.16488408eb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, app_version_code\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version\"\n    group by source_relation, package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.838095Z", "completed_at": "2024-07-23T16:05:26.855282Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.860704Z", "completed_at": "2024-07-23T16:05:26.860718Z"}], "thread_id": "Thread-1", "execution_time": 0.024173736572265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_os_version_source_relation__package_name__date_day__android_os_version.a6241d4e33", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, android_os_version\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version\"\n    group by source_relation, package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.855979Z", "completed_at": "2024-07-23T16:05:26.866224Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.866696Z", "completed_at": "2024-07-23T16:05:26.866700Z"}], "thread_id": "Thread-2", "execution_time": 0.024946212768554688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__app_version_report", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version\"\n), \n\ncrashes as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version\"\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\napp_version_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, crashes.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.app_version_code, ratings.app_version_code, crashes.app_version_code) as app_version_code,\n        coalesce(install_metrics.package_name, ratings.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple events in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- choosing an arbitrary negative integer as we can't coalesce with a string like 'null_version_code'. null app version codes will cause fanout\n        and coalesce(install_metrics.app_version_code, -5) = coalesce(ratings.app_version_code, -5) -- this really doesn't happen IRL but let's be safe\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day) = crashes.date_day\n        and coalesce(install_metrics.source_relation, ratings.source_relation) = crashes.source_relation\n        and coalesce(install_metrics.package_name, ratings.package_name) = crashes.package_name\n        and coalesce(install_metrics.app_version_code, ratings.app_version_code, -5) = coalesce(crashes.app_version_code, -5)\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, app_version_code, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, app_version_code, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, app_version_code, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition\n    from app_version_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        app_version_code,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        app_version_code,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__app_version_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.862141Z", "completed_at": "2024-07-23T16:05:26.871338Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.871931Z", "completed_at": "2024-07-23T16:05:26.871936Z"}], "thread_id": "Thread-5", "execution_time": 0.016448974609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_app_version_source_relation__package_name__date_day__app_version_code.bcbc07a5b6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, app_version_code\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version\"\n    group by source_relation, package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.867095Z", "completed_at": "2024-07-23T16:05:26.911910Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.916936Z", "completed_at": "2024-07-23T16:05:26.916943Z"}], "thread_id": "Thread-1", "execution_time": 0.05130171775817871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_overview_source_relation__package_name__date_day.5fe2d4c377", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview\"\n    group by source_relation, package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.872951Z", "completed_at": "2024-07-23T16:05:26.921580Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.922137Z", "completed_at": "2024-07-23T16:05:26.922145Z"}], "thread_id": "Thread-2", "execution_time": 0.05057692527770996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__device_report", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device\"\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\ndevice_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day) as date_day,\n        coalesce(install_metrics.device, ratings.device) as device, -- device type\n        coalesce(install_metrics.package_name, ratings.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null device types otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.device, 'null_device') = coalesce(ratings.device, 'null_device') -- in the source package we aggregate all null device-type records together into one batch per day\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, device, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, device, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, device, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition\n    from device_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        device,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, device, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        device,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__device_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.918013Z", "completed_at": "2024-07-23T16:05:26.928167Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.928862Z", "completed_at": "2024-07-23T16:05:26.928868Z"}], "thread_id": "Thread-5", "execution_time": 0.01235818862915039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_device_source_relation__package_name__date_day__device.856ffd1245", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, device\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device\"\n    group by source_relation, package_name, date_day, device\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.922543Z", "completed_at": "2024-07-23T16:05:26.929865Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.933730Z", "completed_at": "2024-07-23T16:05:26.933742Z"}], "thread_id": "Thread-1", "execution_time": 0.012701272964477539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__os_version_report", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version\"\n), \n\ncrashes as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version\"\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\napp_version_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, crashes.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.android_os_version, ratings.android_os_version, crashes.android_os_version) as android_os_version,\n        coalesce(install_metrics.package_name, ratings.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple events in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null os versions otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.android_os_version, 'null_os_version') = coalesce(ratings.android_os_version, 'null_os_version') -- in the source package we aggregate all null device-type records together into one batch per day\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day) = crashes.date_day\n        and coalesce(install_metrics.source_relation, ratings.source_relation) = crashes.source_relation\n        and coalesce(install_metrics.package_name, ratings.package_name) = crashes.package_name\n        -- coalesce null countries otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.android_os_version, ratings.android_os_version, 'null_os_version') = coalesce(crashes.android_os_version, 'null_os_version') -- in the source package we aggregate all null device-type records together into one batch per day\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, android_os_version, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, android_os_version, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, android_os_version, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition\n    from app_version_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        android_os_version,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        android_os_version,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__os_version_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.930080Z", "completed_at": "2024-07-23T16:05:26.939937Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.943827Z", "completed_at": "2024-07-23T16:05:26.943834Z"}], "thread_id": "Thread-2", "execution_time": 0.01538705825805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_os_version_source_relation__package_name__date_day__android_os_version.e42db18deb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, android_os_version\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version\"\n    group by source_relation, package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.030927Z", "completed_at": "2024-07-23T16:05:26.801760Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.802150Z", "completed_at": "2024-07-23T16:05:26.802163Z"}], "thread_id": "Thread-3", "execution_time": 0.9168729782104492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_overview", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) as average_rating,\n        total_average_rating as rolling_total_average_rating,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.053538Z", "completed_at": "2024-07-23T16:05:26.861897Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.865994Z", "completed_at": "2024-07-23T16:05:26.866000Z"}], "thread_id": "Thread-7", "execution_time": 0.9147529602050781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__store_performance_source", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_source_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    search_term\n    \n as \n    \n    search_term\n    \n, \n    \n    \n    store_listing_acquisitions\n    \n as \n    \n    store_listing_acquisitions\n    \n, \n    \n    \n    store_listing_conversion_rate\n    \n as \n    \n    store_listing_conversion_rate\n    \n, \n    \n    \n    store_listing_visitors\n    \n as \n    \n    store_listing_visitors\n    \n, \n    \n    \n    traffic_source\n    \n as \n    \n    traffic_source\n    \n, \n    \n    \n    utm_campaign\n    \n as \n    \n    utm_campaign\n    \n, \n    \n    \n    utm_source\n    \n as \n    \n    utm_source\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        traffic_source,\n        search_term,\n        utm_campaign,\n        utm_source,\n        cast(store_listing_acquisitions as bigint) as store_listing_acquisitions,\n        store_listing_conversion_rate,\n        cast(store_listing_visitors as bigint) as store_listing_visitors,\n        -- make a surrogate key as the PK involves quite a few columns\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(package_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(traffic_source as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(search_term as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(utm_campaign as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(utm_source as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as traffic_source_unique_key,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.039106Z", "completed_at": "2024-07-23T16:05:26.802824Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.803537Z", "completed_at": "2024-07-23T16:05:26.803541Z"}], "thread_id": "Thread-4", "execution_time": 0.9165358543395996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__store_performance_country", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    country_region\n    \n as \n    \n    country_region\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    store_listing_acquisitions\n    \n as \n    \n    store_listing_acquisitions\n    \n, \n    \n    \n    store_listing_conversion_rate\n    \n as \n    \n    store_listing_conversion_rate\n    \n, \n    \n    \n    store_listing_visitors\n    \n as \n    \n    store_listing_visitors\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(country_region as TEXT) as country_region,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(store_listing_acquisitions as bigint)) as store_listing_acquisitions,\n        avg(store_listing_conversion_rate) as store_listing_conversion_rate,\n        sum(cast(store_listing_visitors as bigint)) as store_listing_visitors\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.934904Z", "completed_at": "2024-07-23T16:05:26.944356Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.946002Z", "completed_at": "2024-07-23T16:05:26.946006Z"}], "thread_id": "Thread-5", "execution_time": 0.012645721435546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_country_source_relation__package_name__date_day__country.5c4427c5b6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, country\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country\"\n    group by source_relation, package_name, date_day, country\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.940179Z", "completed_at": "2024-07-23T16:05:26.946832Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.948418Z", "completed_at": "2024-07-23T16:05:26.948423Z"}], "thread_id": "Thread-1", "execution_time": 0.010170221328735352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__app_version_report_source_relation__package_name__date_day__app_version_code.7abbf03304", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, app_version_code\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__app_version_report\"\n    group by source_relation, package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.950194Z", "completed_at": "2024-07-23T16:05:26.970778Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.972077Z", "completed_at": "2024-07-23T16:05:26.972087Z"}], "thread_id": "Thread-2", "execution_time": 0.025127887725830078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__device_report_source_relation__package_name__date_day__device.266c6d5429", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, device\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__device_report\"\n    group by source_relation, package_name, date_day, device\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.954119Z", "completed_at": "2024-07-23T16:05:26.971671Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.979014Z", "completed_at": "2024-07-23T16:05:26.979026Z"}], "thread_id": "Thread-3", "execution_time": 0.030964136123657227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__os_version_report_source_relation__package_name__date_day__android_os_version.8520366a30", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, android_os_version\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__os_version_report\"\n    group by source_relation, package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.960557Z", "completed_at": "2024-07-23T16:05:26.972658Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.979953Z", "completed_at": "2024-07-23T16:05:26.979957Z"}], "thread_id": "Thread-4", "execution_time": 0.030766963958740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.not_null_stg_google_play__store_performance_source_traffic_source_unique_key.f2423ab9a8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect traffic_source_unique_key\nfrom \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_source\"\nwhere traffic_source_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.966850Z", "completed_at": "2024-07-23T16:05:26.972888Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.980369Z", "completed_at": "2024-07-23T16:05:26.980374Z"}], "thread_id": "Thread-5", "execution_time": 0.030932903289794922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.unique_stg_google_play__store_performance_source_traffic_source_unique_key.c42051d73b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    traffic_source_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_source\"\nwhere traffic_source_unique_key is not null\ngroup by traffic_source_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.957724Z", "completed_at": "2024-07-23T16:05:26.973127Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.980807Z", "completed_at": "2024-07-23T16:05:26.980810Z"}], "thread_id": "Thread-7", "execution_time": 0.031847238540649414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_overview_source_relation__package_name__date_day.d0ee2b4dd6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview\"\n    group by source_relation, package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.973327Z", "completed_at": "2024-07-23T16:05:26.982236Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.982865Z", "completed_at": "2024-07-23T16:05:26.982869Z"}], "thread_id": "Thread-1", "execution_time": 0.02554178237915039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__country_report", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country\"\n), \n\nstore_performance as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country\"\n), \n\ncountry_codes as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_source\".\"google_play__country_codes\"\n),\n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\nstore_performance_metrics as (\n\n    select\n        *,\n        sum(store_listing_acquisitions) over (partition by source_relation, country_region, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions,\n        sum(store_listing_visitors) over (partition by source_relation, country_region, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from store_performance\n), \n\ncountry_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, store_performance_metrics.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, store_performance_metrics.date_day) as date_day,\n        coalesce(install_metrics.country, ratings.country, store_performance_metrics.country_region) as country,\n        coalesce(install_metrics.package_name, ratings.package_name, store_performance_metrics.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        coalesce(store_performance_metrics.store_listing_acquisitions, 0) as store_listing_acquisitions,\n        coalesce(store_performance_metrics.store_listing_visitors, 0) as store_listing_visitors,\n        store_performance_metrics.store_listing_conversion_rate, -- not coalescing if there aren't any visitors \n        \n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except %'s') are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating,\n        store_performance_metrics.total_store_acquisitions,\n        store_performance_metrics.total_store_visitors\n        \n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null countries otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.country, 'null_country') = coalesce(ratings.country, 'null_country') -- in the source package we aggregate all null country records together into one batch per day\n    full outer join store_performance_metrics\n        on store_performance_metrics.date_day = coalesce(install_metrics.date_day, ratings.date_day)\n        and store_performance_metrics.source_relation = coalesce(install_metrics.source_relation, ratings.source_relation)\n        and store_performance_metrics.package_name = coalesce(install_metrics.package_name, ratings.package_name)\n        and coalesce(store_performance_metrics.country_region, 'null_country') = coalesce(install_metrics.country, ratings.country, 'null_country')\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition, sum(case when total_store_acquisitions is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as total_store_acquisitions_partition, sum(case when total_store_visitors is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as total_store_visitors_partition\n    from country_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        country,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions, \n        store_listing_visitors,\n        store_listing_conversion_rate,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls, first_value( total_store_acquisitions ) over (\n            partition by source_relation, total_store_acquisitions_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions, first_value( total_store_visitors ) over (\n            partition by source_relation, total_store_visitors_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        country as country_short,\n        coalesce(country_codes.alternative_country_name, country_codes.country_name) as country_long,\n        country_codes.region,\n        country_codes.sub_region,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating, \n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n        coalesce(total_store_acquisitions, 0) as total_store_acquisitions,\n        coalesce(total_store_visitors, 0) as total_store_visitors,\n\n        -- calculate percentage and difference rolling metrics\n        round(cast(total_store_acquisitions as numeric(28,6)) / nullif(total_store_visitors, 0), 4) as rolling_store_conversion_rate,\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n    left join country_codes\n        on country_codes.country_code_alpha_2 = fill_values.country\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__country_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.986123Z", "completed_at": "2024-07-23T16:05:26.995280Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.996056Z", "completed_at": "2024-07-23T16:05:26.996061Z"}], "thread_id": "Thread-3", "execution_time": 0.01413726806640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__store_performance_country_source_relation__package_name__date_day__country_region.b285211a0d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, country_region\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country\"\n    group by source_relation, package_name, date_day, country_region\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.990820Z", "completed_at": "2024-07-23T16:05:26.996494Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:26.997136Z", "completed_at": "2024-07-23T16:05:26.997140Z"}], "thread_id": "Thread-4", "execution_time": 0.006963968276977539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__country_report_source_relation__package_name__date_day__country_short.1f14b27373", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, country_short\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__country_report\"\n    group by source_relation, package_name, date_day, country_short\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.998108Z", "completed_at": "2024-07-23T16:05:27.038768Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:27.039042Z", "completed_at": "2024-07-23T16:05:27.039051Z"}], "thread_id": "Thread-7", "execution_time": 0.04161214828491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__overview_report", "compiled": true, "compiled_code": "with  __dbt__cte__int_google_play__store_performance as (\nwith store_performance as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country\"\n), \n\nstore_performance_rollup as (\n\n    select \n        source_relation,\n        date_day,\n        package_name,\n        sum(store_listing_acquisitions) as store_listing_acquisitions,\n        sum(store_listing_visitors) as store_listing_visitors\n    from store_performance\n    group by 1,2,3\n),\n\nstore_performance_metrics as (\n\n    select\n        *,\n        round(store_listing_acquisitions * 1.0 / nullif(store_listing_visitors, 0), 4) as store_listing_conversion_rate,\n        sum(store_listing_acquisitions) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions,\n        sum(store_listing_visitors) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from store_performance_rollup\n)\n\nselect *\nfrom store_performance_metrics\n), installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview\"\n), \n\ncrashes as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview\"\n), \n\nstore_performance as (\n\n    select *\n    from __dbt__cte__int_google_play__store_performance -- country rollup\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\noverview_join as (\n\n    select \n        -- these 3 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, store_performance.source_relation, crashes.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, store_performance.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.package_name, ratings.package_name, store_performance.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        coalesce(store_performance.store_listing_acquisitions, 0) as store_listing_acquisitions,\n        coalesce(store_performance.store_listing_visitors, 0) as store_listing_visitors,\n        store_performance.store_listing_conversion_rate, -- not coalescing if there aren't any visitors \n\n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating. todo: move\n        ratings.rolling_total_average_rating,\n        store_performance.total_store_acquisitions,\n        store_performance.total_store_visitors\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n    full outer join store_performance\n        on store_performance.date_day = coalesce(install_metrics.date_day, ratings.date_day)\n        and store_performance.source_relation = coalesce(install_metrics.source_relation, ratings.source_relation)\n        and store_performance.package_name = coalesce(install_metrics.package_name, ratings.package_name)\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day, store_performance.date_day) = crashes.date_day\n        and coalesce(install_metrics.source_relation, ratings.source_relation, store_performance.source_relation) = crashes.source_relation\n        and coalesce(install_metrics.package_name, ratings.package_name, store_performance.package_name) = crashes.package_name\n),\n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition, sum(case when total_store_acquisitions is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as total_store_acquisitions_partition, sum(case when total_store_visitors is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as total_store_visitors_partition\n    from overview_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls, first_value( total_store_acquisitions ) over (\n            partition by source_relation, total_store_acquisitions_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions, first_value( total_store_visitors ) over (\n            partition by source_relation, total_store_visitors_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating, \n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n        coalesce(total_store_acquisitions, 0) as total_store_acquisitions,\n        coalesce(total_store_visitors, 0) as total_store_visitors,\n\n        -- calculate percentage and difference rolling metrics\n        round( cast(total_store_acquisitions as numeric(28,6)) / nullif(total_store_visitors, 0), 4) as rolling_store_conversion_rate,\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__overview_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:27.040377Z", "completed_at": "2024-07-23T16:05:27.044081Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:27.044304Z", "completed_at": "2024-07-23T16:05:27.044310Z"}], "thread_id": "Thread-5", "execution_time": 0.004472255706787109, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__overview_report_source_relation__package_name__date_day.00e17d5062", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__overview_report\"\n    group by source_relation, package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.636081Z", "completed_at": "2024-07-23T16:05:27.349414Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:27.349980Z", "completed_at": "2024-07-23T16:05:27.349993Z"}], "thread_id": "Thread-6", "execution_time": 0.7707750797271729, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.int_google_play__earnings", "compiled": true, "compiled_code": " \n\nwith earnings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__earnings\"\n), \n\ncalc_net_amounts as (\n\n    select \n        *,\n        sum(amount_merchant_currency) over (partition by source_relation, order_id) as net_order_amount\n    from earnings\n),\n\ndaily_country_metrics as (\n\n-- let's pivot out revenue metrics associated wit each type of transaction type\n\n\n    select \n        source_relation,\n        transaction_date as date_day,\n        buyer_country as country_short, -- rolling up past states/territories\n        sku_id, -- this will be a subscription or in-app product\n        package_name,\n        merchant_currency,\n        sum(net_order_amount) as net_amount,\n        count(distinct order_id) as transactions\n        \n        , sum( case when lower(transaction_type) = 'charge' then amount_merchant_currency else 0 end ) as charge_amount\n        , count( distinct case when lower(transaction_type) = 'charge' then order_id end ) as charge_transactions\n        \n        , sum( case when lower(transaction_type) = 'google fee' then amount_merchant_currency else 0 end ) as google_fee_amount\n        , count( distinct case when lower(transaction_type) = 'google fee' then order_id end ) as google_fee_transactions\n        \n    from calc_net_amounts\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom daily_country_metrics", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"int_google_play__earnings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:26.628521Z", "completed_at": "2024-07-23T16:05:27.442874Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:27.443343Z", "completed_at": "2024-07-23T16:05:27.443357Z"}], "thread_id": "Thread-8", "execution_time": 0.8641250133514404, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__subscriptions_country", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__subscriptions_country_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_subscriptions\n    \n as \n    \n    active_subscriptions\n    \n, \n    \n    \n    cancelled_subscriptions\n    \n as \n    \n    cancelled_subscriptions\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    new_subscriptions\n    \n as \n    \n    new_subscriptions\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(country as TEXT) as country,\n        cast(product_id as TEXT) as product_id,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(active_subscriptions as bigint)) as total_active_subscriptions,\n        sum(cast(cancelled_subscriptions as bigint)) as cancelled_subscriptions,\n        sum(cast(new_subscriptions as bigint)) as new_subscriptions\n    from fields\n    group by 1,2,3,4,5\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__subscriptions_country\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:27.498155Z", "completed_at": "2024-07-23T16:05:27.521038Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:27.521521Z", "completed_at": "2024-07-23T16:05:27.521533Z"}], "thread_id": "Thread-3", "execution_time": 0.028338909149169922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__subscriptions_country_source_relation__package_name__date_day__country__product_id.7023b963b3", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, country, product_id\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__subscriptions_country\"\n    group by source_relation, package_name, date_day, country, product_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:27.505418Z", "completed_at": "2024-07-23T16:05:28.341969Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:28.342302Z", "completed_at": "2024-07-23T16:05:28.342312Z"}], "thread_id": "Thread-1", "execution_time": 0.8954939842224121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__finance_report", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_google_play__latest_product_info as (\n \n\nwith earnings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__earnings\"\n), \n\n-- figure out when the latest transaction involving this product was to find the latest product title used for it\ntransaction_recency as (\n\n    select\n        source_relation,\n        package_name,\n        product_title,\n        sku_id,\n        max(transaction_pt_timestamp) as last_transaction_at\n    from earnings\n    group by 1,2,3,4\n), \n\norder_product_records as (\n\n    select \n        *,\n        row_number() over(partition by source_relation, sku_id order by last_transaction_at desc) as n\n    from transaction_recency\n), \n\nlatest_product_record as (\n\n    select\n        source_relation,\n        package_name,\n        product_title,\n        sku_id\n    from order_product_records\n    where n = 1\n)\n\nselect *\nfrom latest_product_record\n), earnings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"int_google_play__earnings\"\n), \n\ncountry_codes as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_source\".\"google_play__country_codes\"\n),\n\nproduct_info as (\n\n    select *\n    from __dbt__cte__int_google_play__latest_product_info\n\n-- there's honestly quite a bit in here since we only need to do backfilling stuff if there is indeed a full outer join \n), \n\nsubscriptions as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__subscriptions_country\"\n), \n\ndaily_join as (\n\n-- these are dynamically set. perhaps we should extract into a variable in case people's tables get to wide?\n\n\n    select\n        -- these columns are the grain of this model (day + country + package_name + product (sku_id))\n        coalesce(earnings.source_relation, subscriptions.source_relation) as source_relation,\n        coalesce(earnings.date_day, subscriptions.date_day) as date_day,\n        coalesce(earnings.country_short, subscriptions.country) as country_short,\n        coalesce(earnings.package_name, subscriptions.package_name) as package_name,\n        coalesce(earnings.sku_id, subscriptions.product_id) as sku_id,\n        earnings.merchant_currency, -- this will just be null if there aren't transactions on a given day\n\n        coalesce( net_amount, 0) as net_amount,\n            coalesce( transactions, 0) as transactions,\n            coalesce( charge_amount, 0) as charge_amount,\n            coalesce( charge_transactions, 0) as charge_transactions,\n            coalesce( google_fee_amount, 0) as google_fee_amount,\n            coalesce( google_fee_transactions, 0) as google_fee_transactions,\n            coalesce(subscriptions.new_subscriptions, 0) as new_subscriptions,\n        coalesce(subscriptions.cancelled_subscriptions, 0) as cancelled_subscriptions,\n\n        -- this is a rolling metric, so we'll use window functions to backfill instead of coalescing\n        subscriptions.total_active_subscriptions\n    from earnings\n    full outer join subscriptions\n        on earnings.date_day = subscriptions.date_day\n        and earnings.source_relation = subscriptions.source_relation\n        and earnings.package_name = subscriptions.package_name\n        -- coalesce null countries otherwise they'll cause fanout with the full outer join\n        and coalesce(earnings.country_short, 'null_country') = coalesce(subscriptions.country, 'null_country') -- in the source package we aggregate all null country records together into one batch per day\n        and earnings.sku_id = subscriptions.product_id\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create a partition to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select \n        *,\n        sum(case when total_active_subscriptions is null \n                then 0 else 1 end) over (partition by source_relation, country_short, sku_id order by date_day asc rows unbounded preceding) as total_active_subscriptions_partition\n    from daily_join\n), \n\nfill_values as (\n\n    select \n        -- we can include these in earning_transaction_metrics but wanna keep them in this column position\n        source_relation,\n        date_day,\n        country_short,\n        package_name, \n        sku_id,\n        merchant_currency,\n        net_amount,\n            transactions,\n            charge_amount,\n            charge_transactions,\n            google_fee_amount,\n            google_fee_transactions,\n            new_subscriptions,\n        cancelled_subscriptions,\n\n        -- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\n        first_value( total_active_subscriptions ) over (\n            partition by source_relation, total_active_subscriptions_partition, country_short, sku_id order by date_day asc rows between unbounded preceding and current row) as total_active_subscriptions\n    from create_partitions\n), \n\nfinal_values as (\n\n    select \n        source_relation,\n        date_day,\n        country_short,\n        package_name, \n        sku_id,\n        merchant_currency,\n        net_amount,\n            transactions,\n            charge_amount,\n            charge_transactions,\n            google_fee_amount,\n            google_fee_transactions,\n            new_subscriptions,\n        cancelled_subscriptions,\n        \n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_active_subscriptions, 0) as total_active_subscriptions\n    from fill_values\n\n), \n\nadd_product_country_info as (\n\n    select \n        base.*,\n        product_info.product_title,\n        coalesce(country_codes.alternative_country_name, country_codes.country_name) as country_long,\n        country_codes.region,\n        country_codes.sub_region\n    from final_values as base\n    left join product_info \n        on base.package_name = product_info.package_name\n        and base.source_relation = product_info.source_relation\n        and base.sku_id = product_info.sku_id\n    left join country_codes \n        on country_codes.country_code_alpha_2 = base.country_short\n)\n\nselect *\nfrom add_product_country_info", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__finance_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T16:05:28.394545Z", "completed_at": "2024-07-23T16:05:28.402676Z"}, {"name": "execute", "started_at": "2024-07-23T16:05:28.403045Z", "completed_at": "2024-07-23T16:05:28.403057Z"}], "thread_id": "Thread-7", "execution_time": 0.009532928466796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__finance_report_source_relation__sku_id__country_short__date_day.0609b46134", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, sku_id, country_short, date_day\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__finance_report\"\n    group by source_relation, sku_id, country_short, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 6.455928087234497, "args": {"compile": true, "log_level_file": "debug", "show_resource_report": false, "vars": {}, "partial_parse_file_diff": true, "which": "generate", "use_colors": true, "invocation_command": "dbt docs generate", "source_freshness_run_project_hooks": false, "use_colors_file": true, "log_level": "info", "profiles_dir": "/Users/catherinefritz/.dbt", "log_format_file": "debug", "exclude": [], "version_check": true, "empty_catalog": false, "require_resource_names_without_spaces": false, "introspect": true, "printer_width": 80, "send_anonymous_usage_stats": true, "static": false, "write_json": true, "log_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests/logs", "indirect_selection": "eager", "favor_state": false, "macro_debugging": false, "strict_mode": false, "select": [], "partial_parse": true, "enable_legacy_logger": false, "quiet": false, "log_format": "default", "defer": false, "cache_selected_only": false, "log_file_max_bytes": 10485760, "require_explicit_package_overrides_for_builtin_materializations": true, "warn_error_options": {"include": [], "exclude": []}, "static_parser": true, "populate_cache": true, "print": true, "project_dir": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests"}}