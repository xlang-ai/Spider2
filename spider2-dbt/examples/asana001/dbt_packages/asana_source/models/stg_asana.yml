version: 2

models:

  - name: stg_asana__project
    description: Table containing all projects
    columns: 
      - name: project_id
        description: System-generated unique ID of the project
        tests:
          - unique
          - not_null
      - name: is_archived
        description: Boolean representing if the project has been archived in the UI
      - name: created_at
        description: Timestamp of when the project was created
      - name: current_status
        description: The most recent progress status update for the project (free-form string)
      - name: due_date
        description: The date the project is due on, if given
      - name: modified_at
        description: Timestamp of when the project was last modified (doesn't include comments or tasks)
      - name: project_name
        description: The user-facing name of the project
      - name: owner_user_id
        description: Foreign key referencing the USER who owns the project.
      - name: is_public
        description: Boolean that is true if the project is public to all users in the organization
      - name: team_id
        description: Foreign key referencing the TEAM that the project is shared with.
      - name: workspace_id
        description: The ID of the organization's entire Asana workspace. Not relevant unless you're looking at multiple orgs
      - name: notes
        description: Free-form textual notes associated with the project.
 
  - name: stg_asana__project_task
    description: Table of tasks and the project(s) they each belong to. If a project doesn't have a task, it won't be in here (and vice versa)
    columns:
      - name: project_id
        description: Foreign key referencing the ID of the PROJECT
        tests:
          - not_null
      - name: task_id
        description: Foreign key referencing the ID of the TASK
        tests:
          - not_null

  - name: stg_asana__section
    description: Table of all sections within projects. If tasks in a project are not in an explicit user-made section, a default section called "(no section)" is created here
    columns:
      - name: section_id
        description: System-generated unique ID of the section
        tests:
          - unique
          - not_null
      - name: created_at
        description: Timestamp of when the section was created
      - name: section_name
        description: User-facing name of the section.
      - name: project_id
        description: Foreign key referencing the id of the PROJECT the section lives in.

  - name: stg_asana__story
    description: Table containing all stories -- stories are actions taken on tasks
    columns:
      - name: story_id
        description: System generated unique ID of the story/action taken on a task.
        tests:
          - unique
          - not_null
      - name: created_at
        description: Timestamp of when the story occurred.
      - name: created_by_user_id
        description: Foreign key referencing the USER who took the action (sometimes null)
      - name: target_task_id
        description: Foreign key referencing the TASK that the action was taken on.
        tests:
          - not_null
      - name: story_content
        description: Free-form text that is either the content of a comment (event_type=comment) or the description of an action (event_type=system)
      - name: event_type
        description: The origin type of the story - a comment or change to the backend (ie altering a task somehow)

  - name: stg_asana__tag
    description: Table of the custom tags made in the organization
    columns:
      - name: tag_id
        description: System generated unique ID of the tag
        tests:
          - unique
          - not_null
      - name: tag_name
        description: User-facing name of the tag.
      - name: created_at
        description: Timestamp of when the tag was created

  - name: stg_asana__task
    description: Table containing all created tasks
    columns:
      - name: task_id
        description: System generated unique ID of the task
        tests:
          - unique
          - not_null
      - name: assignee_user_id
        description: Foreign key referencing the USER that is currently assigned the task.
      - name: assignee_status
        description: Scheduling status for the assignee that the task is or will eventually be assigned to. This maps to the sections of "My Tasks"
      - name: is_completed
        description: Boolean that is true if the task is currently marked complete.
      - name: completed_at
        description: Timestamp of when the task was marked complete.
      - name: completed_by_user_id
        description: Foreign key referencing the USER who completed the task.
      - name: created_at
        description: Timestamp of when the task was created
      - name: due_date
        description: Date the task is due, if provided.
      - name: modified_at
        description: Timestamp of when the task was last modified
      - name: task_name
        description: User-facing name of the task.
      - name: parent_task_id
        description: Self-referential id of the parent TASK that this is a subtask of.
      - name: start_date
        description: The start date of the task, if a date range is given.
      - name: task_description
        description: Free-form text describing the task, as seen in the UI.
      - name: is_liked
        description: A boolean that's true if the task has been liked.
      - name: number_of_likes
        description: An integer indicating the number of likes on a task.
      - name: workspace_id
        description: ID of the organization's Asana workspace. Irrelevant unless working with multiple companies.
      
  - name: stg_asana__task_follower
    description: Table of tasks with the users that are following them. Tasks without users do not appear here.
    columns:
      - name: task_id
        description: Foreign key referencing the ID of the TASK being followed.
        tests:
          - not_null
      - name: user_id
        description: Foreign key referencing the ID of the USER following the task.
        tests:
          - not_null

  - name: stg_asana__task_section
    description: Table of tasks and the section that they live under. Section-less tasks within projects appear here, but project-less tasks do not
    columns:
      - name: task_id
        description: Foreign key referencing the ID of the TASK
        tests:
          - not_null
      - name: section_id
        description: Foreign key referencing the ID of the SECTION housing the task
        tests:
          - not_null

  - name: stg_asana__task_tag
    description: Table of tasks with the tags attached to them. Tasks without tags (and vice versa) do not appear here.
    columns:
      - name: tag_id
        description: Foreign key referencing the ID of the TAG attached to the task
        tests:
          - not_null
      - name: task_id
        description: Foreign key referencing the ID of the TASK
        tests:
          - not_null

  - name: stg_asana__team
    description: Table of the teams within the organization
    columns:
      - name: team_id
        description: System generated unique ID for each team
        tests:
          - unique
          - not_null
      - name: team_name
        description: User-facing name of the team

  - name: stg_asana__user
    description: Table of all accounts in the organization
    columns:
      - name: user_id
        description: System generated unique ID for each user
        tests:
          - unique
          - not_null
      - name: email
        description: The user's email
      - name: user_name
        description: The name of the user as it appears in the UI