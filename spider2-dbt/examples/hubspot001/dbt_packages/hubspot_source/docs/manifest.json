{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.3", "generated_at": "2024-07-30T19:54:13.267633Z", "invocation_id": "d015584c-39aa-448c-962c-8f2e3c7af3de", "env": {}, "project_name": "hubspot_source_integration_tests", "project_id": "39dd6cabb1b7b5f4dd1b7ea99f6c783e", "user_id": "8929baf0-9bc1-477e-9a57-eb8b0db4da62", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"seed.hubspot_source_integration_tests.contact_list_data_postgres": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "contact_list_data_postgres", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "contact_list_data_postgres.csv", "original_file_path": "seeds/contact_list_data_postgres.csv", "unique_id": "seed.hubspot_source_integration_tests.contact_list_data_postgres", "fqn": ["hubspot_source_integration_tests", "contact_list_data_postgres"], "alias": "contact_list_data", "checksum": {"name": "sha256", "checksum": "fc3a391d2172cd73b304b2de9065a110a826cf937550202954bb179c954fa8c3"}, "config": {"enabled": true, "alias": "contact_list_data", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "alias": "contact_list_data", "enabled": "{{ true if target.type == 'postgres' else false }}"}, "created_at": 1722369226.933176, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"contact_list_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.merged_deal_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "merged_deal_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "merged_deal_data.csv", "original_file_path": "seeds/merged_deal_data.csv", "unique_id": "seed.hubspot_source_integration_tests.merged_deal_data", "fqn": ["hubspot_source_integration_tests", "merged_deal_data"], "alias": "merged_deal_data", "checksum": {"name": "sha256", "checksum": "be973774b1f54ecfa138effa2abd1a98ac1b5976c01179c4612607203035e170"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"deal_id": "bigint", "merged_deal_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"deal_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "merged_deal_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1722369226.940192, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"merged_deal_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.email_event_delivered_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_delivered_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_delivered_data.csv", "original_file_path": "seeds/email_event_delivered_data.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_delivered_data", "fqn": ["hubspot_source_integration_tests", "email_event_delivered_data"], "alias": "email_event_delivered_data", "checksum": {"name": "sha256", "checksum": "17081123e8396f7ffaba509180c463ce9684b973f6703e8b4984bba400f41dd8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.941681, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_delivered_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.ticket_pipeline_stage_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_pipeline_stage_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "ticket_pipeline_stage_data.csv", "original_file_path": "seeds/ticket_pipeline_stage_data.csv", "unique_id": "seed.hubspot_source_integration_tests.ticket_pipeline_stage_data", "fqn": ["hubspot_source_integration_tests", "ticket_pipeline_stage_data"], "alias": "ticket_pipeline_stage_data", "checksum": {"name": "sha256", "checksum": "7e8ec21cb8759a7c141e7589f93a66abd29fcc4859a2d8e832f5b3bba5493341"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.9430919, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_pipeline_stage_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.ticket_contact_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_contact_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "ticket_contact_data.csv", "original_file_path": "seeds/ticket_contact_data.csv", "unique_id": "seed.hubspot_source_integration_tests.ticket_contact_data", "fqn": ["hubspot_source_integration_tests", "ticket_contact_data"], "alias": "ticket_contact_data", "checksum": {"name": "sha256", "checksum": "0ee95e57c2a3a9655933450436ce250fda2f9a1372e886f55fa7030e798693f7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.9446568, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_contact_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.email_event_status_change_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_status_change_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_status_change_data.csv", "original_file_path": "seeds/email_event_status_change_data.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_status_change_data", "fqn": ["hubspot_source_integration_tests", "email_event_status_change_data"], "alias": "email_event_status_change_data", "checksum": {"name": "sha256", "checksum": "85f07144104d2cba5c89dfcbd317aad76021f4d857965f4ed87905741249e493"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.9461231, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_status_change_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.ticket_company_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_company_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "ticket_company_data.csv", "original_file_path": "seeds/ticket_company_data.csv", "unique_id": "seed.hubspot_source_integration_tests.ticket_company_data", "fqn": ["hubspot_source_integration_tests", "ticket_company_data"], "alias": "ticket_company_data", "checksum": {"name": "sha256", "checksum": "862f241f80795c00ee08a4eb02441d069a06f935d5f3304d5e448d02b8a25193"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.9475021, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_company_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.engagement_deal_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_deal_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "engagement_deal_data.csv", "original_file_path": "seeds/engagement_deal_data.csv", "unique_id": "seed.hubspot_source_integration_tests.engagement_deal_data", "fqn": ["hubspot_source_integration_tests", "engagement_deal_data"], "alias": "engagement_deal_data", "checksum": {"name": "sha256", "checksum": "e2fe3498d413b182da8e32c3c1231f237753427475d9feb8c15b03aec3fd67a3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"engagement_id": "bigint", "deal_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"engagement_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "deal_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1722369226.948909, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_deal_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.email_event_sent_data_postgres": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_sent_data_postgres", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_sent_data_postgres.csv", "original_file_path": "seeds/email_event_sent_data_postgres.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_sent_data_postgres", "fqn": ["hubspot_source_integration_tests", "email_event_sent_data_postgres"], "alias": "email_event_sent_data", "checksum": {"name": "sha256", "checksum": "80ffa8bf0d8e99c8986e86b295e3dc1b0846adaee9e5eaf638f7603b92c0aa44"}, "config": {"enabled": true, "alias": "email_event_sent_data", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "alias": "email_event_sent_data", "enabled": "{{ true if target.type == 'postgres' else false }}"}, "created_at": 1722369226.950527, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_sent_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.deal_stage_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "deal_stage_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "deal_stage_data.csv", "original_file_path": "seeds/deal_stage_data.csv", "unique_id": "seed.hubspot_source_integration_tests.deal_stage_data", "fqn": ["hubspot_source_integration_tests", "deal_stage_data"], "alias": "deal_stage_data", "checksum": {"name": "sha256", "checksum": "a9a7d0d3c879402302f014ff34aeba5259c48ada0a2c88e0884a693aa39a2bd6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"deal_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"deal_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1722369226.95198, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"deal_stage_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.email_campaign_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_campaign_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_campaign_data.csv", "original_file_path": "seeds/email_campaign_data.csv", "unique_id": "seed.hubspot_source_integration_tests.email_campaign_data", "fqn": ["hubspot_source_integration_tests", "email_campaign_data"], "alias": "email_campaign_data", "checksum": {"name": "sha256", "checksum": "ee721995ffb55b71eed966753908d37a1f035c990794b76144f05ad343af8550"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint", "content_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "content_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1722369226.953418, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_campaign_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.engagement_call_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_call_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "engagement_call_data.csv", "original_file_path": "seeds/engagement_call_data.csv", "unique_id": "seed.hubspot_source_integration_tests.engagement_call_data", "fqn": ["hubspot_source_integration_tests", "engagement_call_data"], "alias": "engagement_call_data", "checksum": {"name": "sha256", "checksum": "cb6182d3d0902fd0b832c3c15d063ccaf81e2a62ed35e58abfc2d2acc35c6d7d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"engagement_id": "bigint", "_fivetran_synced": "timestamp", "property_hs_createdate": "timestamp", "property_hs_timestamp": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"engagement_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "_fivetran_synced": "timestamp", "property_hs_createdate": "timestamp", "property_hs_timestamp": "timestamp"}}, "created_at": 1722369226.95505, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_call_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.contact_merge_audit_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "contact_merge_audit_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "contact_merge_audit_data.csv", "original_file_path": "seeds/contact_merge_audit_data.csv", "unique_id": "seed.hubspot_source_integration_tests.contact_merge_audit_data", "fqn": ["hubspot_source_integration_tests", "contact_merge_audit_data"], "alias": "contact_merge_audit_data", "checksum": {"name": "sha256", "checksum": "d858928ec48b2c3cdc29bebb52169ea4c8f636ed42d0a535ebe4cbf0af7f89c0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.9564538, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"contact_merge_audit_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.email_event_print_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_print_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_print_data.csv", "original_file_path": "seeds/email_event_print_data.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_print_data", "fqn": ["hubspot_source_integration_tests", "email_event_print_data"], "alias": "email_event_print_data", "checksum": {"name": "sha256", "checksum": "23c6ad69b0a5c8f207c74ffd33c7c103db023646937269ec4116f7c0d87079bd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.957831, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_print_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.property_option_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "property_option_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "property_option_data.csv", "original_file_path": "seeds/property_option_data.csv", "unique_id": "seed.hubspot_source_integration_tests.property_option_data", "fqn": ["hubspot_source_integration_tests", "property_option_data"], "alias": "property_option_data", "checksum": {"name": "sha256", "checksum": "3d2f5a487f7ab99573bafdc4b0b5c32b75512b52da6b26bf54c98bb0fba71d51"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.959198, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"property_option_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.email_event_spam_report_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_spam_report_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_spam_report_data.csv", "original_file_path": "seeds/email_event_spam_report_data.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_spam_report_data", "fqn": ["hubspot_source_integration_tests", "email_event_spam_report_data"], "alias": "email_event_spam_report_data", "checksum": {"name": "sha256", "checksum": "5b3eacc85df91b0a1c4f10e96dbedcf5c5da06e040f9a7e2f2a8cef297b8378d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.960856, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_spam_report_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.ticket_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "ticket_data.csv", "original_file_path": "seeds/ticket_data.csv", "unique_id": "seed.hubspot_source_integration_tests.ticket_data", "fqn": ["hubspot_source_integration_tests", "ticket_data"], "alias": "ticket_data", "checksum": {"name": "sha256", "checksum": "05ba2295207d725b7faa3faad8059ff7b4b08b5bb083a1f00d8b0918bed42337"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.962411, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.ticket_pipeline_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_pipeline_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "ticket_pipeline_data.csv", "original_file_path": "seeds/ticket_pipeline_data.csv", "unique_id": "seed.hubspot_source_integration_tests.ticket_pipeline_data", "fqn": ["hubspot_source_integration_tests", "ticket_pipeline_data"], "alias": "ticket_pipeline_data", "checksum": {"name": "sha256", "checksum": "67bd88d43eb9adda5f099ca5115b4d993b88133e0e608e383cd801610fbd5150"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.9637902, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_pipeline_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.email_event_click_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_click_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_click_data.csv", "original_file_path": "seeds/email_event_click_data.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_click_data", "fqn": ["hubspot_source_integration_tests", "email_event_click_data"], "alias": "email_event_click_data", "checksum": {"name": "sha256", "checksum": "43db504350a17932c8c0c3188984caaa1383a0dca5c2f1e397e6d6c6bd2a7a6f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.96669, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_click_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.email_event_deferred_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_deferred_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_deferred_data.csv", "original_file_path": "seeds/email_event_deferred_data.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_deferred_data", "fqn": ["hubspot_source_integration_tests", "email_event_deferred_data"], "alias": "email_event_deferred_data", "checksum": {"name": "sha256", "checksum": "57fdcaa6af4ab17b6c8abc9dc5202a3251b01648e931df6fa78df7c3602244b5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.968013, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_deferred_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.email_event_open_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_open_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_open_data.csv", "original_file_path": "seeds/email_event_open_data.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_open_data", "fqn": ["hubspot_source_integration_tests", "email_event_open_data"], "alias": "email_event_open_data", "checksum": {"name": "sha256", "checksum": "19849df38ebaf01d9a044ab75123d78072936702357ede19a6c574acc569287b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.969331, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_open_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.company_property_history_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "company_property_history_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "company_property_history_data.csv", "original_file_path": "seeds/company_property_history_data.csv", "unique_id": "seed.hubspot_source_integration_tests.company_property_history_data", "fqn": ["hubspot_source_integration_tests", "company_property_history_data"], "alias": "company_property_history_data", "checksum": {"name": "sha256", "checksum": "108dbe8fa8d5ed874757fb3ad12b228be79094d41570afde67cd0036646b86e9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"company_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"company_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1722369226.970974, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"company_property_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.engagement_email_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_email_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "engagement_email_data.csv", "original_file_path": "seeds/engagement_email_data.csv", "unique_id": "seed.hubspot_source_integration_tests.engagement_email_data", "fqn": ["hubspot_source_integration_tests", "engagement_email_data"], "alias": "engagement_email_data", "checksum": {"name": "sha256", "checksum": "92889176a07fd7ee29f64c41eb254b8bc83102cc4d5f6a5df2786a49c7bf635e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"engagement_id": "bigint", "_fivetran_synced": "timestamp", "property_hs_createdate": "timestamp", "property_hs_timestamp": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"engagement_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "_fivetran_synced": "timestamp", "property_hs_createdate": "timestamp", "property_hs_timestamp": "timestamp"}}, "created_at": 1722369226.972637, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_email_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.deal_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "deal_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "deal_data.csv", "original_file_path": "seeds/deal_data.csv", "unique_id": "seed.hubspot_source_integration_tests.deal_data", "fqn": ["hubspot_source_integration_tests", "deal_data"], "alias": "deal_data", "checksum": {"name": "sha256", "checksum": "483d9845435f528e8330e5e28909a8052ee37e65b9d7d6e696b7979af9aae4f3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"deal_id": "bigint", "owner_id": "bigint", "_fivetran_synced": "timestamp", "property_closedate": "timestamp", "property_createdate": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"deal_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "owner_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "_fivetran_synced": "timestamp", "property_closedate": "timestamp", "property_createdate": "timestamp"}}, "created_at": 1722369226.974122, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"deal_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.engagement_note_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_note_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "engagement_note_data.csv", "original_file_path": "seeds/engagement_note_data.csv", "unique_id": "seed.hubspot_source_integration_tests.engagement_note_data", "fqn": ["hubspot_source_integration_tests", "engagement_note_data"], "alias": "engagement_note_data", "checksum": {"name": "sha256", "checksum": "c9c1d724b0da4e24df833b5749e7e58fd98b7076974c6a69c630f1221bec68e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"engagement_id": "bigint", "_fivetran_synced": "timestamp", "property_hs_createdate": "timestamp", "property_hs_timestamp": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"engagement_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "_fivetran_synced": "timestamp", "property_hs_createdate": "timestamp", "property_hs_timestamp": "timestamp"}}, "created_at": 1722369226.975743, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_note_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.deal_pipeline_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "deal_pipeline_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "deal_pipeline_data.csv", "original_file_path": "seeds/deal_pipeline_data.csv", "unique_id": "seed.hubspot_source_integration_tests.deal_pipeline_data", "fqn": ["hubspot_source_integration_tests", "deal_pipeline_data"], "alias": "deal_pipeline_data", "checksum": {"name": "sha256", "checksum": "a90a7ba0fe018d01b74707df8fedb2d1ec91749c1942e941d5c6a1161e82e040"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"pipeline_id": "varchar(100)"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"pipeline_id": "{{ 'varchar(100)'  if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1722369226.9773738, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"deal_pipeline_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.email_event_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_data.csv", "original_file_path": "seeds/email_event_data.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_data", "fqn": ["hubspot_source_integration_tests", "email_event_data"], "alias": "email_event_data", "checksum": {"name": "sha256", "checksum": "ee10ab2bb6d5fae3915fcd8c903d6295684a4f26d40cd330dde3d44ed2d5712d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "caused_by_created": "timestamp", "created": "timestamp", "obsoleted_by_created": "timestamp", "sent_by_created": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp", "caused_by_created": "timestamp", "created": "timestamp", "obsoleted_by_created": "timestamp", "sent_by_created": "timestamp"}}, "created_at": 1722369226.97892, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.engagement_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "engagement_data.csv", "original_file_path": "seeds/engagement_data.csv", "unique_id": "seed.hubspot_source_integration_tests.engagement_data", "fqn": ["hubspot_source_integration_tests", "engagement_data"], "alias": "engagement_data", "checksum": {"name": "sha256", "checksum": "17be8124a7000b6d6d3c98bf11e6c0ad06585252356721c56986a6b250e1a2d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1722369226.980434, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.owner_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "owner_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "owner_data.csv", "original_file_path": "seeds/owner_data.csv", "unique_id": "seed.hubspot_source_integration_tests.owner_data", "fqn": ["hubspot_source_integration_tests", "owner_data"], "alias": "owner_data", "checksum": {"name": "sha256", "checksum": "091df65d0afd56ce68d6db8367e4ffe22a394deeee5f04520db355c4f34f213f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"owner_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"owner_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1722369226.9835699, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"owner_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.engagement_meeting_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_meeting_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "engagement_meeting_data.csv", "original_file_path": "seeds/engagement_meeting_data.csv", "unique_id": "seed.hubspot_source_integration_tests.engagement_meeting_data", "fqn": ["hubspot_source_integration_tests", "engagement_meeting_data"], "alias": "engagement_meeting_data", "checksum": {"name": "sha256", "checksum": "87dc6217963c671ee6f0e6818ac61c63b6d6b419fc26d1aaf47bae8a7883e63b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"engagement_id": "bigint", "_fivetran_synced": "timestamp", "property_hs_createdate": "timestamp", "property_hs_timestamp": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"engagement_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "_fivetran_synced": "timestamp", "property_hs_createdate": "timestamp", "property_hs_timestamp": "timestamp"}}, "created_at": 1722369226.98501, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_meeting_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.email_event_forward_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_forward_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_forward_data.csv", "original_file_path": "seeds/email_event_forward_data.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_forward_data", "fqn": ["hubspot_source_integration_tests", "email_event_forward_data"], "alias": "email_event_forward_data", "checksum": {"name": "sha256", "checksum": "570f640292d5a4a9cc66561fb33bb49b7246f331f5b7cebf40402f164e97d381"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.9866261, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_forward_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.deal_pipeline_stage_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "deal_pipeline_stage_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "deal_pipeline_stage_data.csv", "original_file_path": "seeds/deal_pipeline_stage_data.csv", "unique_id": "seed.hubspot_source_integration_tests.deal_pipeline_stage_data", "fqn": ["hubspot_source_integration_tests", "deal_pipeline_stage_data"], "alias": "deal_pipeline_stage_data", "checksum": {"name": "sha256", "checksum": "00462538f834d6c4b03110fd42f0cfe889312cef6a56a9bfc672eb4ff9543812"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"stage_id": "varchar(100)"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"stage_id": "{{ 'varchar(100)'  if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1722369226.988074, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"deal_pipeline_stage_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.company_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "company_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "company_data.csv", "original_file_path": "seeds/company_data.csv", "unique_id": "seed.hubspot_source_integration_tests.company_data", "fqn": ["hubspot_source_integration_tests", "company_data"], "alias": "company_data", "checksum": {"name": "sha256", "checksum": "9de76c793062c7d0d18c42f7cc931d4db5acf284123e272aebc5d01a4e4184be"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1722369226.991046, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"company_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.deal_contact_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "deal_contact_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "deal_contact_data.csv", "original_file_path": "seeds/deal_contact_data.csv", "unique_id": "seed.hubspot_source_integration_tests.deal_contact_data", "fqn": ["hubspot_source_integration_tests", "deal_contact_data"], "alias": "deal_contact_data", "checksum": {"name": "sha256", "checksum": "19eecfab68645355e3cab75c24dd5d7ae11a9c9b09c320797879cbb899b48404"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"contact_id": "bigint", "deal_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"contact_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "deal_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1722369226.992689, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"deal_contact_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.contact_list_member_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "contact_list_member_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "contact_list_member_data.csv", "original_file_path": "seeds/contact_list_member_data.csv", "unique_id": "seed.hubspot_source_integration_tests.contact_list_member_data", "fqn": ["hubspot_source_integration_tests", "contact_list_member_data"], "alias": "contact_list_member_data", "checksum": {"name": "sha256", "checksum": "6b99af2cc326b0d01ca9e40c3f65f85dd6ed0e80f875394f6394c8d633cec35c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.994124, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"contact_list_member_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.contact_property_history_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "contact_property_history_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "contact_property_history_data.csv", "original_file_path": "seeds/contact_property_history_data.csv", "unique_id": "seed.hubspot_source_integration_tests.contact_property_history_data", "fqn": ["hubspot_source_integration_tests", "contact_property_history_data"], "alias": "contact_property_history_data", "checksum": {"name": "sha256", "checksum": "375b669b9e58336064f4f8b8bff640803f26032ec69e1efb17d6f89ae9b10293"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.99549, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"contact_property_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.property_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "property_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "property_data.csv", "original_file_path": "seeds/property_data.csv", "unique_id": "seed.hubspot_source_integration_tests.property_data", "fqn": ["hubspot_source_integration_tests", "property_data"], "alias": "property_data", "checksum": {"name": "sha256", "checksum": "3047ea0395efbbfbe631491917c3f974f10bee7403ac19e4140b5d7f2c08e5fe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369226.997278, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"property_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.deal_property_history_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "deal_property_history_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "deal_property_history_data.csv", "original_file_path": "seeds/deal_property_history_data.csv", "unique_id": "seed.hubspot_source_integration_tests.deal_property_history_data", "fqn": ["hubspot_source_integration_tests", "deal_property_history_data"], "alias": "deal_property_history_data", "checksum": {"name": "sha256", "checksum": "7c7bbba47e15e7ad747a5dc77e7ce34ba7a8883c40a956524d07ee9d6e7d7098"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"deal_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"deal_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1722369226.9987352, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"deal_property_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.email_event_bounce_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_bounce_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_bounce_data.csv", "original_file_path": "seeds/email_event_bounce_data.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_bounce_data", "fqn": ["hubspot_source_integration_tests", "email_event_bounce_data"], "alias": "email_event_bounce_data", "checksum": {"name": "sha256", "checksum": "8fd760a7dd303a1d061e42cf27b7ffc07fc8f615807148b6c66f8408a6037b58"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369227.0001569, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_bounce_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.engagement_contact_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_contact_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "engagement_contact_data.csv", "original_file_path": "seeds/engagement_contact_data.csv", "unique_id": "seed.hubspot_source_integration_tests.engagement_contact_data", "fqn": ["hubspot_source_integration_tests", "engagement_contact_data"], "alias": "engagement_contact_data", "checksum": {"name": "sha256", "checksum": "5db9a0b8ba4de8b2fbfc03ecc6f28b11000778525fa91b6fc6a4f9c9150c326a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"engagement_id": "bigint", "contact_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"engagement_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "contact_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1722369227.001548, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_contact_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.ticket_engagement_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_engagement_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "ticket_engagement_data.csv", "original_file_path": "seeds/ticket_engagement_data.csv", "unique_id": "seed.hubspot_source_integration_tests.ticket_engagement_data", "fqn": ["hubspot_source_integration_tests", "ticket_engagement_data"], "alias": "ticket_engagement_data", "checksum": {"name": "sha256", "checksum": "33fd8c0a98772a789e101839fcb2c856e89e025802075376305ffed36c4e59b5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369227.0030441, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_engagement_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.contact_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "contact_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "contact_data.csv", "original_file_path": "seeds/contact_data.csv", "unique_id": "seed.hubspot_source_integration_tests.contact_data", "fqn": ["hubspot_source_integration_tests", "contact_data"], "alias": "contact_data", "checksum": {"name": "sha256", "checksum": "fe4fed8224388cd920ce38ce6dea49d15e483d9225e99084baff6bbfb0fa4a2c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369227.005812, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"contact_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.ticket_deal_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_deal_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "ticket_deal_data.csv", "original_file_path": "seeds/ticket_deal_data.csv", "unique_id": "seed.hubspot_source_integration_tests.ticket_deal_data", "fqn": ["hubspot_source_integration_tests", "ticket_deal_data"], "alias": "ticket_deal_data", "checksum": {"name": "sha256", "checksum": "3028ffec2fb820cf75ca4aae759cb4af012e8b0ec42f4e56b1fe6e01cde48a5a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369227.007357, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_deal_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.deal_company_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "deal_company_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "deal_company_data.csv", "original_file_path": "seeds/deal_company_data.csv", "unique_id": "seed.hubspot_source_integration_tests.deal_company_data", "fqn": ["hubspot_source_integration_tests", "deal_company_data"], "alias": "deal_company_data", "checksum": {"name": "sha256", "checksum": "dac38299fece776f40019854182bd114de8e7b2c391c26c5777d39a295d32d27"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369227.0087318, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"deal_company_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.ticket_property_history_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_property_history_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "ticket_property_history_data.csv", "original_file_path": "seeds/ticket_property_history_data.csv", "unique_id": "seed.hubspot_source_integration_tests.ticket_property_history_data", "fqn": ["hubspot_source_integration_tests", "ticket_property_history_data"], "alias": "ticket_property_history_data", "checksum": {"name": "sha256", "checksum": "55b5d72c1f8abd8a4cd9dd353f9558aa7bc3333a9ae0fef28b4f9099dc92836b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}"}, "created_at": 1722369227.011534, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_property_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.email_event_dropped_data_postgres": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_dropped_data_postgres", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_dropped_data_postgres.csv", "original_file_path": "seeds/email_event_dropped_data_postgres.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_dropped_data_postgres", "fqn": ["hubspot_source_integration_tests", "email_event_dropped_data_postgres"], "alias": "email_event_dropped_data", "checksum": {"name": "sha256", "checksum": "67533a391764bd55035ea642a7a06bdc9e96f155b33942c1fb9616fea2beb1de"}, "config": {"enabled": true, "alias": "email_event_dropped_data", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "alias": "email_event_dropped_data", "enabled": "{{ true if target.type == 'postgres' else false }}"}, "created_at": 1722369227.0130649, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_dropped_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.engagement_task_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_task_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "engagement_task_data.csv", "original_file_path": "seeds/engagement_task_data.csv", "unique_id": "seed.hubspot_source_integration_tests.engagement_task_data", "fqn": ["hubspot_source_integration_tests", "engagement_task_data"], "alias": "engagement_task_data", "checksum": {"name": "sha256", "checksum": "3a8289e23881daaeda15f5d699f9f0096669c3e0185baf17af0a91ad4a1ed21b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"engagement_id": "bigint", "property_hs_object_id": "bigint", "_fivetran_synced": "timestamp", "property_hs_createdate": "timestamp", "property_hs_timestamp": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"engagement_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "property_hs_object_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "_fivetran_synced": "timestamp", "property_hs_createdate": "timestamp", "property_hs_timestamp": "timestamp"}}, "created_at": 1722369227.014511, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_task_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "seed.hubspot_source_integration_tests.engagement_company_data": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_company_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "engagement_company_data.csv", "original_file_path": "seeds/engagement_company_data.csv", "unique_id": "seed.hubspot_source_integration_tests.engagement_company_data", "fqn": ["hubspot_source_integration_tests", "engagement_company_data"], "alias": "engagement_company_data", "checksum": {"name": "sha256", "checksum": "894f15d143ab8c1c5069e89d8b9eee1c58c1de551afeb176a22dde050d8676bb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"engagement_id": "bigint", "company_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"engagement_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "company_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1722369227.0159822, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_company_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}}, "model.hubspot_source.stg_hubspot__engagement_task": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_task", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_task.sql", "original_file_path": "models/stg_hubspot__engagement_task.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_task", "fqn": ["hubspot_source", "stg_hubspot__engagement_task"], "alias": "stg_hubspot__engagement_task", "checksum": {"name": "sha256", "checksum": "06cf3837bb65a8e38080fb7bed733ad822b74e4c095ab9cf92e0421134caf873"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a TASK engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean to mark rows that were deleted in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "The type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "This field marks the task's time of creation and determines where the task sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "This field marks the task's time of occurrence and determines where the task sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner associated with the task. This field determines the user listed as the task creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "The ID of the team associated with the task. This field determines the team listed as the task creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.938102, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_task\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_task_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_task_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_task_tmp')) %}\n        {% set new_cols = remove_duplicate_and_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_task_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_task_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            {{ new_cols }} \n        {% endif %}\n    from base\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_task_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_task_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_task_columns", "macro.hubspot_source.get_macro_columns", "macro.hubspot_source.remove_duplicate_and_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_task_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_task.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_task_tmp\"\n\n), macro as (\n\n    select\n        \n        \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n, \n    \n    \n    type\n    \n as engagement_type , \n    \n    \n    property_hs_createdate\n    \n as created_timestamp , \n    \n    \n    property_hs_timestamp\n    \n as occurred_timestamp , \n    \n    \n    property_hubspot_owner_id\n    \n as owner_id , \n    \n    \n    property_hubspot_team_id\n    \n as team_id \n\n\n         \n            \n        \n        \n        , \"property_hs_task_type\" as task_type\n        \n        \n        \n\n        \n        \n        , \"property_hs_object_id\" as object_id\n        , \"property_hs_engagement_source\" as engagement_source\n\n \n        \n    from base\n)\n\nselect *\nfrom macro", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__property_option": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__property_option", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__property_option.sql", "original_file_path": "models/stg_hubspot__property_option.sql", "unique_id": "model.hubspot_source.stg_hubspot__property_option", "fqn": ["hubspot_source", "stg_hubspot__property_option"], "alias": "stg_hubspot__property_option", "checksum": {"name": "sha256", "checksum": "c2125163d2a975604f706a6cc96bbc749380c5c6e26827b960d67c6f1e351702"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an option for the related property.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_option_label": {"name": "property_option_label", "description": "The label of the option displayed inside the HubSpot app.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_id": {"name": "property_id", "description": "The ID of the related property.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Order of options displayed in Hubspot, starting with the lowest positive integer value. Values of -1 will cause the option to be displayed after any positive values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hidden": {"name": "hidden", "description": "Boolean if the option will be displayed in HubSpot", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_option_value": {"name": "property_option_value", "description": "The internal value of the option.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__property.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.964279, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__property_option\"", "raw_code": "{{ config(enabled=var('hubspot_property_enabled', True)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__property_option_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__property_option_tmp')),\n                staging_columns=get_property_option_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        label as property_option_label,\t\n        property_id,\n        _fivetran_synced,\n        display_order,\n        hidden,\n        value as property_option_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__property_option_tmp", "package": null, "version": null}, {"name": "stg_hubspot__property_option_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_property_option_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__property_option_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__property_option.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__property_option_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    label\n    \n as \n    \n    label\n    \n, \n    \n    \n    property_id\n    \n as \n    \n    property_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    display_order\n    \n as \n    \n    display_order\n    \n, \n    \n    \n    hidden\n    \n as \n    \n    hidden\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        label as property_option_label,\t\n        property_id,\n        _fivetran_synced,\n        display_order,\n        hidden,\n        value as property_option_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_deal": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_deal", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_deal.sql", "original_file_path": "models/stg_hubspot__engagement_deal.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_deal", "fqn": ["hubspot_source", "stg_hubspot__engagement_deal"], "alias": "stg_hubspot__engagement_deal", "checksum": {"name": "sha256", "checksum": "37799237dca9a83dba875f87c577a5a0cc03feacef4018dde9f710f33de72312"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a deal and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.93601, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_deal\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_deal_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_deal_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_deal_tmp')) %}\n        {% set new_cols = remove_duplicate_and_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_deal_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_deal_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            {{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_deal_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_deal_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_deal_columns", "macro.hubspot_source.get_macro_columns", "macro.hubspot_source.remove_duplicate_and_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_deal_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_deal.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_deal_tmp\"\n\n), macro as (\n\n    select\n        \n        \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    deal_id\n    \n as \n    \n    deal_id\n    \n, \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n\n\n\n         \n            \n        \n        \n        \n        \n\n        \n        \n        , \"engagement_type\"\n        , \"type_id\"\n\n \n        \n    from base\n\n)\n\nselect *\nfrom macro", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__company_property_history": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__company_property_history", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__company_property_history.sql", "original_file_path": "models/stg_hubspot__company_property_history.sql", "unique_id": "model.hubspot_source.stg_hubspot__company_property_history", "fqn": ["hubspot_source", "stg_hubspot__company_property_history"], "alias": "stg_hubspot__company_property_history", "checksum": {"name": "sha256", "checksum": "4bf28f0637cce312949bccbf17bcb272be74a44b802965ffc80197886d30d221"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a change to company record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_timestamp": {"name": "change_timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__company.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369228.050069, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__company_property_history\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled','hubspot_company_property_history_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__company_property_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__company_property_history_tmp')),\n                staging_columns=get_company_property_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        company_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        cast(change_timestamp as {{ dbt.type_timestamp() }}) as change_timestamp, -- source field name = timestamp ; alias declared in macros/get_company_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__company_property_history_tmp", "package": null, "version": null}, {"name": "stg_hubspot__company_property_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_company_property_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__company_property_history_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__company_property_history.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__company_property_history_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    company_id\n    \n as \n    \n    company_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    timestamp\n    \n as change_timestamp , \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        company_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        cast(change_timestamp as TIMESTAMP) as change_timestamp, -- source field name = timestamp ; alias declared in macros/get_company_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_delivered": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_delivered", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_delivered.sql", "original_file_path": "models/stg_hubspot__email_event_delivered.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_delivered", "fqn": ["hubspot_source", "stg_hubspot__email_event_delivered"], "alias": "stg_hubspot__email_event_delivered", "checksum": {"name": "sha256", "checksum": "57cb80393a7b1f533457ba888f0e6391b40380fb1fa69cedc1a39865ef0f9089"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a DELIVERED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "smtp_id": {"name": "smtp_id", "description": "An ID attached to the message by HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.8952692, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_delivered\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_delivered_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_delivered_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_delivered_tmp')),\n                staging_columns=get_email_event_delivered_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        id as event_id,\n        response as returned_response,\n        smtp_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_delivered_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_delivered_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_delivered_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_delivered_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_delivered.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_delivered_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    response\n    \n as \n    \n    response\n    \n, \n    \n    \n    smtp_id\n    \n as \n    \n    smtp_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        id as event_id,\n        response as returned_response,\n        smtp_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__owner": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__owner", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__owner.sql", "original_file_path": "models/stg_hubspot__owner.sql", "unique_id": "model.hubspot_source.stg_hubspot__owner", "fqn": ["hubspot_source", "stg_hubspot__owner"], "alias": "stg_hubspot__owner", "checksum": {"name": "sha256", "checksum": "63c283e3d59df503cdf72cdd84f3cdbda254ebfeca8657ab8078082bd1affdd0"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an owner/user in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp for when the owner was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "The email address of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_type": {"name": "owner_type", "description": "The type of owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "A timestamp for when the owner was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__owner.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.891629, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__owner\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_owner_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__owner_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__owner_tmp')),\n                staging_columns=get_owner_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_timestamp,\n        email as email_address,\n        first_name,\n        last_name,\n        owner_id,\n        portal_id,\n        type as owner_type,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_timestamp,\n        trim( {{ dbt.concat(['first_name', \"' '\", 'last_name']) }} ) as full_name\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__owner_tmp", "package": null, "version": null}, {"name": "stg_hubspot__owner_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_owner_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.concat"], "nodes": ["model.hubspot_source.stg_hubspot__owner_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__owner.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__owner_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    portal_id\n    \n as \n    \n    portal_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        cast(created_at as TIMESTAMP) as created_timestamp,\n        email as email_address,\n        first_name,\n        last_name,\n        owner_id,\n        portal_id,\n        type as owner_type,\n        cast(updated_at as TIMESTAMP) as updated_timestamp,\n        trim( first_name || ' ' || last_name ) as full_name\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event.sql", "original_file_path": "models/stg_hubspot__email_event.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event", "fqn": ["hubspot_source", "stg_hubspot__email_event"], "alias": "stg_hubspot__email_event", "checksum": {"name": "sha256", "checksum": "37ab0c059cc4ae9e528683d7c7d17a005b797396358601192b81ab8f4406d9ac"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an email event in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The ID of the app that sent the email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_by_event_id": {"name": "caused_by_event_id", "description": "The event ID which uniquely identifies the event which directly caused this event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_timestamp": {"name": "caused_timestamp", "description": "The timestamp of the event that caused this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "The type of event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_filtered_event": {"name": "is_filtered_event", "description": "A boolean representing whether the event has been filtered out of reporting based on customer reports settings or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "obsoleted_by_event_id": {"name": "obsoleted_by_event_id", "description": "The event ID which uniquely identifies the follow-on event which makes this current event obsolete. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "obsoleted_timestamp": {"name": "obsoleted_timestamp", "description": "The timestamp of the event that made the current event obsolete.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_by_event_id": {"name": "sent_by_event_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_timestamp": {"name": "sent_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.902373, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_tmp')),\n                staging_columns=get_email_event_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        app_id,\n        cast(caused_by_created as {{ dbt.type_timestamp() }}) as caused_timestamp,\n        caused_by_id as caused_by_event_id,\n        cast(created as {{ dbt.type_timestamp() }}) as created_timestamp,\n        email_campaign_id,\n        filtered_event as is_filtered_event,\n        id as event_id,\n        cast(obsoleted_by_created as {{ dbt.type_timestamp() }}) as obsoleted_timestamp,\n        obsoleted_by_id as obsoleted_by_event_id,\n        portal_id,\n        recipient as recipient_email_address,\n        cast(sent_by_created as {{ dbt.type_timestamp() }}) as sent_timestamp,\n        sent_by_id as sent_by_event_id,\n        type as event_type\n    from macro\n    \n)\n\nselect *\nfrom fields\n{% if not var('hubspot_using_all_email_events',true) -%}\nwhere not coalesce(is_filtered_event, false)\n{%- endif -%}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    app_id\n    \n as \n    \n    app_id\n    \n, \n    \n    \n    caused_by_created\n    \n as \n    \n    caused_by_created\n    \n, \n    \n    \n    caused_by_id\n    \n as \n    \n    caused_by_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    email_campaign_id\n    \n as \n    \n    email_campaign_id\n    \n, \n    \n    \n    filtered_event\n    \n as \n    \n    filtered_event\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    obsoleted_by_created\n    \n as \n    \n    obsoleted_by_created\n    \n, \n    \n    \n    obsoleted_by_id\n    \n as \n    \n    obsoleted_by_id\n    \n, \n    \n    \n    portal_id\n    \n as \n    \n    portal_id\n    \n, \n    \n    \n    recipient\n    \n as \n    \n    recipient\n    \n, \n    \n    \n    sent_by_created\n    \n as \n    \n    sent_by_created\n    \n, \n    \n    \n    sent_by_id\n    \n as \n    \n    sent_by_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        app_id,\n        cast(caused_by_created as TIMESTAMP) as caused_timestamp,\n        caused_by_id as caused_by_event_id,\n        cast(created as TIMESTAMP) as created_timestamp,\n        email_campaign_id,\n        filtered_event as is_filtered_event,\n        id as event_id,\n        cast(obsoleted_by_created as TIMESTAMP) as obsoleted_timestamp,\n        obsoleted_by_id as obsoleted_by_event_id,\n        portal_id,\n        recipient as recipient_email_address,\n        cast(sent_by_created as TIMESTAMP) as sent_timestamp,\n        sent_by_id as sent_by_event_id,\n        type as event_type\n    from macro\n    \n)\n\nselect *\nfrom fields\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_meeting": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_meeting", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_meeting.sql", "original_file_path": "models/stg_hubspot__engagement_meeting.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_meeting", "fqn": ["hubspot_source", "stg_hubspot__engagement_meeting"], "alias": "stg_hubspot__engagement_meeting", "checksum": {"name": "sha256", "checksum": "005011a4caa8ffadf1fee5c1f699b81d8a6fccc14730b49ebec8fe27e2893edf"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a MEETING engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean to mark rows that were deleted in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "The type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "This field marks the meeting's time of creation and determines where the meeting sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "This field marks the meeting's time of occurrence and determines where the meeting sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner associated with the meeting. This field determines the user listed as the meeting creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "The ID of the team associated with the meeting. This field determines the team listed as the meeting creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.937084, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_meeting\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_meeting_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_meeting_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_meeting_tmp')) %}\n        {% set new_cols = remove_duplicate_and_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_meeting_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_meeting_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            {{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_meeting_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_meeting_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_meeting_columns", "macro.hubspot_source.get_macro_columns", "macro.hubspot_source.remove_duplicate_and_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_meeting_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_meeting.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_meeting_tmp\"\n\n), macro as (\n\n    select\n        \n        \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TEXT) as engagement_type , \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n, \n    cast(null as TIMESTAMP) as created_timestamp , \n    cast(null as TIMESTAMP) as occurred_timestamp , \n    cast(null as INT) as owner_id , \n    cast(null as INT) as team_id \n\n\n         \n            \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n        , \"created_from_link_id\"\n        , \"end_time\"\n        , \"pre_meeting_prospect_reminders\"\n        , \"source\"\n        , \"source_id\"\n        , \"start_time\"\n        , \"web_conference_meeting_id\"\n        , \"meeting_outcome\"\n        , \"body\"\n        , \"external_url\"\n        , \"title\"\n\n \n        \n    from base\n\n)\n\nselect *\nfrom macro", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_email": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_email", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_email.sql", "original_file_path": "models/stg_hubspot__engagement_email.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_email", "fqn": ["hubspot_source", "stg_hubspot__engagement_email"], "alias": "stg_hubspot__engagement_email", "checksum": {"name": "sha256", "checksum": "e40a7d048da8e49ab2cd68403e29837fe9167fb61b488d487a855293a1ef73b1"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an EMAIL engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean to mark rows that were deleted in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "The type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "This field marks the email's time of creation and determines where the email sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "This field marks the email's time of occurrence and determines where the email sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner associated with the email. This field determines the user listed as the email creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "The ID of the team associated with the email. This field determines the team listed as the email creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.936654, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_email\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_email_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_email_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_email_tmp')) %}\n        {% set new_cols = remove_duplicate_and_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_email_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_email_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            {{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_email_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_email_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_email_columns", "macro.hubspot_source.get_macro_columns", "macro.hubspot_source.remove_duplicate_and_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_email_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_email.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_email_tmp\"\n\n), macro as (\n\n    select\n        \n        \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    type\n    \n as engagement_type , \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n, \n    \n    \n    property_hs_createdate\n    \n as created_timestamp , \n    \n    \n    property_hs_timestamp\n    \n as occurred_timestamp , \n    \n    \n    property_hubspot_owner_id\n    \n as owner_id , \n    \n    \n    property_hubspot_team_id\n    \n as team_id \n\n\n         \n            \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n        , \"property_hs_all_owner_ids\" as all_owner_ids\n        , \"property_hs_all_team_ids\" as all_team_ids\n        , \"property_hs_email_subject\" as email_subject\n        , \"property_hs_email_text\" as email_text\n        , \"property_hs_lastmodifieddate\" as lastmodifieddate\n        , \"property_hs_modified_by\" as modified_by\n\n \n        \n    from base\n\n)\n\nselect *\nfrom macro", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__ticket_contact": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_contact", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket_contact.sql", "original_file_path": "models/stg_hubspot__ticket_contact.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_contact", "fqn": ["hubspot_source", "stg_hubspot__ticket_contact"], "alias": "stg_hubspot__ticket_contact", "checksum": {"name": "sha256", "checksum": "22f25808cb4a4fdbd514da619f844d1827827d186dd7394d81e99d6edb21b3b7"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a ticket and a contact.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.953221, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_contact\"", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_contact_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__ticket_contact_tmp')) %}\n        {% set new_cols = remove_duplicate_and_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_ticket_contact_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_ticket_contact_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            {{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_contact_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_contact_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_contact_columns", "macro.hubspot_source.get_macro_columns", "macro.hubspot_source.remove_duplicate_and_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__ticket_contact_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__ticket_contact.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_contact_tmp\"\n\n), macro as (\n\n    select\n        \n        \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n\n\n\n         \n            \n        \n        \n\n        \n        \n\n \n        \n    from base\n\n)\n\nselect *\nfrom macro", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_status_change": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_status_change", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_status_change.sql", "original_file_path": "models/stg_hubspot__email_event_status_change.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_status_change", "fqn": ["hubspot_source", "stg_hubspot__email_event_status_change"], "alias": "stg_hubspot__email_event_status_change", "checksum": {"name": "sha256", "checksum": "500ed0a665718563ae083f34931d675641791aa36a5a29826c8bfdc1a2cecf5e"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a STATUS_CHANGE email event in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source of the subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_bounced": {"name": "is_bounced", "description": "A HubSpot employee explicitly initiated the status change to block messages to the recipient. \n(Note this usage has been deprecated in favor of dropping messages with a 'dropReason' of BLOCKED_ADDRESS.)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "requested_by_email": {"name": "requested_by_email", "description": "The email address of the person requesting the change on behalf of the recipient. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_status": {"name": "subscription_status", "description": "The recipient's portal subscription status. \nNote that if this is 'UNSUBSCRIBED', the property 'subscriptions' is not necessarily an empty array, nor are all \nsubscriptions contained in it necessarily going to have their statuses set to 'UNSUBSCRIBED'.)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscriptions": {"name": "subscriptions", "description": "An array of JSON objects representing the status of subscriptions for the recipient. \nEach JSON subscription object is comprised of the properties: 'id', 'status'.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.900092, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_status_change\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_status_change_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_status_change_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_status_change_tmp')),\n                staging_columns=get_email_event_status_change_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        bounced as is_bounced,\n        id as event_id,\n        portal_subscription_status as subscription_status,\n        requested_by as requested_by_email,\n        source as change_source,\n        subscriptions\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_status_change_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_status_change_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_status_change_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_status_change_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_status_change.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_status_change_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bounced\n    \n as \n    \n    bounced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    portal_subscription_status\n    \n as \n    \n    portal_subscription_status\n    \n, \n    \n    \n    requested_by\n    \n as \n    \n    requested_by\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    subscriptions\n    \n as \n    \n    subscriptions\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        bounced as is_bounced,\n        id as event_id,\n        portal_subscription_status as subscription_status,\n        requested_by as requested_by_email,\n        source as change_source,\n        subscriptions\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_list_member": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__contact_list_member", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__contact_list_member.sql", "original_file_path": "models/stg_hubspot__contact_list_member.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_list_member", "fqn": ["hubspot_source", "stg_hubspot__contact_list_member"], "alias": "stg_hubspot__contact_list_member", "checksum": {"name": "sha256", "checksum": "9b3e60e51076efcc2acba6532f99454044e536418490674e5890ea6b85521739"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a contact and a contact list.", "columns": {"is_contact_list_member_deleted": {"name": "is_contact_list_member_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "added_timestamp": {"name": "added_timestamp", "description": "The timestamp a contact was added to a list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_list_id": {"name": "contact_list_id", "description": "The ID of the related contact list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.879511, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_list_member\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_list_member_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_list_member_tmp') }} \n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_list_member_tmp')),\n                staging_columns=get_contact_list_member_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_contact_list_member_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        cast(added_at as {{ dbt.type_timestamp() }}) as added_timestamp,\n        contact_id,\n        contact_list_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__contact_list_member_tmp", "package": null, "version": null}, {"name": "stg_hubspot__contact_list_member_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_contact_list_member_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__contact_list_member_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact_list_member.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_list_member_tmp\" \n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    added_at\n    \n as \n    \n    added_at\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n, \n    \n    \n    contact_list_id\n    \n as \n    \n    contact_list_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_contact_list_member_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        cast(added_at as TIMESTAMP) as added_timestamp,\n        contact_id,\n        contact_list_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__contact", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__contact.sql", "original_file_path": "models/stg_hubspot__contact.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact", "fqn": ["hubspot_source", "stg_hubspot__contact"], "alias": "stg_hubspot__contact", "checksum": {"name": "sha256", "checksum": "de0f99a3a875cf5890b8e324569e81620189ea73729b3a62df7b3fb4a44727b2"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a contact in Hubspot.", "columns": {"is_contact_deleted": {"name": "is_contact_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The contact's email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_company": {"name": "contact_company", "description": "The name of the contact's company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The contact's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The contact's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date that the contact was created in your HubSpot account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "The contact's job title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_annual_revenue": {"name": "company_annual_revenue", "description": "The contact's annual company revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calculated_merged_vids": {"name": "calculated_merged_vids", "description": "List of mappings representing contact IDs that have been merged into the contact at hand. Format: <merged_contact_id>:<merged_at_in_epoch_time>;<second_merged_contact_id>:<merged_at_in_epoch_time> This field has replaced the `CONTACT_MERGE_AUDIT` table, which was deprecated by the Hubspot v3 CRM API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.885432, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_tmp')),\n                staging_columns=get_contact_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n\n{% if var('hubspot__pass_through_all_columns', false) %}\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_tmp')),\n                staging_columns=get_contact_columns()\n            )\n        }}\n        {% if all_passthrough_column_check('stg_hubspot__contact_tmp',get_contact_columns()) > 0 %}\n        -- just pass everything through if extra columns are present, but ensure required columns are present.\n        ,{{ \n            fivetran_utils.remove_prefix_from_columns(\n                columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_tmp')), \n                prefix='property_', exclude=get_macro_columns(get_contact_columns())) \n        }}\n        {% endif %}\n    from base\n\n{% else %}\n        -- just default columns + explicitly configured passthrough columns.\n        -- a few columns below are aliased within the macros/get_contact_columns.sql macro\n        contact_id,\n        is_contact_deleted,\n        calculated_merged_vids, -- will be null for BigQuery users until v3 api is rolled out to them\n        email,\n        contact_company,\n        first_name,\n        last_name,\n        cast(created_date as {{ dbt.type_timestamp() }}) as created_date,\n        job_title,\n        company_annual_revenue,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n\n        --The below macro adds the fields defined within your hubspot__contact_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('hubspot__contact_pass_through_columns') }}\n\n        -- The below macro add the ability to create calculated fields using the hubspot__contact_calculated_fields variable.\n        {{ fivetran_utils.calculated_fields('hubspot__contact_calculated_fields') }}\n\n    from macro\n{% endif %}    \n\n), joined as (\n    {{ add_property_labels('hubspot__contact_pass_through_columns', cte_name='fields') }}\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "stg_hubspot__contact_tmp", "package": null, "version": null}, {"name": "stg_hubspot__contact_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_contact_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns", "macro.fivetran_utils.calculated_fields", "macro.hubspot_source.add_property_labels"], "nodes": ["model.hubspot_source.stg_hubspot__contact_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as is_contact_deleted , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as contact_id , \n    \n    \n    property_hs_calculated_merged_vids\n    \n as calculated_merged_vids , \n    \n    \n    property_email\n    \n as email , \n    \n    \n    property_company\n    \n as contact_company , \n    \n    \n    property_firstname\n    \n as first_name , \n    \n    \n    property_lastname\n    \n as last_name , \n    \n    \n    property_createdate\n    \n as created_date , \n    \n    \n    property_jobtitle\n    \n as job_title , \n    \n    \n    property_annualrevenue\n    \n as company_annual_revenue \n\n\n    from base\n\n), fields as (\n\n    select\n\n\n        -- just default columns + explicitly configured passthrough columns.\n        -- a few columns below are aliased within the macros/get_contact_columns.sql macro\n        contact_id,\n        is_contact_deleted,\n        calculated_merged_vids, -- will be null for BigQuery users until v3 api is rolled out to them\n        email,\n        contact_company,\n        first_name,\n        last_name,\n        cast(created_date as TIMESTAMP) as created_date,\n        job_title,\n        company_annual_revenue,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n\n        --The below macro adds the fields defined within your hubspot__contact_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n        -- The below macro add the ability to create calculated fields using the hubspot__contact_calculated_fields variable.\n        \n\n\n\n    from macro\n    \n\n), joined as (\n    \n\nselect fields.*\n\nfrom fields\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__deal", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__deal.sql", "original_file_path": "models/stg_hubspot__deal.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal", "fqn": ["hubspot_source", "stg_hubspot__deal"], "alias": "stg_hubspot__deal", "checksum": {"name": "sha256", "checksum": "80f928c0ffb2f712327cc29d692c97feecfaf9cdbfefe44948ac9c4fdfad322b"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a deal in Hubspot.", "columns": {"is_deal_deleted": {"name": "is_deal_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the deal's pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_stage_id": {"name": "deal_pipeline_stage_id", "description": "The ID of the deal's pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the deal's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_name": {"name": "deal_name", "description": "The name you have given this deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A brief description of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The total value of the deal in the deal's currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_date": {"name": "closed_date", "description": "The day the deal is expected to close, or was closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date the deal was created. This property is set automatically by HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.848105, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_tmp')),\n                staging_columns=get_deal_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n\n{% if var('hubspot__pass_through_all_columns', false) %}\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_tmp')),\n                staging_columns=get_deal_columns()\n            )\n        }}\n        {% if all_passthrough_column_check('stg_hubspot__deal_tmp',get_deal_columns()) > 0 %}\n        -- just pass everything through if extra columns are present, but ensure required columns are present.\n        ,{{ \n            fivetran_utils.remove_prefix_from_columns(\n                columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_tmp')), \n                prefix='property_',exclude=get_macro_columns(get_deal_columns()))\n        }}\n        {% endif %}\n    from base\n\n{% else %}\n        -- just default columns + explicitly configured passthrough columns\n        -- a few columns below are aliased within the macros/get_deal_columns.sql macro\n        deal_name,\n        cast(closed_date as {{ dbt.type_timestamp() }}) as closed_date,\n        cast(created_date as {{ dbt.type_timestamp() }}) as created_date,\n        is_deal_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        deal_id,\n        cast(deal_pipeline_id as {{ dbt.type_string() }}) as deal_pipeline_id,\n        cast(deal_pipeline_stage_id as {{ dbt.type_string() }}) as deal_pipeline_stage_id,\n        owner_id,\n        portal_id,\n        description,\n        amount\n\n        --The below macro adds the fields defined within your hubspot__deal_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('hubspot__deal_pass_through_columns') }}\n\n        -- The below macro add the ability to create calculated fields using the hubspot__deal_calculated_fields variable.\n        {{ fivetran_utils.calculated_fields('hubspot__deal_calculated_fields') }}\n\n    from macro\n{% endif %}\n\n), joined as (\n    {{ add_property_labels('hubspot__deal_pass_through_columns', cte_name='fields') }}\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "stg_hubspot__deal_tmp", "package": null, "version": null}, {"name": "stg_hubspot__deal_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.fivetran_utils.fill_pass_through_columns", "macro.fivetran_utils.calculated_fields", "macro.hubspot_source.add_property_labels"], "nodes": ["model.hubspot_source.stg_hubspot__deal_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_tmp\"\n\n), macro as (\n\n    select\n        \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    deal_id\n    \n as \n    \n    deal_id\n    \n, \n    \n    \n    deal_pipeline_id\n    \n as \n    \n    deal_pipeline_id\n    \n, \n    \n    \n    deal_pipeline_stage_id\n    \n as \n    \n    deal_pipeline_stage_id\n    \n, \n    \n    \n    is_deleted\n    \n as is_deal_deleted , \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    portal_id\n    \n as \n    \n    portal_id\n    \n, \n    \n    \n    property_dealname\n    \n as deal_name , \n    \n    \n    property_description\n    \n as description , \n    \n    \n    property_amount\n    \n as amount , \n    \n    \n    property_closedate\n    \n as closed_date , \n    \n    \n    property_createdate\n    \n as created_date \n\n\n    from base\n\n), fields as (\n\n    select\n\n\n        -- just default columns + explicitly configured passthrough columns\n        -- a few columns below are aliased within the macros/get_deal_columns.sql macro\n        deal_name,\n        cast(closed_date as TIMESTAMP) as closed_date,\n        cast(created_date as TIMESTAMP) as created_date,\n        is_deal_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        deal_id,\n        cast(deal_pipeline_id as TEXT) as deal_pipeline_id,\n        cast(deal_pipeline_stage_id as TEXT) as deal_pipeline_stage_id,\n        owner_id,\n        portal_id,\n        description,\n        amount\n\n        --The below macro adds the fields defined within your hubspot__deal_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n        -- The below macro add the ability to create calculated fields using the hubspot__deal_calculated_fields variable.\n        \n\n\n\n    from macro\n\n\n), joined as (\n    \n\nselect fields.*\n\nfrom fields\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_pipeline": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__deal_pipeline", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__deal_pipeline.sql", "original_file_path": "models/stg_hubspot__deal_pipeline.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_pipeline", "fqn": ["hubspot_source", "stg_hubspot__deal_pipeline"], "alias": "stg_hubspot__deal_pipeline", "checksum": {"name": "sha256", "checksum": "609076f2f64b0919e1eb96171164d2847e794bc5c5fc61ef0191ce8a370bd40e"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a pipeline in Hubspot.", "columns": {"is_deal_pipeline_deleted": {"name": "is_deal_pipeline_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the pipelines appear when viewed in HubSpot", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_created_at": {"name": "deal_pipeline_created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_updated_at": {"name": "deal_pipeline_updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the stage is currently in use.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_label": {"name": "pipeline_label", "description": "The human-readable label for the pipeline. The label is used when showing the pipeline in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.846174, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_pipeline\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_pipeline_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_pipeline_tmp')),\n                staging_columns=get_deal_pipeline_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_deal_pipeline_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        active as is_active,\n        display_order,\n        label as pipeline_label,\n        cast(pipeline_id as {{ dbt.type_string() }}) as deal_pipeline_id,\n        created_at as deal_pipeline_created_at,\n        updated_at as deal_pipeline_updated_at\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__deal_pipeline_tmp", "package": null, "version": null}, {"name": "stg_hubspot__deal_pipeline_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_pipeline_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_string"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_pipeline.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_pipeline_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    display_order\n    \n as \n    \n    display_order\n    \n, \n    \n    \n    label\n    \n as \n    \n    label\n    \n, \n    \n    \n    pipeline_id\n    \n as \n    \n    pipeline_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_deal_pipeline_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        active as is_active,\n        display_order,\n        label as pipeline_label,\n        cast(pipeline_id as TEXT) as deal_pipeline_id,\n        created_at as deal_pipeline_created_at,\n        updated_at as deal_pipeline_updated_at\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_company": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__deal_company", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__deal_company.sql", "original_file_path": "models/stg_hubspot__deal_company.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_company", "fqn": ["hubspot_source", "stg_hubspot__deal_company"], "alias": "stg_hubspot__deal_company", "checksum": {"name": "sha256", "checksum": "967bfcd2c8e73fd2ad82bcd81d22f75617c6d549fa9b801c0f3e9ceb6d4b5643"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a deal and company.", "columns": {"company_id": {"name": "company_id", "description": "The ID of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type_id": {"name": "type_id", "description": "The ID of the type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.850198, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_company\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled','hubspot_deal_company_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_company_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_company_tmp')),\n                staging_columns=get_deal_company_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        company_id,\n        deal_id,\n        type_id,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n        \n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__deal_company_tmp", "package": null, "version": null}, {"name": "stg_hubspot__deal_company_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_company_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__deal_company_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_company.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_company_tmp\"\n\n), macro as (\n\n    select \n        \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    deal_id\n    \n as \n    \n    deal_id\n    \n, \n    \n    \n    company_id\n    \n as \n    \n    company_id\n    \n, \n    \n    \n    type_id\n    \n as \n    \n    type_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        company_id,\n        deal_id,\n        type_id,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n        \n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_note": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_note", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_note.sql", "original_file_path": "models/stg_hubspot__engagement_note.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_note", "fqn": ["hubspot_source", "stg_hubspot__engagement_note"], "alias": "stg_hubspot__engagement_note", "checksum": {"name": "sha256", "checksum": "0072afb3db688940cd99f824c4421d3d23d18bdb76431b0d72ec1ed1eeb038a9"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a NOTE engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean to mark rows that were deleted in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "The type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "note": {"name": "note", "description": "The body of the note. The body has a limit of 65536 characters.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "This field marks the note's time of creation and determines where the note sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "This field marks the note's time of occurrence and determines where the note sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner associated with the note. This field determines the user listed as the note creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "The ID of the team associated with the note. This field determines the team listed as the note creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.937676, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_note\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_note_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_note_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_note_tmp')) %}\n        {% set new_cols = remove_duplicate_and_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_note_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_note_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            {{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_note_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_note_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_note_columns", "macro.hubspot_source.get_macro_columns", "macro.hubspot_source.remove_duplicate_and_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_note_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_note.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_note_tmp\"\n\n), macro as (\n\n    select\n        \n        \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as TEXT) as note , \n    \n    \n    type\n    \n as engagement_type , \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n, \n    \n    \n    property_hs_createdate\n    \n as created_timestamp , \n    \n    \n    property_hs_timestamp\n    \n as occurred_timestamp , \n    \n    \n    property_hubspot_owner_id\n    \n as owner_id , \n    \n    \n    property_hubspot_team_id\n    \n as team_id \n\n\n         \n            \n        \n        \n        \n        \n        \n\n        \n        \n        , \"property_hs_body_preview\" as body_preview\n        , \"property_hs_lastmodifieddate\" as lastmodifieddate\n        , \"property_hs_note_body\" as note_body\n\n \n        \n    from base\n\n)\n\nselect *\nfrom macro", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_contact": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_contact", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_contact.sql", "original_file_path": "models/stg_hubspot__engagement_contact.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_contact", "fqn": ["hubspot_source", "stg_hubspot__engagement_contact"], "alias": "stg_hubspot__engagement_contact", "checksum": {"name": "sha256", "checksum": "d46368778f7f70229859be10d86bd4428c4ac42af5a80c2d4422271adf3690df"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a contact and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.9357069, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_contact\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_contact_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_contact_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_contact_tmp')) %}\n        {% set new_cols = remove_duplicate_and_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_contact_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_contact_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            {{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_contact_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_contact_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_contact_columns", "macro.hubspot_source.get_macro_columns", "macro.hubspot_source.remove_duplicate_and_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_contact_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_contact.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_contact_tmp\"\n\n), macro as (\n\n    select\n        \n        \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n, \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n\n\n\n         \n            \n        \n        \n        \n        \n\n        \n        \n        , \"engagement_type\"\n        , \"type_id\"\n\n \n        \n    from base\n\n)\n\nselect *\nfrom macro", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_list": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__contact_list", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__contact_list.sql", "original_file_path": "models/stg_hubspot__contact_list.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_list", "fqn": ["hubspot_source", "stg_hubspot__contact_list"], "alias": "stg_hubspot__contact_list", "checksum": {"name": "sha256", "checksum": "9746193b0a4ef3ba286a69c54223df553b1fc54cde8987189ac76796fb10a059"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a contact list in Hubspot.", "columns": {"is_contact_list_deleted": {"name": "is_contact_list_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_list_id": {"name": "contact_list_id", "description": "The ID of the contact list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_list_name": {"name": "contact_list_name", "description": "The name of the contact list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp of the time the list was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deletable": {"name": "is_deletable", "description": "If this is false, this is a system list and cannot be deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_dynamic": {"name": "is_dynamic", "description": "Whether the contact list is dynamic.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_error": {"name": "metadata_error", "description": "Any errors that happened the last time the list was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_last_processing_state_change_at": {"name": "metadata_last_processing_state_change_at", "description": "A timestamp of the last time that the processing state changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_last_size_change_at": {"name": "metadata_last_size_change_at", "description": "A timestamp of the last time that the size of the list changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_processing": {"name": "metadata_processing", "description": "One of DONE, REFRESHING, INITIALIZING, or PROCESSING. \nDONE indicates the list has finished processing, any other value indicates that list membership is being evaluated.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_size": {"name": "metadata_size", "description": "The approximate number of contacts in the list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "A timestamp of the time that the list was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.881931, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_list\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_list_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_list_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_list_tmp')),\n                staging_columns=get_contact_list_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_contact_list_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_timestamp,\n        deleteable as is_deletable,\n        dynamic as is_dynamic,\n        id as contact_list_id,\n        metadata_error,\n        cast(metadata_last_processing_state_change_at as {{ dbt.type_timestamp() }}) as metadata_last_processing_state_change_at,\n        cast(metadata_last_size_change_at as {{ dbt.type_timestamp() }}) as metadata_last_size_change_at,\n        metadata_processing,\n        metadata_size,\n        name as contact_list_name,\n        portal_id,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_timestamp\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__contact_list_tmp", "package": null, "version": null}, {"name": "stg_hubspot__contact_list_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_contact_list_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__contact_list_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact_list.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_list_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    deleteable\n    \n as \n    \n    deleteable\n    \n, \n    \n    \n    dynamic\n    \n as \n    \n    dynamic\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    metadata_error\n    \n as \n    \n    metadata_error\n    \n, \n    \n    \n    metadata_last_processing_state_change_at\n    \n as \n    \n    metadata_last_processing_state_change_at\n    \n, \n    \n    \n    metadata_last_size_change_at\n    \n as \n    \n    metadata_last_size_change_at\n    \n, \n    \n    \n    metadata_processing\n    \n as \n    \n    metadata_processing\n    \n, \n    \n    \n    metadata_size\n    \n as \n    \n    metadata_size\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    portal_id\n    \n as \n    \n    portal_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_contact_list_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        cast(created_at as TIMESTAMP) as created_timestamp,\n        deleteable as is_deletable,\n        dynamic as is_dynamic,\n        id as contact_list_id,\n        metadata_error,\n        cast(metadata_last_processing_state_change_at as TIMESTAMP) as metadata_last_processing_state_change_at,\n        cast(metadata_last_size_change_at as TIMESTAMP) as metadata_last_size_change_at,\n        metadata_processing,\n        metadata_size,\n        name as contact_list_name,\n        portal_id,\n        cast(updated_at as TIMESTAMP) as updated_timestamp\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__ticket_pipeline": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_pipeline", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket_pipeline.sql", "original_file_path": "models/stg_hubspot__ticket_pipeline.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_pipeline", "fqn": ["hubspot_source", "stg_hubspot__ticket_pipeline"], "alias": "stg_hubspot__ticket_pipeline", "checksum": {"name": "sha256", "checksum": "e8688af88a357940c8f9e2deab4093dc3400f7a20215ffb7c0a1a0dc5448eb86"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a ticket pipeline.", "columns": {"is_ticket_pipeline_deleted": {"name": "is_ticket_pipeline_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether the pipeline is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_label": {"name": "pipeline_label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "object_type_id": {"name": "object_type_id", "description": "Reference to the object type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_id": {"name": "ticket_pipeline_id", "description": "Reference to the pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_created_at": {"name": "ticket_pipeline_created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_updated_at": {"name": "ticket_pipeline_updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.958377, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_pipeline\"", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_pipeline_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_pipeline_tmp')),\n                staging_columns=get_ticket_pipeline_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(pipeline_id as {{ dbt.type_int() }} ) as ticket_pipeline_id,\n        _fivetran_deleted as is_ticket_pipeline_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        active as is_active,\n        display_order,\n        label as pipeline_label,\n        object_type_id,\n        created_at as ticket_pipeline_created_at,\n        updated_at as ticket_pipeline_updated_at\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_pipeline_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_pipeline_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_pipeline_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_int", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__ticket_pipeline_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__ticket_pipeline.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_pipeline_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    display_order\n    \n as \n    \n    display_order\n    \n, \n    \n    \n    label\n    \n as \n    \n    label\n    \n, \n    \n    \n    object_type_id\n    \n as \n    \n    object_type_id\n    \n, \n    \n    \n    pipeline_id\n    \n as \n    \n    pipeline_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(pipeline_id as INT ) as ticket_pipeline_id,\n        _fivetran_deleted as is_ticket_pipeline_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        active as is_active,\n        display_order,\n        label as pipeline_label,\n        object_type_id,\n        created_at as ticket_pipeline_created_at,\n        updated_at as ticket_pipeline_updated_at\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_spam_report": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_spam_report", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_spam_report.sql", "original_file_path": "models/stg_hubspot__email_event_spam_report.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_spam_report", "fqn": ["hubspot_source", "stg_hubspot__email_event_spam_report"], "alias": "stg_hubspot__email_event_spam_report", "checksum": {"name": "sha256", "checksum": "c6f6a945571c2f2cbd3f013041f9060c844f554b55a13d3982061a3f1e8051cd"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a SPAM_REPORT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.898883, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_spam_report\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_spam_report_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_spam_report_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_spam_report_tmp')),\n                staging_columns=get_email_event_spam_report_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        id as event_id,\n        ip_address,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_spam_report_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_spam_report_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_spam_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_spam_report_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_spam_report.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_spam_report_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    ip_address\n    \n as \n    \n    ip_address\n    \n, \n    \n    \n    user_agent\n    \n as \n    \n    user_agent\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        id as event_id,\n        ip_address,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_pipeline_stage": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__deal_pipeline_stage", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__deal_pipeline_stage.sql", "original_file_path": "models/stg_hubspot__deal_pipeline_stage.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_pipeline_stage", "fqn": ["hubspot_source", "stg_hubspot__deal_pipeline_stage"], "alias": "stg_hubspot__deal_pipeline_stage", "checksum": {"name": "sha256", "checksum": "bb740799529f61e4687494a9bc66c468f6a92842675c16f658ed004306adb7a1"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a pipeline stage in Hubspot.", "columns": {"is_deal_pipeline_stage_deleted": {"name": "is_deal_pipeline_stage_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the related pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_stage_id": {"name": "deal_pipeline_stage_id", "description": "The ID of the pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the pipeline stage is currently in use.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_closed_won": {"name": "is_closed_won", "description": "Whether the stage represents a Closed Won deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_stage_label": {"name": "pipeline_stage_label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "probability": {"name": "probability", "description": "The probability that the deal will close. Used for the deal forecast.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_stage_created_at": {"name": "deal_pipeline_stage_created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_stage_updated_at": {"name": "deal_pipeline_stage_updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.844938, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_pipeline_stage\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_pipeline_stage_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_pipeline_stage_tmp')),\n                staging_columns=get_deal_pipeline_stage_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_deal_pipeline_stage_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        active as is_active,\n        closed_won as is_closed_won,\n        display_order,\n        label as pipeline_stage_label,\n        pipeline_id as deal_pipeline_id,\n        probability,\n        cast(stage_id as {{ dbt.type_string() }}) as deal_pipeline_stage_id,\n        created_at as deal_pipeline_stage_created_at,\n        updated_at as deal_pipeline_stage_updated_at\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__deal_pipeline_stage_tmp", "package": null, "version": null}, {"name": "stg_hubspot__deal_pipeline_stage_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_pipeline_stage_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_string"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_pipeline_stage.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_pipeline_stage_tmp\"\n\n), macro as (\n\n    select \n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    closed_won\n    \n as \n    \n    closed_won\n    \n, \n    \n    \n    display_order\n    \n as \n    \n    display_order\n    \n, \n    \n    \n    label\n    \n as \n    \n    label\n    \n, \n    \n    \n    pipeline_id\n    \n as \n    \n    pipeline_id\n    \n, \n    \n    \n    probability\n    \n as \n    \n    probability\n    \n, \n    \n    \n    stage_id\n    \n as \n    \n    stage_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted as is_deal_pipeline_stage_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        active as is_active,\n        closed_won as is_closed_won,\n        display_order,\n        label as pipeline_stage_label,\n        pipeline_id as deal_pipeline_id,\n        probability,\n        cast(stage_id as TEXT) as deal_pipeline_stage_id,\n        created_at as deal_pipeline_stage_created_at,\n        updated_at as deal_pipeline_stage_updated_at\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_dropped": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_dropped", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_dropped.sql", "original_file_path": "models/stg_hubspot__email_event_dropped.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_dropped", "fqn": ["hubspot_source", "stg_hubspot__email_event_dropped"], "alias": "stg_hubspot__email_event_dropped", "checksum": {"name": "sha256", "checksum": "57bcd7b83f492222bf9b147220ccd54a2207d909a53dbb2da49c8a15ceb6b33e"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a DROPPED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bcc_emails": {"name": "bcc_emails", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drop_message": {"name": "drop_message", "description": "The raw message describing why the email message was dropped. This will usually provide additional details beyond 'dropReason'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drop_reason": {"name": "drop_reason", "description": "The reason why the email message was dropped. See below for the possible values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reply_to_email": {"name": "reply_to_email", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.896735, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_dropped\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_dropped_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_dropped_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_dropped_tmp')),\n                staging_columns=get_email_event_dropped_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        bcc as bcc_emails,\n        cc as cc_emails,\n        drop_message,\n        drop_reason,\n        from_email, -- source field name = from ; alias declared in macros/get_email_event_dropped_columns.sql\n        id as event_id,\n        reply_to as reply_to_email,\n        subject as email_subject\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_dropped_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_dropped_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_dropped_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_dropped_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_dropped.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_dropped_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bcc\n    \n as \n    \n    bcc\n    \n, \n    \n    \n    cc\n    \n as \n    \n    cc\n    \n, \n    \n    \n    drop_message\n    \n as \n    \n    drop_message\n    \n, \n    \n    \n    drop_reason\n    \n as \n    \n    drop_reason\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    reply_to\n    \n as \n    \n    reply_to\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n        \n            \n            \"from\"\n            \n        \n    \n as from_email \n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        bcc as bcc_emails,\n        cc as cc_emails,\n        drop_message,\n        drop_reason,\n        from_email, -- source field name = from ; alias declared in macros/get_email_event_dropped_columns.sql\n        id as event_id,\n        reply_to as reply_to_email,\n        subject as email_subject\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_stage": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__deal_stage", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__deal_stage.sql", "original_file_path": "models/stg_hubspot__deal_stage.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_stage", "fqn": ["hubspot_source", "stg_hubspot__deal_stage"], "alias": "stg_hubspot__deal_stage", "checksum": {"name": "sha256", "checksum": "fb6709d278e9110b5b3737c4a6a3e99eeab2aaa58cc175478467b56ca5cf3ccd"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a deal stage.", "columns": {"_fivetran_active": {"name": "_fivetran_active", "description": "Boolean indicating whether the deal stage is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_end": {"name": "_fivetran_end", "description": "The Fivetran calculated exist time of the deal stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_start": {"name": "_fivetran_start", "description": "The date the deal stage was entered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_entered": {"name": "date_entered", "description": "The timestamp the deal stage was entered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "Reference to the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The relevant source of the deal stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "Reference to the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_stage_name": {"name": "deal_stage_name", "description": "The value of the deal stage. Typically the name of the stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.84951, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_stage\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_hubspot__deal_stage_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_stage_tmp')),\n                staging_columns=get_deal_stage_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(date_entered as {{ dbt.type_timestamp() }}) as date_entered,\n        deal_id,\n        source,\n        source_id,\n        value as deal_stage_name,\n        _fivetran_active,\n        cast(_fivetran_end as {{ dbt.type_timestamp() }}) as _fivetran_end,\n        cast(_fivetran_start as {{ dbt.type_timestamp() }}) as _fivetran_start\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_hubspot__deal_stage_tmp", "package": null, "version": null}, {"name": "stg_hubspot__deal_stage_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_stage_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__deal_stage_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_stage.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_stage_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_active\n    \n as \n    \n    _fivetran_active\n    \n, \n    \n    \n    _fivetran_end\n    \n as \n    \n    _fivetran_end\n    \n, \n    \n    \n    _fivetran_start\n    \n as \n    \n    _fivetran_start\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    date_entered\n    \n as \n    \n    date_entered\n    \n, \n    \n    \n    deal_id\n    \n as \n    \n    deal_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(date_entered as TIMESTAMP) as date_entered,\n        deal_id,\n        source,\n        source_id,\n        value as deal_stage_name,\n        _fivetran_active,\n        cast(_fivetran_end as TIMESTAMP) as _fivetran_end,\n        cast(_fivetran_start as TIMESTAMP) as _fivetran_start\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__property": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__property", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__property.sql", "original_file_path": "models/stg_hubspot__property.sql", "unique_id": "model.hubspot_source.stg_hubspot__property", "fqn": ["hubspot_source", "stg_hubspot__property"], "alias": "stg_hubspot__property", "checksum": {"name": "sha256", "checksum": "d17ddcdaaee83fa41e6533de8ce091959b874ff1d0ec1cea467695369af8ade9"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a property.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Fivetran generated id. Joins to `property_id` in the `property_option` table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calculated": {"name": "calculated", "description": "Indicates if the property is calculated by a HubSpot process", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp representing when the property was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A description of the property.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "field_type": {"name": "field_type", "description": "One of textarea, text, date, file, number, select, radio, checkbox, or booleancheckbox.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "group_name": {"name": "group_name", "description": "The name of the property group that the property belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hubspot_defined": {"name": "hubspot_defined", "description": "This will be true for default properties that are built into HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hubspot_object": {"name": "hubspot_object", "description": "If this property is related to other objects, the object will be listed here.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_label": {"name": "property_label", "description": "A human readable label for the property.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_name": {"name": "property_name", "description": "The internal name of the property.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_type": {"name": "property_type", "description": "One of string, number, date, datetime, or enumeration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp representing when the property was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__property.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.9632168, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__property\"", "raw_code": "{{ config(enabled=var('hubspot_property_enabled', True)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__property_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__property_tmp')),\n                staging_columns=get_property_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_id,\n        _fivetran_synced,\n        calculated,\n        created_at,\n        description,\n        field_type,\n        group_name,\n        hubspot_defined,\n        hubspot_object,\n        label as property_label,\n        name as property_name,\n        type as property_type,\n        updated_at\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__property_tmp", "package": null, "version": null}, {"name": "stg_hubspot__property_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_property_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__property_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__property.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__property_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    calculated\n    \n as \n    \n    calculated\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    field_type\n    \n as \n    \n    field_type\n    \n, \n    \n    \n    group_name\n    \n as \n    \n    group_name\n    \n, \n    \n    \n    hubspot_defined\n    \n as \n    \n    hubspot_defined\n    \n, \n    \n    \n    hubspot_object\n    \n as \n    \n    hubspot_object\n    \n, \n    \n    \n    label\n    \n as \n    \n    label\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    show_currency_symbol\n    \n as \n    \n    show_currency_symbol\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_id,\n        _fivetran_synced,\n        calculated,\n        created_at,\n        description,\n        field_type,\n        group_name,\n        hubspot_defined,\n        hubspot_object,\n        label as property_label,\n        name as property_name,\n        type as property_type,\n        updated_at\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_property_history": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__deal_property_history", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__deal_property_history.sql", "original_file_path": "models/stg_hubspot__deal_property_history.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_property_history", "fqn": ["hubspot_source", "stg_hubspot__deal_property_history"], "alias": "stg_hubspot__deal_property_history", "checksum": {"name": "sha256", "checksum": "a965a6b5a1d9782d67ac60075369cac7f83252545cfcfe5ad62b2de1c11f24eb"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents the details of your deal properties.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_timestamp": {"name": "change_timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related deal record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.851732, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_property_history\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled','hubspot_deal_property_history_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_property_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_property_history_tmp')),\n                staging_columns=get_deal_property_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        deal_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        cast(change_timestamp as {{ dbt.type_timestamp() }}) as change_timestamp, -- source field name = timestamp ; alias declared in macros/get_deal_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__deal_property_history_tmp", "package": null, "version": null}, {"name": "stg_hubspot__deal_property_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_property_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__deal_property_history_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_property_history.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_property_history_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    deal_id\n    \n as \n    \n    deal_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    timestamp\n    \n as change_timestamp , \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        deal_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        cast(change_timestamp as TIMESTAMP) as change_timestamp, -- source field name = timestamp ; alias declared in macros/get_deal_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_forward": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_forward", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_forward.sql", "original_file_path": "models/stg_hubspot__email_event_forward.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_forward", "fqn": ["hubspot_source", "stg_hubspot__email_event_forward"], "alias": "stg_hubspot__email_event_forward", "checksum": {"name": "sha256", "checksum": "d4eccb85e8409a16834145d08b028902bd6dad86620579866468492f67e3cddb"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a FORWARD email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.897107, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_forward\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_forward_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_forward_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_forward_tmp')),\n                staging_columns=get_email_event_forward_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        browser,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_forward_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_forward_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_forward_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_forward_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_forward.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_forward_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    browser\n    \n as \n    \n    browser\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    ip_address\n    \n as \n    \n    ip_address\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    user_agent\n    \n as \n    \n    user_agent\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        browser,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_bounce": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_bounce", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_bounce.sql", "original_file_path": "models/stg_hubspot__email_event_bounce.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_bounce", "fqn": ["hubspot_source", "stg_hubspot__email_event_bounce"], "alias": "stg_hubspot__email_event_bounce", "checksum": {"name": "sha256", "checksum": "671d9fd3b7f60ddbbd22dbbfa1bd080c78d4228d72c850f6212582f1ba4c4356"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a BOUNCE email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bounce_category": {"name": "bounce_category", "description": "The best-guess of the type of bounce encountered. \nIf an appropriate category couldn't be determined, this property is omitted. See below for the possible values. \nNote that this is a derived value, and may be modified at any time to improve the accuracy of classification.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "returned_status": {"name": "returned_status", "description": "The status code returned from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.892888, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_bounce\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_bounce_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_bounce_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_bounce_tmp')),\n                staging_columns=get_email_event_bounce_columns()\n            )\n        }}\n    from base\n    \n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        category as bounce_category,\n        id as event_id,\n        response as returned_response,\n        status as returned_status\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_bounce_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_bounce_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_bounce_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_bounce_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_bounce.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_bounce_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    response\n    \n as \n    \n    response\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n    from base\n    \n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        category as bounce_category,\n        id as event_id,\n        response as returned_response,\n        status as returned_status\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__ticket_engagement": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_engagement", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket_engagement.sql", "original_file_path": "models/stg_hubspot__ticket_engagement.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_engagement", "fqn": ["hubspot_source", "stg_hubspot__ticket_engagement"], "alias": "stg_hubspot__ticket_engagement", "checksum": {"name": "sha256", "checksum": "82f71872cf040a5feb2fd51fadcac19bedc9894f218cbe801f755af3a6d23556"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a ticket and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.953853, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_engagement\"", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_engagement_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__ticket_engagement_tmp')) %}\n        {% set new_cols = remove_duplicate_and_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_ticket_engagement_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_ticket_engagement_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            {{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_engagement_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_engagement_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_engagement_columns", "macro.hubspot_source.get_macro_columns", "macro.hubspot_source.remove_duplicate_and_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__ticket_engagement_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__ticket_engagement.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_engagement_tmp\"\n\n), macro as (\n\n    select\n        \n        \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n\n\n\n         \n            \n        \n        \n\n        \n        \n\n \n        \n    from base\n\n)\n\nselect *\nfrom macro", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__ticket_pipeline_stage": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_pipeline_stage", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket_pipeline_stage.sql", "original_file_path": "models/stg_hubspot__ticket_pipeline_stage.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_pipeline_stage", "fqn": ["hubspot_source", "stg_hubspot__ticket_pipeline_stage"], "alias": "stg_hubspot__ticket_pipeline_stage", "checksum": {"name": "sha256", "checksum": "c7f68a6e572d49bd8f0b702db2b91bf73b82e3eed6a4e2945ba751417c5e965d"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a ticket pipeline stage.", "columns": {"is_ticket_pipeline_stage_deleted": {"name": "is_ticket_pipeline_stage_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether the pipeline stage is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Boolean indicating if the pipeline stage is closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_stage_label": {"name": "pipeline_stage_label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_id": {"name": "ticket_pipeline_id", "description": "The ID of the pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_stage_id": {"name": "ticket_pipeline_stage_id", "description": "The ID of the pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_state": {"name": "ticket_state", "description": "State of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_stage_created_at": {"name": "ticket_pipeline_stage_created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_stage_updated_at": {"name": "ticket_pipeline_stage_updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.957386, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_pipeline_stage\"", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_pipeline_stage_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_pipeline_stage_tmp')),\n                staging_columns=get_ticket_pipeline_stage_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        _fivetran_deleted as is_ticket_pipeline_stage_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        active as is_active,\n        display_order,\n        is_closed,\n        label as pipeline_stage_label,\n        cast(pipeline_id as {{ dbt.type_int() }} ) as ticket_pipeline_id,\n        cast(stage_id as {{ dbt.type_int() }} ) as ticket_pipeline_stage_id,\n        ticket_state,\n        created_at as ticket_pipeline_stage_created_at,\n        updated_at as ticket_pipeline_stage_updated_at\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_pipeline_stage_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_pipeline_stage_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_pipeline_stage_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_int"], "nodes": ["model.hubspot_source.stg_hubspot__ticket_pipeline_stage_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__ticket_pipeline_stage.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_pipeline_stage_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    display_order\n    \n as \n    \n    display_order\n    \n, \n    \n    \n    is_closed\n    \n as \n    \n    is_closed\n    \n, \n    \n    \n    label\n    \n as \n    \n    label\n    \n, \n    \n    \n    pipeline_id\n    \n as \n    \n    pipeline_id\n    \n, \n    \n    \n    stage_id\n    \n as \n    \n    stage_id\n    \n, \n    \n    \n    ticket_state\n    \n as \n    \n    ticket_state\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        _fivetran_deleted as is_ticket_pipeline_stage_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        active as is_active,\n        display_order,\n        is_closed,\n        label as pipeline_stage_label,\n        cast(pipeline_id as INT ) as ticket_pipeline_id,\n        cast(stage_id as INT ) as ticket_pipeline_stage_id,\n        ticket_state,\n        created_at as ticket_pipeline_stage_created_at,\n        updated_at as ticket_pipeline_stage_updated_at\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_company": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_company", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_company.sql", "original_file_path": "models/stg_hubspot__engagement_company.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_company", "fqn": ["hubspot_source", "stg_hubspot__engagement_company"], "alias": "stg_hubspot__engagement_company", "checksum": {"name": "sha256", "checksum": "9c9074a9a5171e21c398ba23a0a96ff41bdc3645e0ba718aaf6d1a43824772b1"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a company and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.9353979, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_company\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_company_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_company_tmp') }}\n\n), macro as (\n\n    select \n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_company_tmp')) %}\n        {% set new_cols = remove_duplicate_and_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_company_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_company_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            {{ new_cols }} \n        {% endif %}\n    from base\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_company_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_company_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_company_columns", "macro.hubspot_source.get_macro_columns", "macro.hubspot_source.remove_duplicate_and_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_company_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_company.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_company_tmp\"\n\n), macro as (\n\n    select \n        \n        \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    company_id\n    \n as \n    \n    company_id\n    \n, \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n\n\n\n         \n            \n        \n        \n        \n        \n\n        \n        \n        , \"engagement_type\"\n        , \"type_id\"\n\n \n        \n    from base\n)\n\nselect *\nfrom macro", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_deferred": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_deferred", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_deferred.sql", "original_file_path": "models/stg_hubspot__email_event_deferred.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_deferred", "fqn": ["hubspot_source", "stg_hubspot__email_event_deferred"], "alias": "stg_hubspot__email_event_deferred", "checksum": {"name": "sha256", "checksum": "5c080e559db29896f09bc8d0197610bc5c1ba579e9707e89d6e3525d8e58a4f7"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a DEFERRED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attempt_number": {"name": "attempt_number", "description": "The delivery attempt number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.89479, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_deferred\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_deferred_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_deferred_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_deferred_tmp')),\n                staging_columns=get_email_event_deferred_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        attempt as attempt_number,\n        id as event_id,\n        response as returned_response\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_deferred_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_deferred_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_deferred_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_deferred_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_deferred.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_deferred_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    attempt\n    \n as \n    \n    attempt\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    response\n    \n as \n    \n    response\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        attempt as attempt_number,\n        id as event_id,\n        response as returned_response\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__company": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__company", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__company.sql", "original_file_path": "models/stg_hubspot__company.sql", "unique_id": "model.hubspot_source.stg_hubspot__company", "fqn": ["hubspot_source", "stg_hubspot__company"], "alias": "stg_hubspot__company", "checksum": {"name": "sha256", "checksum": "01bed9aea97a20394c106fdc850626e5b1efdabd39fa94b35e6eed54bb44a4ae"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a company in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_company_deleted": {"name": "is_company_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The name of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A short statement about the company's mission and goals.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date the company was added to your account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "industry": {"name": "industry", "description": "The type of business the company performs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "street_address": {"name": "street_address", "description": "The street address of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "street_address_2": {"name": "street_address_2", "description": "Additional address information for the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "The city where the company is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The state where the company is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "The country where the company is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_annual_revenue": {"name": "company_annual_revenue", "description": "The actual or estimated annual revenue of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__company.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369228.051737, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__company\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__company_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__company_tmp')),\n                staging_columns=get_company_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n\n{% if var('hubspot__pass_through_all_columns', false) %}\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__company_tmp')),\n                staging_columns=get_company_columns()\n            )\n        }}\n        {% if all_passthrough_column_check('stg_hubspot__company_tmp',get_company_columns()) > 0 %}\n        -- just pass everything through if extra columns are present, but ensure required columns are present.\n        ,{{ \n            fivetran_utils.remove_prefix_from_columns(\n                columns=adapter.get_columns_in_relation(ref('stg_hubspot__company_tmp')), \n                prefix='property_', exclude=get_macro_columns(get_company_columns()))\n        }}\n        {% endif %}\n    from base\n\n{% else %}\n        -- just default columns + explicitly configured passthrough columns\n        -- a few columns below are aliased within the macros/get_company_columns.sql macro\n        company_id,\n        is_company_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        company_name,\n        description,\n        created_date,\n        industry,\n        street_address,\n        street_address_2,\n        city,\n        state,\n        country,\n        company_annual_revenue\n        \n        --The below macro adds the fields defined within your hubspot__ticket_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('hubspot__company_pass_through_columns') }}\n\n        -- The below macro add the ability to create calculated fields using the hubspot__company_calculated_fields variable.\n        {{ fivetran_utils.calculated_fields('hubspot__company_calculated_fields') }}\n        \n    from macro\n\n{% endif %}\n\n), joined as (\n    {{ add_property_labels('hubspot__company_pass_through_columns', cte_name='fields') }}\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "stg_hubspot__company_tmp", "package": null, "version": null}, {"name": "stg_hubspot__company_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_company_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns", "macro.fivetran_utils.calculated_fields", "macro.hubspot_source.add_property_labels"], "nodes": ["model.hubspot_source.stg_hubspot__company_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__company.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__company_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as company_id , \n    \n    \n    is_deleted\n    \n as is_company_deleted , \n    \n    \n    property_name\n    \n as company_name , \n    \n    \n    property_description\n    \n as description , \n    \n    \n    property_createdate\n    \n as created_date , \n    \n    \n    property_industry\n    \n as industry , \n    \n    \n    property_address\n    \n as street_address , \n    \n    \n    property_address_2\n    \n as street_address_2 , \n    \n    \n    property_city\n    \n as city , \n    \n    \n    property_state\n    \n as state , \n    \n    \n    property_country\n    \n as country , \n    \n    \n    property_annualrevenue\n    \n as company_annual_revenue \n\n\n    from base\n\n), fields as (\n\n    select\n\n\n        -- just default columns + explicitly configured passthrough columns\n        -- a few columns below are aliased within the macros/get_company_columns.sql macro\n        company_id,\n        is_company_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        company_name,\n        description,\n        created_date,\n        industry,\n        street_address,\n        street_address_2,\n        city,\n        state,\n        country,\n        company_annual_revenue\n        \n        --The below macro adds the fields defined within your hubspot__ticket_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n        -- The below macro add the ability to create calculated fields using the hubspot__company_calculated_fields variable.\n        \n\n\n        \n    from macro\n\n\n\n), joined as (\n    \n\nselect fields.*\n\nfrom fields\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_contact": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__deal_contact", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__deal_contact.sql", "original_file_path": "models/stg_hubspot__deal_contact.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_contact", "fqn": ["hubspot_source", "stg_hubspot__deal_contact"], "alias": "stg_hubspot__deal_contact", "checksum": {"name": "sha256", "checksum": "a931817a5186b2be43b92ec13c7cb7086e392c1b4a39618b2150dadebdc93c9d"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a deal and contact.", "columns": {"contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type_id": {"name": "type_id", "description": "The ID of the type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.850674, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_contact\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled','hubspot_deal_contact_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_contact_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_contact_tmp')),\n                staging_columns=get_deal_contact_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        contact_id,\n        deal_id,\n        type_id,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n        \n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__deal_contact_tmp", "package": null, "version": null}, {"name": "stg_hubspot__deal_contact_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_contact_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__deal_contact_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_contact.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_contact_tmp\"\n\n), macro as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    deal_id\n    \n as \n    \n    deal_id\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n, \n    \n    \n    type_id\n    \n as \n    \n    type_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        contact_id,\n        deal_id,\n        type_id,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n        \n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_click": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_click", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_click.sql", "original_file_path": "models/stg_hubspot__email_event_click.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_click", "fqn": ["hubspot_source", "stg_hubspot__email_event_click"], "alias": "stg_hubspot__email_event_click", "checksum": {"name": "sha256", "checksum": "16a3df01bd62140fbd741c41e45bea6e3cf005c1852b4685d8d675d3df7ff8fa"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a CLICK email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "click_url": {"name": "click_url", "description": "The URL within the message that the recipient clicked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "referer_url": {"name": "referer_url", "description": "The URL of the webpage that linked to the URL clicked. Whether this is provided, and what its value is, is determined by the recipient's email client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.894308, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_click\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_click_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_click_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_click_tmp')),\n                staging_columns=get_email_event_click_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        browser,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        referer as referer_url,\n        url as click_url,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_click_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_click_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_click_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_click_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_click.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_click_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    browser\n    \n as \n    \n    browser\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    ip_address\n    \n as \n    \n    ip_address\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    referer\n    \n as \n    \n    referer\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    user_agent\n    \n as \n    \n    user_agent\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        browser,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        referer as referer_url,\n        url as click_url,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_call": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_call", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement_call.sql", "original_file_path": "models/stg_hubspot__engagement_call.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_call", "fqn": ["hubspot_source", "stg_hubspot__engagement_call"], "alias": "stg_hubspot__engagement_call", "checksum": {"name": "sha256", "checksum": "2f44ef105898d770385faab900745422562bc325040e45af8f18188498f4cadb"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a CALL engagement event. All source `property_hs_*` fields", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean to mark rows that were deleted in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "The type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "This field marks the call's time of creation and determines where the call sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "This field marks the call's time of occurrence and determines where the call sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner associated with the call. This field determines the user listed as the call creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "The ID of the team associated with the call. This field determines the team listed as the call creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.935074, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_call\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_call_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_call_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__engagement_call_tmp')) %}\n        {% set new_cols = remove_duplicate_and_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_engagement_call_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_engagement_call_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            {{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_call_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_call_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_call_columns", "macro.hubspot_source.get_macro_columns", "macro.hubspot_source.remove_duplicate_and_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_call_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_call.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_call_tmp\"\n\n), macro as (\n\n    select\n        \n        \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n, \n    \n    \n    type\n    \n as engagement_type , \n    \n    \n    property_hs_createdate\n    \n as created_timestamp , \n    \n    \n    property_hs_timestamp\n    \n as occurred_timestamp , \n    cast(null as INT) as owner_id , \n    cast(null as INT) as team_id \n\n\n         \n            \n        \n        \n\n        \n        \n\n \n        \n    from base\n\n)\n\nselect *\nfrom macro", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__engagement.sql", "original_file_path": "models/stg_hubspot__engagement.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement", "fqn": ["hubspot_source", "stg_hubspot__engagement"], "alias": "stg_hubspot__engagement", "checksum": {"name": "sha256", "checksum": "296e1f06efa0f834f31878eb6dd7e8585c15eb53ccc44fd04f7ed71b81787f82"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an engagement", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "One of NOTE, EMAIL, TASK, MEETING, or CALL, the type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.\nPLEASE NOTE - This field will only be populated for pre HubSpot v3 API versions. This field is only included to allow for backwards compatibility between HubSpot API versions. This field will be deprecated in the near future.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.\nPLEASE NOTE - This field will only be populated for pre HubSpot v3 API versions. This field is only included to allow for backwards compatibility between HubSpot API versions. This field will be deprecated in the near future.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "This field marks the call's time of creation and determines where the call sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for pre HubSpot v3 API versions. This field is only included to allow for backwards compatibility between HubSpot API versions. This field will be deprecated in the near future.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.\nPLEASE NOTE - This field will only be populated for pre HubSpot v3 API versions. This field is only included to allow for backwards compatibility between HubSpot API versions. This field will be deprecated in the near future.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.938586, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__engagement_tmp')),\n                staging_columns=get_engagement_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        id as engagement_id,\n        created_timestamp,\n        owner_id,\n        occurred_timestamp,\n        portal_id,\n        engagement_type,\n        is_active\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_tmp", "package": null, "version": null}, {"name": "stg_hubspot__engagement_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as boolean) as is_active , \n    cast(null as TIMESTAMP) as created_timestamp , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as INT) as \n    \n    owner_id\n    \n , \n    \n    \n    portal_id\n    \n as \n    \n    portal_id\n    \n, \n    cast(null as TIMESTAMP) as occurred_timestamp , \n    \n    \n    type\n    \n as engagement_type \n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        id as engagement_id,\n        created_timestamp,\n        owner_id,\n        occurred_timestamp,\n        portal_id,\n        engagement_type,\n        is_active\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_merge_audit": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__contact_merge_audit", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__contact_merge_audit.sql", "original_file_path": "models/stg_hubspot__contact_merge_audit.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_merge_audit", "fqn": ["hubspot_source", "stg_hubspot__contact_merge_audit"], "alias": "stg_hubspot__contact_merge_audit", "checksum": {"name": "sha256", "checksum": "24a493f53e2ee0a9c53f4906635c32992e3e9c19971caee2cd8cf4f00ef5bcd4"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record contains a contact merge event and the contacts effected by the merge.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "canonical_vid": {"name": "canonical_vid", "description": "The contact ID of the contact which the vid_to_merge contact was merged into.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "The ID of the related entity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The contact's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The contact's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_properties_moved": {"name": "num_properties_moved", "description": "The number of properties which were removed from the merged contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp_at": {"name": "timestamp_at", "description": "Timestamp of when the contacts were merged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID of the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vid_to_merge": {"name": "vid_to_merge", "description": "The ID of the contact which was merged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.884083, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_merge_audit\"", "raw_code": "{{ config(enabled=(var('hubspot_marketing_enabled', true) and var('hubspot_contact_merge_audit_enabled', false))) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_merge_audit_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_merge_audit_tmp')),\n                staging_columns=get_contact_merge_audit_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        canonical_vid,\n        contact_id,\n        entity_id,\n        first_name,\n        last_name,\n        num_properties_moved,\n        cast(\n        {%- if target.type == 'redshift' %}\n        \"timestamp\"\n        {%- else %} \n        timestamp {%- endif %}\n        as {{ dbt.type_timestamp() }}) as timestamp_at,\n        user_id,\n        vid_to_merge,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__contact_merge_audit_tmp", "package": null, "version": null}, {"name": "stg_hubspot__contact_merge_audit_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_contact_merge_audit_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__contact_merge_audit_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact_merge_audit.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_merge_audit_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    canonical_vid\n    \n as \n    \n    canonical_vid\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n, \n    \n    \n    entity_id\n    \n as \n    \n    entity_id\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    num_properties_moved\n    \n as \n    \n    num_properties_moved\n    \n, \n    \n    \n    timestamp\n    \n as \n    \n    timestamp\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    vid_to_merge\n    \n as \n    \n    vid_to_merge\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        canonical_vid,\n        contact_id,\n        entity_id,\n        first_name,\n        last_name,\n        num_properties_moved,\n        cast( \n        timestamp\n        as TIMESTAMP) as timestamp_at,\n        user_id,\n        vid_to_merge,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__ticket_company": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_company", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket_company.sql", "original_file_path": "models/stg_hubspot__ticket_company.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_company", "fqn": ["hubspot_source", "stg_hubspot__ticket_company"], "alias": "stg_hubspot__ticket_company", "checksum": {"name": "sha256", "checksum": "e004398745a0a990055ab5d31d6e3852354e61a8d64d9e599d44845a20a4ce83"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a ticket and company.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.9528902, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_company\"", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_company_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__ticket_company_tmp')) %}\n        {% set new_cols = remove_duplicate_and_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_ticket_company_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_ticket_company_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            {{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_company_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_company_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_company_columns", "macro.hubspot_source.get_macro_columns", "macro.hubspot_source.remove_duplicate_and_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__ticket_company_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__ticket_company.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_company_tmp\"\n\n), macro as (\n\n    select\n        \n        \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    \n    \n    company_id\n    \n as \n    \n    company_id\n    \n\n\n\n         \n            \n        \n        \n\n        \n        \n\n \n        \n    from base\n\n)\n\nselect *\nfrom macro", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_campaign": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_campaign", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_campaign.sql", "original_file_path": "models/stg_hubspot__email_campaign.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_campaign", "fqn": ["hubspot_source", "stg_hubspot__email_campaign"], "alias": "stg_hubspot__email_campaign", "checksum": {"name": "sha256", "checksum": "1b83c3c11cfc619842ed7b2d9552656afa484bc9692c796396339c6a8b673498"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an email campaign in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The app ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_name": {"name": "app_name", "description": "The app name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "The ID of the content.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_name": {"name": "email_campaign_name", "description": "The name of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_sub_type": {"name": "email_campaign_sub_type", "description": "The email campaign sub-type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_subject": {"name": "email_campaign_subject", "description": "The subject of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_type": {"name": "email_campaign_type", "description": "The email campaign type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_included": {"name": "num_included", "description": "The number of messages included as part of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_queued": {"name": "num_queued", "description": "The number of messages queued as part of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.904086, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_campaign\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_campaign_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_campaign_tmp')),\n                staging_columns=get_email_campaign_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        app_id,\n        app_name,\n        content_id,\n        id as email_campaign_id,\n        name as email_campaign_name,\n        num_included,\n        num_queued,\n        sub_type as email_campaign_sub_type,\n        subject as email_campaign_subject,\n        type as email_campaign_type\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_campaign_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_campaign_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_campaign_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__email_campaign_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_campaign.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_campaign_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    app_id\n    \n as \n    \n    app_id\n    \n, \n    \n    \n    app_name\n    \n as \n    \n    app_name\n    \n, \n    \n    \n    content_id\n    \n as \n    \n    content_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    num_included\n    \n as \n    \n    num_included\n    \n, \n    \n    \n    num_queued\n    \n as \n    \n    num_queued\n    \n, \n    \n    \n    sub_type\n    \n as \n    \n    sub_type\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        app_id,\n        app_name,\n        content_id,\n        id as email_campaign_id,\n        name as email_campaign_name,\n        num_included,\n        num_queued,\n        sub_type as email_campaign_sub_type,\n        subject as email_campaign_subject,\n        type as email_campaign_type\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__merged_deal": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__merged_deal", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__merged_deal.sql", "original_file_path": "models/stg_hubspot__merged_deal.sql", "unique_id": "model.hubspot_source.stg_hubspot__merged_deal", "fqn": ["hubspot_source", "stg_hubspot__merged_deal"], "alias": "stg_hubspot__merged_deal", "checksum": {"name": "sha256", "checksum": "eb3789e2238dd9f39d278ce37f2f0f2c8ebd4ec3576cdecb9b6b9ce473019381"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a deal that has been merged along with the related deal it's been merged into.", "columns": {"merged_deal_id": {"name": "merged_deal_id", "description": "ID of deal that has been merged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal the record has been merged INTO.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.852198, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__merged_deal\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled']) and var('hubspot_merged_deal_enabled', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_hubspot__merged_deal_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__merged_deal_tmp')),\n                staging_columns=get_merged_deal_columns()\n            )\n        }}\n    from base\n\n), fields as (\n    \n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        deal_id,\n        merged_deal_id\n    from macro\n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__merged_deal_tmp", "package": null, "version": null}, {"name": "stg_hubspot__merged_deal_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_merged_deal_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__merged_deal_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__merged_deal.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__merged_deal_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    deal_id\n    \n as \n    \n    deal_id\n    \n, \n    \n    \n    merged_deal_id\n    \n as \n    \n    merged_deal_id\n    \n\n\n\n    from base\n\n), fields as (\n    \n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        deal_id,\n        merged_deal_id\n    from macro\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_print": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_print", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_print.sql", "original_file_path": "models/stg_hubspot__email_event_print.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_print", "fqn": ["hubspot_source", "stg_hubspot__email_event_print"], "alias": "stg_hubspot__email_event_print", "checksum": {"name": "sha256", "checksum": "6a13b2210fdb5f229744329c16125a2444fcf405ce11f0821eb54cc0ddf3fa5f"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a PRINT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.897996, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_print\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_print_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_print_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_print_tmp')),\n                staging_columns=get_email_event_print_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        browser,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_print_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_print_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_print_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_print_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_print.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_print_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    browser\n    \n as \n    \n    browser\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    ip_address\n    \n as \n    \n    ip_address\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    user_agent\n    \n as \n    \n    user_agent\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        browser,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_property_history": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__contact_property_history", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__contact_property_history.sql", "original_file_path": "models/stg_hubspot__contact_property_history.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_property_history", "fqn": ["hubspot_source", "stg_hubspot__contact_property_history"], "alias": "stg_hubspot__contact_property_history", "checksum": {"name": "sha256", "checksum": "55a57c6883edb764085fb22f467afb556ae74631ab3090e12c86436175dd7aec"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a change to contact record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_timestamp": {"name": "change_timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.882355, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_property_history\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_property_enabled', 'hubspot_contact_property_history_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_property_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_property_history_tmp')),\n                staging_columns=get_contact_property_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        contact_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        cast(change_timestamp as {{ dbt.type_timestamp() }}) as change_timestamp, -- source field name = timestamp ; alias declared in macros/get_contact_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__contact_property_history_tmp", "package": null, "version": null}, {"name": "stg_hubspot__contact_property_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_contact_property_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__contact_property_history_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact_property_history.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_property_history_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    timestamp\n    \n as change_timestamp , \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        contact_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        cast(change_timestamp as TIMESTAMP) as change_timestamp, -- source field name = timestamp ; alias declared in macros/get_contact_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__ticket_property_history": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_property_history", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket_property_history.sql", "original_file_path": "models/stg_hubspot__ticket_property_history.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_property_history", "fqn": ["hubspot_source", "stg_hubspot__ticket_property_history"], "alias": "stg_hubspot__ticket_property_history", "checksum": {"name": "sha256", "checksum": "98b4fb15dcc81a36e3b0dd05e78fcf3dcd4e6141877500ea4ac649a3079119d0"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a change to ticket record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_start": {"name": "_fivetran_start", "description": "The (UTC DATETIME) to keep track of the time when a record is first created or modified in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_end": {"name": "_fivetran_end", "description": "The (UTC DATETIME) when a record became inactive in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_timestamp": {"name": "change_timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.954272, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_property_history\"", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_property_history_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__ticket_property_history_tmp')) %}\n        {% set new_cols = remove_duplicate_and_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_ticket_property_history_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_ticket_property_history_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            {{ new_cols }} \n        {% endif %}\n        from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_property_history_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_property_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_property_history_columns", "macro.hubspot_source.get_macro_columns", "macro.hubspot_source.remove_duplicate_and_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__ticket_property_history_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__ticket_property_history.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_property_history_tmp\"\n\n), macro as (\n\n    select\n        \n        \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_start\n    \n as \n    \n    _fivetran_start\n    \n, \n    \n    \n    _fivetran_end\n    \n as \n    \n    _fivetran_end\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    \n    \n    name\n    \n as field_name , \n    \n    \n    source\n    \n as change_source , \n    \n    \n    source_id\n    \n as change_source_id , \n    \n    \n    timestamp_instant\n    \n as change_timestamp , \n    \n    \n    value\n    \n as new_value \n\n\n         \n            \n        \n        \n\n        \n        \n\n \n        \n        from base\n\n)\n\nselect *\nfrom macro", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_open": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_open", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_open.sql", "original_file_path": "models/stg_hubspot__email_event_open.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_open", "fqn": ["hubspot_source", "stg_hubspot__email_event_open"], "alias": "stg_hubspot__email_event_open", "checksum": {"name": "sha256", "checksum": "a0bd3e1a3d51ee0c5a375d55982c1e4a2c9ac7f40f0a31ab4ac2d6b2d331edf2"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a OPEN email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration_open": {"name": "duration_open", "description": "If provided and nonzero, the approximate number of milliseconds the user had opened the email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.897632, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_open\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_open_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_open_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_open_tmp')),\n                staging_columns=get_email_event_open_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        browser,\n        duration as duration_open,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_open_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_open_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_open_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_open_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_open.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_open_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    browser\n    \n as \n    \n    browser\n    \n, \n    \n    \n    duration\n    \n as \n    \n    duration\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    ip_address\n    \n as \n    \n    ip_address\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    user_agent\n    \n as \n    \n    user_agent\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        browser,\n        duration as duration_open,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_sent": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_sent", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__email_event_sent.sql", "original_file_path": "models/stg_hubspot__email_event_sent.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_sent", "fqn": ["hubspot_source", "stg_hubspot__email_event_sent"], "alias": "stg_hubspot__email_event_sent", "checksum": {"name": "sha256", "checksum": "ed1e29f01e4798084ef7df929267165aa73f2c29ed3c3aa39cc7c3d154beb1a2"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a SENT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bcc_emails": {"name": "bcc_emails", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reply_to_email": {"name": "reply_to_email", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.898447, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_sent\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_sent_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_sent_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_sent_tmp')),\n                staging_columns=get_email_event_sent_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        bcc as bcc_emails,\n        cc as cc_emails,\n        from_email, -- source field name = from ; alias declared in macros/get_email_event_sent_columns.sql\n        id as event_id,\n        reply_to as reply_to_email,\n        subject as email_subject\n    from macro\n    \n)\n\nselect *\nfrom fields", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_sent_tmp", "package": null, "version": null}, {"name": "stg_hubspot__email_event_sent_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_sent_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_sent_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_sent.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_sent_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bcc\n    \n as \n    \n    bcc\n    \n, \n    \n    \n    cc\n    \n as \n    \n    cc\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    reply_to\n    \n as \n    \n    reply_to\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n        \n            \n            \"from\"\n            \n        \n    \n as from_email \n\n\n    from base\n\n), fields as (\n\n    select\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        bcc as bcc_emails,\n        cc as cc_emails,\n        from_email, -- source field name = from ; alias declared in macros/get_email_event_sent_columns.sql\n        id as event_id,\n        reply_to as reply_to_email,\n        subject as email_subject\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__ticket": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket.sql", "original_file_path": "models/stg_hubspot__ticket.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket", "fqn": ["hubspot_source", "stg_hubspot__ticket"], "alias": "stg_hubspot__ticket", "checksum": {"name": "sha256", "checksum": "9d24da1825ebcad77fba37d8e64e24866643fa0c337ee46901c760ebc476f1c8"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a ticket in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "ID of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_ticket_deleted": {"name": "is_ticket_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_date": {"name": "closed_date", "description": "The date the ticket was closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date the ticket was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_agent_reply_at": {"name": "first_agent_reply_at", "description": "the date for the first agent reply on the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_id": {"name": "ticket_pipeline_id", "description": "The ID of the ticket's pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_pipeline_stage_id": {"name": "ticket_pipeline_stage_id", "description": "The ID of the ticket's pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_priority": {"name": "ticket_priority", "description": "The priority of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_category": {"name": "ticket_category", "description": "The category of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the deal's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_subject": {"name": "ticket_subject", "description": "Short summary of ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_content": {"name": "ticket_content", "description": "Text in body of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.95616, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket\"", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_tmp')),\n                staging_columns=get_ticket_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n\n{% if var('hubspot__pass_through_all_columns', false) %}\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_tmp')),\n                staging_columns=get_ticket_columns()\n            )\n        }}\n        {% if all_passthrough_column_check('stg_hubspot__ticket_tmp',get_ticket_columns()) > 0 %}\n        -- just pass everything through if extra columns are present, but ensure required columns are present.\n        {{  \n            remove_duplicate_and_prefix_from_columns(\n                columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_tmp')), \n                prefix='property_', exclude=get_macro_columns(get_ticket_columns())) \n        }}\n        {% endif %}\n    from base\n\n{% else %}\n        -- just default columns + explicitly configured passthrough columns\n        -- a few columns below are aliased within the macros/get_ticket_columns.sql macro\n        ticket_id,\n        coalesce(_fivetran_ticket_deleted, is_ticket_deleted) as is_ticket_deleted,\n        cast(_fivetran_synced as {{ dbt.type_timestamp() }}) as _fivetran_synced,\n        cast(closed_date as {{ dbt.type_timestamp() }}) as closed_date,\n        cast(created_date as {{ dbt.type_timestamp() }}) as created_date,\n        first_agent_reply_at,\n        ticket_pipeline_id,\n        ticket_pipeline_stage_id,\n        ticket_category,\n        ticket_priority,\n        owner_id,\n        ticket_subject,\n        ticket_content\n\n        --The below macro adds the fields defined within your hubspot__ticket_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('hubspot__ticket_pass_through_columns') }}\n\n        -- The below macro add the ability to create calculated fields using the hubspot__ticket_calculated_fields variable.\n        {{ fivetran_utils.calculated_fields('hubspot__ticket_calculated_fields') }}\n        \n    from macro\n{% endif %}\n\n), joined as (\n    {{ add_property_labels('hubspot__ticket_pass_through_columns', cte_name='fields') }}\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns", "macro.fivetran_utils.calculated_fields", "macro.hubspot_source.add_property_labels"], "nodes": ["model.hubspot_source.stg_hubspot__ticket_tmp"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__ticket.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_tmp\"\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as ticket_id , \n    cast(null as boolean) as _fivetran_ticket_deleted , \n    \n    \n    is_deleted\n    \n as is_ticket_deleted , \n    \n    \n    property_closed_date\n    \n as closed_date , \n    \n    \n    property_createdate\n    \n as created_date , \n    \n    \n    property_first_agent_reply_date\n    \n as first_agent_reply_at , \n    \n    \n    property_hs_pipeline\n    \n as ticket_pipeline_id , \n    \n    \n    property_hs_pipeline_stage\n    \n as ticket_pipeline_stage_id , \n    \n    \n    property_hs_ticket_category\n    \n as ticket_category , \n    \n    \n    property_hs_ticket_priority\n    \n as ticket_priority , \n    \n    \n    property_hubspot_owner_id\n    \n as owner_id , \n    \n    \n    property_subject\n    \n as ticket_subject , \n    \n    \n    property_content\n    \n as ticket_content \n\n\n    from base\n\n), fields as (\n\n    select\n\n\n        -- just default columns + explicitly configured passthrough columns\n        -- a few columns below are aliased within the macros/get_ticket_columns.sql macro\n        ticket_id,\n        coalesce(_fivetran_ticket_deleted, is_ticket_deleted) as is_ticket_deleted,\n        cast(_fivetran_synced as TIMESTAMP) as _fivetran_synced,\n        cast(closed_date as TIMESTAMP) as closed_date,\n        cast(created_date as TIMESTAMP) as created_date,\n        first_agent_reply_at,\n        ticket_pipeline_id,\n        ticket_pipeline_stage_id,\n        ticket_category,\n        ticket_priority,\n        owner_id,\n        ticket_subject,\n        ticket_content\n\n        --The below macro adds the fields defined within your hubspot__ticket_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n        -- The below macro add the ability to create calculated fields using the hubspot__ticket_calculated_fields variable.\n        \n\n\n        \n    from macro\n\n\n), joined as (\n    \n\nselect fields.*\n\nfrom fields\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_property_history_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__contact_property_history_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__contact_property_history_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_property_history_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_property_history_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_property_history_tmp"], "alias": "stg_hubspot__contact_property_history_tmp", "checksum": {"name": "sha256", "checksum": "364cb027689a5362c3e7ac01c0435001f7b4bdd4e184dd3de3577a698e759f9b"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.549987, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_property_history_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_property_enabled', 'hubspot_contact_property_history_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','contact_property_history')) }}\nfrom {{ var('contact_property_history') }}", "language": "sql", "refs": [], "sources": [["hubspot", "contact_property_history"], ["hubspot", "contact_property_history"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.contact_property_history"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__contact_property_history_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"contact_id\",\n  \"timestamp\",\n  \"_fivetran_synced\",\n  \"source\",\n  \"name\",\n  \"value\",\n  \"source_id\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"contact_property_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_dropped_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_dropped_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_dropped_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_dropped_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_dropped_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_dropped_tmp"], "alias": "stg_hubspot__email_event_dropped_tmp", "checksum": {"name": "sha256", "checksum": "2b9824c3aafeb88f4101b90f0f5cc2aa5a636950cc35c44a908f82af6292f168"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.5646029, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_dropped_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_dropped_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','email_event_dropped')) }}\nfrom {{ var('email_event_dropped') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_dropped"], ["hubspot", "email_event_dropped"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.email_event_dropped"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_dropped_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"_fivetran_synced\",\n  \"drop_reason\",\n  \"bcc\",\n  \"cc\",\n  \"drop_message\",\n  \"from\",\n  \"reply_to\",\n  \"subject\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_dropped_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_sent_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_sent_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_sent_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_sent_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_sent_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_sent_tmp"], "alias": "stg_hubspot__email_event_sent_tmp", "checksum": {"name": "sha256", "checksum": "c29ca2afe4321aa842b1fedc68ee66a5ff80d1334d033b206431eb0af10b5139"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.5701902, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_sent_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_sent_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','email_event_sent')) }}\nfrom {{ var('email_event_sent') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_sent"], ["hubspot", "email_event_sent"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.email_event_sent"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_sent_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"_fivetran_synced\",\n  \"bcc\",\n  \"cc\",\n  \"from\",\n  \"reply_to\",\n  \"subject\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_sent_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__deal_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__deal_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_tmp"], "alias": "stg_hubspot__deal_tmp", "checksum": {"name": "sha256", "checksum": "0d922e205b0d5b13c68d93510f776ffe6780680619333ba1a23d0bf9e75a9e79"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.575113, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','deal')) }}\nfrom {{ var('deal') }}", "language": "sql", "refs": [], "sources": [["hubspot", "deal"], ["hubspot", "deal"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.deal"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"deal_id\",\n  \"is_deleted\",\n  \"deal_pipeline_id\",\n  \"deal_pipeline_stage_id\",\n  \"owner_id\",\n  \"portal_id\",\n  \"property_dealname\",\n  \"property_description\",\n  \"property_amount\",\n  \"property_closedate\",\n  \"property_createdate\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"deal_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__property_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__property_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__property_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__property_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__property_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__property_tmp"], "alias": "stg_hubspot__property_tmp", "checksum": {"name": "sha256", "checksum": "456f6901dcb5c3057169776855d5fe6fd9287e64e4dbd0fb17fed86b4fd99a9a"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.580012, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__property_tmp\"", "raw_code": "{{ config(enabled=var('hubspot_property_enabled', True)) }}\n\nselect {{ dbt_utils.star(source('hubspot','property')) }}\nfrom {{ var('property') }}", "language": "sql", "refs": [], "sources": [["hubspot", "property"], ["hubspot", "property"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.property"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__property_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"_fivetran_id\",\n  \"_fivetran_synced\",\n  \"calculated\",\n  \"created_at\",\n  \"description\",\n  \"field_type\",\n  \"group_name\",\n  \"hubspot_defined\",\n  \"hubspot_object\",\n  \"label\",\n  \"name\",\n  \"show_currency_symbol\",\n  \"type\",\n  \"updated_at\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"property_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__ticket_company_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_company_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_company_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_company_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_company_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_company_tmp"], "alias": "stg_hubspot__ticket_company_tmp", "checksum": {"name": "sha256", "checksum": "996694c6b6e2720cf945f205cb635a459b3c4bab627d8fe4cfed835443e6ece2"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.584383, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_company_tmp\"", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect {{ dbt_utils.star(source('hubspot','ticket_company')) }}\nfrom {{ var('ticket_company') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket_company"], ["hubspot", "ticket_company"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.ticket_company"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__ticket_company_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"_fivetran_synced\",\n  \"ticket_id\",\n  \"company_id\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_company_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_contact_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__deal_contact_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__deal_contact_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_contact_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_contact_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_contact_tmp"], "alias": "stg_hubspot__deal_contact_tmp", "checksum": {"name": "sha256", "checksum": "8665274a558f1f33e5a32538a6c9a8ca79dd8d4ea14df93a16de2e4243edd9dd"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.5900302, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_contact_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled','hubspot_deal_contact_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','deal_contact')) }}\nfrom {{ var('deal_contact') }}", "language": "sql", "refs": [], "sources": [["hubspot", "deal_contact"], ["hubspot", "deal_contact"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.deal_contact"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_contact_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"contact_id\",\n  \"deal_id\",\n  \"_fivetran_synced\",\n  \"type_id\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"deal_contact_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__merged_deal_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__merged_deal_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__merged_deal_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__merged_deal_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__merged_deal_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__merged_deal_tmp"], "alias": "stg_hubspot__merged_deal_tmp", "checksum": {"name": "sha256", "checksum": "de6595cdfc6083a39caeba511d252130706aac696537e09ee02b9d62a4083bd7"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.5945148, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__merged_deal_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled']) and var('hubspot_merged_deal_enabled', False)) }}\n\nselect {{ dbt_utils.star(source('hubspot','merged_deal')) }}\nfrom {{ var('merged_deal') }}", "language": "sql", "refs": [], "sources": [["hubspot", "merged_deal"], ["hubspot", "merged_deal"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.merged_deal"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__merged_deal_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"deal_id\",\n  \"merged_deal_id\",\n  \"_fivetran_synced\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"merged_deal_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_list_member_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__contact_list_member_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__contact_list_member_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_list_member_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_list_member_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_list_member_tmp"], "alias": "stg_hubspot__contact_list_member_tmp", "checksum": {"name": "sha256", "checksum": "295e1bb2638c76c1036a1965d80c4dbb63bc414c9291f5c0be01c60445c78a27"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.599276, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_list_member_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_list_member_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','contact_list_member')) }}\nfrom {{ var('contact_list_member') }}", "language": "sql", "refs": [], "sources": [["hubspot", "contact_list_member"], ["hubspot", "contact_list_member"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.contact_list_member"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__contact_list_member_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"contact_id\",\n  \"contact_list_id\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"added_at\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"contact_list_member_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__owner_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__owner_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__owner_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__owner_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__owner_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__owner_tmp"], "alias": "stg_hubspot__owner_tmp", "checksum": {"name": "sha256", "checksum": "5cb88918614065f81dd1c080c09f72d31f159b823a2f001ca7b04ee7c8472363"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.603762, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__owner_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_owner_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','owner')) }}\nfrom {{ var('owner') }}", "language": "sql", "refs": [], "sources": [["hubspot", "owner"], ["hubspot", "owner"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.owner"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__owner_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"owner_id\",\n  \"_fivetran_synced\",\n  \"created_at\",\n  \"portal_id\",\n  \"type\",\n  \"updated_at\",\n  \"email\",\n  \"first_name\",\n  \"last_name\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"owner_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_stage_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__deal_stage_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__deal_stage_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_stage_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_stage_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_stage_tmp"], "alias": "stg_hubspot__deal_stage_tmp", "checksum": {"name": "sha256", "checksum": "10cb8e334bb0b6654d754a1f4c93706d918bf9b751da09688dc4c80cf6f57aeb"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.6090088, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_stage_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','deal_stage')) }}\nfrom {{ var('deal_stage') }}", "language": "sql", "refs": [], "sources": [["hubspot", "deal_stage"], ["hubspot", "deal_stage"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.deal_stage"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_stage_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"_fivetran_start\",\n  \"deal_id\",\n  \"_fivetran_active\",\n  \"_fivetran_end\",\n  \"_fivetran_synced\",\n  \"date_entered\",\n  \"source\",\n  \"source_id\",\n  \"value\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"deal_stage_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_pipeline_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__deal_pipeline_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__deal_pipeline_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_pipeline_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_pipeline_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_pipeline_tmp"], "alias": "stg_hubspot__deal_pipeline_tmp", "checksum": {"name": "sha256", "checksum": "27e4db8ed20c2f4ce646fbe86a637174ff7c223f2cda1a86fbfa3470b42ebcb8"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.6135209, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_pipeline_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','deal_pipeline')) }}\nfrom {{ var('deal_pipeline') }}", "language": "sql", "refs": [], "sources": [["hubspot", "deal_pipeline"], ["hubspot", "deal_pipeline"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.deal_pipeline"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_pipeline_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"pipeline_id\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"active\",\n  \"display_order\",\n  \"label\",\n  \"created_at\",\n  \"updated_at\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"deal_pipeline_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__ticket_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_tmp"], "alias": "stg_hubspot__ticket_tmp", "checksum": {"name": "sha256", "checksum": "9a66623399a61e8020f166986f4b41a1cdd57c3c7477a69ff63585c4300a096a"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.6180742, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_tmp\"", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect {{ dbt_utils.star(source('hubspot','ticket')) }}\nfrom {{ var('ticket') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket"], ["hubspot", "ticket"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.ticket"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__ticket_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"_fivetran_synced\",\n  \"id\",\n  \"is_deleted\",\n  \"property_closed_date\",\n  \"property_createdate\",\n  \"property_first_agent_reply_date\",\n  \"property_hs_pipeline\",\n  \"property_hs_pipeline_stage\",\n  \"property_hs_ticket_category\",\n  \"property_hs_ticket_priority\",\n  \"property_hubspot_owner_id\",\n  \"property_subject\",\n  \"property_content\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__ticket_property_history_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_property_history_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_property_history_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_property_history_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_property_history_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_property_history_tmp"], "alias": "stg_hubspot__ticket_property_history_tmp", "checksum": {"name": "sha256", "checksum": "5b621b698af288c5acfeb3487125410824558f92ba57aeb9e94961e1d95bae7d"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.622881, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_property_history_tmp\"", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect {{ dbt_utils.star(source('hubspot','ticket_property_history')) }}\nfrom {{ var('ticket_property_history') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket_property_history"], ["hubspot", "ticket_property_history"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.ticket_property_history"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__ticket_property_history_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"_fivetran_synced\",\n  \"ticket_id\",\n  \"name\",\n  \"source\",\n  \"source_id\",\n  \"timestamp_instant\",\n  \"value\",\n  \"_fivetran_start\",\n  \"_fivetran_end\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_property_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__ticket_pipeline_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_pipeline_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_pipeline_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_pipeline_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_pipeline_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_pipeline_tmp"], "alias": "stg_hubspot__ticket_pipeline_tmp", "checksum": {"name": "sha256", "checksum": "b3d22754297dbff7d816b2cdf48b30e23b9e8eef05b5c653cf619c4400a05296"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.62751, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_pipeline_tmp\"", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect {{ dbt_utils.star(source('hubspot','ticket_pipeline')) }}\nfrom {{ var('ticket_pipeline') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket_pipeline"], ["hubspot", "ticket_pipeline"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.ticket_pipeline"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__ticket_pipeline_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"pipeline_id\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"active\",\n  \"display_order\",\n  \"label\",\n  \"object_type_id\",\n  \"created_at\",\n  \"updated_at\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_pipeline_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_company_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_company_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_company_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_company_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_company_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_company_tmp"], "alias": "stg_hubspot__engagement_company_tmp", "checksum": {"name": "sha256", "checksum": "5d2d129aa291701c26f5fd3aefdee1b0c68ff5a7481ff73e3a17b7cefff10890"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.632983, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_company_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_company_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','engagement_company')) }}\nfrom {{ var('engagement_company') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_company"], ["hubspot", "engagement_company"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.engagement_company"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_company_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"company_id\",\n  \"engagement_id\",\n  \"engagement_type\",\n  \"type_id\",\n  \"_fivetran_synced\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_company_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__contact_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__contact_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_tmp"], "alias": "stg_hubspot__contact_tmp", "checksum": {"name": "sha256", "checksum": "3ada4c947aafd9ce78ecd57515f4ebfe3f372971ba5e01f87d612f6c13887529"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.637503, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','contact')) }}\nfrom {{ var('contact') }}", "language": "sql", "refs": [], "sources": [["hubspot", "contact"], ["hubspot", "contact"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.contact"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__contact_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"property_email\",\n  \"id\",\n  \"property_company\",\n  \"property_firstname\",\n  \"property_lastname\",\n  \"property_email_1\",\n  \"property_createdate\",\n  \"property_jobtitle\",\n  \"property_annualrevenue\",\n  \"property_hs_calculated_merged_vids\",\n  \"property_created_at\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"contact_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_status_change_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_status_change_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_status_change_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_status_change_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_status_change_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_status_change_tmp"], "alias": "stg_hubspot__email_event_status_change_tmp", "checksum": {"name": "sha256", "checksum": "6f7e252457f5a053b3793eaed4c611af40c1e6d27175a3b84dc2fd3772a204f0"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.642167, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_status_change_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_status_change_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','email_event_status_change')) }}\nfrom {{ var('email_event_status_change') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_status_change"], ["hubspot", "email_event_status_change"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.email_event_status_change"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_status_change_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"_fivetran_synced\",\n  \"bounced\",\n  \"portal_subscription_status\",\n  \"requested_by\",\n  \"source\",\n  \"subscriptions\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_status_change_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_note_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_note_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_note_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_note_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_note_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_note_tmp"], "alias": "stg_hubspot__engagement_note_tmp", "checksum": {"name": "sha256", "checksum": "96e8ff3091895bb1679920136f80fd27afa930653e4606a1d0325294180e12e3"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.64695, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_note_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_note_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','engagement_note')) }}\nfrom {{ var('engagement_note') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_note"], ["hubspot", "engagement_note"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.engagement_note"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_note_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"engagement_id\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"property_hs_body_preview\",\n  \"property_hs_createdate\",\n  \"property_hs_lastmodifieddate\",\n  \"property_hs_note_body\",\n  \"property_hs_timestamp\",\n  \"property_hubspot_owner_id\",\n  \"property_hubspot_team_id\",\n  \"type\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_note_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__ticket_contact_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_contact_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_contact_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_contact_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_contact_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_contact_tmp"], "alias": "stg_hubspot__ticket_contact_tmp", "checksum": {"name": "sha256", "checksum": "98ec02f8b62069eb37895509e7eecaaca38b9bf98812848e3a7a10fb6c1e8169"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.6516008, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_contact_tmp\"", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect {{ dbt_utils.star(source('hubspot','ticket_contact')) }}\nfrom {{ var('ticket_contact') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket_contact"], ["hubspot", "ticket_contact"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.ticket_contact"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__ticket_contact_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"_fivetran_synced\",\n  \"ticket_id\",\n  \"contact_id\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_contact_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_company_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__deal_company_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__deal_company_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_company_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_company_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_company_tmp"], "alias": "stg_hubspot__deal_company_tmp", "checksum": {"name": "sha256", "checksum": "fb6f6d2afe8d421384d0583ef64ba66935ab078185562774d348f82434f38d06"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.6569972, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_company_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled','hubspot_deal_company_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','deal_company')) }}\nfrom {{ var('deal_company') }}", "language": "sql", "refs": [], "sources": [["hubspot", "deal_company"], ["hubspot", "deal_company"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.deal_company"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_company_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"company_id\",\n  \"deal_id\",\n  \"type_id\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"deal_company_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_merge_audit_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__contact_merge_audit_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__contact_merge_audit_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_merge_audit_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_merge_audit_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_merge_audit_tmp"], "alias": "stg_hubspot__contact_merge_audit_tmp", "checksum": {"name": "sha256", "checksum": "cde68865b9f8bbdc1c0503dccd95eb264aceedcdf0b284a6356be60796ee3a29"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.661365, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_merge_audit_tmp\"", "raw_code": "{{ config(enabled=(var('hubspot_marketing_enabled', true) and var('hubspot_contact_merge_audit_enabled', false))) }}\n\nselect {{ dbt_utils.star(source('hubspot','contact_merge_audit')) }}\nfrom {{ var('contact_merge_audit') }}", "language": "sql", "refs": [], "sources": [["hubspot", "contact_merge_audit"], ["hubspot", "contact_merge_audit"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.contact_merge_audit"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__contact_merge_audit_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"canonical_vid\",\n  \"contact_id\",\n  \"vid_to_merge\",\n  \"_fivetran_synced\",\n  \"entity_id\",\n  \"first_name\",\n  \"last_name\",\n  \"num_properties_moved\",\n  \"timestamp\",\n  \"user_id\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"contact_merge_audit_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_deal_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_deal_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_deal_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_deal_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_deal_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_deal_tmp"], "alias": "stg_hubspot__engagement_deal_tmp", "checksum": {"name": "sha256", "checksum": "de1fafb3ca754b1a61b8306362a46ea778d6786e572cfcf28b401c0a8a5a167c"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.666446, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_deal_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_deal_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','engagement_deal')) }}\nfrom {{ var('engagement_deal') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_deal"], ["hubspot", "engagement_deal"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.engagement_deal"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_deal_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"deal_id\",\n  \"engagement_id\",\n  \"engagement_type\",\n  \"type_id\",\n  \"_fivetran_synced\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_deal_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_print_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_print_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_print_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_print_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_print_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_print_tmp"], "alias": "stg_hubspot__email_event_print_tmp", "checksum": {"name": "sha256", "checksum": "df7d7922376004718d7a7ee365bcc6caf2b342a84cf5bc87f2830b1d3b20b6b0"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.671315, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_print_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_print_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','email_event_print')) }}\nfrom {{ var('email_event_print') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_print"], ["hubspot", "email_event_print"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.email_event_print"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_print_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"_fivetran_synced\",\n  \"browser\",\n  \"ip_address\",\n  \"location\",\n  \"user_agent\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_print_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__company_property_history_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__company_property_history_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__company_property_history_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__company_property_history_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__company_property_history_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__company_property_history_tmp"], "alias": "stg_hubspot__company_property_history_tmp", "checksum": {"name": "sha256", "checksum": "4ae834bbfe3f7c70b5b4fed50212678a3b58a911510d136ab5fe6e2a7d6298f2"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.6758022, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__company_property_history_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled','hubspot_company_property_history_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','company_property_history')) }}\nfrom {{ var('company_property_history') }}", "language": "sql", "refs": [], "sources": [["hubspot", "company_property_history"], ["hubspot", "company_property_history"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.company_property_history"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__company_property_history_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"company_id\",\n  \"timestamp\",\n  \"_fivetran_synced\",\n  \"source\",\n  \"source_id\",\n  \"name\",\n  \"value\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"company_property_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_tmp"], "alias": "stg_hubspot__email_event_tmp", "checksum": {"name": "sha256", "checksum": "f39e16d9ad02daf0c442b069523e46da8566a881ee3ead4eafe6dfe67f418651"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.681484, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','email_event')) }}\nfrom {{ var('email_event') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event"], ["hubspot", "email_event"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.email_event"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"_fivetran_synced\",\n  \"app_id\",\n  \"caused_by_created\",\n  \"caused_by_id\",\n  \"created\",\n  \"email_campaign_id\",\n  \"obsoleted_by_created\",\n  \"obsoleted_by_id\",\n  \"portal_id\",\n  \"sent_by_created\",\n  \"sent_by_id\",\n  \"type\",\n  \"filtered_event\",\n  \"recipient\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__company_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__company_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__company_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__company_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__company_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__company_tmp"], "alias": "stg_hubspot__company_tmp", "checksum": {"name": "sha256", "checksum": "27c8454bd7c6a6b41e2f9d37d107d9cbf2be060fa85078dce3b1ba4ecaffdbe3"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.68584, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__company_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','company')) }}\nfrom {{ var('company') }}", "language": "sql", "refs": [], "sources": [["hubspot", "company"], ["hubspot", "company"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.company"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__company_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"is_deleted\",\n  \"_fivetran_synced\",\n  \"property_name\",\n  \"property_description\",\n  \"property_createdate\",\n  \"property_industry\",\n  \"property_address\",\n  \"property_address_2\",\n  \"property_city\",\n  \"property_state\",\n  \"property_country\",\n  \"property_annualrevenue\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"company_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_click_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_click_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_click_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_click_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_click_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_click_tmp"], "alias": "stg_hubspot__email_event_click_tmp", "checksum": {"name": "sha256", "checksum": "4977790381d3d162e93322439730206c707b716e38a4c7c84b6605e8f139f117"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.690691, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_click_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_click_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','email_event_click')) }}\nfrom {{ var('email_event_click') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_click"], ["hubspot", "email_event_click"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.email_event_click"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_click_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"_fivetran_synced\",\n  \"referer\",\n  \"browser\",\n  \"location\",\n  \"ip_address\",\n  \"url\",\n  \"user_agent\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_click_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_contact_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_contact_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_contact_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_contact_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_contact_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_contact_tmp"], "alias": "stg_hubspot__engagement_contact_tmp", "checksum": {"name": "sha256", "checksum": "43a17e618e254d0b3b218be01de8777cf42a27bbefcdd413711eee0671157567"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.695096, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_contact_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_contact_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','engagement_contact')) }}\nfrom {{ var('engagement_contact') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_contact"], ["hubspot", "engagement_contact"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.engagement_contact"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_contact_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"contact_id\",\n  \"engagement_id\",\n  \"engagement_type\",\n  \"type_id\",\n  \"_fivetran_synced\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_contact_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__contact_list_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__contact_list_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__contact_list_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_list_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__contact_list_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_list_tmp"], "alias": "stg_hubspot__contact_list_tmp", "checksum": {"name": "sha256", "checksum": "17eb04e71bfd5d7867284735cf83ac719cc4a763665700b1d7a1d568a169af51"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.700864, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_list_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_list_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','contact_list')) }}\nfrom {{ var('contact_list') }}", "language": "sql", "refs": [], "sources": [["hubspot", "contact_list"], ["hubspot", "contact_list"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.contact_list"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__contact_list_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"created_at\",\n  \"deleteable\",\n  \"dynamic\",\n  \"metadata_error\",\n  \"metadata_last_processing_state_change_at\",\n  \"metadata_last_size_change_at\",\n  \"metadata_processing\",\n  \"metadata_size\",\n  \"offset\",\n  \"portal_id\",\n  \"updated_at\",\n  \"name\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"contact_list_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_meeting_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_meeting_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_meeting_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_meeting_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_meeting_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_meeting_tmp"], "alias": "stg_hubspot__engagement_meeting_tmp", "checksum": {"name": "sha256", "checksum": "6ed61d89d00df43a0e72eb813f0eb31ceb9274f195d3688ae695eeac9ebbb541"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.705664, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_meeting_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_meeting_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','engagement_meeting')) }}\nfrom {{ var('engagement_meeting') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_meeting"], ["hubspot", "engagement_meeting"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.engagement_meeting"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_meeting_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"engagement_id\",\n  \"_fivetran_synced\",\n  \"created_from_link_id\",\n  \"end_time\",\n  \"pre_meeting_prospect_reminders\",\n  \"source\",\n  \"source_id\",\n  \"start_time\",\n  \"web_conference_meeting_id\",\n  \"meeting_outcome\",\n  \"body\",\n  \"external_url\",\n  \"title\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_meeting_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_tmp"], "alias": "stg_hubspot__engagement_tmp", "checksum": {"name": "sha256", "checksum": "4393db2e2b7dc21d070ab8d3f0c307117d20dfae44f82dd02a7b538663914998"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.710138, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','engagement')) }}\nfrom {{ var('engagement') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement"], ["hubspot", "engagement"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.engagement"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"type\",\n  \"_fivetran_synced\",\n  \"portal_id\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_delivered_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_delivered_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_delivered_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_delivered_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_delivered_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_delivered_tmp"], "alias": "stg_hubspot__email_event_delivered_tmp", "checksum": {"name": "sha256", "checksum": "4c4d9bf22c620918fa5eef1e09be948ccb6e9e47790a551872ed1331d40866b2"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.714657, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_delivered_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_delivered_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','email_event_delivered')) }}\nfrom {{ var('email_event_delivered') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_delivered"], ["hubspot", "email_event_delivered"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.email_event_delivered"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_delivered_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"_fivetran_synced\",\n  \"response\",\n  \"smtp_id\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_delivered_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_email_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_email_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_email_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_email_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_email_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_email_tmp"], "alias": "stg_hubspot__engagement_email_tmp", "checksum": {"name": "sha256", "checksum": "0fa63bdff04c685528693346b245a9ec2e31a81b0a9e62e94c69d023e4346ad0"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.719094, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_email_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_email_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','engagement_email')) }}\nfrom {{ var('engagement_email') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_email"], ["hubspot", "engagement_email"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.engagement_email"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_email_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"engagement_id\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"property_hs_all_owner_ids\",\n  \"property_hs_all_team_ids\",\n  \"property_hs_createdate\",\n  \"property_hs_email_subject\",\n  \"property_hs_email_text\",\n  \"property_hs_lastmodifieddate\",\n  \"property_hs_modified_by\",\n  \"property_hs_timestamp\",\n  \"property_hubspot_owner_id\",\n  \"property_hubspot_team_id\",\n  \"type\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_email_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__property_option_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__property_option_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__property_option_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__property_option_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__property_option_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__property_option_tmp"], "alias": "stg_hubspot__property_option_tmp", "checksum": {"name": "sha256", "checksum": "2eb13730a9d2382409147856ac4a574eaa6af229cbb61e972cad6397fdcd1d98"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.724446, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__property_option_tmp\"", "raw_code": "{{ config(enabled=var('hubspot_property_enabled', True)) }}\n\nselect {{ dbt_utils.star(source('hubspot','property_option')) }}\nfrom {{ var('property_option') }}", "language": "sql", "refs": [], "sources": [["hubspot", "property_option"], ["hubspot", "property_option"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.property_option"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__property_option_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"label\",\n  \"property_id\",\n  \"_fivetran_synced\",\n  \"display_order\",\n  \"hidden\",\n  \"value\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"property_option_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_forward_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_forward_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_forward_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_forward_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_forward_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_forward_tmp"], "alias": "stg_hubspot__email_event_forward_tmp", "checksum": {"name": "sha256", "checksum": "6f983c6f2409565d6c5bcc359f588b21ffe62539f00be9bc37cd9e0fd772ba23"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.728738, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_forward_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_forward_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','email_event_forward')) }}\nfrom {{ var('email_event_forward') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_forward"], ["hubspot", "email_event_forward"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.email_event_forward"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_forward_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"_fivetran_synced\",\n  \"browser\",\n  \"ip_address\",\n  \"location\",\n  \"user_agent\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_forward_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_spam_report_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_spam_report_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_spam_report_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_spam_report_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_spam_report_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_spam_report_tmp"], "alias": "stg_hubspot__email_event_spam_report_tmp", "checksum": {"name": "sha256", "checksum": "c04a3780199ea99c469108ff9978dc667a8ec9f2ba931530ff2a3741bacf551d"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.7334368, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_spam_report_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_spam_report_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','email_event_spam_report')) }}\nfrom {{ var('email_event_spam_report') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_spam_report"], ["hubspot", "email_event_spam_report"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.email_event_spam_report"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_spam_report_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"_fivetran_synced\",\n  \"ip_address\",\n  \"user_agent\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_spam_report_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__ticket_engagement_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_engagement_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_engagement_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_engagement_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_engagement_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_engagement_tmp"], "alias": "stg_hubspot__ticket_engagement_tmp", "checksum": {"name": "sha256", "checksum": "edba22a7df47456fd6d5391c8703aab724518a087778b40f145b2920d892ab7b"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.738028, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_engagement_tmp\"", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect {{ dbt_utils.star(source('hubspot','ticket_engagement')) }}\nfrom {{ var('ticket_engagement') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket_engagement"], ["hubspot", "ticket_engagement"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.ticket_engagement"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__ticket_engagement_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"_fivetran_synced\",\n  \"ticket_id\",\n  \"engagement_id\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_engagement_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_bounce_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_bounce_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_bounce_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_bounce_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_bounce_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_bounce_tmp"], "alias": "stg_hubspot__email_event_bounce_tmp", "checksum": {"name": "sha256", "checksum": "850b15883d035281e6a411f8af394f967164ccc4db397b5c731165e6d68f3d3c"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.742518, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_bounce_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_bounce_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','email_event_bounce')) }}\nfrom {{ var('email_event_bounce') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_bounce"], ["hubspot", "email_event_bounce"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.email_event_bounce"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_bounce_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"_fivetran_synced\",\n  \"category\",\n  \"status\",\n  \"response\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_bounce_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_call_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_call_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_call_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_call_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_call_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_call_tmp"], "alias": "stg_hubspot__engagement_call_tmp", "checksum": {"name": "sha256", "checksum": "7caba15ba449559eb3a2fc8f7f0f8eec2e1b80f81d17e0078c837cef2da4f753"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.7479758, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_call_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_call_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','engagement_call')) }}\nfrom {{ var('engagement_call') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_call"], ["hubspot", "engagement_call"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.engagement_call"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_call_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"engagement_id\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"property_hs_createdate\",\n  \"property_hs_timestamp\",\n  \"type\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_call_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__ticket_pipeline_stage_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_pipeline_stage_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_pipeline_stage_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_pipeline_stage_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_pipeline_stage_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_pipeline_stage_tmp"], "alias": "stg_hubspot__ticket_pipeline_stage_tmp", "checksum": {"name": "sha256", "checksum": "4f3a0efd1f33f3f86d66953214ba94d46c6713dc447e823b46f4177a6a755c49"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.752515, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_pipeline_stage_tmp\"", "raw_code": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect {{ dbt_utils.star(source('hubspot','ticket_pipeline_stage')) }}\nfrom {{ var('ticket_pipeline_stage') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket_pipeline_stage"], ["hubspot", "ticket_pipeline_stage"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.ticket_pipeline_stage"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__ticket_pipeline_stage_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"stage_id\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"active\",\n  \"display_order\",\n  \"is_closed\",\n  \"label\",\n  \"pipeline_id\",\n  \"ticket_state\",\n  \"created_at\",\n  \"updated_at\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_pipeline_stage_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__deal_pipeline_stage_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__deal_pipeline_stage_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_pipeline_stage_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_pipeline_stage_tmp"], "alias": "stg_hubspot__deal_pipeline_stage_tmp", "checksum": {"name": "sha256", "checksum": "e58bdbf90e21336678e889e71bd031d8ddf7e339b3747854d736fa8b8c8085c4"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.756939, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_pipeline_stage_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','deal_pipeline_stage')) }}\nfrom {{ var('deal_pipeline_stage') }}", "language": "sql", "refs": [], "sources": [["hubspot", "deal_pipeline_stage"], ["hubspot", "deal_pipeline_stage"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.deal_pipeline_stage"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_pipeline_stage_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"active\",\n  \"closed_won\",\n  \"display_order\",\n  \"probability\",\n  \"stage_id\",\n  \"label\",\n  \"pipeline_id\",\n  \"created_at\",\n  \"updated_at\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"deal_pipeline_stage_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__engagement_task_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__engagement_task_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__engagement_task_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_task_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__engagement_task_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_task_tmp"], "alias": "stg_hubspot__engagement_task_tmp", "checksum": {"name": "sha256", "checksum": "f7670a66cf32abb94c4b6f5265ce3ce34190b8c6c707849a1b4230c40a0ef25c"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.7617211, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_task_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_task_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','engagement_task')) }}\nfrom {{ var('engagement_task') }}", "language": "sql", "refs": [], "sources": [["hubspot", "engagement_task"], ["hubspot", "engagement_task"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.engagement_task"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_task_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"engagement_id\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"property_hs_createdate\",\n  \"property_hs_object_id\",\n  \"property_hs_task_type\",\n  \"property_hs_timestamp\",\n  \"property_hubspot_owner_id\",\n  \"property_hubspot_team_id\",\n  \"type\",\n  \"task_type\",\n  \"property_hs_engagement_source\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_task_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_open_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_open_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_open_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_open_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_open_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_open_tmp"], "alias": "stg_hubspot__email_event_open_tmp", "checksum": {"name": "sha256", "checksum": "2640704518943318d1eeec99442a264891857d3dd3e64fdeff9fbc8e035b0f55"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.767221, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_open_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_open_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','email_event_open')) }}\nfrom {{ var('email_event_open') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_open"], ["hubspot", "email_event_open"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.email_event_open"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_open_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"_fivetran_synced\",\n  \"duration\",\n  \"browser\",\n  \"ip_address\",\n  \"location\",\n  \"user_agent\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_open_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__deal_property_history_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__deal_property_history_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__deal_property_history_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_property_history_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__deal_property_history_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_property_history_tmp"], "alias": "stg_hubspot__deal_property_history_tmp", "checksum": {"name": "sha256", "checksum": "71677ea213c41256563a36f30d1dfd550cf176f6f14288297de133628217c021"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.771967, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_property_history_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled','hubspot_deal_property_history_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','deal_property_history')) }}\nfrom {{ var('deal_property_history') }}", "language": "sql", "refs": [], "sources": [["hubspot", "deal_property_history"], ["hubspot", "deal_property_history"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.deal_property_history"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_property_history_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"deal_id\",\n  \"timestamp\",\n  \"_fivetran_synced\",\n  \"source\",\n  \"name\",\n  \"source_id\",\n  \"value\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"deal_property_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_event_deferred_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_event_deferred_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_event_deferred_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_deferred_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_event_deferred_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_deferred_tmp"], "alias": "stg_hubspot__email_event_deferred_tmp", "checksum": {"name": "sha256", "checksum": "07976d939f5809afe272d6c4368055e621d513954ccd858c9a9087864d58b829"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.776597, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_deferred_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_deferred_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','email_event_deferred')) }}\nfrom {{ var('email_event_deferred') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_event_deferred"], ["hubspot", "email_event_deferred"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.email_event_deferred"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_deferred_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"_fivetran_synced\",\n  \"attempt\",\n  \"response\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_deferred_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.hubspot_source.stg_hubspot__email_campaign_tmp": {"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__email_campaign_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__email_campaign_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_campaign_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__email_campaign_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_campaign_tmp"], "alias": "stg_hubspot__email_campaign_tmp", "checksum": {"name": "sha256", "checksum": "77f3abe26b65771447908a83ba99e22608d4c9d411835ad30bde43c86e9ebb41"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": true}, "created_at": 1722369227.780971, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_campaign_tmp\"", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nselect {{ dbt_utils.star(source('hubspot','email_campaign')) }}\nfrom {{ var('email_campaign') }}", "language": "sql", "refs": [], "sources": [["hubspot", "email_campaign"], ["hubspot", "email_campaign"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.star"], "nodes": ["source.hubspot_source.hubspot.email_campaign"]}, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_campaign_tmp.sql", "compiled": true, "compiled_code": "\n\nselect \"id\",\n  \"_fivetran_synced\",\n  \"app_id\",\n  \"content_id\",\n  \"num_included\",\n  \"num_queued\",\n  \"sub_type\",\n  \"type\",\n  \"app_name\",\n  \"name\",\n  \"subject\"\nfrom \"postgres\".\"hubspot_source_integration_tests_21\".\"email_campaign_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "deal_pipeline_stage_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal_pipeline_stage')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113", "fqn": ["hubspot_source", "unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id"], "alias": "unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.858335, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal_pipeline_stage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    deal_pipeline_stage_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_pipeline_stage\"\nwhere deal_pipeline_stage_id is not null\ngroup by deal_pipeline_stage_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_pipeline_stage_id", "file_key_name": "models.stg_hubspot__deal_pipeline_stage", "attached_node": "model.hubspot_source.stg_hubspot__deal_pipeline_stage"}, "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "deal_pipeline_stage_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal_pipeline_stage')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e", "fqn": ["hubspot_source", "not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id"], "alias": "not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b"}, "created_at": 1722369227.8597918, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b\") }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal_pipeline_stage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deal_pipeline_stage_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_pipeline_stage\"\nwhere deal_pipeline_stage_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_pipeline_stage_id", "file_key_name": "models.stg_hubspot__deal_pipeline_stage", "attached_node": "model.hubspot_source.stg_hubspot__deal_pipeline_stage"}, "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "deal_pipeline_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal_pipeline')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__deal_pipeline_deal_pipeline_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__deal_pipeline_deal_pipeline_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403", "fqn": ["hubspot_source", "unique_stg_hubspot__deal_pipeline_deal_pipeline_id"], "alias": "unique_stg_hubspot__deal_pipeline_deal_pipeline_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.8611, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal_pipeline", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/unique_stg_hubspot__deal_pipeline_deal_pipeline_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    deal_pipeline_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_pipeline\"\nwhere deal_pipeline_id is not null\ngroup by deal_pipeline_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_pipeline_id", "file_key_name": "models.stg_hubspot__deal_pipeline", "attached_node": "model.hubspot_source.stg_hubspot__deal_pipeline"}, "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "deal_pipeline_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal_pipeline')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__deal_pipeline_deal_pipeline_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3", "fqn": ["hubspot_source", "not_null_stg_hubspot__deal_pipeline_deal_pipeline_id"], "alias": "not_null_stg_hubspot__deal_pipeline_deal_pipeline_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.862249, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal_pipeline", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deal_pipeline_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_pipeline\"\nwhere deal_pipeline_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_pipeline_id", "file_key_name": "models.stg_hubspot__deal_pipeline", "attached_node": "model.hubspot_source.stg_hubspot__deal_pipeline"}, "test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "deal_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__deal_deal_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__deal_deal_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20", "fqn": ["hubspot_source", "not_null_stg_hubspot__deal_deal_id"], "alias": "not_null_stg_hubspot__deal_deal_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.8634398, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/not_null_stg_hubspot__deal_deal_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deal_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal\"\nwhere deal_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_id", "file_key_name": "models.stg_hubspot__deal", "attached_node": "model.hubspot_source.stg_hubspot__deal"}, "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "deal_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__deal_deal_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__deal_deal_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69", "fqn": ["hubspot_source", "unique_stg_hubspot__deal_deal_id"], "alias": "unique_stg_hubspot__deal_deal_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.864465, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/unique_stg_hubspot__deal_deal_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    deal_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal\"\nwhere deal_id is not null\ngroup by deal_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_id", "file_key_name": "models.stg_hubspot__deal", "attached_node": "model.hubspot_source.stg_hubspot__deal"}, "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_company_company_id__deal_id__type_id.59d48f3923": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["company_id", "deal_id", "type_id"], "model": "{{ get_where_subquery(ref('stg_hubspot__deal_company')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_hubspot__deal_company_company_id__deal_id__type_id", "resource_type": "test", "package_name": "hubspot_source", "path": "dbt_utils_unique_combination_o_74077ae84d669f55130c2609a5e4c4aa.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_company_company_id__deal_id__type_id.59d48f3923", "fqn": ["hubspot_source", "dbt_utils_unique_combination_of_columns_stg_hubspot__deal_company_company_id__deal_id__type_id"], "alias": "dbt_utils_unique_combination_o_74077ae84d669f55130c2609a5e4c4aa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_74077ae84d669f55130c2609a5e4c4aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_74077ae84d669f55130c2609a5e4c4aa"}, "created_at": 1722369227.865509, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_74077ae84d669f55130c2609a5e4c4aa\") }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal_company", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_company"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/dbt_utils_unique_combination_o_74077ae84d669f55130c2609a5e4c4aa.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        company_id, deal_id, type_id\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_company\"\n    group by company_id, deal_id, type_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_hubspot__deal_company", "attached_node": "model.hubspot_source.stg_hubspot__deal_company"}, "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_contact_contact_id__deal_id__type_id.37de71798b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["contact_id", "deal_id", "type_id"], "model": "{{ get_where_subquery(ref('stg_hubspot__deal_contact')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_hubspot__deal_contact_contact_id__deal_id__type_id", "resource_type": "test", "package_name": "hubspot_source", "path": "dbt_utils_unique_combination_o_3e825e23a917e54cdbdc5f8843e1e54b.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_contact_contact_id__deal_id__type_id.37de71798b", "fqn": ["hubspot_source", "dbt_utils_unique_combination_of_columns_stg_hubspot__deal_contact_contact_id__deal_id__type_id"], "alias": "dbt_utils_unique_combination_o_3e825e23a917e54cdbdc5f8843e1e54b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3e825e23a917e54cdbdc5f8843e1e54b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3e825e23a917e54cdbdc5f8843e1e54b"}, "created_at": 1722369227.8736908, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3e825e23a917e54cdbdc5f8843e1e54b\") }}", "language": "sql", "refs": [{"name": "stg_hubspot__deal_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_contact"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/dbt_utils_unique_combination_o_3e825e23a917e54cdbdc5f8843e1e54b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        contact_id, deal_id, type_id\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__deal_contact\"\n    group by contact_id, deal_id, type_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_hubspot__deal_contact", "attached_node": "model.hubspot_source.stg_hubspot__deal_contact"}, "test.hubspot_source.not_null_stg_hubspot__merged_deal_merged_deal_id.c2d24039b9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "merged_deal_id", "model": "{{ get_where_subquery(ref('stg_hubspot__merged_deal')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__merged_deal_merged_deal_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__merged_deal_merged_deal_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__merged_deal_merged_deal_id.c2d24039b9", "fqn": ["hubspot_source", "not_null_stg_hubspot__merged_deal_merged_deal_id"], "alias": "not_null_stg_hubspot__merged_deal_merged_deal_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.87659, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__merged_deal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__merged_deal"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/not_null_stg_hubspot__merged_deal_merged_deal_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect merged_deal_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__merged_deal\"\nwhere merged_deal_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "merged_deal_id", "file_key_name": "models.stg_hubspot__merged_deal", "attached_node": "model.hubspot_source.stg_hubspot__merged_deal"}, "test.hubspot_source.not_null_stg_hubspot__merged_deal_deal_id.a843ca0610": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "deal_id", "model": "{{ get_where_subquery(ref('stg_hubspot__merged_deal')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__merged_deal_deal_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__merged_deal_deal_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__merged_deal_deal_id.a843ca0610", "fqn": ["hubspot_source", "not_null_stg_hubspot__merged_deal_deal_id"], "alias": "not_null_stg_hubspot__merged_deal_deal_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.877772, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__merged_deal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__merged_deal"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/not_null_stg_hubspot__merged_deal_deal_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deal_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__merged_deal\"\nwhere deal_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deal_id", "file_key_name": "models.stg_hubspot__merged_deal", "attached_node": "model.hubspot_source.stg_hubspot__merged_deal"}, "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_list_id", "model": "{{ get_where_subquery(ref('stg_hubspot__contact_list')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__contact_list_contact_list_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__contact_list_contact_list_id.sql", "original_file_path": "models/stg_hubspot__contact.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0", "fqn": ["hubspot_source", "unique_stg_hubspot__contact_list_contact_list_id"], "alias": "unique_stg_hubspot__contact_list_contact_list_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.886273, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__contact_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__contact_list"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.yml/unique_stg_hubspot__contact_list_contact_list_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    contact_list_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_list\"\nwhere contact_list_id is not null\ngroup by contact_list_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_list_id", "file_key_name": "models.stg_hubspot__contact_list", "attached_node": "model.hubspot_source.stg_hubspot__contact_list"}, "test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_list_id", "model": "{{ get_where_subquery(ref('stg_hubspot__contact_list')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__contact_list_contact_list_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__contact_list_contact_list_id.sql", "original_file_path": "models/stg_hubspot__contact.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a", "fqn": ["hubspot_source", "not_null_stg_hubspot__contact_list_contact_list_id"], "alias": "not_null_stg_hubspot__contact_list_contact_list_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.887421, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__contact_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__contact_list"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.yml/not_null_stg_hubspot__contact_list_contact_list_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_list_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact_list\"\nwhere contact_list_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_list_id", "file_key_name": "models.stg_hubspot__contact_list", "attached_node": "model.hubspot_source.stg_hubspot__contact_list"}, "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('stg_hubspot__contact')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__contact_contact_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__contact_contact_id.sql", "original_file_path": "models/stg_hubspot__contact.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a", "fqn": ["hubspot_source", "unique_stg_hubspot__contact_contact_id"], "alias": "unique_stg_hubspot__contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.8885279, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__contact"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.yml/unique_stg_hubspot__contact_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    contact_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact\"\nwhere contact_id is not null\ngroup by contact_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_id", "file_key_name": "models.stg_hubspot__contact", "attached_node": "model.hubspot_source.stg_hubspot__contact"}, "test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('stg_hubspot__contact')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__contact_contact_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__contact_contact_id.sql", "original_file_path": "models/stg_hubspot__contact.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944", "fqn": ["hubspot_source", "not_null_stg_hubspot__contact_contact_id"], "alias": "not_null_stg_hubspot__contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.889716, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__contact"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.yml/not_null_stg_hubspot__contact_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__contact\"\nwhere contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_id", "file_key_name": "models.stg_hubspot__contact", "attached_node": "model.hubspot_source.stg_hubspot__contact"}, "test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_bounce')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__email_event_bounce_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_bounce_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_bounce_event_id"], "alias": "unique_stg_hubspot__email_event_bounce_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.9045918, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_bounce", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_bounce"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_bounce_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_bounce\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_bounce", "attached_node": "model.hubspot_source.stg_hubspot__email_event_bounce"}, "test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_bounce')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_bounce_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_bounce_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_bounce_event_id"], "alias": "not_null_stg_hubspot__email_event_bounce_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.905798, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_bounce", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_bounce"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_bounce_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_bounce\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_bounce", "attached_node": "model.hubspot_source.stg_hubspot__email_event_bounce"}, "test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_click')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__email_event_click_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_click_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_click_event_id"], "alias": "unique_stg_hubspot__email_event_click_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.907011, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_click", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_click"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_click_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_click\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_click", "attached_node": "model.hubspot_source.stg_hubspot__email_event_click"}, "test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_click')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_click_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_click_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_click_event_id"], "alias": "not_null_stg_hubspot__email_event_click_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.908072, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_click", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_click"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_click_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_click\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_click", "attached_node": "model.hubspot_source.stg_hubspot__email_event_click"}, "test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_deferred')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__email_event_deferred_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_deferred_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_deferred_event_id"], "alias": "unique_stg_hubspot__email_event_deferred_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.909127, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_deferred", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_deferred"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_deferred_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_deferred\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_deferred", "attached_node": "model.hubspot_source.stg_hubspot__email_event_deferred"}, "test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_deferred')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_deferred_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_deferred_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_deferred_event_id"], "alias": "not_null_stg_hubspot__email_event_deferred_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.9101791, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_deferred", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_deferred"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_deferred_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_deferred\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_deferred", "attached_node": "model.hubspot_source.stg_hubspot__email_event_deferred"}, "test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_delivered')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__email_event_delivered_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_delivered_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_delivered_event_id"], "alias": "unique_stg_hubspot__email_event_delivered_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.911453, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_delivered", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_delivered"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_delivered_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_delivered\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_delivered", "attached_node": "model.hubspot_source.stg_hubspot__email_event_delivered"}, "test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_delivered')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_delivered_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_delivered_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_delivered_event_id"], "alias": "not_null_stg_hubspot__email_event_delivered_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.912527, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_delivered", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_delivered"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_delivered_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_delivered\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_delivered", "attached_node": "model.hubspot_source.stg_hubspot__email_event_delivered"}, "test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_dropped')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__email_event_dropped_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_dropped_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_dropped_event_id"], "alias": "unique_stg_hubspot__email_event_dropped_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.913593, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_dropped", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_dropped"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_dropped_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_dropped\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_dropped", "attached_node": "model.hubspot_source.stg_hubspot__email_event_dropped"}, "test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_dropped')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_dropped_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_dropped_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_dropped_event_id"], "alias": "not_null_stg_hubspot__email_event_dropped_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.914804, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_dropped", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_dropped"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_dropped_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_dropped\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_dropped", "attached_node": "model.hubspot_source.stg_hubspot__email_event_dropped"}, "test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_forward')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__email_event_forward_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_forward_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_forward_event_id"], "alias": "unique_stg_hubspot__email_event_forward_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.915874, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_forward", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_forward"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_forward_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_forward\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_forward", "attached_node": "model.hubspot_source.stg_hubspot__email_event_forward"}, "test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_forward')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_forward_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_forward_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_forward_event_id"], "alias": "not_null_stg_hubspot__email_event_forward_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.916954, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_forward", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_forward"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_forward_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_forward\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_forward", "attached_node": "model.hubspot_source.stg_hubspot__email_event_forward"}, "test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_open')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__email_event_open_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_open_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_open_event_id"], "alias": "unique_stg_hubspot__email_event_open_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.918029, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_open", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_open"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_open_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_open\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_open", "attached_node": "model.hubspot_source.stg_hubspot__email_event_open"}, "test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_open')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_open_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_open_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_open_event_id"], "alias": "not_null_stg_hubspot__email_event_open_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.919262, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_open", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_open"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_open_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_open\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_open", "attached_node": "model.hubspot_source.stg_hubspot__email_event_open"}, "test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_print')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__email_event_print_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_print_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_print_event_id"], "alias": "unique_stg_hubspot__email_event_print_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.9203331, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_print", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_print"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_print_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_print\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_print", "attached_node": "model.hubspot_source.stg_hubspot__email_event_print"}, "test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_print')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_print_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_print_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_print_event_id"], "alias": "not_null_stg_hubspot__email_event_print_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.921399, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_print", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_print"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_print_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_print\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_print", "attached_node": "model.hubspot_source.stg_hubspot__email_event_print"}, "test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_sent')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__email_event_sent_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_sent_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_sent_event_id"], "alias": "unique_stg_hubspot__email_event_sent_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.9226081, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_sent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_sent"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_sent_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_sent\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_sent", "attached_node": "model.hubspot_source.stg_hubspot__email_event_sent"}, "test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_sent')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_sent_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_sent_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_sent_event_id"], "alias": "not_null_stg_hubspot__email_event_sent_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.9236732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_sent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_sent"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_sent_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_sent\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_sent", "attached_node": "model.hubspot_source.stg_hubspot__email_event_sent"}, "test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_spam_report')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__email_event_spam_report_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_spam_report_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_spam_report_event_id"], "alias": "unique_stg_hubspot__email_event_spam_report_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.9248729, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_spam_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_spam_report"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_spam_report_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_spam_report\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_spam_report", "attached_node": "model.hubspot_source.stg_hubspot__email_event_spam_report"}, "test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_spam_report')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_spam_report_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_spam_report_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_spam_report_event_id"], "alias": "not_null_stg_hubspot__email_event_spam_report_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.9259698, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_spam_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_spam_report"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_spam_report_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_spam_report\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_spam_report", "attached_node": "model.hubspot_source.stg_hubspot__email_event_spam_report"}, "test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_status_change')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__email_event_status_change_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_status_change_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_status_change_event_id"], "alias": "unique_stg_hubspot__email_event_status_change_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.927389, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_status_change", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_status_change"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_status_change_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_status_change\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_status_change", "attached_node": "model.hubspot_source.stg_hubspot__email_event_status_change"}, "test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_status_change')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_status_change_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_status_change_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_status_change_event_id"], "alias": "not_null_stg_hubspot__email_event_status_change_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.928483, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event_status_change", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_status_change"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_status_change_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event_status_change\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_status_change", "attached_node": "model.hubspot_source.stg_hubspot__email_event_status_change"}, "test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__email_event_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_event_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_event_id"], "alias": "unique_stg_hubspot__email_event_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.929569, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event", "attached_node": "model.hubspot_source.stg_hubspot__email_event"}, "test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__email_event_event_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_event_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_event_id"], "alias": "not_null_stg_hubspot__email_event_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.9308102, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_event", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_event\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event", "attached_node": "model.hubspot_source.stg_hubspot__email_event"}, "test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "email_campaign_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_campaign')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__email_campaign_email_campaign_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__email_campaign_email_campaign_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e", "fqn": ["hubspot_source", "unique_stg_hubspot__email_campaign_email_campaign_id"], "alias": "unique_stg_hubspot__email_campaign_email_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.931946, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_campaign", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_campaign"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_campaign_email_campaign_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    email_campaign_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_campaign\"\nwhere email_campaign_id is not null\ngroup by email_campaign_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "email_campaign_id", "file_key_name": "models.stg_hubspot__email_campaign", "attached_node": "model.hubspot_source.stg_hubspot__email_campaign"}, "test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_campaign_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_campaign')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__email_campaign_email_campaign_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__email_campaign_email_campaign_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_campaign_email_campaign_id"], "alias": "not_null_stg_hubspot__email_campaign_email_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.932983, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__email_campaign", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_campaign"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_campaign_email_campaign_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect email_campaign_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__email_campaign\"\nwhere email_campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "email_campaign_id", "file_key_name": "models.stg_hubspot__email_campaign", "attached_node": "model.hubspot_source.stg_hubspot__email_campaign"}, "test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_call')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__engagement_call_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__engagement_call_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_call_engagement_id"], "alias": "not_null_stg_hubspot__engagement_call_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.9390368, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_call", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_call"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/not_null_stg_hubspot__engagement_call_engagement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect engagement_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_call\"\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_call", "attached_node": "model.hubspot_source.stg_hubspot__engagement_call"}, "test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_call')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__engagement_call_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__engagement_call_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_call_engagement_id"], "alias": "unique_stg_hubspot__engagement_call_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.940177, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_call", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_call"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/unique_stg_hubspot__engagement_call_engagement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_call\"\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_call", "attached_node": "model.hubspot_source.stg_hubspot__engagement_call"}, "test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_email')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__engagement_email_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__engagement_email_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_email_engagement_id"], "alias": "not_null_stg_hubspot__engagement_email_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.9412758, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_email", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_email"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/not_null_stg_hubspot__engagement_email_engagement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect engagement_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_email\"\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_email", "attached_node": "model.hubspot_source.stg_hubspot__engagement_email"}, "test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_email')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__engagement_email_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__engagement_email_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_email_engagement_id"], "alias": "unique_stg_hubspot__engagement_email_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.942574, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_email", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_email"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/unique_stg_hubspot__engagement_email_engagement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_email\"\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_email", "attached_node": "model.hubspot_source.stg_hubspot__engagement_email"}, "test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_meeting')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__engagement_meeting_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__engagement_meeting_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_meeting_engagement_id"], "alias": "not_null_stg_hubspot__engagement_meeting_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.943681, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_meeting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_meeting"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/not_null_stg_hubspot__engagement_meeting_engagement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect engagement_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_meeting\"\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_meeting", "attached_node": "model.hubspot_source.stg_hubspot__engagement_meeting"}, "test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_meeting')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__engagement_meeting_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__engagement_meeting_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_meeting_engagement_id"], "alias": "unique_stg_hubspot__engagement_meeting_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.944732, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_meeting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_meeting"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/unique_stg_hubspot__engagement_meeting_engagement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_meeting\"\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_meeting", "attached_node": "model.hubspot_source.stg_hubspot__engagement_meeting"}, "test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_note')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__engagement_note_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__engagement_note_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_note_engagement_id"], "alias": "not_null_stg_hubspot__engagement_note_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.9459279, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_note", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_note"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/not_null_stg_hubspot__engagement_note_engagement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect engagement_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_note\"\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_note", "attached_node": "model.hubspot_source.stg_hubspot__engagement_note"}, "test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_note')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__engagement_note_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__engagement_note_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_note_engagement_id"], "alias": "unique_stg_hubspot__engagement_note_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.947022, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_note", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_note"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/unique_stg_hubspot__engagement_note_engagement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_note\"\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_note", "attached_node": "model.hubspot_source.stg_hubspot__engagement_note"}, "test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_task')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__engagement_task_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__engagement_task_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_task_engagement_id"], "alias": "not_null_stg_hubspot__engagement_task_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.948127, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_task", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_task"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/not_null_stg_hubspot__engagement_task_engagement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect engagement_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_task\"\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_task", "attached_node": "model.hubspot_source.stg_hubspot__engagement_task"}, "test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_task')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__engagement_task_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__engagement_task_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_task_engagement_id"], "alias": "unique_stg_hubspot__engagement_task_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.949208, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement_task", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_task"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/unique_stg_hubspot__engagement_task_engagement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement_task\"\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_task", "attached_node": "model.hubspot_source.stg_hubspot__engagement_task"}, "test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__engagement_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__engagement_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_engagement_id"], "alias": "not_null_stg_hubspot__engagement_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.950437, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/not_null_stg_hubspot__engagement_engagement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect engagement_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement\"\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement", "attached_node": "model.hubspot_source.stg_hubspot__engagement"}, "test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__engagement_engagement_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__engagement_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_engagement_id"], "alias": "unique_stg_hubspot__engagement_engagement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.951506, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__engagement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/unique_stg_hubspot__engagement_engagement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__engagement\"\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement", "attached_node": "model.hubspot_source.stg_hubspot__engagement"}, "test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ticket_id", "model": "{{ get_where_subquery(ref('stg_hubspot__ticket')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__ticket_ticket_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__ticket_ticket_id.sql", "original_file_path": "models/stg_hubspot__ticket.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf", "fqn": ["hubspot_source", "unique_stg_hubspot__ticket_ticket_id"], "alias": "unique_stg_hubspot__ticket_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.958838, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__ticket", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__ticket"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__ticket.yml/unique_stg_hubspot__ticket_ticket_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ticket_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket\"\nwhere ticket_id is not null\ngroup by ticket_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "ticket_id", "file_key_name": "models.stg_hubspot__ticket", "attached_node": "model.hubspot_source.stg_hubspot__ticket"}, "test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticket_id", "model": "{{ get_where_subquery(ref('stg_hubspot__ticket')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__ticket_ticket_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__ticket_ticket_id.sql", "original_file_path": "models/stg_hubspot__ticket.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53", "fqn": ["hubspot_source", "not_null_stg_hubspot__ticket_ticket_id"], "alias": "not_null_stg_hubspot__ticket_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.960005, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__ticket", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__ticket"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__ticket.yml/not_null_stg_hubspot__ticket_ticket_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket\"\nwhere ticket_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "ticket_id", "file_key_name": "models.stg_hubspot__ticket", "attached_node": "model.hubspot_source.stg_hubspot__ticket"}, "test.hubspot_source.unique_stg_hubspot__property__fivetran_id.1d41a2aa95": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "_fivetran_id", "model": "{{ get_where_subquery(ref('stg_hubspot__property')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__property__fivetran_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__property__fivetran_id.sql", "original_file_path": "models/stg_hubspot__property.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__property__fivetran_id.1d41a2aa95", "fqn": ["hubspot_source", "unique_stg_hubspot__property__fivetran_id"], "alias": "unique_stg_hubspot__property__fivetran_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.96474, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__property", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__property"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__property.yml/unique_stg_hubspot__property__fivetran_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    _fivetran_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__property\"\nwhere _fivetran_id is not null\ngroup by _fivetran_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "_fivetran_id", "file_key_name": "models.stg_hubspot__property", "attached_node": "model.hubspot_source.stg_hubspot__property"}, "test.hubspot_source.not_null_stg_hubspot__property__fivetran_id.37b6ec5db1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_id", "model": "{{ get_where_subquery(ref('stg_hubspot__property')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__property__fivetran_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__property__fivetran_id.sql", "original_file_path": "models/stg_hubspot__property.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__property__fivetran_id.37b6ec5db1", "fqn": ["hubspot_source", "not_null_stg_hubspot__property__fivetran_id"], "alias": "not_null_stg_hubspot__property__fivetran_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369227.965842, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__property", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__property"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__property.yml/not_null_stg_hubspot__property__fivetran_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__property\"\nwhere _fivetran_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "_fivetran_id", "file_key_name": "models.stg_hubspot__property", "attached_node": "model.hubspot_source.stg_hubspot__property"}, "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__property_option_property_id__property_option_label.2792c4669b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["property_id", "property_option_label"], "model": "{{ get_where_subquery(ref('stg_hubspot__property_option')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_hubspot__property_option_property_id__property_option_label", "resource_type": "test", "package_name": "hubspot_source", "path": "dbt_utils_unique_combination_o_0690558c2b3169dce6fb2d253f00cba1.sql", "original_file_path": "models/stg_hubspot__property.yml", "unique_id": "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__property_option_property_id__property_option_label.2792c4669b", "fqn": ["hubspot_source", "dbt_utils_unique_combination_of_columns_stg_hubspot__property_option_property_id__property_option_label"], "alias": "dbt_utils_unique_combination_o_0690558c2b3169dce6fb2d253f00cba1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0690558c2b3169dce6fb2d253f00cba1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0690558c2b3169dce6fb2d253f00cba1"}, "created_at": 1722369227.966905, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0690558c2b3169dce6fb2d253f00cba1\") }}", "language": "sql", "refs": [{"name": "stg_hubspot__property_option", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__property_option"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__property.yml/dbt_utils_unique_combination_o_0690558c2b3169dce6fb2d253f00cba1.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        property_id, property_option_label\n    from \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__property_option\"\n    group by property_id, property_option_label\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_hubspot__property_option", "attached_node": "model.hubspot_source.stg_hubspot__property_option"}, "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "company_id", "model": "{{ get_where_subquery(ref('stg_hubspot__company')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "unique_stg_hubspot__company_company_id", "resource_type": "test", "package_name": "hubspot_source", "path": "unique_stg_hubspot__company_company_id.sql", "original_file_path": "models/stg_hubspot__company.yml", "unique_id": "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0", "fqn": ["hubspot_source", "unique_stg_hubspot__company_company_id"], "alias": "unique_stg_hubspot__company_company_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369228.052307, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__company", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__company"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__company.yml/unique_stg_hubspot__company_company_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    company_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__company\"\nwhere company_id is not null\ngroup by company_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "company_id", "file_key_name": "models.stg_hubspot__company", "attached_node": "model.hubspot_source.stg_hubspot__company"}, "test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_id", "model": "{{ get_where_subquery(ref('stg_hubspot__company')) }}"}, "namespace": null}, "database": "postgres", "schema": "hubspot_source_integration_tests_21_dbt_test__audit", "name": "not_null_stg_hubspot__company_company_id", "resource_type": "test", "package_name": "hubspot_source", "path": "not_null_stg_hubspot__company_company_id.sql", "original_file_path": "models/stg_hubspot__company.yml", "unique_id": "test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43", "fqn": ["hubspot_source", "not_null_stg_hubspot__company_company_id"], "alias": "not_null_stg_hubspot__company_company_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1722369228.053986, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_hubspot__company", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__company"]}, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__company.yml/not_null_stg_hubspot__company_company_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect company_id\nfrom \"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__company\"\nwhere company_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "company_id", "file_key_name": "models.stg_hubspot__company", "attached_node": "model.hubspot_source.stg_hubspot__company"}}, "sources": {"source.hubspot_source.hubspot.calendar_event": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "calendar_event", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.calendar_event", "fqn": ["hubspot_source", "hubspot", "calendar_event"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "calendar_event", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a calendar event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avatar_url": {"name": "avatar_url", "description": "URL of image associated with social media event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "campaign_guid": {"name": "campaign_guid", "description": "Value of campaign GUID associated with Task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "Type of event. If the event type is PUBLISHING_TASK, it is one of BLOG_POST, EMAIL, LANDING_PAGE, CUSTOM.\nIf event type is SOCIAL, it is one of twitter, facebook, linkedin, googlepluspages.\nIf event type is CONTENT, it is one of email, recurring-email, blog-post, landing-page, legacy-page, site-page.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category_id": {"name": "category_id", "description": "For event type of PUBLISHING_TASK, a numeric value corresponding to the type of task; one of 3 (BLOG_POST), 2 (EMAIL), 1 (LANDING_PAGE), 0 (CUSTOM).\nFor event type of SOCIAL, this is 0.\nIf event type is CONTENT, it is one of 2 (email, recurring-email), 3 (blog-post), 1 (landing-page), 5 (legacy-page), 4 (site-page).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "content_group_id": {"name": "content_group_id", "description": "The ID of the content group (aka blog) that the associated Blog Post belongs to, if any.\nOtherwise null. Only populated for single task GETs and for Blog Post Tasks.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "ID value of the COS content object associated with the event, null for social or if nothing associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by": {"name": "created_by", "description": "HubSpot ID of the user that the event was created by.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of Event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_date": {"name": "event_date", "description": "If task, When the task is set to be due, otherwise when the event is/ was scheduled for; in milliseconds since the epoch.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "Type of calendar event; for tasks this is PUBLISHING_TASK, for COS Items, this is CONTENT, for social media events, this is SOCIAL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique ID of the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_recurring": {"name": "is_recurring", "description": "Whether the event is recurring.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of Event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "TASK - HubSpot ID of the user that the task is assigned to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preview_key": {"name": "preview_key", "description": "Preview key of content object; used for showing previews of unpublished items.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "social_display_name": {"name": "social_display_name", "description": "Social media full name associate with event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "social_username": {"name": "social_username", "description": "Social media user name associated with event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "For type publishing task, value of TODO or DONE, for others, a value of SCHEDULED, PUBLISHED, PUBLISHED_OR_SCHEDULED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "topic_ids": {"name": "topic_ids", "description": "The list of IDs of topics associated with the associated Blog Post, if any. Otherwise null. Only populated for single task GETs and for Blog Post Tasks.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "Public URL of content item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"calendar_event\"", "created_at": 1722369228.055883}, "source.hubspot_source.hubspot.company": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "company", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.company", "fqn": ["hubspot_source", "hubspot", "company"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "company_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a company in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_name": {"name": "property_name", "description": "The name of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_description": {"name": "property_description", "description": "A short statement about the company's mission and goals.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_createdate": {"name": "property_createdate", "description": "The date the company was added to your account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_industry": {"name": "property_industry", "description": "The type of business the company performs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_address": {"name": "property_address", "description": "The street address of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_address_2": {"name": "property_address_2", "description": "Additional address information for the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_city": {"name": "property_city", "description": "The city where the company is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_state": {"name": "property_state", "description": "The state where the company is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_country": {"name": "property_country", "description": "The country where the company is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_annualrevenue": {"name": "property_annualrevenue", "description": "The actual or estimated annual revenue of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"company_data\"", "created_at": 1722369228.056053}, "source.hubspot_source.hubspot.company_property_history": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "company_property_history", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.company_property_history", "fqn": ["hubspot_source", "hubspot", "company_property_history"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "company_property_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a change to company record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value": {"name": "value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"company_property_history_data\"", "created_at": 1722369228.05618}, "source.hubspot_source.hubspot.contact_merge_audit": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "contact_merge_audit", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.contact_merge_audit", "fqn": ["hubspot_source", "hubspot", "contact_merge_audit"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_merge_audit_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "DEPRECATED FOR NON-BIGQUERY USERS (will be deprecated on BigQuery as well). Each record contains a contact merge event and the contacts effected by the merge.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "canonical_vid": {"name": "canonical_vid", "description": "The contact ID of the contact which the vid_to_merge contact was merged into.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "The ID of the related entity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The contact's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The contact's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_properties_moved": {"name": "num_properties_moved", "description": "The number of properties which were removed from the merged contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "Timestamp of when the contacts were merged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID of the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vid_to_merge": {"name": "vid_to_merge", "description": "The ID of the contact which was merged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"contact_merge_audit_data\"", "created_at": 1722369228.0563042}, "source.hubspot_source.hubspot.contact": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "contact", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.contact", "fqn": ["hubspot_source", "hubspot", "contact"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 84, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a contact in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_email_1": {"name": "property_email_1", "description": "The email address of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_company": {"name": "property_company", "description": "The name of the contact's company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_firstname": {"name": "property_firstname", "description": "The contact's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_lastname": {"name": "property_lastname", "description": "The contact's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_email": {"name": "property_email", "description": "The contact's email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_createdate": {"name": "property_createdate", "description": "The date that the contact was created in your HubSpot account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_jobtitle": {"name": "property_jobtitle", "description": "The contact's job title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_annualrevenue": {"name": "property_annualrevenue", "description": "The contact's annual company revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_calculated_merged_vids": {"name": "property_hs_calculated_merged_vids", "description": "List of mappings representing contact IDs that have been merged into the contact at hand. Format: <merged_contact_id>:<merged_at_in_epoch_time>;<second_merged_contact_id>:<merged_at_in_epoch_time> This field has replaced the `CONTACT_MERGE_AUDIT` table, which was deprecated by the Hubspot v3 CRM API.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"contact_data\"", "created_at": 1722369228.056424}, "source.hubspot_source.hubspot.contact_form_submission": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "contact_form_submission", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.contact_form_submission", "fqn": ["hubspot_source", "hubspot", "contact_form_submission"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_form_submission", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing contact form submission information", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conversion_id": {"name": "conversion_id", "description": "A Unique ID for the specific form conversion.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "form_id": {"name": "form_id", "description": "The GUID of the form that the submission belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_url": {"name": "page_url", "description": "The URL that the form was submitted on, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "A Unix timestamp in milliseconds of the time the submission occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the page that the form was submitted on. This will default to the name of the form if no title is provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"contact_form_submission\"", "created_at": 1722369228.056535}, "source.hubspot_source.hubspot.contact_list": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "contact_list", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.contact_list", "fqn": ["hubspot_source", "hubspot", "contact_list"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_list_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a contact list in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp of the time the list was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleteable": {"name": "deleteable", "description": "If this is false, this is a system list and cannot be deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dynamic": {"name": "dynamic", "description": "Whether the contact list is dynamic.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the contact list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_error": {"name": "metadata_error", "description": "Any errors that happened the last time the list was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_last_processing_state_change_at": {"name": "metadata_last_processing_state_change_at", "description": "A timestamp of the last time that the processing state changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_last_size_change_at": {"name": "metadata_last_size_change_at", "description": "A timestamp of the last time that the size of the list changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_processing": {"name": "metadata_processing", "description": "One of DONE, REFRESHING, INITIALIZING, or PROCESSING.\nDONE indicates the list has finished processing, any other value indicates that list membership is being evaluated.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata_size": {"name": "metadata_size", "description": "The approximate number of contacts in the list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the contact list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp of the time that the list was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"contact_list_data\"", "created_at": 1722369228.0566552}, "source.hubspot_source.hubspot.contact_list_member": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "contact_list_member", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.contact_list_member", "fqn": ["hubspot_source", "hubspot", "contact_list_member"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_list_member_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a contact and a contact list.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "added_at": {"name": "added_at", "description": "The timestamp a contact was added to a list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_list_id": {"name": "contact_list_id", "description": "The ID of the related contact list.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"contact_list_member_data\"", "created_at": 1722369228.056896}, "source.hubspot_source.hubspot.contact_property_history": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "contact_property_history", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.contact_property_history", "fqn": ["hubspot_source", "hubspot", "contact_property_history"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_property_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 84, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a change to contact record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value": {"name": "value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"contact_property_history_data\"", "created_at": 1722369228.057011}, "source.hubspot_source.hubspot.deal": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "deal", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.deal", "fqn": ["hubspot_source", "hubspot", "deal"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a deal in Hubspot.", "columns": {"deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record was deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the deal's pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_pipeline_stage_id": {"name": "deal_pipeline_stage_id", "description": "The ID of the deal's pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the deal's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_dealname": {"name": "property_dealname", "description": "The name you have given this deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_description": {"name": "property_description", "description": "A brief description of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_amount": {"name": "property_amount", "description": "The total value of the deal in the deal's currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_closedate": {"name": "property_closedate", "description": "The day the deal is expected to close, or was closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_createdate": {"name": "property_createdate", "description": "The date the deal was created. This property is set automatically by HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"deal_data\"", "created_at": 1722369228.057127}, "source.hubspot_source.hubspot.deal_stage": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "deal_stage", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.deal_stage", "fqn": ["hubspot_source", "hubspot", "deal_stage"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_stage_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a deal stage.", "columns": {"_fivetran_active": {"name": "_fivetran_active", "description": "Boolean indicating whether the deal stage is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_end": {"name": "_fivetran_end", "description": "The Fivetran calculated exist time of the deal stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_start": {"name": "_fivetran_start", "description": "The date the deal stage was entered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_entered": {"name": "date_entered", "description": "The timestamp the deal stage was entered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "Reference to the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The relevant source of the deal stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "Reference to the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value": {"name": "value", "description": "The value of the deal stage. Typically the name of the stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"deal_stage_data\"", "created_at": 1722369228.0572412}, "source.hubspot_source.hubspot.deal_company": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "deal_company", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.deal_company", "fqn": ["hubspot_source", "hubspot", "deal_company"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_company_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a deal and company.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type_id": {"name": "type_id", "description": "The ID of the type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"deal_company_data\"", "created_at": 1722369228.05735}, "source.hubspot_source.hubspot.deal_contact": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "deal_contact", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.deal_contact", "fqn": ["hubspot_source", "hubspot", "deal_contact"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_contact_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a deal and a contact.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type_id": {"name": "type_id", "description": "The ID of the type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"deal_contact_data\"", "created_at": 1722369228.057458}, "source.hubspot_source.hubspot.deal_pipeline": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "deal_pipeline", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.deal_pipeline", "fqn": ["hubspot_source", "hubspot", "deal_pipeline"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_pipeline_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a pipeline in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the stage is currently in use.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the pipelines appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "label": {"name": "label", "description": "The human-readable label for the pipeline. The label is used when showing the pipeline in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_id": {"name": "pipeline_id", "description": "The ID of the pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"deal_pipeline_data\"", "created_at": 1722369228.05757}, "source.hubspot_source.hubspot.deal_pipeline_stage": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "deal_pipeline_stage", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.deal_pipeline_stage", "fqn": ["hubspot_source", "hubspot", "deal_pipeline_stage"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_pipeline_stage_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a pipeline stage in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the pipeline stage is currently in use.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_won": {"name": "closed_won", "description": "Whether the stage represents a Closed Won deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "label": {"name": "label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_id": {"name": "pipeline_id", "description": "The ID of the related pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "probability": {"name": "probability", "description": "The probability that the deal will close. Used for the deal forecast.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "The ID of the pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"deal_pipeline_stage_data\"", "created_at": 1722369228.057685}, "source.hubspot_source.hubspot.deal_property_history": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "deal_property_history", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.deal_property_history", "fqn": ["hubspot_source", "hubspot", "deal_property_history"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_property_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a change to deal record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related deal record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value": {"name": "value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"deal_property_history_data\"", "created_at": 1722369228.057794}, "source.hubspot_source.hubspot.email_campaign": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_campaign", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_campaign", "fqn": ["hubspot_source", "hubspot", "email_campaign"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_campaign_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an email campaign in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The app ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_name": {"name": "app_name", "description": "The app name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "The ID of the content.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_included": {"name": "num_included", "description": "The number of messages included as part of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_queued": {"name": "num_queued", "description": "The number of messages queued as part of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sub_type": {"name": "sub_type", "description": "The email campaign sub-type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subject": {"name": "subject", "description": "The subject of the email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The email campaign type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_campaign_data\"", "created_at": 1722369228.057915}, "source.hubspot_source.hubspot.email_event": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event", "fqn": ["hubspot_source", "hubspot", "email_event"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 84, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents an email event in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The ID of the app that sent the email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_by_created": {"name": "caused_by_created", "description": "The timestamp of the event that caused this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_by_id": {"name": "caused_by_id", "description": "The event ID which uniquely identifies the event which directly caused this event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "filtered_event": {"name": "filtered_event", "description": "A boolean representing whether the event has been filtered out of reporting based on customer reports settings or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "obsoleted_by_created": {"name": "obsoleted_by_created", "description": "The timestamp of the event that made the current event obsolete.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "obsoleted_by_id": {"name": "obsoleted_by_id", "description": "The event ID which uniquely identifies the follow-on event which makes this current event obsolete. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_by_created": {"name": "sent_by_created", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sent_by_id": {"name": "sent_by_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_data\"", "created_at": 1722369228.058042}, "source.hubspot_source.hubspot.email_event_bounce": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_bounce", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_bounce", "fqn": ["hubspot_source", "hubspot", "email_event_bounce"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_bounce_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a BOUNCE email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "The best-guess of the type of bounce encountered.\nIf an appropriate category couldn't be determined, this property is omitted. See below for the possible values.\nNote that this is a derived value, and may be modified at any time to improve the accuracy of classification.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "response": {"name": "response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status code returned from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_bounce_data\"", "created_at": 1722369228.05819}, "source.hubspot_source.hubspot.email_event_click": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_click", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_click", "fqn": ["hubspot_source", "hubspot", "email_event_click"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_click_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a CLICK email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "referer": {"name": "referer", "description": "The URL of the webpage that linked to the URL clicked. Whether this is provided, and what its value is, is determined by the recipient's email client.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL within the message that the recipient clicked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_click_data\"", "created_at": 1722369228.058309}, "source.hubspot_source.hubspot.email_event_deferred": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_deferred", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_deferred", "fqn": ["hubspot_source", "hubspot", "email_event_deferred"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_deferred_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a DEFERRED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attempt": {"name": "attempt", "description": "The delivery attempt number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "response": {"name": "response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_deferred_data\"", "created_at": 1722369228.058419}, "source.hubspot_source.hubspot.email_event_delivered": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_delivered", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_delivered", "fqn": ["hubspot_source", "hubspot", "email_event_delivered"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_delivered_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a DELIVERED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "response": {"name": "response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "smtp_id": {"name": "smtp_id", "description": "An ID attached to the message by HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_delivered_data\"", "created_at": 1722369228.058528}, "source.hubspot_source.hubspot.email_event_dropped": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_dropped", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_dropped", "fqn": ["hubspot_source", "hubspot", "email_event_dropped"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_dropped_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a DROPPED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bcc": {"name": "bcc", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cc": {"name": "cc", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drop_message": {"name": "drop_message", "description": "The raw message describing why the email message was dropped. This will usually provide additional details beyond 'dropReason'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drop_reason": {"name": "drop_reason", "description": "The reason why the email message was dropped. See below for the possible values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from": {"name": "from", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reply_to": {"name": "reply_to", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subject": {"name": "subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_dropped_data\"", "created_at": 1722369228.058645}, "source.hubspot_source.hubspot.email_event_forward": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_forward", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_forward", "fqn": ["hubspot_source", "hubspot", "email_event_forward"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_forward_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a FORWARD email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_forward_data\"", "created_at": 1722369228.0587578}, "source.hubspot_source.hubspot.email_event_open": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_open", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_open", "fqn": ["hubspot_source", "hubspot", "email_event_open"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_open_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a OPEN email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration": {"name": "duration", "description": "If provided and nonzero, the approximate number of milliseconds the user had opened the email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_open_data\"", "created_at": 1722369228.058871}, "source.hubspot_source.hubspot.email_event_print": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_print", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_print", "fqn": ["hubspot_source", "hubspot", "email_event_print"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_print_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a PRINT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_print_data\"", "created_at": 1722369228.058987}, "source.hubspot_source.hubspot.email_event_sent": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_sent", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_sent", "fqn": ["hubspot_source", "hubspot", "email_event_sent"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_sent_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a SENT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bcc": {"name": "bcc", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cc": {"name": "cc", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from": {"name": "from", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reply_to": {"name": "reply_to", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subject": {"name": "subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_sent_data\"", "created_at": 1722369228.059118}, "source.hubspot_source.hubspot.email_event_spam_report": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_spam_report", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_spam_report", "fqn": ["hubspot_source", "hubspot", "email_event_spam_report"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_spam_report_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a SPAM_REPORT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_spam_report_data\"", "created_at": 1722369228.059231}, "source.hubspot_source.hubspot.email_event_status_change": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_status_change", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_event_status_change", "fqn": ["hubspot_source", "hubspot", "email_event_status_change"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_status_change_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a STATUS_CHANGE email event in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bounced": {"name": "bounced", "description": "A HubSpot employee explicitly initiated the status change to block messages to the recipient.\n(Note this usage has been deprecated in favor of dropping messages with a 'dropReason' of BLOCKED_ADDRESS.)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_subscription_status": {"name": "portal_subscription_status", "description": "The recipient's portal subscription status.\nNote that if this is 'UNSUBSCRIBED', the property 'subscriptions' is not necessarily an empty array, nor are all\nsubscriptions contained in it necessarily going to have their statuses set to 'UNSUBSCRIBED'.)\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "requested_by": {"name": "requested_by", "description": "The email address of the person requesting the change on behalf of the recipient. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscriptions": {"name": "subscriptions", "description": "An array of JSON objects representing the status of subscriptions for the recipient.\nEach JSON subscription object is comprised of the properties: 'id', 'status'.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_status_change_data\"", "created_at": 1722369228.0593438}, "source.hubspot_source.hubspot.email_subscription": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_subscription", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_subscription", "fqn": ["hubspot_source", "hubspot", "email_subscription"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_subscription", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an email subscription in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the subscription is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "The description of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the email subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the email subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_subscription\"", "created_at": 1722369228.0594492}, "source.hubspot_source.hubspot.email_subscription_change": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_subscription_change", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.email_subscription_change", "fqn": ["hubspot_source", "hubspot", "email_subscription_change"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_subscription_change", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a change to an email subscription in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caused_by_event_id": {"name": "caused_by_event_id", "description": "The ID of the event that caused the subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change": {"name": "change", "description": "The change which occurred. This enumeration is specific to the 'changeType'; see below for the possible values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_type": {"name": "change_type", "description": "The type of change which occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_subscription_id": {"name": "email_subscription_id", "description": "The ID of the related email subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "The email address of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "The timestamp when this change occurred. If 'causedByEvent' is present, this will be absent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_subscription_change\"", "created_at": 1722369228.0595908}, "source.hubspot_source.hubspot.engagement": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement", "fqn": ["hubspot_source", "hubspot", "engagement"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an engagement", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the engagement is currently being shown in the UI.\nPLEASE NOTE: This field will not be populated for connectors utilizing the HubSpot v3 API version. This field will be deprecated in a future release.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp representing when the engagement was created.\nPLEASE NOTE: This field will not be populated for connectors utilizing the HubSpot v3 API version. This field will be deprecated in a future release.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.\nPLEASE NOTE: This field will not be populated for connectors utilizing the HubSpot v3 API version. This field will be deprecated in a future release.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.\nPLEASE NOTE: This field will not be populated for connectors utilizing the HubSpot v3 API version. This field will be deprecated in a future release.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "One of NOTE, EMAIL, TASK, MEETING, or CALL, the type of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_data\"", "created_at": 1722369228.059707}, "source.hubspot_source.hubspot.engagement_call": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_call", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_call", "fqn": ["hubspot_source", "hubspot", "engagement_call"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_call_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a CALL engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean to mark rows that were deleted in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_createdate": {"name": "property_hs_createdate", "description": "This field marks the call's time of creation and determines where the call sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "This field marks the call's time of occurrence and determines where the call sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_owner_id": {"name": "property_hubspot_owner_id", "description": "The ID of the owner associated with the call. This field determines the user listed as the call creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_team_id": {"name": "property_hubspot_team_id", "description": "The ID of the team associated with the call. This field determines the team listed as the call creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_call_data\"", "created_at": 1722369228.059822}, "source.hubspot_source.hubspot.engagement_company": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_company", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_company", "fqn": ["hubspot_source", "hubspot", "engagement_company"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_company_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a company and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_company_data\"", "created_at": 1722369228.05993}, "source.hubspot_source.hubspot.engagement_contact": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_contact", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_contact", "fqn": ["hubspot_source", "hubspot", "engagement_contact"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_contact_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a contact and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_contact_data\"", "created_at": 1722369228.0600379}, "source.hubspot_source.hubspot.engagement_deal": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_deal", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_deal", "fqn": ["hubspot_source", "hubspot", "engagement_deal"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_deal_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a deal and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_deal_data\"", "created_at": 1722369228.060145}, "source.hubspot_source.hubspot.engagement_email": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_email", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_email", "fqn": ["hubspot_source", "hubspot", "engagement_email"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_email_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an EMAIL engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_createdate": {"name": "property_hs_createdate", "description": "This field marks the email's time of creation and determines where the email sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "This field marks the email's time of occurrence and determines where the email sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_owner_id": {"name": "property_hubspot_owner_id", "description": "The ID of the owner associated with the email. This field determines the user listed as the email creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_team_id": {"name": "property_hubspot_team_id", "description": "The ID of the team associated with the email. This field determines the team listed as the email creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_email_data\"", "created_at": 1722369228.060256}, "source.hubspot_source.hubspot.engagement_email_cc": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_email_cc", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_email_cc", "fqn": ["hubspot_source", "hubspot", "engagement_email_cc"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_email_cc", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a CC'd email address as part of an EMAIL engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the recipient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the recipient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the recipient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_email_cc\"", "created_at": 1722369228.0603578}, "source.hubspot_source.hubspot.engagement_email_to": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_email_to", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_email_to", "fqn": ["hubspot_source", "hubspot", "engagement_email_to"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_email_to", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a TO email address as part of an EMAIL engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the recipient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the recipient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the recipient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_email_to\"", "created_at": 1722369228.06046}, "source.hubspot_source.hubspot.engagement_meeting": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_meeting", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_meeting", "fqn": ["hubspot_source", "hubspot", "engagement_meeting"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_meeting_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a MEETING engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_createdate": {"name": "property_hs_createdate", "description": "This field marks the meeting's time of creation and determines where the meeting sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "This field marks the meeting's time of occurrence and determines where the meeting sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_owner_id": {"name": "property_hubspot_owner_id", "description": "The ID of the owner associated with the meeting. This field determines the user listed as the meeting creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_team_id": {"name": "property_hubspot_team_id", "description": "The ID of the team associated with the meeting. This field determines the team listed as the meeting creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_meeting_data\"", "created_at": 1722369228.06057}, "source.hubspot_source.hubspot.engagement_note": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_note", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_note", "fqn": ["hubspot_source", "hubspot", "engagement_note"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_note_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a NOTE engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "body": {"name": "body", "description": "The body of the note. The body has a limit of 65536 characters.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_createdate": {"name": "property_hs_createdate", "description": "This field marks the note's time of creation and determines where the note sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "This field marks the note's time of occurrence and determines where the note sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_owner_id": {"name": "property_hubspot_owner_id", "description": "The ID of the owner associated with the note. This field determines the user listed as the note creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_team_id": {"name": "property_hubspot_team_id", "description": "The ID of the team associated with the note. This field determines the team listed as the note creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_note_data\"", "created_at": 1722369228.060684}, "source.hubspot_source.hubspot.engagement_task": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "engagement_task", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.engagement_task", "fqn": ["hubspot_source", "hubspot", "engagement_task"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_task_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a TASK engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_createdate": {"name": "property_hs_createdate", "description": "This field marks the task's time of creation and determines where the task sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "This field marks the task's time of occurrence and determines where the task sits on the record timeline. You can use either a Unix timestamp in milliseconds or UTC format. \nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_owner_id": {"name": "property_hubspot_owner_id", "description": "The ID of the owner associated with the task. This field determines the user listed as the task creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version. For the pre HubSpot v3 versions, this value may be found within the parent `engagement` table.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_team_id": {"name": "property_hubspot_team_id", "description": "The ID of the team associated with the task. This field determines the team listed as the task creator on the record timeline.\nPLEASE NOTE: This field will only be populated for connectors utilizing the HubSpot v3 API version.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"engagement_task_data\"", "created_at": 1722369228.06087}, "source.hubspot_source.hubspot.form": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "form", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.form", "fqn": ["hubspot_source", "hubspot", "form"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "form", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a Hubspot form.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp for when the form was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "css_class": {"name": "css_class", "description": "The CSS classes assigned to the form.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "follow_up_id": {"name": "follow_up_id", "description": "This field is no longer used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "guid": {"name": "guid", "description": "The internal ID of the form.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lead_nurturing_campaign_id": {"name": "lead_nurturing_campaign_id", "description": "TBD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "method": {"name": "method", "description": "This field is no longer used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the form.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notify_recipients": {"name": "notify_recipients", "description": "A comma-separated list of user IDs that should receive submission notifications.\nEmail addresses will be returned for individuals who aren't users.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "redirect": {"name": "redirect", "description": "The URL that the visitor will be redirected to after filling out the form.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "submit_text": {"name": "submit_text", "description": "The text used for the submit button.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp for when the form was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"form\"", "created_at": 1722369228.06101}, "source.hubspot_source.hubspot.owner": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "owner", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.owner", "fqn": ["hubspot_source", "hubspot", "owner"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "owner_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an owner/user in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp for when the owner was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"owner_data\"", "created_at": 1722369228.061174}, "source.hubspot_source.hubspot.property": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "property", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.property", "fqn": ["hubspot_source", "hubspot", "property"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "property_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a property.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Fivetran generated id. Joins to `property_id` in the `property_option` table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calculated": {"name": "calculated", "description": "Indicates if the property is calculated by a HubSpot process", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp representing when the property was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A description of the property.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "field_type": {"name": "field_type", "description": "One of textarea, text, date, file, number, select, radio, checkbox, or booleancheckbox.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "group_name": {"name": "group_name", "description": "The name of the property group that the property belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hubspot_defined": {"name": "hubspot_defined", "description": "This will be true for default properties that are built into HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hubspot_object": {"name": "hubspot_object", "description": "If this property is related to other objects, the object will be listed here.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "label": {"name": "label", "description": "A human readable label for the property.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The internal name of the property.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "show_currency_symbol": {"name": "show_currency_symbol", "description": "If true, the property will display the currency symbol set in the portal settings.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "One of string, number, date, datetime, or enumeration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp representing when the property was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"property_data\"", "created_at": 1722369228.061305}, "source.hubspot_source.hubspot.property_option": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "property_option", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.property_option", "fqn": ["hubspot_source", "hubspot", "property_option"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "property_option_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an option for the related property.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "label": {"name": "label", "description": "The label of the option displayed inside the HubSpot app.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_id": {"name": "property_id", "description": "The ID of the related property.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Order of options displayed in Hubspot, starting with the lowest positive integer value. Values of -1 will cause the option to be displayed after any positive values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hidden": {"name": "hidden", "description": "Boolean if the option will be displayed in HubSpot", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value": {"name": "value", "description": "The internal value of the option.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"property_option_data\"", "created_at": 1722369228.0614269}, "source.hubspot_source.hubspot.ticket_company": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_company", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket_company", "fqn": ["hubspot_source", "hubspot", "ticket_company"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_company_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a ticket and company.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_company_data\"", "created_at": 1722369228.061543}, "source.hubspot_source.hubspot.ticket_contact": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_contact", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket_contact", "fqn": ["hubspot_source", "hubspot", "ticket_contact"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_contact_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a ticket and a contact.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_contact_data\"", "created_at": 1722369228.06165}, "source.hubspot_source.hubspot.ticket_engagement": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_engagement", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket_engagement", "fqn": ["hubspot_source", "hubspot", "ticket_engagement"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_engagement_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a ticket and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_engagement_data\"", "created_at": 1722369228.061867}, "source.hubspot_source.hubspot.ticket_pipeline_stage": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_pipeline_stage", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket_pipeline_stage", "fqn": ["hubspot_source", "hubspot", "ticket_pipeline_stage"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_pipeline_stage_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a ticket pipeline stage.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether the pipeline stage is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Boolean indicating if the pipeline stage is closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "label": {"name": "label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_id": {"name": "pipeline_id", "description": "The ID of the pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "The ID of the pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_state": {"name": "ticket_state", "description": "State of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_pipeline_stage_data\"", "created_at": 1722369228.061984}, "source.hubspot_source.hubspot.ticket_pipeline": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_pipeline", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket_pipeline", "fqn": ["hubspot_source", "hubspot", "ticket_pipeline"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_pipeline_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a ticket pipeline.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether the pipeline is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "label": {"name": "label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "object_type_id": {"name": "object_type_id", "description": "Reference to the object type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_id": {"name": "pipeline_id", "description": "Reference to the pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp representing when the record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp representing when the record was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_pipeline_data\"", "created_at": 1722369228.062098}, "source.hubspot_source.hubspot.ticket_property_history": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_property_history", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket_property_history", "fqn": ["hubspot_source", "hubspot", "ticket_property_history"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_property_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a change to ticket record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp_instant": {"name": "timestamp_instant", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value": {"name": "value", "description": "The new value of the field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_start": {"name": "_fivetran_start", "description": "The (UTC DATETIME) to keep track of the time when a record is first created or modified in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_end": {"name": "_fivetran_end", "description": "The (UTC DATETIME) when a record became inactive in the source database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_property_history_data\"", "created_at": 1722369228.062211}, "source.hubspot_source.hubspot.ticket": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket", "fqn": ["hubspot_source", "hubspot", "ticket"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a ticket in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "ID of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record was deleted (v2 endpoint).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Whether the record was deleted (v3 endpoint).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_closed_date": {"name": "property_closed_date", "description": "The date the ticket was closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_createdate": {"name": "property_createdate", "description": "The date the ticket was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_first_agent_reply_date": {"name": "property_first_agent_reply_date", "description": "the date for the first agent reply on the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_pipeline": {"name": "property_hs_pipeline", "description": "The ID of the ticket's pipeline.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_pipeline_stage": {"name": "property_hs_pipeline_stage", "description": "The ID of the ticket's pipeline stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_ticket_priority": {"name": "property_hs_ticket_priority", "description": "The priority of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hs_ticket_category": {"name": "property_hs_ticket_category", "description": "The category of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_hubspot_owner_id": {"name": "property_hubspot_owner_id", "description": "The ID of the deal's owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_subject": {"name": "property_subject", "description": "Short summary of ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "property_content": {"name": "property_content", "description": "Text in body of the ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_data\"", "created_at": 1722369228.062334}, "source.hubspot_source.hubspot.merged_deal": {"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "merged_deal", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.merged_deal", "fqn": ["hubspot_source", "hubspot", "merged_deal"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "merged_deal_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a deal that has been merged along with the related deal it's been merged into.", "columns": {"deal_id": {"name": "deal_id", "description": "The ID of the deal the record has been merged INTO.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "merged_deal_id": {"name": "merged_deal_id", "description": "ID of deal that has been merged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"merged_deal_data\"", "created_at": 1722369228.06244}}, "macros": {"macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.162577, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.1628249, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.162944, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.1630569, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.163171, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.164298, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.1649542, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.1742022, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.17473, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.175066, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.175392, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.17587, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.1763232, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.1765, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.176852, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.177248, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.1781518, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.1783621, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.178846, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.179213, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.179687, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.179938, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.180745, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.180991, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.1811252, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.181322, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.181473, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.183774, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.184095, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_materialized_view_as_sql": {"name": "postgres__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- get_create_materialized_view_as_sql(intermediate_relation, sql) -}}\n\n    {% if existing_relation is not none %}\n        alter materialized view {{ existing_relation }} rename to {{ backup_relation.include(database=False, schema=False) }};\n    {% endif %}\n\n    alter materialized view {{ intermediate_relation }} rename to {{ relation.include(database=False, schema=False) }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.184635, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.184942, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.185051, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }};\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.18556, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.1858282, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.186253, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.1870131, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.1872551, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.187917, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.19145, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.191637, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.192201, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.192846, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.194096, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.194356, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.1945221, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.19469, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.194849, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.195267, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.195607, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.196047, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.1965282, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.196831, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.200618, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.200814, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.201211, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2020211, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.202213, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.202402, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.203861, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2053142, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.209633, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.20993, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2101052, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.210196, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.210346, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.210463, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2106729, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2117708, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.212049, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.212342, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2128232, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.219253, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2214122, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.221893, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.222214, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.222599, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.222987, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.224659, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.225234, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.225952, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.226209, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.226975, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2337139, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.235737, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.236037, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.237123, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2374132, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.238106, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2387688, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2396932, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2399502, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2401521, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.240465, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2406578, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2409978, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.241209, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.241497, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.241698, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.241858, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2421608, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2474089, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.253356, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.254666, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.255988, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2569091, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.262549, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.26303, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.263308, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.264732, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.264991, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.265715, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.266217, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.266376, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.266886, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.267086, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.267412, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.267562, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.268023, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.268213, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.268644, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.268899, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2691698, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.269305, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.269631, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.269804, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.273103, "supported_languages": ["sql"]}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.27421, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.274348, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.274934, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.275118, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.275266, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2767649, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.277326, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2777522, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.280792, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.281698, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.281891, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.28234, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2830179, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.283503, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2836978, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2838788, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.28688, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.28721, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2874508, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.289042, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2894888, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.28967, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.289876, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.290346, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.2940779, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.299479, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.30045, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3006961, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3011909, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.301549, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.301745, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.301918, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.302051, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3022342, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.302368, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.302913, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.303126, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.304539, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.305036, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3054478, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.306004, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3062882, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3065941, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.307016, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.307287, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3076649, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.308, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3083022, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.308955, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3106189, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.311311, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.311629, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.313598, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.314831, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3155909, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.315833, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.316075, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.316159, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.316493, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.316661, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.316915, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.317052, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.317322, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.317434, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.317781, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3179488, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.318174, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.318254, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3185222, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.318768, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3191628, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3194308, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3200908, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.320514, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.320866, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.321035, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.321357, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.321507, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.321782, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.321964, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.322228, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3224041, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.322669, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.322784, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.323099, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.323242, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.323501, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.323614, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.324737, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3249002, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.325186, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3253472, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.325515, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.325671, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3258398, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.326026, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.326195, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3263528, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.326519, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.326669, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.326837, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3269892, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.327285, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.327426, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.32768, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.327786, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3281322, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.328403, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.328555, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3290932, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3292642, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.329561, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.329844, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.329977, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.330366, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.330613, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.330896, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.331035, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3314161, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3316119, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.331779, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3319669, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.332474, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.332628, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.332777, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.332886, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.333054, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.333131, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3333042, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.33348, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.334474, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.334812, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.33501, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.335552, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.335775, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.335933, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.336117, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.336256, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.339078, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.339255, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.339494, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.339818, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.340076, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.340419, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.340616, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.340798, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.341013, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.341314, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3415701, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.342216, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.342457, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3426108, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3428102, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3432372, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3436742, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3439722, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.344214, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.34599, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.346121, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.346302, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.34642, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.346784, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.346982, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.347091, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.34733, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.347533, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.347776, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3479779, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3482099, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.349223, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3494349, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.349694, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.349932, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3510962, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.351839, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3520389, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.352256, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.352437, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.352723, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3532522, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3548338, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3551118, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.35531, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.355482, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.355676, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3559418, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.356162, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3564868, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.356693, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.356867, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3578198, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3793979, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3796391, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3797581, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3799481, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.380058, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.380251, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.380363, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.382764, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.382949, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.383307, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.383551, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.383779, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.383978, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.384774, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.385211, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.385414, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.385806, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.386048, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.386677, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.386948, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3877609, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.389487, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.389652, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.390513, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.390939, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.391551, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.392061, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.392141, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.392674, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.392919, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3932312, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.393523, "supported_languages": null}, "macro.hubspot_source.get_contact_columns": {"name": "get_contact_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_contact_columns.sql", "original_file_path": "macros/get_contact_columns.sql", "unique_id": "macro.hubspot_source.get_contact_columns", "macro_sql": "{% macro get_contact_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\", \"alias\": \"is_contact_deleted\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int(), \"alias\": \"contact_id\"},\n    {\"name\": \"property_hs_calculated_merged_vids\", \"datatype\": dbt.type_string(), \"alias\": \"calculated_merged_vids\"},\n    {\"name\": \"property_email\", \"datatype\": dbt.type_string(), \"alias\": \"email\"},\n    {\"name\": \"property_company\", \"datatype\": dbt.type_string(), \"alias\": \"contact_company\"},\n    {\"name\": \"property_firstname\", \"datatype\": dbt.type_string(), \"alias\": \"first_name\"},\n    {\"name\": \"property_lastname\", \"datatype\": dbt.type_string(), \"alias\": \"last_name\"},\n    {\"name\": \"property_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_date\"},\n    {\"name\": \"property_jobtitle\", \"datatype\": dbt.type_string(), \"alias\": \"job_title\"},\n    {\"name\": \"property_annualrevenue\", \"datatype\": dbt.type_int(), \"alias\": \"company_annual_revenue\"}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('hubspot__contact_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3954718, "supported_languages": null}, "macro.hubspot_source.get_email_event_open_columns": {"name": "get_email_event_open_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_open_columns.sql", "original_file_path": "macros/get_email_event_open_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_open_columns", "macro_sql": "{% macro get_email_event_open_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"browser\", \"datatype\": dbt.type_string()},\n    {\"name\": \"duration\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3964171, "supported_languages": null}, "macro.hubspot_source.get_merged_deal_columns": {"name": "get_merged_deal_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_merged_deal_columns.sql", "original_file_path": "macros/get_merged_deal_columns.sql", "unique_id": "macro.hubspot_source.get_merged_deal_columns", "macro_sql": "{% macro get_merged_deal_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"merged_deal_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.396946, "supported_languages": null}, "macro.hubspot_source.get_email_event_spam_report_columns": {"name": "get_email_event_spam_report_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_spam_report_columns.sql", "original_file_path": "macros/get_email_event_spam_report_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_spam_report_columns", "macro_sql": "{% macro get_email_event_spam_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.3975732, "supported_languages": null}, "macro.hubspot_source.get_email_event_bounce_columns": {"name": "get_email_event_bounce_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_bounce_columns.sql", "original_file_path": "macros/get_email_event_bounce_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_bounce_columns", "macro_sql": "{% macro get_email_event_bounce_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"response\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.398294, "supported_languages": null}, "macro.hubspot_source.get_ticket_pipeline_stage_columns": {"name": "get_ticket_pipeline_stage_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_pipeline_stage_columns.sql", "original_file_path": "macros/get_ticket_pipeline_stage_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_pipeline_stage_columns", "macro_sql": "{% macro get_ticket_pipeline_stage_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"display_order\", \"datatype\": dbt.type_int()},\n    {\"name\": \"is_closed\", \"datatype\": \"boolean\"},\n    {\"name\": \"label\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pipeline_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stage_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ticket_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.399605, "supported_languages": null}, "macro.hubspot_source.get_company_columns": {"name": "get_company_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_company_columns.sql", "original_file_path": "macros/get_company_columns.sql", "unique_id": "macro.hubspot_source.get_company_columns", "macro_sql": "{% macro get_company_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int(), \"alias\": \"company_id\"},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\", \"alias\": \"is_company_deleted\"},\n    {\"name\": \"property_name\", \"datatype\": dbt.type_string(), \"alias\": \"company_name\"},\n    {\"name\": \"property_description\", \"datatype\": dbt.type_string(), \"alias\": \"description\"},\n    {\"name\": \"property_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_date\"},\n    {\"name\": \"property_industry\", \"datatype\": dbt.type_string(), \"alias\": \"industry\"},\n    {\"name\": \"property_address\", \"datatype\": dbt.type_string(), \"alias\": \"street_address\"},\n    {\"name\": \"property_address_2\", \"datatype\": dbt.type_string(), \"alias\": \"street_address_2\"},\n    {\"name\": \"property_city\", \"datatype\": dbt.type_string(), \"alias\": \"city\"},\n    {\"name\": \"property_state\", \"datatype\": dbt.type_string(), \"alias\": \"state\"},\n    {\"name\": \"property_country\", \"datatype\": dbt.type_string(), \"alias\": \"country\"},\n    {\"name\": \"property_annualrevenue\", \"datatype\": dbt.type_int(), \"alias\": \"company_annual_revenue\"}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('hubspot__company_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.401806, "supported_languages": null}, "macro.hubspot_source.remove_duplicate_and_prefix_from_columns": {"name": "remove_duplicate_and_prefix_from_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/remove_duplicate_and_prefix_from_columns.sql", "original_file_path": "macros/remove_duplicate_and_prefix_from_columns.sql", "unique_id": "macro.hubspot_source.remove_duplicate_and_prefix_from_columns", "macro_sql": "{% macro remove_duplicate_and_prefix_from_columns(columns, prefix='', exclude=[]) %}\n        \n        {# Loop once to find duplicates #}\n        {%- set duplicate_exclude = [] -%}\n        {% for col in columns if col.name not in exclude %}\n        {%- for dupe in columns if col.name[prefix|length:]|lower == dupe.name|lower -%}\n        {%- do duplicate_exclude.append(col.name) -%}\n        {%- do duplicate_exclude.append(dupe.name) -%}\n        , {{ adapter.quote(col.name) }} as {{ dbt_utils.slugify(col.name[prefix|length:]) }}\n        {%- endfor %}\n        {% endfor %}\n\n        {# Loop again to find non-duplicates #}\n        {% for col in columns if col.name not in exclude %}\n        {%- if col.name|lower not in duplicate_exclude|lower -%}\n        {% if col.name[:prefix|length]|lower == prefix %}\n        , {{ adapter.quote(col.name) }} as {{ dbt_utils.slugify(col.name[prefix|length:]) }}\n        {%- else %}\n        , {{ adapter.quote(col.name) }}\n        {%- endif -%}\n        {%- endif -%}\n        {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.403351, "supported_languages": null}, "macro.hubspot_source.get_ticket_deal_columns": {"name": "get_ticket_deal_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_deal_columns.sql", "original_file_path": "macros/get_ticket_deal_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_deal_columns", "macro_sql": "{% macro get_ticket_deal_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.403886, "supported_languages": null}, "macro.hubspot_source.get_ticket_pipeline_columns": {"name": "get_ticket_pipeline_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_pipeline_columns.sql", "original_file_path": "macros/get_ticket_pipeline_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_pipeline_columns", "macro_sql": "{% macro get_ticket_pipeline_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"display_order\", \"datatype\": dbt.type_int()},\n    {\"name\": \"label\", \"datatype\": dbt.type_string()},\n    {\"name\": \"object_type_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pipeline_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.405004, "supported_languages": null}, "macro.hubspot_source.get_email_event_dropped_columns": {"name": "get_email_event_dropped_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_dropped_columns.sql", "original_file_path": "macros/get_email_event_dropped_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_dropped_columns", "macro_sql": "{% macro get_email_event_dropped_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"bcc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"drop_message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"drop_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reply_to\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subject\", \"datatype\": dbt.type_string()}\n] %}\n\n{% if target.type == 'snowflake' %}\n {{ columns.append({\"name\": \"FROM\", \"datatype\": dbt.type_string(), \"quote\": True, \"alias\": \"from_email\"}) }}\n{% else %}\n {{ columns.append({\"name\": \"from\", \"datatype\": dbt.type_string(), \"quote\": True, \"alias\": \"from_email\"}) }}\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.406611, "supported_languages": null}, "macro.hubspot_source.get_engagement_email_columns": {"name": "get_engagement_email_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_email_columns.sql", "original_file_path": "macros/get_engagement_email_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_email_columns", "macro_sql": "{% macro get_engagement_email_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string(), \"alias\": \"engagement_type\"},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"property_hs_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"property_hs_timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"occurred_timestamp\"},\n    {\"name\": \"property_hubspot_owner_id\", \"datatype\": dbt.type_int(), \"alias\": \"owner_id\"},\n    {\"name\": \"property_hubspot_team_id\", \"datatype\": dbt.type_int(), \"alias\": \"team_id\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.40783, "supported_languages": null}, "macro.hubspot_source.get_email_event_forward_columns": {"name": "get_email_event_forward_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_forward_columns.sql", "original_file_path": "macros/get_email_event_forward_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_forward_columns", "macro_sql": "{% macro get_email_event_forward_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"browser\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4086342, "supported_languages": null}, "macro.hubspot_source.get_deal_pipeline_columns": {"name": "get_deal_pipeline_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_deal_pipeline_columns.sql", "original_file_path": "macros/get_deal_pipeline_columns.sql", "unique_id": "macro.hubspot_source.get_deal_pipeline_columns", "macro_sql": "{% macro get_deal_pipeline_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"display_order\", \"datatype\": dbt.type_int()},\n    {\"name\": \"label\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pipeline_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.409697, "supported_languages": null}, "macro.hubspot_source.get_email_event_click_columns": {"name": "get_email_event_click_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_click_columns.sql", "original_file_path": "macros/get_email_event_click_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_click_columns", "macro_sql": "{% macro get_email_event_click_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"browser\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"referer\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.410708, "supported_languages": null}, "macro.hubspot_source.get_email_event_deferred_columns": {"name": "get_email_event_deferred_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_deferred_columns.sql", "original_file_path": "macros/get_email_event_deferred_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_deferred_columns", "macro_sql": "{% macro get_email_event_deferred_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"attempt\", \"datatype\": dbt.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"response\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.411316, "supported_languages": null}, "macro.hubspot_source.get_deal_columns": {"name": "get_deal_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_deal_columns.sql", "original_file_path": "macros/get_deal_columns.sql", "unique_id": "macro.hubspot_source.get_deal_columns", "macro_sql": "{% macro get_deal_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"deal_pipeline_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deal_pipeline_stage_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\", \"alias\": \"is_deal_deleted\"},\n    {\"name\": \"owner_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"portal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"property_dealname\", \"datatype\": dbt.type_string(), \"alias\": \"deal_name\"},\n    {\"name\": \"property_description\", \"datatype\": dbt.type_string(), \"alias\": \"description\"},\n    {\"name\": \"property_amount\", \"datatype\": dbt.type_int(), \"alias\": \"amount\"},\n    {\"name\": \"property_closedate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"closed_date\"},\n    {\"name\": \"property_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_date\"}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('hubspot__deal_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.413196, "supported_languages": null}, "macro.hubspot_source.get_engagement_columns": {"name": "get_engagement_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_columns.sql", "original_file_path": "macros/get_engagement_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_columns", "macro_sql": "{% macro get_engagement_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\", \"alias\": \"is_active\"},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"owner_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"portal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"occurred_timestamp\"},\n    {\"name\": \"type\", \"datatype\": dbt.type_string(), \"alias\": \"engagement_type\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4143949, "supported_languages": null}, "macro.hubspot_source.get_property_columns": {"name": "get_property_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_property_columns.sql", "original_file_path": "macros/get_property_columns.sql", "unique_id": "macro.hubspot_source.get_property_columns", "macro_sql": "{% macro get_property_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"calculated\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"field_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"group_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hubspot_defined\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"hubspot_object\", \"datatype\": dbt.type_string()},\n    {\"name\": \"label\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"show_currency_symbol\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.416099, "supported_languages": null}, "macro.hubspot_source.get_engagement_contact_columns": {"name": "get_engagement_contact_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_contact_columns.sql", "original_file_path": "macros/get_engagement_contact_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_contact_columns", "macro_sql": "{% macro get_engagement_contact_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.416626, "supported_languages": null}, "macro.hubspot_source.get_email_event_columns": {"name": "get_email_event_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_columns.sql", "original_file_path": "macros/get_email_event_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_columns", "macro_sql": "{% macro get_email_event_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"app_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"caused_by_created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"caused_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"email_campaign_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"filtered_event\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"obsoleted_by_created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"obsoleted_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"portal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"recipient\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sent_by_created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sent_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.418397, "supported_languages": null}, "macro.hubspot_source.get_contact_merge_audit_columns": {"name": "get_contact_merge_audit_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_contact_merge_audit_columns.sql", "original_file_path": "macros/get_contact_merge_audit_columns.sql", "unique_id": "macro.hubspot_source.get_contact_merge_audit_columns", "macro_sql": "{% macro get_contact_merge_audit_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"canonical_vid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"entity_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"num_properties_moved\", \"datatype\": dbt.type_int()},\n    {\"name\": \"timestamp\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"vid_to_merge\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.419652, "supported_languages": null}, "macro.hubspot_source.get_engagement_company_columns": {"name": "get_engagement_company_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_company_columns.sql", "original_file_path": "macros/get_engagement_company_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_company_columns", "macro_sql": "{% macro get_engagement_company_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"company_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4201741, "supported_languages": null}, "macro.hubspot_source.get_property_option_columns": {"name": "get_property_option_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_property_option_columns.sql", "original_file_path": "macros/get_property_option_columns.sql", "unique_id": "macro.hubspot_source.get_property_option_columns", "macro_sql": "{% macro get_property_option_columns() %}\n\n{% set columns = [\n    {\"name\": \"label\", \"datatype\": dbt.type_string()},\n    {\"name\": \"property_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"display_order\", \"datatype\": dbt.type_int()},\n    {\"name\": \"hidden\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4209988, "supported_languages": null}, "macro.hubspot_source.get_deal_pipeline_stage_columns": {"name": "get_deal_pipeline_stage_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_deal_pipeline_stage_columns.sql", "original_file_path": "macros/get_deal_pipeline_stage_columns.sql", "unique_id": "macro.hubspot_source.get_deal_pipeline_stage_columns", "macro_sql": "{% macro get_deal_pipeline_stage_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"closed_won\", \"datatype\": \"boolean\"},\n    {\"name\": \"display_order\", \"datatype\": dbt.type_int()},\n    {\"name\": \"label\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pipeline_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"probability\", \"datatype\": dbt.type_float()},\n    {\"name\": \"stage_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.422362, "supported_languages": null}, "macro.hubspot_source.get_email_campaign_columns": {"name": "get_email_campaign_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_campaign_columns.sql", "original_file_path": "macros/get_email_campaign_columns.sql", "unique_id": "macro.hubspot_source.get_email_campaign_columns", "macro_sql": "{% macro get_email_campaign_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"app_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"app_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"content_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"num_included\", \"datatype\": dbt.type_int()},\n    {\"name\": \"num_queued\", \"datatype\": dbt.type_int()},\n    {\"name\": \"sub_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subject\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4237251, "supported_languages": null}, "macro.hubspot_source.get_email_event_sent_columns": {"name": "get_email_event_sent_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_sent_columns.sql", "original_file_path": "macros/get_email_event_sent_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_sent_columns", "macro_sql": "{% macro get_email_event_sent_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"bcc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reply_to\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subject\", \"datatype\": dbt.type_string()}\n] %}\n\n{% if target.type == 'snowflake' %}\n {{ columns.append({\"name\": \"FROM\", \"datatype\": dbt.type_string(), \"quote\": True, \"alias\": \"from_email\"}) }}\n{% else %}\n {{ columns.append({\"name\": \"from\", \"datatype\": dbt.type_string(), \"quote\": True, \"alias\": \"from_email\"}) }}\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.425142, "supported_languages": null}, "macro.hubspot_source.get_deal_stage_columns": {"name": "get_deal_stage_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_deal_stage_columns.sql", "original_file_path": "macros/get_deal_stage_columns.sql", "unique_id": "macro.hubspot_source.get_deal_stage_columns", "macro_sql": "{% macro get_deal_stage_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_active\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_end\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_start\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"date_entered\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4262662, "supported_languages": null}, "macro.hubspot_source.get_contact_list_columns": {"name": "get_contact_list_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_contact_list_columns.sql", "original_file_path": "macros/get_contact_list_columns.sql", "unique_id": "macro.hubspot_source.get_contact_list_columns", "macro_sql": "{% macro get_contact_list_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deleteable\", \"datatype\": \"boolean\"},\n    {\"name\": \"dynamic\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"metadata_error\", \"datatype\": dbt.type_string()},\n    {\"name\": \"metadata_last_processing_state_change_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"metadata_last_size_change_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"metadata_processing\", \"datatype\": dbt.type_string()},\n    {\"name\": \"metadata_size\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"portal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.427871, "supported_languages": null}, "macro.hubspot_source.get_ticket_property_history_columns": {"name": "get_ticket_property_history_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_property_history_columns.sql", "original_file_path": "macros/get_ticket_property_history_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_property_history_columns", "macro_sql": "{% macro get_ticket_property_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_start\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_end\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string(), \"alias\": \"field_name\"},\n    {\"name\": \"source\", \"datatype\": dbt.type_string(), \"alias\": \"change_source\"},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string(), \"alias\": \"change_source_id\"},\n    {\"name\": \"timestamp_instant\", \"datatype\": dbt.type_timestamp(), \"alias\": \"change_timestamp\"},\n    {\"name\": \"value\", \"datatype\": dbt.type_string(), \"alias\": \"new_value\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.429257, "supported_languages": null}, "macro.hubspot_source.get_owner_columns": {"name": "get_owner_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_owner_columns.sql", "original_file_path": "macros/get_owner_columns.sql", "unique_id": "macro.hubspot_source.get_owner_columns", "macro_sql": "{% macro get_owner_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"owner_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"portal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.430409, "supported_languages": null}, "macro.hubspot_source.get_engagement_deal_columns": {"name": "get_engagement_deal_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_deal_columns.sql", "original_file_path": "macros/get_engagement_deal_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_deal_columns", "macro_sql": "{% macro get_engagement_deal_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.430932, "supported_languages": null}, "macro.hubspot_source.get_email_event_status_change_columns": {"name": "get_email_event_status_change_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_status_change_columns.sql", "original_file_path": "macros/get_email_event_status_change_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_status_change_columns", "macro_sql": "{% macro get_email_event_status_change_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"bounced\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"portal_subscription_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"requested_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscriptions\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4319072, "supported_languages": null}, "macro.hubspot_source.get_deal_contact_columns": {"name": "get_deal_contact_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_deal_contact_columns.sql", "original_file_path": "macros/get_deal_contact_columns.sql", "unique_id": "macro.hubspot_source.get_deal_contact_columns", "macro_sql": "{% macro get_deal_contact_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.432551, "supported_languages": null}, "macro.hubspot_source.get_engagement_task_columns": {"name": "get_engagement_task_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_task_columns.sql", "original_file_path": "macros/get_engagement_task_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_task_columns", "macro_sql": "{% macro get_engagement_task_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string(), \"alias\": \"engagement_type\"},\n    {\"name\": \"property_hs_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"property_hs_timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"occurred_timestamp\"},\n    {\"name\": \"property_hubspot_owner_id\", \"datatype\": dbt.type_int(), \"alias\": \"owner_id\"},\n    {\"name\": \"property_hubspot_team_id\", \"datatype\": dbt.type_int(), \"alias\": \"team_id\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4338439, "supported_languages": null}, "macro.hubspot_source.get_ticket_contact_columns": {"name": "get_ticket_contact_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_contact_columns.sql", "original_file_path": "macros/get_ticket_contact_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_contact_columns", "macro_sql": "{% macro get_ticket_contact_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.434356, "supported_languages": null}, "macro.hubspot_source.get_ticket_company_columns": {"name": "get_ticket_company_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_company_columns.sql", "original_file_path": "macros/get_ticket_company_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_company_columns", "macro_sql": "{% macro get_ticket_company_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"company_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.434856, "supported_languages": null}, "macro.hubspot_source.get_ticket_columns": {"name": "get_ticket_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_columns.sql", "original_file_path": "macros/get_ticket_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_columns", "macro_sql": "{% macro get_ticket_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int(), \"alias\": \"ticket_id\"},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\", \"alias\": \"_fivetran_ticket_deleted\"},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\", \"alias\": \"is_ticket_deleted\"},\n    {\"name\": \"property_closed_date\", \"datatype\": dbt.type_timestamp(), \"alias\": \"closed_date\"},\n    {\"name\": \"property_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_date\"},\n    {\"name\": \"property_first_agent_reply_date\", \"datatype\": dbt.type_timestamp(), \"alias\": \"first_agent_reply_at\"},\n    {\"name\": \"property_hs_pipeline\", \"datatype\": dbt.type_string(), \"alias\": \"ticket_pipeline_id\"},\n    {\"name\": \"property_hs_pipeline_stage\", \"datatype\": dbt.type_string(), \"alias\": \"ticket_pipeline_stage_id\"},\n    {\"name\": \"property_hs_ticket_category\", \"datatype\": dbt.type_string(), \"alias\": \"ticket_category\"},\n    {\"name\": \"property_hs_ticket_priority\", \"datatype\": dbt.type_string(), \"alias\": \"ticket_priority\"},\n    {\"name\": \"property_hubspot_owner_id\", \"datatype\": dbt.type_int(), \"alias\": \"owner_id\"},\n    {\"name\": \"property_subject\", \"datatype\": dbt.type_string(), \"alias\": \"ticket_subject\"},\n    {\"name\": \"property_content\", \"datatype\": dbt.type_string(), \"alias\": \"ticket_content\"}  \n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('hubspot__ticket_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4371688, "supported_languages": null}, "macro.hubspot_source.get_deal_company_columns": {"name": "get_deal_company_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_deal_company_columns.sql", "original_file_path": "macros/get_deal_company_columns.sql", "unique_id": "macro.hubspot_source.get_deal_company_columns", "macro_sql": "{% macro get_deal_company_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"company_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.437802, "supported_languages": null}, "macro.hubspot_source.get_deal_property_history_columns": {"name": "get_deal_property_history_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_deal_property_history_columns.sql", "original_file_path": "macros/get_deal_property_history_columns.sql", "unique_id": "macro.hubspot_source.get_deal_property_history_columns", "macro_sql": "{% macro get_deal_property_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"change_timestamp\"},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.438775, "supported_languages": null}, "macro.hubspot_source.get_ticket_engagement_columns": {"name": "get_ticket_engagement_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_ticket_engagement_columns.sql", "original_file_path": "macros/get_ticket_engagement_columns.sql", "unique_id": "macro.hubspot_source.get_ticket_engagement_columns", "macro_sql": "{% macro get_ticket_engagement_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.439297, "supported_languages": null}, "macro.hubspot_source.get_macro_columns": {"name": "get_macro_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_macro_columns.sql", "original_file_path": "macros/get_macro_columns.sql", "unique_id": "macro.hubspot_source.get_macro_columns", "macro_sql": "{%- macro get_macro_columns(get_column_macro) -%}\n\n    {%- set macro_column_names = [] -%}\n    {%- for col in get_column_macro -%}\n        {%- set macro_column_names = macro_column_names.append(col.name | upper if target.type == 'snowflake' else col.name) -%}\n    {%- endfor -%}\n\n{{ return(macro_column_names) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.439759, "supported_languages": null}, "macro.hubspot_source.add_property_labels": {"name": "add_property_labels", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/add_property_labels.sql", "original_file_path": "macros/add_property_labels.sql", "unique_id": "macro.hubspot_source.add_property_labels", "macro_sql": "{% macro add_property_labels(passthrough_var_name, cte_name) %}\n\nselect {{ cte_name }}.*\n\n{% if var(passthrough_var_name, []) != [] and var('hubspot_property_enabled', True) %}\n  {% set source_name = passthrough_var_name.replace('hubspot__', '').replace('_pass_through_columns', '') %}\n  {%- set col_list = var(passthrough_var_name) -%}\n\n  {%- for col in col_list -%} -- Create label cols\n    {%- if col.add_property_label or var('hubspot__enable_all_property_labels', false) -%}\n      {%- set col_alias = (col.alias | default(col.name)) %}\n      , {{ col.name }}_option.property_option_label as {{ col_alias }}_label\n    {% endif -%}\n  {%- endfor %}\n\n  from {{ cte_name }}\n\n  {% for col in col_list -%} -- Create joins\n    {%- if col.add_property_label or var('hubspot__enable_all_property_labels', false) -%}\n      {%- set col_alias = (col.alias | default(col.name)) %}\n\n  left join -- create subset of property and property_options for property in question\n    (select \n      property_option.property_option_value, \n      property_option.property_option_label\n    from {{ ref('stg_hubspot__property_option') }} as property_option\n    join {{ ref('stg_hubspot__property') }} as property\n      on property_option.property_id = property._fivetran_id\n    where property.property_name = '{{ col.name.replace('property_', '') }}'\n      and property.hubspot_object = '{{ source_name }}'\n    ) as {{ col.name }}_option\n\n    on cast({{ cte_name }}.{{ col_alias }} as {{ dbt.type_string() }})\n      = cast({{ col.name }}_option.property_option_value as {{ dbt.type_string() }})\n\n    {% endif -%}\n  {%- endfor %}\n\n{%- else -%}\n  from {{ cte_name }}\n\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.442013, "supported_languages": null}, "macro.hubspot_source.get_company_property_history_columns": {"name": "get_company_property_history_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_company_property_history_columns.sql", "original_file_path": "macros/get_company_property_history_columns.sql", "unique_id": "macro.hubspot_source.get_company_property_history_columns", "macro_sql": "{% macro get_company_property_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"company_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"change_timestamp\"},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.442993, "supported_languages": null}, "macro.hubspot_source.get_engagement_note_columns": {"name": "get_engagement_note_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_note_columns.sql", "original_file_path": "macros/get_engagement_note_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_note_columns", "macro_sql": "{% macro get_engagement_note_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"body\", \"datatype\": dbt.type_string(), \"alias\": \"note\"},\n    {\"name\": \"type\", \"datatype\": dbt.type_string(), \"alias\": \"engagement_type\"},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"property_hs_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"property_hs_timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"occurred_timestamp\"},\n    {\"name\": \"property_hubspot_owner_id\", \"datatype\": dbt.type_int(), \"alias\": \"owner_id\"},\n    {\"name\": \"property_hubspot_team_id\", \"datatype\": dbt.type_int(), \"alias\": \"team_id\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.44437, "supported_languages": null}, "macro.hubspot_source.get_engagement_meeting_columns": {"name": "get_engagement_meeting_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_meeting_columns.sql", "original_file_path": "macros/get_engagement_meeting_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_meeting_columns", "macro_sql": "{% macro get_engagement_meeting_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string(), \"alias\": \"engagement_type\"},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"property_hs_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"property_hs_timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"occurred_timestamp\"},\n    {\"name\": \"property_hubspot_owner_id\", \"datatype\": dbt.type_int(), \"alias\": \"owner_id\"},\n    {\"name\": \"property_hubspot_team_id\", \"datatype\": dbt.type_int(), \"alias\": \"team_id\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.44562, "supported_languages": null}, "macro.hubspot_source.get_contact_list_member_columns": {"name": "get_contact_list_member_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_contact_list_member_columns.sql", "original_file_path": "macros/get_contact_list_member_columns.sql", "unique_id": "macro.hubspot_source.get_contact_list_member_columns", "macro_sql": "{% macro get_contact_list_member_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"added_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"contact_list_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.446343, "supported_languages": null}, "macro.hubspot_source.get_email_event_delivered_columns": {"name": "get_email_event_delivered_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_delivered_columns.sql", "original_file_path": "macros/get_email_event_delivered_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_delivered_columns", "macro_sql": "{% macro get_email_event_delivered_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"response\", \"datatype\": dbt.type_string()},\n    {\"name\": \"smtp_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4469461, "supported_languages": null}, "macro.hubspot_source.get_contact_property_history_columns": {"name": "get_contact_property_history_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_contact_property_history_columns.sql", "original_file_path": "macros/get_contact_property_history_columns.sql", "unique_id": "macro.hubspot_source.get_contact_property_history_columns", "macro_sql": "{% macro get_contact_property_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"contact_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"change_timestamp\"},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.447944, "supported_languages": null}, "macro.hubspot_source.all_passthrough_column_check": {"name": "all_passthrough_column_check", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/all_passthrough_column_check.sql", "original_file_path": "macros/all_passthrough_column_check.sql", "unique_id": "macro.hubspot_source.all_passthrough_column_check", "macro_sql": "{% macro all_passthrough_column_check(relation, get_columns) %}\n\n{% set available_passthrough_columns = fivetran_utils.remove_prefix_from_columns(\n                columns=adapter.get_columns_in_relation(ref(relation)), \n                prefix='property_', exclude=get_macro_columns(get_columns)) \n            %}\n\n{{ return(available_passthrough_columns|length) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.remove_prefix_from_columns", "macro.hubspot_source.get_macro_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.44838, "supported_languages": null}, "macro.hubspot_source.get_email_event_print_columns": {"name": "get_email_event_print_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_email_event_print_columns.sql", "original_file_path": "macros/get_email_event_print_columns.sql", "unique_id": "macro.hubspot_source.get_email_event_print_columns", "macro_sql": "{% macro get_email_event_print_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"browser\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.449186, "supported_languages": null}, "macro.hubspot_source.get_engagement_call_columns": {"name": "get_engagement_call_columns", "resource_type": "macro", "package_name": "hubspot_source", "path": "macros/get_engagement_call_columns.sql", "original_file_path": "macros/get_engagement_call_columns.sql", "unique_id": "macro.hubspot_source.get_engagement_call_columns", "macro_sql": "{% macro get_engagement_call_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string(), \"alias\": \"engagement_type\"},\n    {\"name\": \"property_hs_createdate\", \"datatype\": dbt.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"property_hs_timestamp\", \"datatype\": dbt.type_timestamp(), \"alias\": \"occurred_timestamp\"},\n    {\"name\": \"property_hubspot_owner_id\", \"datatype\": dbt.type_int(), \"alias\": \"owner_id\"},\n    {\"name\": \"property_hubspot_team_id\", \"datatype\": dbt.type_int(), \"alias\": \"team_id\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.450464, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.450851, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4513679, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.45188, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.452576, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.452918, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.453265, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.454412, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.455505, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.456418, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.457563, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.458269, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.458635, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.459431, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.460556, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.461076, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.461576, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4622211, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.462732, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4633129, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.463733, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4644659, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.465325, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.465991, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.466666, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4672372, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4675882, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.467996, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.46837, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.469253, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.470387, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.47145, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.472457, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.47457, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4793978, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4801269, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.480499, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.484579, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.486287, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4865868, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.486763, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.487228, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4875178, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.487724, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.487985, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.488163, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.488798, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.489693, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.490685, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.491507, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.491797, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.492248, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4928079, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.4935849, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.493967, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.494358, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.495092, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.495986, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.496887, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.497347, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.497556, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.498116, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.498865, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.499796, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5002491, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.500563, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.502018, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.503634, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5050519, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5066948, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5070028, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.507148, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.510415, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.514445, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.51487, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5151649, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.516151, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.516404, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.51659, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5167942, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5169668, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.517139, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.517322, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.517726, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.517982, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.518379, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.518955, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5193229, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5196779, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.523133, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.523542, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.524656, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5254772, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.526016, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5272279, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5288801, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.530059, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5309582, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.531457, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5322099, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5330071, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.53349, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.533827, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.534362, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.535073, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.535587, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.536284, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.53686, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.537013, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5371609, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.537314, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.537876, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.538806, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.539958, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.54026, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.540859, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.541727, "supported_languages": null}, "macro.spark_utils.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.547287, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"name": "get_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.548054, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"name": "get_statistic_columns", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.549025, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"name": "spark_optimize_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.549833, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"name": "spark_vacuum_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.550616, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"name": "spark_analyze_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.551669, "supported_languages": null}, "macro.spark_utils.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "unique_id": "macro.spark_utils.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.551872, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"name": "spark__type_numeric", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "unique_id": "macro.spark_utils.spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5519922, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "unique_id": "macro.spark_utils.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5550442, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "unique_id": "macro.spark_utils.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5632782, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.56344, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"name": "spark__current_timestamp_in_utc", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.56352, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "unique_id": "macro.spark_utils.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.564106, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"name": "spark__get_relations_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.565727, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"name": "spark__get_relations_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5660741, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"name": "spark__get_tables_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.566359, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"name": "spark__get_tables_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.566643, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5669708, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"name": "default__assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.567179, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "unique_id": "macro.spark_utils.spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5673869, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5677881, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.568744, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.568917, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5690858, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.569257, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5694048, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.569571, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.570444, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5711071, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.572747, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.573073, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5733702, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.573645, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.57392, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.574216, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5745149, "supported_languages": null}, "macro.fivetran_utils.sqlserver__json_parse": {"name": "sqlserver__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.sqlserver__json_parse", "macro_sql": "{% macro sqlserver__json_parse(string, string_path) %}\n\n  json_value({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.574782, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.575146, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.575271, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.575382, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.575503, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.575917, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5766761, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.577971, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.578679, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.579519, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.580029, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.580173, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.58031, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.580443, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.580632, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5838, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5839732, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5841439, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5843048, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5861251, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.587132, "supported_languages": null}, "macro.fivetran_utils.default__try_cast": {"name": "default__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__try_cast", "macro_sql": "{% macro default__try_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5872798, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5875762, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.587892, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.588033, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.588167, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.588305, "supported_languages": null}, "macro.fivetran_utils.sqlserver__try_cast": {"name": "sqlserver__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.sqlserver__try_cast", "macro_sql": "{% macro sqlserver__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.588466, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5890958, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.58972, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.590246, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.5904691, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.590705, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.590971, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.592261, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.596457, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.59686, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.597265, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.598955, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.599565, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.600176, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.6003451, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.600514, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.600705, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.6008708, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.601037, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.601892, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n\n  {% if dbt_version.split('.') | map('int') | list >= [1, 5, 0]  %}\n    {{ return(load_result('collect_freshness')) }}\n  {% else %}\n    {{ return(load_result('collect_freshness').table) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.6032279, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.603971, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.604149, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.604317, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.604481, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.604644, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.60482, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.605073, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.605178, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.605282, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.605936, "supported_languages": null}, "macro.fivetran_utils.fivetran_date_spine": {"name": "fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.fivetran_date_spine", "macro_sql": "{% macro fivetran_date_spine(datepart, start_date, end_date) -%}\n\n{{ return(adapter.dispatch('fivetran_date_spine', 'fivetran_utils') (datepart, start_date, end_date)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__fivetran_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.607331, "supported_languages": null}, "macro.fivetran_utils.default__fivetran_date_spine": {"name": "default__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.default__fivetran_date_spine", "macro_sql": "{% macro default__fivetran_date_spine(datepart, start_date, end_date) %}\n\n    {{ dbt_utils.date_spine(datepart, start_date, end_date) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.60752, "supported_languages": null}, "macro.fivetran_utils.sqlserver__fivetran_date_spine": {"name": "sqlserver__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.sqlserver__fivetran_date_spine", "macro_sql": "{% macro sqlserver__fivetran_date_spine(datepart, start_date, end_date) -%}\n\n    {% set date_spine_query %}\n        with\n\n        l0 as (\n\n            select c\n            from (select 1 union all select 1) as d(c)\n\n        ),\n        l1 as (\n\n            select\n                1 as c\n            from l0 as a\n            cross join l0 as b\n\n        ),\n\n        l2 as (\n\n            select 1 as c\n            from l1 as a\n            cross join l1 as b\n        ),\n\n        l3 as (\n\n            select 1 as c\n            from l2 as a\n            cross join l2 as b\n        ),\n\n        l4 as (\n\n            select 1 as c\n            from l3 as a\n            cross join l3 as b\n        ),\n\n        l5 as (\n\n            select 1 as c\n            from l4 as a\n            cross join l4 as b\n        ),\n\n        nums as (\n\n            select row_number() over (order by (select null)) as rownum\n            from l5\n        ),\n\n        rawdata as (\n\n            select top ({{dbt.datediff(start_date, end_date, datepart)}}) rownum -1 as n\n            from nums\n            order by rownum\n        ),\n\n        all_periods as (\n\n            select (\n                {{\n                    dbt.dateadd(\n                        datepart,\n                        'n',\n                        start_date\n                    )\n                }}\n            ) as date_{{datepart}}\n            from rawdata\n        ),\n\n        filtered as (\n\n            select *\n            from all_periods\n            where date_{{datepart}} <= {{ end_date }}\n\n        )\n\n        select * from filtered\n        order by 1\n\n    {% endset %}\n\n    {% set results = run_query(date_spine_query) %}\n\n    {% if execute %}\n\n        {% set results_list = results.columns[0].values() %}\n    \n    {% else %}\n\n        {% set results_list = [] %}\n\n    {% endif %}\n\n    {%- for date_field in results_list %}\n        select cast('{{ date_field }}' as date) as date_{{datepart}} {{ 'union all ' if not loop.last else '' }}\n    {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.dateadd", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.608403, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.612169, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.617099, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.618583, "supported_languages": null}, "macro.fivetran_utils.extract_url_parameter": {"name": "extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.extract_url_parameter", "macro_sql": "{% macro extract_url_parameter(field, url_parameter) -%}\n\n{{ adapter.dispatch('extract_url_parameter', 'fivetran_utils') (field, url_parameter) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__extract_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.618937, "supported_languages": null}, "macro.fivetran_utils.default__extract_url_parameter": {"name": "default__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.default__extract_url_parameter", "macro_sql": "{% macro default__extract_url_parameter(field, url_parameter) -%}\n\n{{ dbt_utils.get_url_parameter(field, url_parameter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.6190941, "supported_languages": null}, "macro.fivetran_utils.spark__extract_url_parameter": {"name": "spark__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.spark__extract_url_parameter", "macro_sql": "{% macro spark__extract_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"=([^&]+)'\" -%}\nnullif(regexp_extract({{ field }}, {{ formatted_url_parameter }}, 1), '')\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.619297, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.postgres__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.61964, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.619754, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.619932, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.62006, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.6201751, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.620472, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.620586, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.620699, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.621137, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722369226.621567, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.hubspot_source._fivetran_synced": {"name": "_fivetran_synced", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source._fivetran_synced", "block_contents": "Timestamp of when Fivetran synced a record."}, "doc.hubspot_source._fivetran_deleted": {"name": "_fivetran_deleted", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source._fivetran_deleted", "block_contents": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent."}, "doc.hubspot_source._fivetran_end": {"name": "_fivetran_end", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source._fivetran_end", "block_contents": "The (UTC DATETIME) when a record became inactive in the source database."}, "doc.hubspot_source._fivetran_start": {"name": "_fivetran_start", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source._fivetran_start", "block_contents": "The (UTC DATETIME) to keep track of the time when a record is first created or modified in the source database."}, "doc.hubspot_source.portal_id": {"name": "portal_id", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.portal_id", "block_contents": "The hub ID."}, "doc.hubspot_source.is_deleted": {"name": "is_deleted", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.is_deleted", "block_contents": "Boolean indicating whether a record has been deleted in Hubspot and/or inferred deleted in Hubspot by Fivetran; _fivetran_deleted and is_deleted fields are equivalent."}, "doc.hubspot_source.history_name": {"name": "history_name", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.history_name", "block_contents": "The name of the field being changed."}, "doc.hubspot_source.history_source": {"name": "history_source", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.history_source", "block_contents": "The source (reason) of the change."}, "doc.hubspot_source.history_source_id": {"name": "history_source_id", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.history_source_id", "block_contents": "The ID of the object that caused the change, if applicable."}, "doc.hubspot_source.history_timestamp": {"name": "history_timestamp", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.history_timestamp", "block_contents": "The timestamp the changed occurred."}, "doc.hubspot_source.history_value": {"name": "history_value", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.history_value", "block_contents": "The new value of the field."}, "doc.hubspot_source.email_event_browser": {"name": "email_event_browser", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.email_event_browser", "block_contents": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'."}, "doc.hubspot_source.email_event_ip_address": {"name": "email_event_ip_address", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.email_event_ip_address", "block_contents": "The contact's IP address when the event occurred."}, "doc.hubspot_source.email_event_location": {"name": "email_event_location", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.email_event_location", "block_contents": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'."}, "doc.hubspot_source.email_event_user_agent": {"name": "email_event_user_agent", "resource_type": "doc", "package_name": "hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.hubspot_source.email_event_user_agent", "block_contents": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"seed.hubspot_source_integration_tests.contact_list_data": [{"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "contact_list_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "contact_list_data.csv", "original_file_path": "seeds/contact_list_data.csv", "unique_id": "seed.hubspot_source_integration_tests.contact_list_data", "fqn": ["hubspot_source_integration_tests", "contact_list_data"], "alias": "contact_list_data", "checksum": {"name": "sha256", "checksum": "076048177aa1f7e158f81f85a1688c0a5e6100b180f25253f0be194ffec9df1f"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "enabled": "{{ true if target.type != 'postgres' else false }}"}, "created_at": 1722369226.9653199, "config_call_dict": {}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"contact_list_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}, "defer_relation": null}], "seed.hubspot_source_integration_tests.email_event_dropped_data": [{"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_dropped_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_dropped_data.csv", "original_file_path": "seeds/email_event_dropped_data.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_dropped_data", "fqn": ["hubspot_source_integration_tests", "email_event_dropped_data"], "alias": "email_event_dropped_data", "checksum": {"name": "sha256", "checksum": "533c39c745eda4d1b5c61cdb23ce8a635f7c99313bfe64c9f282ab8130866abb"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "enabled": "{{ true if target.type not in ('snowflake', 'postgres') else false }}"}, "created_at": 1722369226.982136, "config_call_dict": {}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_dropped_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}, "defer_relation": null}], "seed.hubspot_source_integration_tests.email_event_sent_data_snowflake": [{"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_sent_data_snowflake", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_sent_data_snowflake.csv", "original_file_path": "seeds/email_event_sent_data_snowflake.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_sent_data_snowflake", "fqn": ["hubspot_source_integration_tests", "email_event_sent_data_snowflake"], "alias": "email_event_sent_data", "checksum": {"name": "sha256", "checksum": "89cba14bad6a125b898c0e45a52214590c01bf7422756eab50ea39c68009e5ce"}, "config": {"enabled": false, "alias": "email_event_sent_data", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "alias": "email_event_sent_data", "enabled": "{{ true if target.type == 'snowflake' else false }}"}, "created_at": 1722369226.989568, "config_call_dict": {}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_sent_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}, "defer_relation": null}], "seed.hubspot_source_integration_tests.email_event_sent_data": [{"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_sent_data", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_sent_data.csv", "original_file_path": "seeds/email_event_sent_data.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_sent_data", "fqn": ["hubspot_source_integration_tests", "email_event_sent_data"], "alias": "email_event_sent_data", "checksum": {"name": "sha256", "checksum": "ee30dbd9f5d7c3682906127212df1b6177a43f16ac7f018f72ab8bfd0f9a7ede"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "enabled": "{{ true if target.type not in ('snowflake', 'postgres') else false }}"}, "created_at": 1722369227.0043972, "config_call_dict": {}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_sent_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}, "defer_relation": null}], "seed.hubspot_source_integration_tests.email_event_dropped_data_snowflake": [{"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "email_event_dropped_data_snowflake", "resource_type": "seed", "package_name": "hubspot_source_integration_tests", "path": "email_event_dropped_data_snowflake.csv", "original_file_path": "seeds/email_event_dropped_data_snowflake.csv", "unique_id": "seed.hubspot_source_integration_tests.email_event_dropped_data_snowflake", "fqn": ["hubspot_source_integration_tests", "email_event_dropped_data_snowflake"], "alias": "email_event_dropped_data", "checksum": {"name": "sha256", "checksum": "c76b93930ac4bcd2a6cb4b26b5c8ce021900a19c67d996195aa8e298d365cd3a"}, "config": {"enabled": false, "alias": "email_event_dropped_data", "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "alias": "email_event_dropped_data", "enabled": "{{ true if target.type == 'snowflake' else false }}"}, "created_at": 1722369227.010144, "config_call_dict": {}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"email_event_dropped_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/hubspot/dbt_hubspot_source/integration_tests", "depends_on": {"macros": []}, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_deal": [{"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_deal", "resource_type": "model", "package_name": "hubspot_source", "path": "stg_hubspot__ticket_deal.sql", "original_file_path": "models/stg_hubspot__ticket_deal.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_deal", "fqn": ["hubspot_source", "stg_hubspot__ticket_deal"], "alias": "stg_hubspot__ticket_deal", "checksum": {"name": "sha256", "checksum": "7f8e27e9120ccd03870195b032d84ed101bcf96f035b0b95e1eddf2edf2a137b"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a 'link' between a ticket and a deal.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": false}, "created_at": 1722369227.953542, "config_call_dict": {"enabled": false}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_deal\"", "raw_code": "{{ config(enabled=(var('hubspot_service_enabled', false) and var('hubspot_ticket_deal_enabled', false))) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_deal_tmp') }}\n\n), macro as (\n\n    select\n        {% set default_cols = adapter.get_columns_in_relation(ref('stg_hubspot__ticket_deal_tmp')) %}\n        {% set new_cols = remove_duplicate_and_prefix_from_columns(columns=default_cols, \n            prefix='property_hs_',exclude=get_macro_columns(get_ticket_deal_columns())) %}\n        {{\n            fivetran_utils.fill_staging_columns(source_columns=default_cols,\n                staging_columns=get_ticket_deal_columns()\n            )\n        }}\n        {% if new_cols | length > 0 %} \n            {{ new_cols }} \n        {% endif %}\n    from base\n\n)\n\nselect *\nfrom macro", "language": "sql", "refs": [{"name": "stg_hubspot__ticket_deal_tmp", "package": null, "version": null}, {"name": "stg_hubspot__ticket_deal_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.hubspot_source.get_ticket_deal_columns", "macro.hubspot_source.get_macro_columns", "macro.hubspot_source.remove_duplicate_and_prefix_from_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.hubspot_source.stg_hubspot__ticket_deal_tmp": [{"database": "postgres", "schema": "hubspot_source_integration_tests_21_hubspot", "name": "stg_hubspot__ticket_deal_tmp", "resource_type": "model", "package_name": "hubspot_source", "path": "tmp/stg_hubspot__ticket_deal_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_deal_tmp.sql", "unique_id": "model.hubspot_source.stg_hubspot__ticket_deal_tmp", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_deal_tmp"], "alias": "stg_hubspot__ticket_deal_tmp", "checksum": {"name": "sha256", "checksum": "98b0d5a123c33b9a10c987df9a7c8be2084aafd95354bdbccc48ef628f6e225f"}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "{{ 'hubspot_sqlw_tests' if target.name == 'databricks-sql' else 'hubspot' }}", "enabled": false}, "created_at": 1722369227.785221, "config_call_dict": {"enabled": false}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21_hubspot\".\"stg_hubspot__ticket_deal_tmp\"", "raw_code": "{{ config(enabled=(var('hubspot_service_enabled', false) and var('hubspot_ticket_deal_enabled', false))) }}\n\nselect {{ dbt_utils.star(source('hubspot','ticket_deal')) }}\nfrom {{ var('ticket_deal') }}", "language": "sql", "refs": [], "sources": [["hubspot", "ticket_deal"], ["hubspot", "ticket_deal"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "source.hubspot_source.hubspot.ticket_deal": [{"database": "postgres", "schema": "hubspot_source_integration_tests_21", "name": "ticket_deal", "resource_type": "source", "package_name": "hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "unique_id": "source.hubspot_source.hubspot.ticket_deal", "fqn": ["hubspot_source", "hubspot", "ticket_deal"], "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_deal_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a ticket and a deal.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc(\"_fivetran_synced\") }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related deal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false}, "patch_path": null, "unrendered_config": {"enabled": false}, "relation_name": "\"postgres\".\"hubspot_source_integration_tests_21\".\"ticket_deal_data\"", "created_at": 1722369228.061759}]}, "parent_map": {"seed.hubspot_source_integration_tests.contact_list_data_postgres": [], "seed.hubspot_source_integration_tests.merged_deal_data": [], "seed.hubspot_source_integration_tests.email_event_delivered_data": [], "seed.hubspot_source_integration_tests.ticket_pipeline_stage_data": [], "seed.hubspot_source_integration_tests.ticket_contact_data": [], "seed.hubspot_source_integration_tests.email_event_status_change_data": [], "seed.hubspot_source_integration_tests.ticket_company_data": [], "seed.hubspot_source_integration_tests.engagement_deal_data": [], "seed.hubspot_source_integration_tests.email_event_sent_data_postgres": [], "seed.hubspot_source_integration_tests.deal_stage_data": [], "seed.hubspot_source_integration_tests.email_campaign_data": [], "seed.hubspot_source_integration_tests.engagement_call_data": [], "seed.hubspot_source_integration_tests.contact_merge_audit_data": [], "seed.hubspot_source_integration_tests.email_event_print_data": [], "seed.hubspot_source_integration_tests.property_option_data": [], "seed.hubspot_source_integration_tests.email_event_spam_report_data": [], "seed.hubspot_source_integration_tests.ticket_data": [], "seed.hubspot_source_integration_tests.ticket_pipeline_data": [], "seed.hubspot_source_integration_tests.email_event_click_data": [], "seed.hubspot_source_integration_tests.email_event_deferred_data": [], "seed.hubspot_source_integration_tests.email_event_open_data": [], "seed.hubspot_source_integration_tests.company_property_history_data": [], "seed.hubspot_source_integration_tests.engagement_email_data": [], "seed.hubspot_source_integration_tests.deal_data": [], "seed.hubspot_source_integration_tests.engagement_note_data": [], "seed.hubspot_source_integration_tests.deal_pipeline_data": [], "seed.hubspot_source_integration_tests.email_event_data": [], "seed.hubspot_source_integration_tests.engagement_data": [], "seed.hubspot_source_integration_tests.owner_data": [], "seed.hubspot_source_integration_tests.engagement_meeting_data": [], "seed.hubspot_source_integration_tests.email_event_forward_data": [], "seed.hubspot_source_integration_tests.deal_pipeline_stage_data": [], "seed.hubspot_source_integration_tests.company_data": [], "seed.hubspot_source_integration_tests.deal_contact_data": [], "seed.hubspot_source_integration_tests.contact_list_member_data": [], "seed.hubspot_source_integration_tests.contact_property_history_data": [], "seed.hubspot_source_integration_tests.property_data": [], "seed.hubspot_source_integration_tests.deal_property_history_data": [], "seed.hubspot_source_integration_tests.email_event_bounce_data": [], "seed.hubspot_source_integration_tests.engagement_contact_data": [], "seed.hubspot_source_integration_tests.ticket_engagement_data": [], "seed.hubspot_source_integration_tests.contact_data": [], "seed.hubspot_source_integration_tests.ticket_deal_data": [], "seed.hubspot_source_integration_tests.deal_company_data": [], "seed.hubspot_source_integration_tests.ticket_property_history_data": [], "seed.hubspot_source_integration_tests.email_event_dropped_data_postgres": [], "seed.hubspot_source_integration_tests.engagement_task_data": [], "seed.hubspot_source_integration_tests.engagement_company_data": [], "model.hubspot_source.stg_hubspot__engagement_task": ["model.hubspot_source.stg_hubspot__engagement_task_tmp"], "model.hubspot_source.stg_hubspot__property_option": ["model.hubspot_source.stg_hubspot__property_option_tmp"], "model.hubspot_source.stg_hubspot__engagement_deal": ["model.hubspot_source.stg_hubspot__engagement_deal_tmp"], "model.hubspot_source.stg_hubspot__company_property_history": ["model.hubspot_source.stg_hubspot__company_property_history_tmp"], "model.hubspot_source.stg_hubspot__email_event_delivered": ["model.hubspot_source.stg_hubspot__email_event_delivered_tmp"], "model.hubspot_source.stg_hubspot__owner": ["model.hubspot_source.stg_hubspot__owner_tmp"], "model.hubspot_source.stg_hubspot__email_event": ["model.hubspot_source.stg_hubspot__email_event_tmp"], "model.hubspot_source.stg_hubspot__engagement_meeting": ["model.hubspot_source.stg_hubspot__engagement_meeting_tmp"], "model.hubspot_source.stg_hubspot__engagement_email": ["model.hubspot_source.stg_hubspot__engagement_email_tmp"], "model.hubspot_source.stg_hubspot__ticket_contact": ["model.hubspot_source.stg_hubspot__ticket_contact_tmp"], "model.hubspot_source.stg_hubspot__email_event_status_change": ["model.hubspot_source.stg_hubspot__email_event_status_change_tmp"], "model.hubspot_source.stg_hubspot__contact_list_member": ["model.hubspot_source.stg_hubspot__contact_list_member_tmp"], "model.hubspot_source.stg_hubspot__contact": ["model.hubspot_source.stg_hubspot__contact_tmp"], "model.hubspot_source.stg_hubspot__deal": ["model.hubspot_source.stg_hubspot__deal_tmp"], "model.hubspot_source.stg_hubspot__deal_pipeline": ["model.hubspot_source.stg_hubspot__deal_pipeline_tmp"], "model.hubspot_source.stg_hubspot__deal_company": ["model.hubspot_source.stg_hubspot__deal_company_tmp"], "model.hubspot_source.stg_hubspot__engagement_note": ["model.hubspot_source.stg_hubspot__engagement_note_tmp"], "model.hubspot_source.stg_hubspot__engagement_contact": ["model.hubspot_source.stg_hubspot__engagement_contact_tmp"], "model.hubspot_source.stg_hubspot__contact_list": ["model.hubspot_source.stg_hubspot__contact_list_tmp"], "model.hubspot_source.stg_hubspot__ticket_pipeline": ["model.hubspot_source.stg_hubspot__ticket_pipeline_tmp"], "model.hubspot_source.stg_hubspot__email_event_spam_report": ["model.hubspot_source.stg_hubspot__email_event_spam_report_tmp"], "model.hubspot_source.stg_hubspot__deal_pipeline_stage": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp"], "model.hubspot_source.stg_hubspot__email_event_dropped": ["model.hubspot_source.stg_hubspot__email_event_dropped_tmp"], "model.hubspot_source.stg_hubspot__deal_stage": ["model.hubspot_source.stg_hubspot__deal_stage_tmp"], "model.hubspot_source.stg_hubspot__property": ["model.hubspot_source.stg_hubspot__property_tmp"], "model.hubspot_source.stg_hubspot__deal_property_history": ["model.hubspot_source.stg_hubspot__deal_property_history_tmp"], "model.hubspot_source.stg_hubspot__email_event_forward": ["model.hubspot_source.stg_hubspot__email_event_forward_tmp"], "model.hubspot_source.stg_hubspot__email_event_bounce": ["model.hubspot_source.stg_hubspot__email_event_bounce_tmp"], "model.hubspot_source.stg_hubspot__ticket_engagement": ["model.hubspot_source.stg_hubspot__ticket_engagement_tmp"], "model.hubspot_source.stg_hubspot__ticket_pipeline_stage": ["model.hubspot_source.stg_hubspot__ticket_pipeline_stage_tmp"], "model.hubspot_source.stg_hubspot__engagement_company": ["model.hubspot_source.stg_hubspot__engagement_company_tmp"], "model.hubspot_source.stg_hubspot__email_event_deferred": ["model.hubspot_source.stg_hubspot__email_event_deferred_tmp"], "model.hubspot_source.stg_hubspot__company": ["model.hubspot_source.stg_hubspot__company_tmp"], "model.hubspot_source.stg_hubspot__deal_contact": ["model.hubspot_source.stg_hubspot__deal_contact_tmp"], "model.hubspot_source.stg_hubspot__email_event_click": ["model.hubspot_source.stg_hubspot__email_event_click_tmp"], "model.hubspot_source.stg_hubspot__engagement_call": ["model.hubspot_source.stg_hubspot__engagement_call_tmp"], "model.hubspot_source.stg_hubspot__engagement": ["model.hubspot_source.stg_hubspot__engagement_tmp"], "model.hubspot_source.stg_hubspot__contact_merge_audit": ["model.hubspot_source.stg_hubspot__contact_merge_audit_tmp"], "model.hubspot_source.stg_hubspot__ticket_company": ["model.hubspot_source.stg_hubspot__ticket_company_tmp"], "model.hubspot_source.stg_hubspot__email_campaign": ["model.hubspot_source.stg_hubspot__email_campaign_tmp"], "model.hubspot_source.stg_hubspot__merged_deal": ["model.hubspot_source.stg_hubspot__merged_deal_tmp"], "model.hubspot_source.stg_hubspot__email_event_print": ["model.hubspot_source.stg_hubspot__email_event_print_tmp"], "model.hubspot_source.stg_hubspot__contact_property_history": ["model.hubspot_source.stg_hubspot__contact_property_history_tmp"], "model.hubspot_source.stg_hubspot__ticket_property_history": ["model.hubspot_source.stg_hubspot__ticket_property_history_tmp"], "model.hubspot_source.stg_hubspot__email_event_open": ["model.hubspot_source.stg_hubspot__email_event_open_tmp"], "model.hubspot_source.stg_hubspot__email_event_sent": ["model.hubspot_source.stg_hubspot__email_event_sent_tmp"], "model.hubspot_source.stg_hubspot__ticket": ["model.hubspot_source.stg_hubspot__ticket_tmp"], "model.hubspot_source.stg_hubspot__contact_property_history_tmp": ["source.hubspot_source.hubspot.contact_property_history"], "model.hubspot_source.stg_hubspot__email_event_dropped_tmp": ["source.hubspot_source.hubspot.email_event_dropped"], "model.hubspot_source.stg_hubspot__email_event_sent_tmp": ["source.hubspot_source.hubspot.email_event_sent"], "model.hubspot_source.stg_hubspot__deal_tmp": ["source.hubspot_source.hubspot.deal"], "model.hubspot_source.stg_hubspot__property_tmp": ["source.hubspot_source.hubspot.property"], "model.hubspot_source.stg_hubspot__ticket_company_tmp": ["source.hubspot_source.hubspot.ticket_company"], "model.hubspot_source.stg_hubspot__deal_contact_tmp": ["source.hubspot_source.hubspot.deal_contact"], "model.hubspot_source.stg_hubspot__merged_deal_tmp": ["source.hubspot_source.hubspot.merged_deal"], "model.hubspot_source.stg_hubspot__contact_list_member_tmp": ["source.hubspot_source.hubspot.contact_list_member"], "model.hubspot_source.stg_hubspot__owner_tmp": ["source.hubspot_source.hubspot.owner"], "model.hubspot_source.stg_hubspot__deal_stage_tmp": ["source.hubspot_source.hubspot.deal_stage"], "model.hubspot_source.stg_hubspot__deal_pipeline_tmp": ["source.hubspot_source.hubspot.deal_pipeline"], "model.hubspot_source.stg_hubspot__ticket_tmp": ["source.hubspot_source.hubspot.ticket"], "model.hubspot_source.stg_hubspot__ticket_property_history_tmp": ["source.hubspot_source.hubspot.ticket_property_history"], "model.hubspot_source.stg_hubspot__ticket_pipeline_tmp": ["source.hubspot_source.hubspot.ticket_pipeline"], "model.hubspot_source.stg_hubspot__engagement_company_tmp": ["source.hubspot_source.hubspot.engagement_company"], "model.hubspot_source.stg_hubspot__contact_tmp": ["source.hubspot_source.hubspot.contact"], "model.hubspot_source.stg_hubspot__email_event_status_change_tmp": ["source.hubspot_source.hubspot.email_event_status_change"], "model.hubspot_source.stg_hubspot__engagement_note_tmp": ["source.hubspot_source.hubspot.engagement_note"], "model.hubspot_source.stg_hubspot__ticket_contact_tmp": ["source.hubspot_source.hubspot.ticket_contact"], "model.hubspot_source.stg_hubspot__deal_company_tmp": ["source.hubspot_source.hubspot.deal_company"], "model.hubspot_source.stg_hubspot__contact_merge_audit_tmp": ["source.hubspot_source.hubspot.contact_merge_audit"], "model.hubspot_source.stg_hubspot__engagement_deal_tmp": ["source.hubspot_source.hubspot.engagement_deal"], "model.hubspot_source.stg_hubspot__email_event_print_tmp": ["source.hubspot_source.hubspot.email_event_print"], "model.hubspot_source.stg_hubspot__company_property_history_tmp": ["source.hubspot_source.hubspot.company_property_history"], "model.hubspot_source.stg_hubspot__email_event_tmp": ["source.hubspot_source.hubspot.email_event"], "model.hubspot_source.stg_hubspot__company_tmp": ["source.hubspot_source.hubspot.company"], "model.hubspot_source.stg_hubspot__email_event_click_tmp": ["source.hubspot_source.hubspot.email_event_click"], "model.hubspot_source.stg_hubspot__engagement_contact_tmp": ["source.hubspot_source.hubspot.engagement_contact"], "model.hubspot_source.stg_hubspot__contact_list_tmp": ["source.hubspot_source.hubspot.contact_list"], "model.hubspot_source.stg_hubspot__engagement_meeting_tmp": ["source.hubspot_source.hubspot.engagement_meeting"], "model.hubspot_source.stg_hubspot__engagement_tmp": ["source.hubspot_source.hubspot.engagement"], "model.hubspot_source.stg_hubspot__email_event_delivered_tmp": ["source.hubspot_source.hubspot.email_event_delivered"], "model.hubspot_source.stg_hubspot__engagement_email_tmp": ["source.hubspot_source.hubspot.engagement_email"], "model.hubspot_source.stg_hubspot__property_option_tmp": ["source.hubspot_source.hubspot.property_option"], "model.hubspot_source.stg_hubspot__email_event_forward_tmp": ["source.hubspot_source.hubspot.email_event_forward"], "model.hubspot_source.stg_hubspot__email_event_spam_report_tmp": ["source.hubspot_source.hubspot.email_event_spam_report"], "model.hubspot_source.stg_hubspot__ticket_engagement_tmp": ["source.hubspot_source.hubspot.ticket_engagement"], "model.hubspot_source.stg_hubspot__email_event_bounce_tmp": ["source.hubspot_source.hubspot.email_event_bounce"], "model.hubspot_source.stg_hubspot__engagement_call_tmp": ["source.hubspot_source.hubspot.engagement_call"], "model.hubspot_source.stg_hubspot__ticket_pipeline_stage_tmp": ["source.hubspot_source.hubspot.ticket_pipeline_stage"], "model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp": ["source.hubspot_source.hubspot.deal_pipeline_stage"], "model.hubspot_source.stg_hubspot__engagement_task_tmp": ["source.hubspot_source.hubspot.engagement_task"], "model.hubspot_source.stg_hubspot__email_event_open_tmp": ["source.hubspot_source.hubspot.email_event_open"], "model.hubspot_source.stg_hubspot__deal_property_history_tmp": ["source.hubspot_source.hubspot.deal_property_history"], "model.hubspot_source.stg_hubspot__email_event_deferred_tmp": ["source.hubspot_source.hubspot.email_event_deferred"], "model.hubspot_source.stg_hubspot__email_campaign_tmp": ["source.hubspot_source.hubspot.email_campaign"], "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage"], "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage"], "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403": ["model.hubspot_source.stg_hubspot__deal_pipeline"], "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3": ["model.hubspot_source.stg_hubspot__deal_pipeline"], "test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20": ["model.hubspot_source.stg_hubspot__deal"], "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69": ["model.hubspot_source.stg_hubspot__deal"], "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_company_company_id__deal_id__type_id.59d48f3923": ["model.hubspot_source.stg_hubspot__deal_company"], "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_contact_contact_id__deal_id__type_id.37de71798b": ["model.hubspot_source.stg_hubspot__deal_contact"], "test.hubspot_source.not_null_stg_hubspot__merged_deal_merged_deal_id.c2d24039b9": ["model.hubspot_source.stg_hubspot__merged_deal"], "test.hubspot_source.not_null_stg_hubspot__merged_deal_deal_id.a843ca0610": ["model.hubspot_source.stg_hubspot__merged_deal"], "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0": ["model.hubspot_source.stg_hubspot__contact_list"], "test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a": ["model.hubspot_source.stg_hubspot__contact_list"], "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a": ["model.hubspot_source.stg_hubspot__contact"], "test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944": ["model.hubspot_source.stg_hubspot__contact"], "test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9": ["model.hubspot_source.stg_hubspot__email_event_bounce"], "test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3": ["model.hubspot_source.stg_hubspot__email_event_bounce"], "test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1": ["model.hubspot_source.stg_hubspot__email_event_click"], "test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5": ["model.hubspot_source.stg_hubspot__email_event_click"], "test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912": ["model.hubspot_source.stg_hubspot__email_event_deferred"], "test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0": ["model.hubspot_source.stg_hubspot__email_event_deferred"], "test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc": ["model.hubspot_source.stg_hubspot__email_event_delivered"], "test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20": ["model.hubspot_source.stg_hubspot__email_event_delivered"], "test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71": ["model.hubspot_source.stg_hubspot__email_event_dropped"], "test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52": ["model.hubspot_source.stg_hubspot__email_event_dropped"], "test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1": ["model.hubspot_source.stg_hubspot__email_event_forward"], "test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3": ["model.hubspot_source.stg_hubspot__email_event_forward"], "test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1": ["model.hubspot_source.stg_hubspot__email_event_open"], "test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16": ["model.hubspot_source.stg_hubspot__email_event_open"], "test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3": ["model.hubspot_source.stg_hubspot__email_event_print"], "test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b": ["model.hubspot_source.stg_hubspot__email_event_print"], "test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272": ["model.hubspot_source.stg_hubspot__email_event_sent"], "test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d": ["model.hubspot_source.stg_hubspot__email_event_sent"], "test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a": ["model.hubspot_source.stg_hubspot__email_event_spam_report"], "test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f": ["model.hubspot_source.stg_hubspot__email_event_spam_report"], "test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0": ["model.hubspot_source.stg_hubspot__email_event_status_change"], "test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1": ["model.hubspot_source.stg_hubspot__email_event_status_change"], "test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d": ["model.hubspot_source.stg_hubspot__email_event"], "test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531": ["model.hubspot_source.stg_hubspot__email_event"], "test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e": ["model.hubspot_source.stg_hubspot__email_campaign"], "test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6": ["model.hubspot_source.stg_hubspot__email_campaign"], "test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf": ["model.hubspot_source.stg_hubspot__engagement_call"], "test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603": ["model.hubspot_source.stg_hubspot__engagement_call"], "test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca": ["model.hubspot_source.stg_hubspot__engagement_email"], "test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc": ["model.hubspot_source.stg_hubspot__engagement_email"], "test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28": ["model.hubspot_source.stg_hubspot__engagement_meeting"], "test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830": ["model.hubspot_source.stg_hubspot__engagement_meeting"], "test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e": ["model.hubspot_source.stg_hubspot__engagement_note"], "test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e": ["model.hubspot_source.stg_hubspot__engagement_note"], "test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82": ["model.hubspot_source.stg_hubspot__engagement_task"], "test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c": ["model.hubspot_source.stg_hubspot__engagement_task"], "test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f": ["model.hubspot_source.stg_hubspot__engagement"], "test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0": ["model.hubspot_source.stg_hubspot__engagement"], "test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf": ["model.hubspot_source.stg_hubspot__ticket"], "test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53": ["model.hubspot_source.stg_hubspot__ticket"], "test.hubspot_source.unique_stg_hubspot__property__fivetran_id.1d41a2aa95": ["model.hubspot_source.stg_hubspot__property"], "test.hubspot_source.not_null_stg_hubspot__property__fivetran_id.37b6ec5db1": ["model.hubspot_source.stg_hubspot__property"], "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__property_option_property_id__property_option_label.2792c4669b": ["model.hubspot_source.stg_hubspot__property_option"], "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0": ["model.hubspot_source.stg_hubspot__company"], "test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43": ["model.hubspot_source.stg_hubspot__company"], "source.hubspot_source.hubspot.calendar_event": [], "source.hubspot_source.hubspot.company": [], "source.hubspot_source.hubspot.company_property_history": [], "source.hubspot_source.hubspot.contact_merge_audit": [], "source.hubspot_source.hubspot.contact": [], "source.hubspot_source.hubspot.contact_form_submission": [], "source.hubspot_source.hubspot.contact_list": [], "source.hubspot_source.hubspot.contact_list_member": [], "source.hubspot_source.hubspot.contact_property_history": [], "source.hubspot_source.hubspot.deal": [], "source.hubspot_source.hubspot.deal_stage": [], "source.hubspot_source.hubspot.deal_company": [], "source.hubspot_source.hubspot.deal_contact": [], "source.hubspot_source.hubspot.deal_pipeline": [], "source.hubspot_source.hubspot.deal_pipeline_stage": [], "source.hubspot_source.hubspot.deal_property_history": [], "source.hubspot_source.hubspot.email_campaign": [], "source.hubspot_source.hubspot.email_event": [], "source.hubspot_source.hubspot.email_event_bounce": [], "source.hubspot_source.hubspot.email_event_click": [], "source.hubspot_source.hubspot.email_event_deferred": [], "source.hubspot_source.hubspot.email_event_delivered": [], "source.hubspot_source.hubspot.email_event_dropped": [], "source.hubspot_source.hubspot.email_event_forward": [], "source.hubspot_source.hubspot.email_event_open": [], "source.hubspot_source.hubspot.email_event_print": [], "source.hubspot_source.hubspot.email_event_sent": [], "source.hubspot_source.hubspot.email_event_spam_report": [], "source.hubspot_source.hubspot.email_event_status_change": [], "source.hubspot_source.hubspot.email_subscription": [], "source.hubspot_source.hubspot.email_subscription_change": [], "source.hubspot_source.hubspot.engagement": [], "source.hubspot_source.hubspot.engagement_call": [], "source.hubspot_source.hubspot.engagement_company": [], "source.hubspot_source.hubspot.engagement_contact": [], "source.hubspot_source.hubspot.engagement_deal": [], "source.hubspot_source.hubspot.engagement_email": [], "source.hubspot_source.hubspot.engagement_email_cc": [], "source.hubspot_source.hubspot.engagement_email_to": [], "source.hubspot_source.hubspot.engagement_meeting": [], "source.hubspot_source.hubspot.engagement_note": [], "source.hubspot_source.hubspot.engagement_task": [], "source.hubspot_source.hubspot.form": [], "source.hubspot_source.hubspot.owner": [], "source.hubspot_source.hubspot.property": [], "source.hubspot_source.hubspot.property_option": [], "source.hubspot_source.hubspot.ticket_company": [], "source.hubspot_source.hubspot.ticket_contact": [], "source.hubspot_source.hubspot.ticket_engagement": [], "source.hubspot_source.hubspot.ticket_pipeline_stage": [], "source.hubspot_source.hubspot.ticket_pipeline": [], "source.hubspot_source.hubspot.ticket_property_history": [], "source.hubspot_source.hubspot.ticket": [], "source.hubspot_source.hubspot.merged_deal": []}, "child_map": {"seed.hubspot_source_integration_tests.contact_list_data_postgres": [], "seed.hubspot_source_integration_tests.merged_deal_data": [], "seed.hubspot_source_integration_tests.email_event_delivered_data": [], "seed.hubspot_source_integration_tests.ticket_pipeline_stage_data": [], "seed.hubspot_source_integration_tests.ticket_contact_data": [], "seed.hubspot_source_integration_tests.email_event_status_change_data": [], "seed.hubspot_source_integration_tests.ticket_company_data": [], "seed.hubspot_source_integration_tests.engagement_deal_data": [], "seed.hubspot_source_integration_tests.email_event_sent_data_postgres": [], "seed.hubspot_source_integration_tests.deal_stage_data": [], "seed.hubspot_source_integration_tests.email_campaign_data": [], "seed.hubspot_source_integration_tests.engagement_call_data": [], "seed.hubspot_source_integration_tests.contact_merge_audit_data": [], "seed.hubspot_source_integration_tests.email_event_print_data": [], "seed.hubspot_source_integration_tests.property_option_data": [], "seed.hubspot_source_integration_tests.email_event_spam_report_data": [], "seed.hubspot_source_integration_tests.ticket_data": [], "seed.hubspot_source_integration_tests.ticket_pipeline_data": [], "seed.hubspot_source_integration_tests.email_event_click_data": [], "seed.hubspot_source_integration_tests.email_event_deferred_data": [], "seed.hubspot_source_integration_tests.email_event_open_data": [], "seed.hubspot_source_integration_tests.company_property_history_data": [], "seed.hubspot_source_integration_tests.engagement_email_data": [], "seed.hubspot_source_integration_tests.deal_data": [], "seed.hubspot_source_integration_tests.engagement_note_data": [], "seed.hubspot_source_integration_tests.deal_pipeline_data": [], "seed.hubspot_source_integration_tests.email_event_data": [], "seed.hubspot_source_integration_tests.engagement_data": [], "seed.hubspot_source_integration_tests.owner_data": [], "seed.hubspot_source_integration_tests.engagement_meeting_data": [], "seed.hubspot_source_integration_tests.email_event_forward_data": [], "seed.hubspot_source_integration_tests.deal_pipeline_stage_data": [], "seed.hubspot_source_integration_tests.company_data": [], "seed.hubspot_source_integration_tests.deal_contact_data": [], "seed.hubspot_source_integration_tests.contact_list_member_data": [], "seed.hubspot_source_integration_tests.contact_property_history_data": [], "seed.hubspot_source_integration_tests.property_data": [], "seed.hubspot_source_integration_tests.deal_property_history_data": [], "seed.hubspot_source_integration_tests.email_event_bounce_data": [], "seed.hubspot_source_integration_tests.engagement_contact_data": [], "seed.hubspot_source_integration_tests.ticket_engagement_data": [], "seed.hubspot_source_integration_tests.contact_data": [], "seed.hubspot_source_integration_tests.ticket_deal_data": [], "seed.hubspot_source_integration_tests.deal_company_data": [], "seed.hubspot_source_integration_tests.ticket_property_history_data": [], "seed.hubspot_source_integration_tests.email_event_dropped_data_postgres": [], "seed.hubspot_source_integration_tests.engagement_task_data": [], "seed.hubspot_source_integration_tests.engagement_company_data": [], "model.hubspot_source.stg_hubspot__engagement_task": ["test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82", "test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c"], "model.hubspot_source.stg_hubspot__property_option": ["test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__property_option_property_id__property_option_label.2792c4669b"], "model.hubspot_source.stg_hubspot__engagement_deal": [], "model.hubspot_source.stg_hubspot__company_property_history": [], "model.hubspot_source.stg_hubspot__email_event_delivered": ["test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20", "test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc"], "model.hubspot_source.stg_hubspot__owner": [], "model.hubspot_source.stg_hubspot__email_event": ["test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531", "test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d"], "model.hubspot_source.stg_hubspot__engagement_meeting": ["test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28", "test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830"], "model.hubspot_source.stg_hubspot__engagement_email": ["test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca", "test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc"], "model.hubspot_source.stg_hubspot__ticket_contact": [], "model.hubspot_source.stg_hubspot__email_event_status_change": ["test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1", "test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0"], "model.hubspot_source.stg_hubspot__contact_list_member": [], "model.hubspot_source.stg_hubspot__contact": ["test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944", "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a"], "model.hubspot_source.stg_hubspot__deal": ["test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20", "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69"], "model.hubspot_source.stg_hubspot__deal_pipeline": ["test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3", "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403"], "model.hubspot_source.stg_hubspot__deal_company": ["test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_company_company_id__deal_id__type_id.59d48f3923"], "model.hubspot_source.stg_hubspot__engagement_note": ["test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e", "test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e"], "model.hubspot_source.stg_hubspot__engagement_contact": [], "model.hubspot_source.stg_hubspot__contact_list": ["test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a", "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0"], "model.hubspot_source.stg_hubspot__ticket_pipeline": [], "model.hubspot_source.stg_hubspot__email_event_spam_report": ["test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f", "test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a"], "model.hubspot_source.stg_hubspot__deal_pipeline_stage": ["test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e", "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113"], "model.hubspot_source.stg_hubspot__email_event_dropped": ["test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52", "test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71"], "model.hubspot_source.stg_hubspot__deal_stage": [], "model.hubspot_source.stg_hubspot__property": ["test.hubspot_source.not_null_stg_hubspot__property__fivetran_id.37b6ec5db1", "test.hubspot_source.unique_stg_hubspot__property__fivetran_id.1d41a2aa95"], "model.hubspot_source.stg_hubspot__deal_property_history": [], "model.hubspot_source.stg_hubspot__email_event_forward": ["test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3", "test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1"], "model.hubspot_source.stg_hubspot__email_event_bounce": ["test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3", "test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9"], "model.hubspot_source.stg_hubspot__ticket_engagement": [], "model.hubspot_source.stg_hubspot__ticket_pipeline_stage": [], "model.hubspot_source.stg_hubspot__engagement_company": [], "model.hubspot_source.stg_hubspot__email_event_deferred": ["test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0", "test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912"], "model.hubspot_source.stg_hubspot__company": ["test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43", "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0"], "model.hubspot_source.stg_hubspot__deal_contact": ["test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_contact_contact_id__deal_id__type_id.37de71798b"], "model.hubspot_source.stg_hubspot__email_event_click": ["test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5", "test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1"], "model.hubspot_source.stg_hubspot__engagement_call": ["test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf", "test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603"], "model.hubspot_source.stg_hubspot__engagement": ["test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f", "test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0"], "model.hubspot_source.stg_hubspot__contact_merge_audit": [], "model.hubspot_source.stg_hubspot__ticket_company": [], "model.hubspot_source.stg_hubspot__email_campaign": ["test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6", "test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e"], "model.hubspot_source.stg_hubspot__merged_deal": ["test.hubspot_source.not_null_stg_hubspot__merged_deal_deal_id.a843ca0610", "test.hubspot_source.not_null_stg_hubspot__merged_deal_merged_deal_id.c2d24039b9"], "model.hubspot_source.stg_hubspot__email_event_print": ["test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b", "test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3"], "model.hubspot_source.stg_hubspot__contact_property_history": [], "model.hubspot_source.stg_hubspot__ticket_property_history": [], "model.hubspot_source.stg_hubspot__email_event_open": ["test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16", "test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1"], "model.hubspot_source.stg_hubspot__email_event_sent": ["test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d", "test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272"], "model.hubspot_source.stg_hubspot__ticket": ["test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53", "test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf"], "model.hubspot_source.stg_hubspot__contact_property_history_tmp": ["model.hubspot_source.stg_hubspot__contact_property_history"], "model.hubspot_source.stg_hubspot__email_event_dropped_tmp": ["model.hubspot_source.stg_hubspot__email_event_dropped"], "model.hubspot_source.stg_hubspot__email_event_sent_tmp": ["model.hubspot_source.stg_hubspot__email_event_sent"], "model.hubspot_source.stg_hubspot__deal_tmp": ["model.hubspot_source.stg_hubspot__deal"], "model.hubspot_source.stg_hubspot__property_tmp": ["model.hubspot_source.stg_hubspot__property"], "model.hubspot_source.stg_hubspot__ticket_company_tmp": ["model.hubspot_source.stg_hubspot__ticket_company"], "model.hubspot_source.stg_hubspot__deal_contact_tmp": ["model.hubspot_source.stg_hubspot__deal_contact"], "model.hubspot_source.stg_hubspot__merged_deal_tmp": ["model.hubspot_source.stg_hubspot__merged_deal"], "model.hubspot_source.stg_hubspot__contact_list_member_tmp": ["model.hubspot_source.stg_hubspot__contact_list_member"], "model.hubspot_source.stg_hubspot__owner_tmp": ["model.hubspot_source.stg_hubspot__owner"], "model.hubspot_source.stg_hubspot__deal_stage_tmp": ["model.hubspot_source.stg_hubspot__deal_stage"], "model.hubspot_source.stg_hubspot__deal_pipeline_tmp": ["model.hubspot_source.stg_hubspot__deal_pipeline"], "model.hubspot_source.stg_hubspot__ticket_tmp": ["model.hubspot_source.stg_hubspot__ticket"], "model.hubspot_source.stg_hubspot__ticket_property_history_tmp": ["model.hubspot_source.stg_hubspot__ticket_property_history"], "model.hubspot_source.stg_hubspot__ticket_pipeline_tmp": ["model.hubspot_source.stg_hubspot__ticket_pipeline"], "model.hubspot_source.stg_hubspot__engagement_company_tmp": ["model.hubspot_source.stg_hubspot__engagement_company"], "model.hubspot_source.stg_hubspot__contact_tmp": ["model.hubspot_source.stg_hubspot__contact"], "model.hubspot_source.stg_hubspot__email_event_status_change_tmp": ["model.hubspot_source.stg_hubspot__email_event_status_change"], "model.hubspot_source.stg_hubspot__engagement_note_tmp": ["model.hubspot_source.stg_hubspot__engagement_note"], "model.hubspot_source.stg_hubspot__ticket_contact_tmp": ["model.hubspot_source.stg_hubspot__ticket_contact"], "model.hubspot_source.stg_hubspot__deal_company_tmp": ["model.hubspot_source.stg_hubspot__deal_company"], "model.hubspot_source.stg_hubspot__contact_merge_audit_tmp": ["model.hubspot_source.stg_hubspot__contact_merge_audit"], "model.hubspot_source.stg_hubspot__engagement_deal_tmp": ["model.hubspot_source.stg_hubspot__engagement_deal"], "model.hubspot_source.stg_hubspot__email_event_print_tmp": ["model.hubspot_source.stg_hubspot__email_event_print"], "model.hubspot_source.stg_hubspot__company_property_history_tmp": ["model.hubspot_source.stg_hubspot__company_property_history"], "model.hubspot_source.stg_hubspot__email_event_tmp": ["model.hubspot_source.stg_hubspot__email_event"], "model.hubspot_source.stg_hubspot__company_tmp": ["model.hubspot_source.stg_hubspot__company"], "model.hubspot_source.stg_hubspot__email_event_click_tmp": ["model.hubspot_source.stg_hubspot__email_event_click"], "model.hubspot_source.stg_hubspot__engagement_contact_tmp": ["model.hubspot_source.stg_hubspot__engagement_contact"], "model.hubspot_source.stg_hubspot__contact_list_tmp": ["model.hubspot_source.stg_hubspot__contact_list"], "model.hubspot_source.stg_hubspot__engagement_meeting_tmp": ["model.hubspot_source.stg_hubspot__engagement_meeting"], "model.hubspot_source.stg_hubspot__engagement_tmp": ["model.hubspot_source.stg_hubspot__engagement"], "model.hubspot_source.stg_hubspot__email_event_delivered_tmp": ["model.hubspot_source.stg_hubspot__email_event_delivered"], "model.hubspot_source.stg_hubspot__engagement_email_tmp": ["model.hubspot_source.stg_hubspot__engagement_email"], "model.hubspot_source.stg_hubspot__property_option_tmp": ["model.hubspot_source.stg_hubspot__property_option"], "model.hubspot_source.stg_hubspot__email_event_forward_tmp": ["model.hubspot_source.stg_hubspot__email_event_forward"], "model.hubspot_source.stg_hubspot__email_event_spam_report_tmp": ["model.hubspot_source.stg_hubspot__email_event_spam_report"], "model.hubspot_source.stg_hubspot__ticket_engagement_tmp": ["model.hubspot_source.stg_hubspot__ticket_engagement"], "model.hubspot_source.stg_hubspot__email_event_bounce_tmp": ["model.hubspot_source.stg_hubspot__email_event_bounce"], "model.hubspot_source.stg_hubspot__engagement_call_tmp": ["model.hubspot_source.stg_hubspot__engagement_call"], "model.hubspot_source.stg_hubspot__ticket_pipeline_stage_tmp": ["model.hubspot_source.stg_hubspot__ticket_pipeline_stage"], "model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage"], "model.hubspot_source.stg_hubspot__engagement_task_tmp": ["model.hubspot_source.stg_hubspot__engagement_task"], "model.hubspot_source.stg_hubspot__email_event_open_tmp": ["model.hubspot_source.stg_hubspot__email_event_open"], "model.hubspot_source.stg_hubspot__deal_property_history_tmp": ["model.hubspot_source.stg_hubspot__deal_property_history"], "model.hubspot_source.stg_hubspot__email_event_deferred_tmp": ["model.hubspot_source.stg_hubspot__email_event_deferred"], "model.hubspot_source.stg_hubspot__email_campaign_tmp": ["model.hubspot_source.stg_hubspot__email_campaign"], "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113": [], "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e": [], "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403": [], "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3": [], "test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20": [], "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69": [], "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_company_company_id__deal_id__type_id.59d48f3923": [], "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__deal_contact_contact_id__deal_id__type_id.37de71798b": [], "test.hubspot_source.not_null_stg_hubspot__merged_deal_merged_deal_id.c2d24039b9": [], "test.hubspot_source.not_null_stg_hubspot__merged_deal_deal_id.a843ca0610": [], "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0": [], "test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a": [], "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a": [], "test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944": [], "test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9": [], "test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3": [], "test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1": [], "test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5": [], "test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912": [], "test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0": [], "test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc": [], "test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20": [], "test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71": [], "test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52": [], "test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1": [], "test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3": [], "test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1": [], "test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16": [], "test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3": [], "test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b": [], "test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272": [], "test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d": [], "test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a": [], "test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f": [], "test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0": [], "test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1": [], "test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d": [], "test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531": [], "test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e": [], "test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6": [], "test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf": [], "test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603": [], "test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca": [], "test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc": [], "test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28": [], "test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830": [], "test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e": [], "test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e": [], "test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82": [], "test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c": [], "test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f": [], "test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0": [], "test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf": [], "test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53": [], "test.hubspot_source.unique_stg_hubspot__property__fivetran_id.1d41a2aa95": [], "test.hubspot_source.not_null_stg_hubspot__property__fivetran_id.37b6ec5db1": [], "test.hubspot_source.dbt_utils_unique_combination_of_columns_stg_hubspot__property_option_property_id__property_option_label.2792c4669b": [], "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0": [], "test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43": [], "source.hubspot_source.hubspot.calendar_event": [], "source.hubspot_source.hubspot.company": ["model.hubspot_source.stg_hubspot__company_tmp"], "source.hubspot_source.hubspot.company_property_history": ["model.hubspot_source.stg_hubspot__company_property_history_tmp"], "source.hubspot_source.hubspot.contact_merge_audit": ["model.hubspot_source.stg_hubspot__contact_merge_audit_tmp"], "source.hubspot_source.hubspot.contact": ["model.hubspot_source.stg_hubspot__contact_tmp"], "source.hubspot_source.hubspot.contact_form_submission": [], "source.hubspot_source.hubspot.contact_list": ["model.hubspot_source.stg_hubspot__contact_list_tmp"], "source.hubspot_source.hubspot.contact_list_member": ["model.hubspot_source.stg_hubspot__contact_list_member_tmp"], "source.hubspot_source.hubspot.contact_property_history": ["model.hubspot_source.stg_hubspot__contact_property_history_tmp"], "source.hubspot_source.hubspot.deal": ["model.hubspot_source.stg_hubspot__deal_tmp"], "source.hubspot_source.hubspot.deal_stage": ["model.hubspot_source.stg_hubspot__deal_stage_tmp"], "source.hubspot_source.hubspot.deal_company": ["model.hubspot_source.stg_hubspot__deal_company_tmp"], "source.hubspot_source.hubspot.deal_contact": ["model.hubspot_source.stg_hubspot__deal_contact_tmp"], "source.hubspot_source.hubspot.deal_pipeline": ["model.hubspot_source.stg_hubspot__deal_pipeline_tmp"], "source.hubspot_source.hubspot.deal_pipeline_stage": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp"], "source.hubspot_source.hubspot.deal_property_history": ["model.hubspot_source.stg_hubspot__deal_property_history_tmp"], "source.hubspot_source.hubspot.email_campaign": ["model.hubspot_source.stg_hubspot__email_campaign_tmp"], "source.hubspot_source.hubspot.email_event": ["model.hubspot_source.stg_hubspot__email_event_tmp"], "source.hubspot_source.hubspot.email_event_bounce": ["model.hubspot_source.stg_hubspot__email_event_bounce_tmp"], "source.hubspot_source.hubspot.email_event_click": ["model.hubspot_source.stg_hubspot__email_event_click_tmp"], "source.hubspot_source.hubspot.email_event_deferred": ["model.hubspot_source.stg_hubspot__email_event_deferred_tmp"], "source.hubspot_source.hubspot.email_event_delivered": ["model.hubspot_source.stg_hubspot__email_event_delivered_tmp"], "source.hubspot_source.hubspot.email_event_dropped": ["model.hubspot_source.stg_hubspot__email_event_dropped_tmp"], "source.hubspot_source.hubspot.email_event_forward": ["model.hubspot_source.stg_hubspot__email_event_forward_tmp"], "source.hubspot_source.hubspot.email_event_open": ["model.hubspot_source.stg_hubspot__email_event_open_tmp"], "source.hubspot_source.hubspot.email_event_print": ["model.hubspot_source.stg_hubspot__email_event_print_tmp"], "source.hubspot_source.hubspot.email_event_sent": ["model.hubspot_source.stg_hubspot__email_event_sent_tmp"], "source.hubspot_source.hubspot.email_event_spam_report": ["model.hubspot_source.stg_hubspot__email_event_spam_report_tmp"], "source.hubspot_source.hubspot.email_event_status_change": ["model.hubspot_source.stg_hubspot__email_event_status_change_tmp"], "source.hubspot_source.hubspot.email_subscription": [], "source.hubspot_source.hubspot.email_subscription_change": [], "source.hubspot_source.hubspot.engagement": ["model.hubspot_source.stg_hubspot__engagement_tmp"], "source.hubspot_source.hubspot.engagement_call": ["model.hubspot_source.stg_hubspot__engagement_call_tmp"], "source.hubspot_source.hubspot.engagement_company": ["model.hubspot_source.stg_hubspot__engagement_company_tmp"], "source.hubspot_source.hubspot.engagement_contact": ["model.hubspot_source.stg_hubspot__engagement_contact_tmp"], "source.hubspot_source.hubspot.engagement_deal": ["model.hubspot_source.stg_hubspot__engagement_deal_tmp"], "source.hubspot_source.hubspot.engagement_email": ["model.hubspot_source.stg_hubspot__engagement_email_tmp"], "source.hubspot_source.hubspot.engagement_email_cc": [], "source.hubspot_source.hubspot.engagement_email_to": [], "source.hubspot_source.hubspot.engagement_meeting": ["model.hubspot_source.stg_hubspot__engagement_meeting_tmp"], "source.hubspot_source.hubspot.engagement_note": ["model.hubspot_source.stg_hubspot__engagement_note_tmp"], "source.hubspot_source.hubspot.engagement_task": ["model.hubspot_source.stg_hubspot__engagement_task_tmp"], "source.hubspot_source.hubspot.form": [], "source.hubspot_source.hubspot.owner": ["model.hubspot_source.stg_hubspot__owner_tmp"], "source.hubspot_source.hubspot.property": ["model.hubspot_source.stg_hubspot__property_tmp"], "source.hubspot_source.hubspot.property_option": ["model.hubspot_source.stg_hubspot__property_option_tmp"], "source.hubspot_source.hubspot.ticket_company": ["model.hubspot_source.stg_hubspot__ticket_company_tmp"], "source.hubspot_source.hubspot.ticket_contact": ["model.hubspot_source.stg_hubspot__ticket_contact_tmp"], "source.hubspot_source.hubspot.ticket_engagement": ["model.hubspot_source.stg_hubspot__ticket_engagement_tmp"], "source.hubspot_source.hubspot.ticket_pipeline_stage": ["model.hubspot_source.stg_hubspot__ticket_pipeline_stage_tmp"], "source.hubspot_source.hubspot.ticket_pipeline": ["model.hubspot_source.stg_hubspot__ticket_pipeline_tmp"], "source.hubspot_source.hubspot.ticket_property_history": ["model.hubspot_source.stg_hubspot__ticket_property_history_tmp"], "source.hubspot_source.hubspot.ticket": ["model.hubspot_source.stg_hubspot__ticket_tmp"], "source.hubspot_source.hubspot.merged_deal": ["model.hubspot_source.stg_hubspot__merged_deal_tmp"]}, "group_map": {}, "semantic_models": {}}