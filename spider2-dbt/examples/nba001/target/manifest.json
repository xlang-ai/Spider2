{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.8.4", "generated_at": "2024-09-15T02:48:44.056650Z", "invocation_id": "72b818db-c4a5-4c72-bc17-c5d30036e294", "env": {}, "project_name": "sports_sims", "project_id": "03f8c6e5ade1b9abeae6a7bc17e1660e", "user_id": "ee4550b4-64b0-4680-8fc4-86fae46ca195", "send_anonymous_usage_stats": true, "adapter_type": "duckdb"}, "nodes": {"model.sports_sims.nba_xf_series_to_seed": {"database": "nba", "schema": "main", "name": "nba_xf_series_to_seed", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_xf_series_to_seed.sql", "original_file_path": "models/nba/prep/nba_xf_series_to_seed.sql", "unique_id": "model.sports_sims.nba_xf_series_to_seed", "fqn": ["sports_sims", "nba", "prep", "nba_xf_series_to_seed"], "alias": "nba_xf_series_to_seed", "checksum": {"name": "sha256", "checksum": "2b6dc60dbcaf2ff6f42499742f36572c0ff2d04e8d3edbedaebde0e08fd714ee"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"series_id": {"name": "series_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seed": {"name": "seed", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "target/run/sports_sims/models/nba/prep/nba_xf_series_to_seed.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.247502, "relation_name": "\"nba\".\"main\".\"nba_xf_series_to_seed\"", "raw_code": "select series_id, seed from {{ ref(\"nba_raw_xf_series_to_seed\") }}", "language": "sql", "refs": [{"name": "nba_raw_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_xf_series_to_seed"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_xf_series_to_seed.sql", "compiled": true, "compiled_code": "select series_id, seed from \"nba\".\"main\".\"nba_raw_xf_series_to_seed\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_reg_season_schedule": {"database": "nba", "schema": "main", "name": "nba_reg_season_schedule", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_reg_season_schedule.sql", "original_file_path": "models/nba/prep/nba_reg_season_schedule.sql", "unique_id": "model.sports_sims.nba_reg_season_schedule", "fqn": ["sports_sims", "nba", "prep", "nba_reg_season_schedule"], "alias": "nba_reg_season_schedule", "checksum": {"name": "sha256", "checksum": "ef37e90f2926018f99ccc7c0b64f9197765efdcc775660469ea92c6f80933a48"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "target/run/sports_sims/models/nba/prep/nba_reg_season_schedule.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.245893, "relation_name": "\"nba\".\"main\".\"nba_reg_season_schedule\"", "raw_code": "select\n    s.id as game_id,\n    s.date as date,\n    case\n        when s.notes = 'In-Season Tournament'\n        then 'tournament'\n        when s.notes = 'Knockout Rounds'\n        then 'knockout'\n        else 'reg_season'\n    end as type,\n    0 as series_id,\n    v.conf as visiting_conf,\n    v.team as visiting_team,\n    coalesce(r.visiting_team_elo_rating, v.elo_rating::int) as visiting_team_elo_rating,\n    h.conf as home_conf,\n    h.team as home_team,\n    coalesce(r.home_team_elo_rating, h.elo_rating::int) as home_team_elo_rating\nfrom {{ ref(\"nba_raw_schedule\") }} as s\nleft join {{ ref(\"nba_ratings\") }} v on v.team_long = s.vistm\nleft join {{ ref(\"nba_ratings\") }} h on h.team_long = s.hometm\nleft join {{ ref(\"nba_elo_rollforward\") }} r on r.game_id = s.id\nwhere s.type = 'reg_season'\ngroup by all", "language": "sql", "refs": [{"name": "nba_raw_schedule", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}, {"name": "nba_elo_rollforward", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_schedule", "model.sports_sims.nba_ratings", "model.sports_sims.nba_elo_rollforward"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_reg_season_schedule.sql", "compiled": true, "compiled_code": "select\n    s.id as game_id,\n    s.date as date,\n    case\n        when s.notes = 'In-Season Tournament'\n        then 'tournament'\n        when s.notes = 'Knockout Rounds'\n        then 'knockout'\n        else 'reg_season'\n    end as type,\n    0 as series_id,\n    v.conf as visiting_conf,\n    v.team as visiting_team,\n    coalesce(r.visiting_team_elo_rating, v.elo_rating::int) as visiting_team_elo_rating,\n    h.conf as home_conf,\n    h.team as home_team,\n    coalesce(r.home_team_elo_rating, h.elo_rating::int) as home_team_elo_rating\nfrom \"nba\".\"main\".\"nba_raw_schedule\" as s\nleft join \"nba\".\"main\".\"nba_ratings\" v on v.team_long = s.vistm\nleft join \"nba\".\"main\".\"nba_ratings\" h on h.team_long = s.hometm\nleft join \"nba\".\"main\".\"nba_elo_rollforward\" r on r.game_id = s.id\nwhere s.type = 'reg_season'\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_results_by_team": {"database": "nba", "schema": "main", "name": "nba_results_by_team", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_results_by_team.sql", "original_file_path": "models/nba/prep/nba_results_by_team.sql", "unique_id": "model.sports_sims.nba_results_by_team", "fqn": ["sports_sims", "nba", "prep", "nba_results_by_team"], "alias": "nba_results_by_team", "checksum": {"name": "sha256", "checksum": "50778c8c2471f8019bb1d7459972e4bfc848c2845a91daf206fadd27c9bd89cb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/prep/nba_results_by_team.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368441.980117, "relation_name": "\"nba\".\"main\".\"nba_results_by_team\"", "raw_code": "from {{ ref(\"nba_results_log\") }}\nselect\n    game_id,\n    'home' as team_type,\n    hmtm as team,\n    home_team as team_long,\n    home_team_score as score,\n    case when home_team = winning_team then 'WIN' else 'LOSS' end as game_results,\n    home_team_score - visiting_team_score as margin,\n    type\nunion all\nfrom {{ ref(\"nba_results_log\") }}\nselect\n    game_id,\n    'visitor' as team_type,\n    vstm as team,\n    visiting_team as team_long,\n    visiting_team_score as score,\n    case when visiting_team = winning_team then 'WIN' else 'LOSS' end as game_results,\n    visiting_team_score - home_team_score as margin,\n    type", "language": "sql", "refs": [{"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_results_log"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_results_by_team.sql", "compiled": true, "compiled_code": "from \"nba\".\"main\".\"nba_results_log\"\nselect\n    game_id,\n    'home' as team_type,\n    hmtm as team,\n    home_team as team_long,\n    home_team_score as score,\n    case when home_team = winning_team then 'WIN' else 'LOSS' end as game_results,\n    home_team_score - visiting_team_score as margin,\n    type\nunion all\nfrom \"nba\".\"main\".\"nba_results_log\"\nselect\n    game_id,\n    'visitor' as team_type,\n    vstm as team,\n    visiting_team as team_long,\n    visiting_team_score as score,\n    case when visiting_team = winning_team then 'WIN' else 'LOSS' end as game_results,\n    visiting_team_score - home_team_score as margin,\n    type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_schedules": {"database": "nba", "schema": "main", "name": "nba_schedules", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_schedules.sql", "original_file_path": "models/nba/prep/nba_schedules.sql", "unique_id": "model.sports_sims.nba_schedules", "fqn": ["sports_sims", "nba", "prep", "nba_schedules"], "alias": "nba_schedules", "checksum": {"name": "sha256", "checksum": "48fb95cb732dbb66ae0417fc1370c817171feca8b9e3248bc4c4e7aaa1d56254"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "series_id": {"name": "series_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_conf": {"name": "visiting_conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team_elo_rating": {"name": "visiting_team_elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_conf": {"name": "home_conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_elo_rating": {"name": "home_team_elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "target/run/sports_sims/models/nba/prep/nba_schedules.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.244838, "relation_name": "\"nba\".\"main\".\"nba_schedules\"", "raw_code": "select *\nfrom {{ ref(\"nba_reg_season_schedule\") }}\nunion all\nselect *\nfrom {{ ref(\"nba_post_season_schedule\") }}", "language": "sql", "refs": [{"name": "nba_reg_season_schedule", "package": null, "version": null}, {"name": "nba_post_season_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_reg_season_schedule", "model.sports_sims.nba_post_season_schedule"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_schedules.sql", "compiled": true, "compiled_code": "select *\nfrom \"nba\".\"main\".\"nba_reg_season_schedule\"\nunion all\nselect *\nfrom \"nba\".\"main\".\"nba_post_season_schedule\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_seasons": {"database": "nba", "schema": "main", "name": "nba_seasons", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_seasons.sql", "original_file_path": "models/nba/prep/nba_seasons.sql", "unique_id": "model.sports_sims.nba_seasons", "fqn": ["sports_sims", "nba", "prep", "nba_seasons"], "alias": "nba_seasons", "checksum": {"name": "sha256", "checksum": "a5290135e20ee76daa04ea9d1648be1825a3509ceac459632c5d7af9680dd90d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/prep/nba_seasons.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368441.9823139, "relation_name": "\"nba\".\"main\".\"nba_seasons\"", "raw_code": "select a.season from {{ ref(\"nba_elo_history\") }} a group by all order by a.season", "language": "sql", "refs": [{"name": "nba_elo_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_elo_history"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_seasons.sql", "compiled": true, "compiled_code": "select a.season from \"nba\".\"main\".\"nba_elo_history\" a group by all order by a.season", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_post_season_schedule": {"database": "nba", "schema": "main", "name": "nba_post_season_schedule", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_post_season_schedule.sql", "original_file_path": "models/nba/prep/nba_post_season_schedule.sql", "unique_id": "model.sports_sims.nba_post_season_schedule", "fqn": ["sports_sims", "nba", "prep", "nba_post_season_schedule"], "alias": "nba_post_season_schedule", "checksum": {"name": "sha256", "checksum": "87489b2b0ead12bc426b155a2a171277d76b63effb389bc0e3b9915ae539b4c0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "target/run/sports_sims/models/nba/prep/nba_post_season_schedule.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.2456708, "relation_name": "\"nba\".\"main\".\"nba_post_season_schedule\"", "raw_code": "select\n    s.id::int as game_id,\n    s.date,\n    s.type,\n    s.series_id,\n    null as visiting_conf,\n    s.vistm as visiting_team,\n    null as visiting_team_elo_rating,\n    null as home_conf,\n    s.hometm as home_team,\n    null as home_team_elo_rating\nfrom {{ ref(\"nba_raw_schedule\") }} as s\n-- LEFT JOIN {{ ref( 'nba_ratings' ) }} V ON V.team = S.VisTm\n-- LEFT JOIN {{ ref( 'nba_ratings' ) }} H ON H.team = S.HomeTm\n-- LEFT JOIN {{ ref( 'nba_elo_rollforward' ) }} R ON R.game_id = S.id\nwhere s.type <> 'reg_season'\ngroup by all", "language": "sql", "refs": [{"name": "nba_raw_schedule", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}, {"name": "nba_elo_rollforward", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_schedule", "model.sports_sims.nba_ratings", "model.sports_sims.nba_elo_rollforward"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_post_season_schedule.sql", "compiled": true, "compiled_code": "select\n    s.id::int as game_id,\n    s.date,\n    s.type,\n    s.series_id,\n    null as visiting_conf,\n    s.vistm as visiting_team,\n    null as visiting_team_elo_rating,\n    null as home_conf,\n    s.hometm as home_team,\n    null as home_team_elo_rating\nfrom \"nba\".\"main\".\"nba_raw_schedule\" as s\n-- LEFT JOIN \"nba\".\"main\".\"nba_ratings\" V ON V.team = S.VisTm\n-- LEFT JOIN \"nba\".\"main\".\"nba_ratings\" H ON H.team = S.HomeTm\n-- LEFT JOIN \"nba\".\"main\".\"nba_elo_rollforward\" R ON R.game_id = S.id\nwhere s.type <> 'reg_season'\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_latest_results": {"database": "nba", "schema": "main", "name": "nba_latest_results", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_latest_results.sql", "original_file_path": "models/nba/prep/nba_latest_results.sql", "unique_id": "model.sports_sims.nba_latest_results", "fqn": ["sports_sims", "nba", "prep", "nba_latest_results"], "alias": "nba_latest_results", "checksum": {"name": "sha256", "checksum": "ead63050dc5cfb0a8ca27d173c588c01019d744337bfcbbfca1300d3114c7602"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_team_score": {"name": "home_team_score", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visiting_team_score": {"name": "visiting_team_score", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "winning_team": {"name": "winning_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "losing_team": {"name": "losing_team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "target/run/sports_sims/models/nba/prep/nba_latest_results.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.2437398, "relation_name": "\"nba\".\"main\".\"nba_latest_results\"", "raw_code": "with\n    cte_inner as (\n        select\n            s.id as game_id,\n            s.\"date\" as game_date,\n            s.hometm as home_team,\n            case\n                when s.hometm = r.winner then r.winner_pts else r.loser_pts\n            end as home_team_score,\n            s.vistm as visiting_team,\n            case\n                when s.vistm = r.winner then r.winner_pts else r.loser_pts\n            end as visiting_team_score,\n            r.winner as winning_team,\n            r.loser as losing_team,\n            {{ var(\"include_actuals\") }} as include_actuals\n        from {{ ref(\"nba_raw_schedule\") }} s\n        left join\n            {{ ref(\"nba_raw_results\") }} r\n            on r.\"date\" = s.\"date\"\n            and (s.vistm = r.winner or s.vistm = r.loser)\n        where home_team_score is not null\n        group by all\n    ),\n    cte_outer as (\n        select\n            i.*,\n            case\n                when visiting_team_score > home_team_score\n                then 1\n                when visiting_team_score = home_team_score\n                then 0.5\n                else 0\n            end as game_result,\n            abs(visiting_team_score - home_team_score) as margin,\n            w.team as winning_team_short,\n            l.team as losing_team_short\n        from cte_inner i\n        left join {{ ref(\"nba_teams\") }} w on w.team_long = i.winning_team\n        left join {{ ref(\"nba_teams\") }} l on l.team_long = i.losing_team\n    )\nselect\n    *\nfrom cte_outer", "language": "sql", "refs": [{"name": "nba_raw_schedule", "package": null, "version": null}, {"name": "nba_raw_results", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_schedule", "model.sports_sims.nba_raw_results", "model.sports_sims.nba_teams"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_latest_results.sql", "compiled": true, "compiled_code": "with\n    cte_inner as (\n        select\n            s.id as game_id,\n            s.\"date\" as game_date,\n            s.hometm as home_team,\n            case\n                when s.hometm = r.winner then r.winner_pts else r.loser_pts\n            end as home_team_score,\n            s.vistm as visiting_team,\n            case\n                when s.vistm = r.winner then r.winner_pts else r.loser_pts\n            end as visiting_team_score,\n            r.winner as winning_team,\n            r.loser as losing_team,\n            True as include_actuals\n        from \"nba\".\"main\".\"nba_raw_schedule\" s\n        left join\n            \"nba\".\"main\".\"nba_raw_results\" r\n            on r.\"date\" = s.\"date\"\n            and (s.vistm = r.winner or s.vistm = r.loser)\n        where home_team_score is not null\n        group by all\n    ),\n    cte_outer as (\n        select\n            i.*,\n            case\n                when visiting_team_score > home_team_score\n                then 1\n                when visiting_team_score = home_team_score\n                then 0.5\n                else 0\n            end as game_result,\n            abs(visiting_team_score - home_team_score) as margin,\n            w.team as winning_team_short,\n            l.team as losing_team_short\n        from cte_inner i\n        left join \"nba\".\"main\".\"nba_teams\" w on w.team_long = i.winning_team\n        left join \"nba\".\"main\".\"nba_teams\" l on l.team_long = i.losing_team\n    )\nselect\n    *\nfrom cte_outer", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_latest_elo": {"database": "nba", "schema": "main", "name": "nba_latest_elo", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_latest_elo.sql", "original_file_path": "models/nba/prep/nba_latest_elo.sql", "unique_id": "model.sports_sims.nba_latest_elo", "fqn": ["sports_sims", "nba", "prep", "nba_latest_elo"], "alias": "nba_latest_elo", "checksum": {"name": "sha256", "checksum": "9eaf96ea33dcc4c128820b65e49382705b6cd8877fc9aea727da7c2595f2b37e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "target/run/sports_sims/models/nba/prep/nba_latest_elo.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.2423308, "relation_name": "\"nba\".\"main\".\"nba_latest_elo\"", "raw_code": "with\n    home_rating as (\n        select\n            home_team as team,\n            max(game_id) game_id,\n            max_by(home_team_elo_rating - elo_change, game_id) elo_rating\n        from {{ ref(\"nba_elo_rollforward\") }}\n        group by all\n    ),\n    visiting_rating as (\n        select\n            visiting_team as team,\n            max(game_id) game_id,\n            max_by(visiting_team_elo_rating + elo_change, game_id) elo_rating\n        from {{ ref(\"nba_elo_rollforward\") }}\n        group by all\n    ),\n    union_rating as (\n        select *\n        from home_rating\n        union all\n        select *\n        from visiting_rating\n    ),\n    final_rating as (\n        select team, max_by(elo_rating, game_id) as elo_rating\n        from union_rating\n        group by all\n    )\nselect\n    f.team as team_long,\n    o.team,\n    f.elo_rating as elo_rating,\n    o.elo_rating as original_rating,\n    {{ var(\"latest_ratings\") }} as latest_ratings\nfrom final_rating f\ninner join {{ ref(\"nba_raw_team_ratings\") }} o on f.team = o.team_long", "language": "sql", "refs": [{"name": "nba_elo_rollforward", "package": null, "version": null}, {"name": "nba_elo_rollforward", "package": null, "version": null}, {"name": "nba_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_raw_team_ratings"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_latest_elo.sql", "compiled": true, "compiled_code": "with\n    home_rating as (\n        select\n            home_team as team,\n            max(game_id) game_id,\n            max_by(home_team_elo_rating - elo_change, game_id) elo_rating\n        from \"nba\".\"main\".\"nba_elo_rollforward\"\n        group by all\n    ),\n    visiting_rating as (\n        select\n            visiting_team as team,\n            max(game_id) game_id,\n            max_by(visiting_team_elo_rating + elo_change, game_id) elo_rating\n        from \"nba\".\"main\".\"nba_elo_rollforward\"\n        group by all\n    ),\n    union_rating as (\n        select *\n        from home_rating\n        union all\n        select *\n        from visiting_rating\n    ),\n    final_rating as (\n        select team, max_by(elo_rating, game_id) as elo_rating\n        from union_rating\n        group by all\n    )\nselect\n    f.team as team_long,\n    o.team,\n    f.elo_rating as elo_rating,\n    o.elo_rating as original_rating,\n    True as latest_ratings\nfrom final_rating f\ninner join \"nba\".\"main\".\"nba_raw_team_ratings\" o on f.team = o.team_long", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_ratings": {"database": "nba", "schema": "main", "name": "nba_ratings", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_ratings.sql", "original_file_path": "models/nba/prep/nba_ratings.sql", "unique_id": "model.sports_sims.nba_ratings", "fqn": ["sports_sims", "nba", "prep", "nba_ratings"], "alias": "nba_ratings", "checksum": {"name": "sha256", "checksum": "96ff56aaafc9a31d4aebffc4748a81159d50357229b55e9783ac5f1f8cfee844"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team_long": {"name": "team_long", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conf": {"name": "conf", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "elo_rating": {"name": "elo_rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "target/run/sports_sims/models/nba/prep/nba_ratings.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.245478, "relation_name": "\"nba\".\"main\".\"nba_ratings\"", "raw_code": "select\n    orig.team,\n    orig.team_long,\n    orig.conf,\n    case\n        when latest.latest_ratings = true and latest.elo_rating is not null\n        then latest.elo_rating\n        else orig.elo_rating\n    end as elo_rating,\n    orig.elo_rating as original_rating,\n    orig.win_total\nfrom {{ ref(\"nba_raw_team_ratings\") }} orig\nleft join {{ ref(\"nba_latest_elo\") }} latest on latest.team = orig.team\ngroup by all", "language": "sql", "refs": [{"name": "nba_raw_team_ratings", "package": null, "version": null}, {"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_team_ratings", "model.sports_sims.nba_latest_elo"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_ratings.sql", "compiled": true, "compiled_code": "select\n    orig.team,\n    orig.team_long,\n    orig.conf,\n    case\n        when latest.latest_ratings = true and latest.elo_rating is not null\n        then latest.elo_rating\n        else orig.elo_rating\n    end as elo_rating,\n    orig.elo_rating as original_rating,\n    orig.win_total\nfrom \"nba\".\"main\".\"nba_raw_team_ratings\" orig\nleft join \"nba\".\"main\".\"nba_latest_elo\" latest on latest.team = orig.team\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_random_num_gen": {"database": "nba", "schema": "main", "name": "nba_random_num_gen", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_random_num_gen.sql", "original_file_path": "models/nba/prep/nba_random_num_gen.sql", "unique_id": "model.sports_sims.nba_random_num_gen", "fqn": ["sports_sims", "nba", "prep", "nba_random_num_gen"], "alias": "nba_random_num_gen", "checksum": {"name": "sha256", "checksum": "4e54685cee85abd85b18e308b7aa5b070d54f19e8c15566c33778d7362cddd4e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "target/run/sports_sims/models/nba/prep/nba_random_num_gen.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.2462919, "relation_name": "\"nba\".\"main\".\"nba_random_num_gen\"", "raw_code": "{{ config(materialized=\"table\") }}\n\nwith\n    cte_scenario_gen as (\n        select i.generate_series as scenario_id\n        from generate_series(1, {{ var(\"scenarios\") }}) as i\n    )\nselect\n    i.scenario_id,\n    s.game_id,\n    (random() * 10000)::smallint as rand_result,\n    {{ var(\"sim_start_game_id\") }} as sim_start_game_id\nfrom cte_scenario_gen as i\ncross join\n    {{ ref(\"nba_schedules\") }} as s\n    -- LEFT JOIN {{ ref( 'nba_latest_results' )}} AS R ON R.game_id = S.game_id\n    -- WHERE R.game_id IS NULL OR (R.game_id IS NOT NULL AND i.scenario_id = 1)", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_schedules", "model.sports_sims.nba_latest_results"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_random_num_gen.sql", "compiled": true, "compiled_code": "\n\nwith\n    cte_scenario_gen as (\n        select i.generate_series as scenario_id\n        from generate_series(1, 10000) as i\n    )\nselect\n    i.scenario_id,\n    s.game_id,\n    (random() * 10000)::smallint as rand_result,\n    0 as sim_start_game_id\nfrom cte_scenario_gen as i\ncross join\n    \"nba\".\"main\".\"nba_schedules\" as s\n    -- LEFT JOIN \"nba\".\"main\".\"nba_latest_results\" AS R ON R.game_id = S.game_id\n    -- WHERE R.game_id IS NULL OR (R.game_id IS NOT NULL AND i.scenario_id = 1)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_results_log": {"database": "nba", "schema": "main", "name": "nba_results_log", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_results_log.sql", "original_file_path": "models/nba/prep/nba_results_log.sql", "unique_id": "model.sports_sims.nba_results_log", "fqn": ["sports_sims", "nba", "prep", "nba_results_log"], "alias": "nba_results_log", "checksum": {"name": "sha256", "checksum": "b1f4957dc0b2fe2dc07b3f6b0c040c3ca29ba2e501eaff1bc160b609053a44e9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/prep/nba_results_log.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.0252318, "relation_name": "\"nba\".\"main\".\"nba_results_log\"", "raw_code": "with\n    cte_avg_elo as (\n        select avg(elo_rating) as elo_rating from {{ ref(\"nba_latest_elo\") }}\n    )\nselect\n    rl.*,\n    a.elo_rating as avg,\n    case\n        when rl.visiting_team_elo_rating > rl.home_team_elo_rating\n        then rl.visiting_team\n        else rl.home_team\n    end as favored_team,\n    case\n        when rl.visiting_team_elo_rating > a.elo_rating then 1 else 0\n    end as visiting_team_above_avg,\n    case\n        when rl.home_team_elo_rating > a.elo_rating then 1 else 0\n    end as home_team_above_avg,\n    case\n        when rl.winning_team = rl.home_team then rl.visiting_team else rl.home_team\n    end as losing_team,\n    lr.game_date,\n    lr.home_team_score,\n    lr.visiting_team_score,\n    h.team as hmtm,\n    v.team as vstm,\n    s.type\nfrom {{ ref(\"nba_elo_rollforward\") }} rl\nleft join cte_avg_elo a on 1 = 1\nleft join {{ ref(\"nba_latest_results\") }} lr on lr.game_id = rl.game_id\nleft join {{ ref(\"nba_teams\") }} h on h.team_long = rl.home_team\nleft join {{ ref(\"nba_teams\") }} v on v.team_long = rl.visiting_team\nleft join {{ ref(\"nba_schedules\") }} s on s.game_id = rl.game_id", "language": "sql", "refs": [{"name": "nba_latest_elo", "package": null, "version": null}, {"name": "nba_elo_rollforward", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_latest_elo", "model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_latest_results", "model.sports_sims.nba_teams", "model.sports_sims.nba_schedules"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_results_log.sql", "compiled": true, "compiled_code": "with\n    cte_avg_elo as (\n        select avg(elo_rating) as elo_rating from \"nba\".\"main\".\"nba_latest_elo\"\n    )\nselect\n    rl.*,\n    a.elo_rating as avg,\n    case\n        when rl.visiting_team_elo_rating > rl.home_team_elo_rating\n        then rl.visiting_team\n        else rl.home_team\n    end as favored_team,\n    case\n        when rl.visiting_team_elo_rating > a.elo_rating then 1 else 0\n    end as visiting_team_above_avg,\n    case\n        when rl.home_team_elo_rating > a.elo_rating then 1 else 0\n    end as home_team_above_avg,\n    case\n        when rl.winning_team = rl.home_team then rl.visiting_team else rl.home_team\n    end as losing_team,\n    lr.game_date,\n    lr.home_team_score,\n    lr.visiting_team_score,\n    h.team as hmtm,\n    v.team as vstm,\n    s.type\nfrom \"nba\".\"main\".\"nba_elo_rollforward\" rl\nleft join cte_avg_elo a on 1 = 1\nleft join \"nba\".\"main\".\"nba_latest_results\" lr on lr.game_id = rl.game_id\nleft join \"nba\".\"main\".\"nba_teams\" h on h.team_long = rl.home_team\nleft join \"nba\".\"main\".\"nba_teams\" v on v.team_long = rl.visiting_team\nleft join \"nba\".\"main\".\"nba_schedules\" s on s.game_id = rl.game_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_reg_season_actuals": {"database": "nba", "schema": "main", "name": "nba_reg_season_actuals", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_reg_season_actuals.sql", "original_file_path": "models/nba/prep/nba_reg_season_actuals.sql", "unique_id": "model.sports_sims.nba_reg_season_actuals", "fqn": ["sports_sims", "nba", "prep", "nba_reg_season_actuals"], "alias": "nba_reg_season_actuals", "checksum": {"name": "sha256", "checksum": "ab4d5a3cfeea8a746bf2bfaf4250c8483dad3256baaaa2bfa7936723be4435be"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/prep/nba_reg_season_actuals.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.0263171, "relation_name": "\"nba\".\"main\".\"nba_reg_season_actuals\"", "raw_code": "with\n    cte_wins as (\n        select winning_team, count(*) as wins\n        from {{ ref(\"nba_latest_results\") }}\n        group by all\n    ),\n\n    cte_losses as (\n        select losing_team, count(*) as losses\n        from {{ ref(\"nba_latest_results\") }}\n        group by all\n    )\n\nselect t.team, coalesce(w.wins, 0) as wins, coalesce(l.losses, 0) as losses\nfrom {{ ref(\"nba_teams\") }} t\nleft join cte_wins w on w.winning_team = t.team_long\nleft join cte_losses l on l.losing_team = t.team_long", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_teams"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_reg_season_actuals.sql", "compiled": true, "compiled_code": "with\n    cte_wins as (\n        select winning_team, count(*) as wins\n        from \"nba\".\"main\".\"nba_latest_results\"\n        group by all\n    ),\n\n    cte_losses as (\n        select losing_team, count(*) as losses\n        from \"nba\".\"main\".\"nba_latest_results\"\n        group by all\n    )\n\nselect t.team, coalesce(w.wins, 0) as wins, coalesce(l.losses, 0) as losses\nfrom \"nba\".\"main\".\"nba_teams\" t\nleft join cte_wins w on w.winning_team = t.team_long\nleft join cte_losses l on l.losing_team = t.team_long", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_elo_history": {"database": "nba", "schema": "main", "name": "nba_elo_history", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_elo_history.sql", "original_file_path": "models/nba/prep/nba_elo_history.sql", "unique_id": "model.sports_sims.nba_elo_history", "fqn": ["sports_sims", "nba", "prep", "nba_elo_history"], "alias": "nba_elo_history", "checksum": {"name": "sha256", "checksum": "5efed3b1ce57f5d6c2f997f8ea404b70c03a13f39345909e50e008de08fb7d27"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/prep/nba_elo_history.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.0272682, "relation_name": "\"nba\".\"main\".\"nba_elo_history\"", "raw_code": "{{ config(materialized=\"table\") }}\n\nselect a.*\nfrom {{ source(\"nba\", \"nba_elo\") }} a\nunion all\nselect\n    l.game_date as date,\n    2024 as season,\n    null as nuetral,\n    'r' as playoff,\n    l.hmtm as team1,\n    l.vstm as team2,\n    r.home_team_elo_rating as elo1_pre,\n    r.visiting_team_elo_rating as elo2_pre,\n    null as elo_prob1,\n    null as elo_prob2,\n    case\n        when l.home_team_score > l.visiting_team_score\n        then r.home_team_elo_rating - r.elo_change\n        else r.home_team_elo_rating + r.elo_change\n    end as elo1_post,\n    case\n        when l.home_team_score > l.visiting_team_score\n        then r.visiting_team_elo_rating + r.elo_change\n        else r.visiting_team_elo_rating - r.elo_change\n    end as elo2_post,\n    l.home_team_score as score1,\n    l.visiting_team_score as score2\nfrom {{ ref(\"nba_elo_rollforward\") }} r\nleft join {{ ref(\"nba_results_log\") }} l on r.game_id = l.game_id", "language": "sql", "refs": [{"name": "nba_elo_rollforward", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}], "sources": [["nba", "nba_elo"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nba.nba_elo", "model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_results_log"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_elo_history.sql", "compiled": true, "compiled_code": "\n\nselect a.*\nfrom 'data/nba/nba_elo.csv' a\nunion all\nselect\n    l.game_date as date,\n    2024 as season,\n    null as nuetral,\n    'r' as playoff,\n    l.hmtm as team1,\n    l.vstm as team2,\n    r.home_team_elo_rating as elo1_pre,\n    r.visiting_team_elo_rating as elo2_pre,\n    null as elo_prob1,\n    null as elo_prob2,\n    case\n        when l.home_team_score > l.visiting_team_score\n        then r.home_team_elo_rating - r.elo_change\n        else r.home_team_elo_rating + r.elo_change\n    end as elo1_post,\n    case\n        when l.home_team_score > l.visiting_team_score\n        then r.visiting_team_elo_rating + r.elo_change\n        else r.visiting_team_elo_rating - r.elo_change\n    end as elo2_post,\n    l.home_team_score as score1,\n    l.visiting_team_score as score2\nfrom \"nba\".\"main\".\"nba_elo_rollforward\" r\nleft join \"nba\".\"main\".\"nba_results_log\" l on r.game_id = l.game_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_season_teams": {"database": "nba", "schema": "main", "name": "nba_season_teams", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_season_teams.sql", "original_file_path": "models/nba/prep/nba_season_teams.sql", "unique_id": "model.sports_sims.nba_season_teams", "fqn": ["sports_sims", "nba", "prep", "nba_season_teams"], "alias": "nba_season_teams", "checksum": {"name": "sha256", "checksum": "b27cc0a8e05a75122911b49fa78d35962ff18c66e03cafe55096c264adbe4b1c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/prep/nba_season_teams.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.028269, "relation_name": "\"nba\".\"main\".\"nba_season_teams\"", "raw_code": "select c.*\nfrom\n    (\n        select a.season, a.team1 as team\n        from {{ ref(\"nba_elo_history\") }} a\n        union all\n        select b.season, b.team2\n        from {{ ref(\"nba_elo_history\") }} b\n    ) as c\ngroup by all\norder by c.team", "language": "sql", "refs": [{"name": "nba_elo_history", "package": null, "version": null}, {"name": "nba_elo_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_elo_history"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_season_teams.sql", "compiled": true, "compiled_code": "select c.*\nfrom\n    (\n        select a.season, a.team1 as team\n        from \"nba\".\"main\".\"nba_elo_history\" a\n        union all\n        select b.season, b.team2\n        from \"nba\".\"main\".\"nba_elo_history\" b\n    ) as c\ngroup by all\norder by c.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_teams": {"database": "nba", "schema": "main", "name": "nba_teams", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_teams.sql", "original_file_path": "models/nba/prep/nba_teams.sql", "unique_id": "model.sports_sims.nba_teams", "fqn": ["sports_sims", "nba", "prep", "nba_teams"], "alias": "nba_teams", "checksum": {"name": "sha256", "checksum": "71e1e3369b7c39b3715fa08c62a2a1a10a3eead7ddd524c91b0c695be5d2fede"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"team_long": {"name": "team_long", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "target/run/sports_sims/models/nba/prep/nba_teams.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.2466528, "relation_name": "\"nba\".\"main\".\"nba_teams\"", "raw_code": "select r.team_long, r.team, tournament_group, conf, alt_key\nfrom {{ ref(\"nba_raw_team_ratings\") }} r", "language": "sql", "refs": [{"name": "nba_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_raw_team_ratings"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_teams.sql", "compiled": true, "compiled_code": "select r.team_long, r.team, tournament_group, conf, alt_key\nfrom \"nba\".\"main\".\"nba_raw_team_ratings\" r", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_vegas_wins": {"database": "nba", "schema": "main", "name": "nba_vegas_wins", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_vegas_wins.sql", "original_file_path": "models/nba/prep/nba_vegas_wins.sql", "unique_id": "model.sports_sims.nba_vegas_wins", "fqn": ["sports_sims", "nba", "prep", "nba_vegas_wins"], "alias": "nba_vegas_wins", "checksum": {"name": "sha256", "checksum": "8962e3cdcbccce13d0cd8c09a1d1c68a0b45801c82c1e15f44c7c0c07b9057c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "win_total": {"name": "win_total", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "target/run/sports_sims/models/nba/prep/nba_vegas_wins.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.247115, "relation_name": "\"nba\".\"main\".\"nba_vegas_wins\"", "raw_code": "select team, win_total::double as win_total from {{ ref(\"nba_ratings\") }} group by all", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_vegas_wins.sql", "compiled": true, "compiled_code": "select team, win_total::double as win_total from \"nba\".\"main\".\"nba_ratings\" group by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.reg_season_actuals_enriched": {"database": "nba", "schema": "main", "name": "reg_season_actuals_enriched", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/reg_season_actuals_enriched.sql", "original_file_path": "models/nba/analysis/reg_season_actuals_enriched.sql", "unique_id": "model.sports_sims.reg_season_actuals_enriched", "fqn": ["sports_sims", "nba", "analysis", "reg_season_actuals_enriched"], "alias": "reg_season_actuals_enriched", "checksum": {"name": "sha256", "checksum": "b659cd52c1a9a8d5a10fa98f7c66d3fe0fa9fe7070ba43132d649e3e2d2f6ed2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/analysis/reg_season_actuals_enriched.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.030879, "relation_name": "\"nba\".\"main\".\"reg_season_actuals_enriched\"", "raw_code": "{{ config(materialized=\"table\") }}\n\nwith\n    cte_wins as (\n        select winning_team, count(*) as wins\n        from {{ ref(\"nba_latest_results\") }}\n        group by all\n    ),\n\n    cte_losses as (\n        select losing_team, count(*) as losses\n        from {{ ref(\"nba_latest_results\") }}\n        group by all\n    ),\n\n    cte_favored_wins as (\n        select lr.winning_team, count(*) as wins\n        from {{ ref(\"nba_latest_results\") }} lr\n        inner join\n            {{ ref(\"nba_results_log\") }} r\n            on r.game_id = lr.game_id\n            and r.favored_team = lr.winning_team\n        group by all\n    ),\n\n    cte_favored_losses as (\n        select lr.losing_team, count(*) as losses\n        from {{ ref(\"nba_latest_results\") }} lr\n        inner join\n            {{ ref(\"nba_results_log\") }} r\n            on r.game_id = lr.game_id\n            and r.favored_team = lr.losing_team\n        group by all\n    ),\n\n    cte_avg_opponent_wins as (\n        select lr.winning_team, count(*) as wins\n        from {{ ref(\"nba_latest_results\") }} lr\n        inner join\n            {{ ref(\"nba_results_log\") }} r\n            on r.game_id = lr.game_id\n            and (\n                (lr.winning_team = r.home_team and r.visiting_team_above_avg = 1)\n                or (lr.winning_team = r.visiting_team and r.home_team_above_avg = 1)\n            )\n        group by all\n    ),\n\n    cte_avg_opponent_losses as (\n        select lr.losing_team, count(*) as losses\n        from {{ ref(\"nba_latest_results\") }} lr\n        inner join\n            {{ ref(\"nba_results_log\") }} r\n            on r.game_id = lr.game_id\n            and (\n                (lr.losing_team = r.visiting_team and r.home_team_above_avg = 1)\n                or (lr.losing_team = r.home_team and r.visiting_team_above_avg = 1)\n            )\n        group by all\n    ),\n\n    cte_home_wins as (\n        select lr.home_team, count(*) as wins\n        from {{ ref(\"nba_latest_results\") }} lr\n        where lr.home_team = lr.winning_team\n        group by all\n    ),\n\n    cte_home_losses as (\n        select lr.home_team, count(*) as losses\n        from {{ ref(\"nba_latest_results\") }} lr\n        where lr.home_team = lr.losing_team\n        group by all\n    )\n\nselect\n    t.team,\n    coalesce(w.wins, 0) as wins,\n    coalesce(l.losses, 0) as losses,\n    coalesce(fw.wins, 0) as wins_as_favorite,\n    coalesce(fl.losses, 0) as losses_as_favorite,\n    coalesce(w.wins, 0) - coalesce(fw.wins, 0) as wins_as_underdog,\n    coalesce(l.losses, 0) - coalesce(fl.losses, 0) as losses_as_underdog,\n    coalesce(aw.wins, 0) as wins_vs_good_teams,\n    coalesce(al.losses, 0) as losses_vs_good_teams,\n    coalesce(w.wins, 0) - coalesce(aw.wins, 0) as wins_vs_bad_teams,\n    coalesce(l.losses, 0) - coalesce(al.losses, 0) as losses_vs_bad_teams,\n    coalesce(hw.wins, 0) as home_wins,\n    coalesce(hl.losses, 0) as home_losses,\n    coalesce(w.wins, 0) - coalesce(hw.wins, 0) as away_wins,\n    coalesce(l.losses, 0) - coalesce(hl.losses, 0) as away_losses\nfrom {{ ref(\"nba_teams\") }} t\nleft join cte_wins w on w.winning_team = t.team_long\nleft join cte_losses l on l.losing_team = t.team_long\nleft join cte_favored_wins fw on fw.winning_team = t.team_long\nleft join cte_favored_losses fl on fl.losing_team = t.team_long\nleft join cte_avg_opponent_wins aw on aw.winning_team = t.team_long\nleft join cte_avg_opponent_losses al on al.losing_team = t.team_long\nleft join cte_home_wins hw on hw.home_team = t.team_long\nleft join cte_home_losses hl on hl.home_team = t.team_long", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_results_log", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_results_log", "model.sports_sims.nba_teams"]}, "compiled_path": "target/compiled/sports_sims/models/nba/analysis/reg_season_actuals_enriched.sql", "compiled": true, "compiled_code": "\n\nwith\n    cte_wins as (\n        select winning_team, count(*) as wins\n        from \"nba\".\"main\".\"nba_latest_results\"\n        group by all\n    ),\n\n    cte_losses as (\n        select losing_team, count(*) as losses\n        from \"nba\".\"main\".\"nba_latest_results\"\n        group by all\n    ),\n\n    cte_favored_wins as (\n        select lr.winning_team, count(*) as wins\n        from \"nba\".\"main\".\"nba_latest_results\" lr\n        inner join\n            \"nba\".\"main\".\"nba_results_log\" r\n            on r.game_id = lr.game_id\n            and r.favored_team = lr.winning_team\n        group by all\n    ),\n\n    cte_favored_losses as (\n        select lr.losing_team, count(*) as losses\n        from \"nba\".\"main\".\"nba_latest_results\" lr\n        inner join\n            \"nba\".\"main\".\"nba_results_log\" r\n            on r.game_id = lr.game_id\n            and r.favored_team = lr.losing_team\n        group by all\n    ),\n\n    cte_avg_opponent_wins as (\n        select lr.winning_team, count(*) as wins\n        from \"nba\".\"main\".\"nba_latest_results\" lr\n        inner join\n            \"nba\".\"main\".\"nba_results_log\" r\n            on r.game_id = lr.game_id\n            and (\n                (lr.winning_team = r.home_team and r.visiting_team_above_avg = 1)\n                or (lr.winning_team = r.visiting_team and r.home_team_above_avg = 1)\n            )\n        group by all\n    ),\n\n    cte_avg_opponent_losses as (\n        select lr.losing_team, count(*) as losses\n        from \"nba\".\"main\".\"nba_latest_results\" lr\n        inner join\n            \"nba\".\"main\".\"nba_results_log\" r\n            on r.game_id = lr.game_id\n            and (\n                (lr.losing_team = r.visiting_team and r.home_team_above_avg = 1)\n                or (lr.losing_team = r.home_team and r.visiting_team_above_avg = 1)\n            )\n        group by all\n    ),\n\n    cte_home_wins as (\n        select lr.home_team, count(*) as wins\n        from \"nba\".\"main\".\"nba_latest_results\" lr\n        where lr.home_team = lr.winning_team\n        group by all\n    ),\n\n    cte_home_losses as (\n        select lr.home_team, count(*) as losses\n        from \"nba\".\"main\".\"nba_latest_results\" lr\n        where lr.home_team = lr.losing_team\n        group by all\n    )\n\nselect\n    t.team,\n    coalesce(w.wins, 0) as wins,\n    coalesce(l.losses, 0) as losses,\n    coalesce(fw.wins, 0) as wins_as_favorite,\n    coalesce(fl.losses, 0) as losses_as_favorite,\n    coalesce(w.wins, 0) - coalesce(fw.wins, 0) as wins_as_underdog,\n    coalesce(l.losses, 0) - coalesce(fl.losses, 0) as losses_as_underdog,\n    coalesce(aw.wins, 0) as wins_vs_good_teams,\n    coalesce(al.losses, 0) as losses_vs_good_teams,\n    coalesce(w.wins, 0) - coalesce(aw.wins, 0) as wins_vs_bad_teams,\n    coalesce(l.losses, 0) - coalesce(al.losses, 0) as losses_vs_bad_teams,\n    coalesce(hw.wins, 0) as home_wins,\n    coalesce(hl.losses, 0) as home_losses,\n    coalesce(w.wins, 0) - coalesce(hw.wins, 0) as away_wins,\n    coalesce(l.losses, 0) - coalesce(hl.losses, 0) as away_losses\nfrom \"nba\".\"main\".\"nba_teams\" t\nleft join cte_wins w on w.winning_team = t.team_long\nleft join cte_losses l on l.losing_team = t.team_long\nleft join cte_favored_wins fw on fw.winning_team = t.team_long\nleft join cte_favored_losses fl on fl.losing_team = t.team_long\nleft join cte_avg_opponent_wins aw on aw.winning_team = t.team_long\nleft join cte_avg_opponent_losses al on al.losing_team = t.team_long\nleft join cte_home_wins hw on hw.home_team = t.team_long\nleft join cte_home_losses hl on hl.home_team = t.team_long", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.reg_season_end": {"database": "nba", "schema": "main", "name": "reg_season_end", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/reg_season_end.sql", "original_file_path": "models/nba/analysis/reg_season_end.sql", "unique_id": "model.sports_sims.reg_season_end", "fqn": ["sports_sims", "nba", "analysis", "reg_season_end"], "alias": "reg_season_end", "checksum": {"name": "sha256", "checksum": "f28dd8040eca38ea84d259be0b29e85e54b2bde2590209f0650e6d45c8d3b5e4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/analysis/reg_season_end.sql", "unrendered_config": {"tags": "nba", "materialized": "view"}, "created_at": 1726368442.031947, "relation_name": "\"nba\".\"main\".\"reg_season_end\"", "raw_code": "with\n    cte_wins as (\n        select\n            s.scenario_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team then s.home_conf else s.visiting_conf\n            end as conf,\n            /*    CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating, */\n            count(*) as wins\n        from {{ ref(\"reg_season_simulator\") }} s\n        group by all\n    ),\n\n    cte_ranked_wins as (\n        select\n            *,\n            -- no tiebreaker, so however row number handles order ties will need to be\n            -- dealt with\n            row_number() over (\n                partition by scenario_id, conf order by wins desc, winning_team desc\n            ) as season_rank\n        from cte_wins\n\n    ),\n\n    cte_made_playoffs as (\n        select\n            *,\n            case when season_rank <= 10 then 1 else 0 end as made_playoffs,\n            case when season_rank between 7 and 10 then 1 else 0 end as made_play_in,\n            conf || '-' || season_rank::text as seed\n        from cte_ranked_wins\n    )\n\nselect mp.*, le.elo_rating, {{ var(\"sim_start_game_id\") }} as sim_start_game_id\nfrom cte_made_playoffs mp\nleft join {{ ref(\"nba_latest_elo\") }} le on le.team = mp.winning_team", "language": "sql", "refs": [{"name": "reg_season_simulator", "package": null, "version": null}, {"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.reg_season_simulator", "model.sports_sims.nba_latest_elo"]}, "compiled_path": "target/compiled/sports_sims/models/nba/analysis/reg_season_end.sql", "compiled": true, "compiled_code": "with\n    cte_wins as (\n        select\n            s.scenario_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team then s.home_conf else s.visiting_conf\n            end as conf,\n            /*    CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating, */\n            count(*) as wins\n        from \"nba\".\"main\".\"reg_season_simulator\" s\n        group by all\n    ),\n\n    cte_ranked_wins as (\n        select\n            *,\n            -- no tiebreaker, so however row number handles order ties will need to be\n            -- dealt with\n            row_number() over (\n                partition by scenario_id, conf order by wins desc, winning_team desc\n            ) as season_rank\n        from cte_wins\n\n    ),\n\n    cte_made_playoffs as (\n        select\n            *,\n            case when season_rank <= 10 then 1 else 0 end as made_playoffs,\n            case when season_rank between 7 and 10 then 1 else 0 end as made_play_in,\n            conf || '-' || season_rank::text as seed\n        from cte_ranked_wins\n    )\n\nselect mp.*, le.elo_rating, 0 as sim_start_game_id\nfrom cte_made_playoffs mp\nleft join \"nba\".\"main\".\"nba_latest_elo\" le on le.team = mp.winning_team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_team_stats": {"database": "nba", "schema": "main", "name": "nba_team_stats", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/nba_team_stats.sql", "original_file_path": "models/nba/analysis/nba_team_stats.sql", "unique_id": "model.sports_sims.nba_team_stats", "fqn": ["sports_sims", "nba", "analysis", "nba_team_stats"], "alias": "nba_team_stats", "checksum": {"name": "sha256", "checksum": "d2b2c676e2c0a1c89c9467b3a6d00b67cfd393c1b29558757dec2e6ac679d04b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/analysis/nba_team_stats.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.0340312, "relation_name": "\"nba\".\"main\".\"nba_team_stats\"", "raw_code": "{{ config(materialized=\"table\") }}\n\nwith\n    cte_games as (\n        select\n            team1,\n            team2,\n            score1,\n            score2,\n            playoff,\n            case when score1 > score2 then team1 else team2 end as winner,\n            case when score1 < score2 then team1 else team2 end as loser,\n            case when team1 = t.team then elo1_pre else elo2_pre end as elo,\n            case when team1 = t.team then score1 else score2 end as pf,\n            case when team1 = t.team then score2 else score1 end as pa,\n            t.team || ':' || t.season as key,\n            t.team,\n            t.season\n        from {{ ref(\"nba_elo_history\") }} h\n        left join\n            {{ ref(\"nba_season_teams\") }} t\n            on (t.team = h.team1 or t.team = h.team2)\n            and h.season = t.season\n    )\nselect\n    key,\n    count(*) as ct,\n    count(*) filter (where winner = team and playoff = 'r') as wins,\n    - count(*) filter (where loser = team and playoff = 'r') as losses,\n    count(*) filter (\n        where winner = team and team1 = team and playoff = 'r'\n    ) as home_wins, - count(*) filter (\n        where loser = team and team1 = team and playoff = 'r'\n    ) as home_losses,\n    count(*) filter (\n        where winner = team and team2 = team and playoff = 'r'\n    ) as away_wins, - count(*) filter (\n        where loser = team and team2 = team and playoff = 'r'\n    ) as away_losses,\n    count(*) filter (where winner = team and playoff <> 'r') as playoff_wins,\n    - count(*) filter (where loser = team and playoff <> 'r') as playoff_losses,\n    avg(pf) as pf,\n    avg(- pa) as pa,\n    avg(pf) - avg(pa) as margin,\n    min(elo) as min_elo,\n    avg(elo) as avg_elo,\n    max(elo) as max_elo,\n    team as team,\n    season as season\nfrom cte_games\ngroup by all", "language": "sql", "refs": [{"name": "nba_elo_history", "package": null, "version": null}, {"name": "nba_season_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.nba_elo_history", "model.sports_sims.nba_season_teams"]}, "compiled_path": "target/compiled/sports_sims/models/nba/analysis/nba_team_stats.sql", "compiled": true, "compiled_code": "\n\nwith\n    cte_games as (\n        select\n            team1,\n            team2,\n            score1,\n            score2,\n            playoff,\n            case when score1 > score2 then team1 else team2 end as winner,\n            case when score1 < score2 then team1 else team2 end as loser,\n            case when team1 = t.team then elo1_pre else elo2_pre end as elo,\n            case when team1 = t.team then score1 else score2 end as pf,\n            case when team1 = t.team then score2 else score1 end as pa,\n            t.team || ':' || t.season as key,\n            t.team,\n            t.season\n        from \"nba\".\"main\".\"nba_elo_history\" h\n        left join\n            \"nba\".\"main\".\"nba_season_teams\" t\n            on (t.team = h.team1 or t.team = h.team2)\n            and h.season = t.season\n    )\nselect\n    key,\n    count(*) as ct,\n    count(*) filter (where winner = team and playoff = 'r') as wins,\n    - count(*) filter (where loser = team and playoff = 'r') as losses,\n    count(*) filter (\n        where winner = team and team1 = team and playoff = 'r'\n    ) as home_wins, - count(*) filter (\n        where loser = team and team1 = team and playoff = 'r'\n    ) as home_losses,\n    count(*) filter (\n        where winner = team and team2 = team and playoff = 'r'\n    ) as away_wins, - count(*) filter (\n        where loser = team and team2 = team and playoff = 'r'\n    ) as away_losses,\n    count(*) filter (where winner = team and playoff <> 'r') as playoff_wins,\n    - count(*) filter (where loser = team and playoff <> 'r') as playoff_losses,\n    avg(pf) as pf,\n    avg(- pa) as pa,\n    avg(pf) - avg(pa) as margin,\n    min(elo) as min_elo,\n    avg(elo) as avg_elo,\n    max(elo) as max_elo,\n    team as team,\n    season as season\nfrom cte_games\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.team_matchups": {"database": "nba", "schema": "main", "name": "team_matchups", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/team_matchups.sql", "original_file_path": "models/nba/analysis/team_matchups.sql", "unique_id": "model.sports_sims.team_matchups", "fqn": ["sports_sims", "nba", "analysis", "team_matchups"], "alias": "team_matchups", "checksum": {"name": "sha256", "checksum": "56520736193a32ac33e97108bd78c3dbe25c0bc11c7c6e128d523cd1d24c9fd2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/analysis/team_matchups.sql", "unrendered_config": {"tags": "nba", "materialized": "view"}, "created_at": 1726368442.0350919, "relation_name": "\"nba\".\"main\".\"team_matchups\"", "raw_code": "select\n    home.team as home_team,\n    home.elo_rating as home_elo_rating,\n    away.team as away_team,\n    away.elo_rating as away_elo_rating,\n    {{ elo_calc(\"home_elo_rating\", \"away_elo_rating\", var(\"nba_elo_offset\")) }}\n    as home_team_win_probability,\n    home_elo_rating - away_elo_rating as elo_diff,\n    elo_diff + 100 as elo_diff_hfa,\n    home_team_win_probability / 10000 as home_win,\n    {{ american_odds(\"home_team_win_probability/10000\") }} as american_odds,\n    round(\n        case\n            when home_team_win_probability / 10000 >= 0.50\n            then round(-30.564 * home_team_win_probability / 10000 + 14.763, 1)\n            else round(-30.564 * home_team_win_probability / 10000 + 15.801, 1)\n        end\n        * 2,\n        0\n    )\n    / 2.0 as implied_line\nfrom {{ ref(\"nba_ratings\") }} home\njoin {{ ref(\"nba_ratings\") }} away on 1 = 1\nwhere home.team <> away.team", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}, {"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.elo_calc", "macro.sports_sims.american_odds"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": "target/compiled/sports_sims/models/nba/analysis/team_matchups.sql", "compiled": true, "compiled_code": "select\n    home.team as home_team,\n    home.elo_rating as home_elo_rating,\n    away.team as away_team,\n    away.elo_rating as away_elo_rating,\n    ( 1 - (1 / (10 ^ (-( away_elo_rating - home_elo_rating - 100)::real/400)+1))) * 10000\n    as home_team_win_probability,\n    home_elo_rating - away_elo_rating as elo_diff,\n    elo_diff + 100 as elo_diff_hfa,\n    home_team_win_probability / 10000 as home_win,\n    CASE WHEN home_team_win_probability/10000 >= 0.5 \n        THEN '-' || ROUND( home_team_win_probability/10000 / ( 1.0 - home_team_win_probability/10000 ) * 100 )::int\n        ELSE '+' || ((( 1.0 - home_team_win_probability/10000 ) / (home_team_win_probability/10000::real ) * 100)::int)\n    END as american_odds,\n    round(\n        case\n            when home_team_win_probability / 10000 >= 0.50\n            then round(-30.564 * home_team_win_probability / 10000 + 14.763, 1)\n            else round(-30.564 * home_team_win_probability / 10000 + 15.801, 1)\n        end\n        * 2,\n        0\n    )\n    / 2.0 as implied_line\nfrom \"nba\".\"main\".\"nba_ratings\" home\njoin \"nba\".\"main\".\"nba_ratings\" away on 1 = 1\nwhere home.team <> away.team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.tournament_end": {"database": "nba", "schema": "main", "name": "tournament_end", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/tournament_end.sql", "original_file_path": "models/nba/analysis/tournament_end.sql", "unique_id": "model.sports_sims.tournament_end", "fqn": ["sports_sims", "nba", "analysis", "tournament_end"], "alias": "tournament_end", "checksum": {"name": "sha256", "checksum": "e331d9da3778b846550b7995c5e4640d473341066479e71ea273b4e4230e6296"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/analysis/tournament_end.sql", "unrendered_config": {"tags": "nba", "materialized": "view"}, "created_at": 1726368442.0381382, "relation_name": "\"nba\".\"main\".\"tournament_end\"", "raw_code": "with\n    cte_wins as (\n        select\n            s.scenario_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team then s.home_conf else s.visiting_conf\n            end as conf,\n            count(*) as wins,\n            sum(case when include_actuals = true then 1 else 0 end) as actual_wins\n        from {{ ref(\"reg_season_simulator\") }} s\n        where s.type = 'tournament'\n        group by all\n    ),\n\n    cte_losses as (\n        select\n            s.scenario_id,\n            case\n                when s.home_team = s.winning_team then s.visiting_team else s.home_team\n            end as losing_team,\n            case\n                when s.winning_team = s.home_team then s.visiting_conf else s.home_conf\n            end as conf,\n            count(*) as losses,\n            sum(case when include_actuals = true then 1 else 0 end) as actual_losses\n        from {{ ref(\"reg_season_simulator\") }} s\n        where s.type = 'tournament'\n        group by all\n    ),\n\n    cte_results_with_group as (\n        select\n            scenarios.scenario_id,\n            t.team as winning_team,\n            t.conf,\n            coalesce(w.wins, 0) as wins,\n            coalesce(l.losses, 0) as losses,\n            t.tournament_group,\n            coalesce(w.actual_wins, 0) as actual_wins,\n            coalesce(l.actual_losses, 0) as actual_losses\n        from {{ ref(\"nba_teams\") }} t\n        left join\n            (\n                select i.generate_series as scenario_id\n                from generate_series(1, {{ var(\"scenarios\") }}) as i\n            ) as scenarios\n            on 1 = 1\n        left join\n            cte_wins w\n            on t.team = w.winning_team\n            and scenarios.scenario_id = w.scenario_id\n        left join\n            cte_losses l\n            on t.team = l.losing_team\n            and scenarios.scenario_id = l.scenario_id\n    ),\n\n    cte_home_margin as (\n        select\n            t.team,\n            coalesce(\n                sum(coalesce(- h.actual_margin, - h.implied_line)), 0\n            ) as home_pt_diff\n        from {{ ref(\"nba_teams\") }} t\n        left join\n            {{ ref(\"reg_season_predictions\") }} h\n            on h.home_team = t.team\n            and h.type = 'tournament'\n            -- conditional join on reg season predictions\n            and case\n                when h.actual_margin is null\n                then h.winning_team = h.home_team\n                else 1 = 1\n            end\n        group by all\n    ),\n\n    cte_visitor_margin as (\n        select\n            t.team,\n            coalesce(\n                sum(coalesce(v.actual_margin, v.implied_line)), 0\n            ) as visitor_pt_diff\n        from {{ ref(\"nba_teams\") }} t\n        left join\n            {{ ref(\"reg_season_predictions\") }} v\n            on v.visiting_team = t.team\n            and v.type = 'tournament'\n            -- conditional join on reg season predictions\n            and case\n                when v.actual_margin is null\n                then v.winning_team = v.home_team\n                else 1 = 1\n            end\n        group by all\n    ),\n\n    cte_head_to_head as (\n        select\n            g.scenario_id,\n            g.winning_team,\n            case\n                when g.winning_team = g.home_team then g.visiting_team else g.home_team\n            end as losing_team\n        from {{ ref(\"reg_season_simulator\") }} g\n        where type = 'tournament'\n    ),\n\n    cte_head_to_head_wins as (\n        select h.scenario_id, h.winning_team as team, count(*) as h2h_wins\n        from cte_head_to_head h\n        inner join\n            cte_wins w\n            on h.winning_team = w.winning_team\n            and h.scenario_id = w.scenario_id\n            and h.losing_team in (\n                select winning_team\n                from cte_wins\n                where\n                    wins = w.wins\n                    and winning_team != w.winning_team\n                    and scenario_id = w.scenario_id\n            )\n        group by all\n    ),\n\n    cte_fuzz as (\n        select\n            r.scenario_id,\n            r.winning_team,\n            ((r.wins - r.actual_wins) * floor(random() * 5))\n            + ((r.losses - r.actual_losses) * floor(random() * -5)) as fuzz\n        from cte_results_with_group r\n    ),\n\n    /* tiebreaking criteria: https://www.nba.com/news/in-season-tournament-101\n\n  \u2022 Head-to-head record in the Group Stage;\n  \u2022 Point differential in the Group Stage;\n  \u2022 Total points scored in the Group Stage;\n  \u2022 Regular season record from the 2022-23 NBA regular season; and\n  \u2022 Random drawing (in the unlikely scenario that two or more teams are still tied following the previous tiebreakers).\n\n*/\n    cte_ranked_wins as (\n        select\n            r.*,\n            h2h.h2h_wins,\n            -- fuzzing pt diff by scenario via brute force (7 pt swing either way)\n            home_pt_diff + visitor_pt_diff + f.fuzz as pt_diff,\n            -- no tiebreaker, so however row number handles order ties will need to be\n            -- dealt with\n            row_number() over (\n                partition by r.scenario_id, tournament_group\n                order by wins desc, h2h_wins desc, pt_diff desc\n            ) as group_rank\n        from cte_results_with_group r\n        left join cte_home_margin h on h.team = r.winning_team\n        left join cte_visitor_margin v on v.team = r.winning_team\n        left join\n            cte_head_to_head_wins h2h\n            on h2h.team = r.winning_team\n            and h2h.scenario_id = r.scenario_id\n        left join\n            cte_fuzz f\n            on f.scenario_id = r.scenario_id\n            and f.winning_team = r.winning_team\n    ),\n\n    cte_wildcard as (\n        select\n            scenario_id,\n            winning_team,\n            conf,\n            wins,\n            pt_diff,\n            group_rank,\n            row_number() over (\n                partition by scenario_id, conf\n                order by wins desc, pt_diff desc, random()\n            ) as wildcard_rank\n        from cte_ranked_wins r\n        where group_rank = 2\n    ),\n\n    cte_made_tournament as (\n        select\n            w.*,\n            case when w.group_rank = 1 then 1 else 0 end as made_tournament,\n            case\n                when wc.wildcard_rank = 1 and wc.wildcard_rank is not null then 1 else 0\n            end as made_wildcard,\n            w.tournament_group || '-' || w.group_rank::text as seed\n        from cte_ranked_wins w\n        left join\n            cte_wildcard wc\n            on wc.winning_team = w.winning_team\n            and wc.scenario_id = w.scenario_id\n    )\n\nselect mp.*, le.elo_rating, {{ var(\"sim_start_game_id\") }} as sim_start_game_id\nfrom cte_made_tournament mp\nleft join {{ ref(\"nba_latest_elo\") }} le on le.team = mp.winning_team", "language": "sql", "refs": [{"name": "reg_season_simulator", "package": null, "version": null}, {"name": "reg_season_simulator", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "reg_season_predictions", "package": null, "version": null}, {"name": "nba_teams", "package": null, "version": null}, {"name": "reg_season_predictions", "package": null, "version": null}, {"name": "reg_season_simulator", "package": null, "version": null}, {"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.reg_season_simulator", "model.sports_sims.nba_teams", "model.sports_sims.reg_season_predictions", "model.sports_sims.nba_latest_elo"]}, "compiled_path": "target/compiled/sports_sims/models/nba/analysis/tournament_end.sql", "compiled": true, "compiled_code": "with\n    cte_wins as (\n        select\n            s.scenario_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team then s.home_conf else s.visiting_conf\n            end as conf,\n            count(*) as wins,\n            sum(case when include_actuals = true then 1 else 0 end) as actual_wins\n        from \"nba\".\"main\".\"reg_season_simulator\" s\n        where s.type = 'tournament'\n        group by all\n    ),\n\n    cte_losses as (\n        select\n            s.scenario_id,\n            case\n                when s.home_team = s.winning_team then s.visiting_team else s.home_team\n            end as losing_team,\n            case\n                when s.winning_team = s.home_team then s.visiting_conf else s.home_conf\n            end as conf,\n            count(*) as losses,\n            sum(case when include_actuals = true then 1 else 0 end) as actual_losses\n        from \"nba\".\"main\".\"reg_season_simulator\" s\n        where s.type = 'tournament'\n        group by all\n    ),\n\n    cte_results_with_group as (\n        select\n            scenarios.scenario_id,\n            t.team as winning_team,\n            t.conf,\n            coalesce(w.wins, 0) as wins,\n            coalesce(l.losses, 0) as losses,\n            t.tournament_group,\n            coalesce(w.actual_wins, 0) as actual_wins,\n            coalesce(l.actual_losses, 0) as actual_losses\n        from \"nba\".\"main\".\"nba_teams\" t\n        left join\n            (\n                select i.generate_series as scenario_id\n                from generate_series(1, 10000) as i\n            ) as scenarios\n            on 1 = 1\n        left join\n            cte_wins w\n            on t.team = w.winning_team\n            and scenarios.scenario_id = w.scenario_id\n        left join\n            cte_losses l\n            on t.team = l.losing_team\n            and scenarios.scenario_id = l.scenario_id\n    ),\n\n    cte_home_margin as (\n        select\n            t.team,\n            coalesce(\n                sum(coalesce(- h.actual_margin, - h.implied_line)), 0\n            ) as home_pt_diff\n        from \"nba\".\"main\".\"nba_teams\" t\n        left join\n            \"nba\".\"main\".\"reg_season_predictions\" h\n            on h.home_team = t.team\n            and h.type = 'tournament'\n            -- conditional join on reg season predictions\n            and case\n                when h.actual_margin is null\n                then h.winning_team = h.home_team\n                else 1 = 1\n            end\n        group by all\n    ),\n\n    cte_visitor_margin as (\n        select\n            t.team,\n            coalesce(\n                sum(coalesce(v.actual_margin, v.implied_line)), 0\n            ) as visitor_pt_diff\n        from \"nba\".\"main\".\"nba_teams\" t\n        left join\n            \"nba\".\"main\".\"reg_season_predictions\" v\n            on v.visiting_team = t.team\n            and v.type = 'tournament'\n            -- conditional join on reg season predictions\n            and case\n                when v.actual_margin is null\n                then v.winning_team = v.home_team\n                else 1 = 1\n            end\n        group by all\n    ),\n\n    cte_head_to_head as (\n        select\n            g.scenario_id,\n            g.winning_team,\n            case\n                when g.winning_team = g.home_team then g.visiting_team else g.home_team\n            end as losing_team\n        from \"nba\".\"main\".\"reg_season_simulator\" g\n        where type = 'tournament'\n    ),\n\n    cte_head_to_head_wins as (\n        select h.scenario_id, h.winning_team as team, count(*) as h2h_wins\n        from cte_head_to_head h\n        inner join\n            cte_wins w\n            on h.winning_team = w.winning_team\n            and h.scenario_id = w.scenario_id\n            and h.losing_team in (\n                select winning_team\n                from cte_wins\n                where\n                    wins = w.wins\n                    and winning_team != w.winning_team\n                    and scenario_id = w.scenario_id\n            )\n        group by all\n    ),\n\n    cte_fuzz as (\n        select\n            r.scenario_id,\n            r.winning_team,\n            ((r.wins - r.actual_wins) * floor(random() * 5))\n            + ((r.losses - r.actual_losses) * floor(random() * -5)) as fuzz\n        from cte_results_with_group r\n    ),\n\n    /* tiebreaking criteria: https://www.nba.com/news/in-season-tournament-101\n\n  \u2022 Head-to-head record in the Group Stage;\n  \u2022 Point differential in the Group Stage;\n  \u2022 Total points scored in the Group Stage;\n  \u2022 Regular season record from the 2022-23 NBA regular season; and\n  \u2022 Random drawing (in the unlikely scenario that two or more teams are still tied following the previous tiebreakers).\n\n*/\n    cte_ranked_wins as (\n        select\n            r.*,\n            h2h.h2h_wins,\n            -- fuzzing pt diff by scenario via brute force (7 pt swing either way)\n            home_pt_diff + visitor_pt_diff + f.fuzz as pt_diff,\n            -- no tiebreaker, so however row number handles order ties will need to be\n            -- dealt with\n            row_number() over (\n                partition by r.scenario_id, tournament_group\n                order by wins desc, h2h_wins desc, pt_diff desc\n            ) as group_rank\n        from cte_results_with_group r\n        left join cte_home_margin h on h.team = r.winning_team\n        left join cte_visitor_margin v on v.team = r.winning_team\n        left join\n            cte_head_to_head_wins h2h\n            on h2h.team = r.winning_team\n            and h2h.scenario_id = r.scenario_id\n        left join\n            cte_fuzz f\n            on f.scenario_id = r.scenario_id\n            and f.winning_team = r.winning_team\n    ),\n\n    cte_wildcard as (\n        select\n            scenario_id,\n            winning_team,\n            conf,\n            wins,\n            pt_diff,\n            group_rank,\n            row_number() over (\n                partition by scenario_id, conf\n                order by wins desc, pt_diff desc, random()\n            ) as wildcard_rank\n        from cte_ranked_wins r\n        where group_rank = 2\n    ),\n\n    cte_made_tournament as (\n        select\n            w.*,\n            case when w.group_rank = 1 then 1 else 0 end as made_tournament,\n            case\n                when wc.wildcard_rank = 1 and wc.wildcard_rank is not null then 1 else 0\n            end as made_wildcard,\n            w.tournament_group || '-' || w.group_rank::text as seed\n        from cte_ranked_wins w\n        left join\n            cte_wildcard wc\n            on wc.winning_team = w.winning_team\n            and wc.scenario_id = w.scenario_id\n    )\n\nselect mp.*, le.elo_rating, 0 as sim_start_game_id\nfrom cte_made_tournament mp\nleft join \"nba\".\"main\".\"nba_latest_elo\" le on le.team = mp.winning_team", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.reg_season_predictions": {"database": "nba", "schema": "main", "name": "reg_season_predictions", "resource_type": "model", "package_name": "sports_sims", "path": "nba/analysis/reg_season_predictions.sql", "original_file_path": "models/nba/analysis/reg_season_predictions.sql", "unique_id": "model.sports_sims.reg_season_predictions", "fqn": ["sports_sims", "nba", "analysis", "reg_season_predictions"], "alias": "reg_season_predictions", "checksum": {"name": "sha256", "checksum": "c965509fe098d1e7a45069ca183e9cad542e01b377fc006dfc8d6de52c55f1ba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/analysis/reg_season_predictions.sql", "unrendered_config": {"tags": "nba", "materialized": "view"}, "created_at": 1726368442.04128, "relation_name": "\"nba\".\"main\".\"reg_season_predictions\"", "raw_code": "with\n    cte_team_scores as (\n        from {{ ref(\"nba_results_by_team\") }}\n        select team, avg(score) as pts\n        group by all\n    ),\n    cte_interim_calcs as (\n        select\n            game_id,\n            date,\n            home_team,\n            home_team_elo_rating,\n            visiting_team,\n            visiting_team_elo_rating,\n            home_team_win_probability,\n            winning_team,\n            include_actuals,\n            count(*) as occurances,\n            {{ american_odds(\"home_team_win_probability/10000\") }} as american_odds,\n            type,\n            actual_home_team_score,\n            actual_visiting_team_score,\n            case\n                when actual_home_team_score > actual_visiting_team_score\n                then actual_margin * -1\n                else actual_margin\n            end as actual_margin,\n            (h.pts + v.pts) / 2.0 as avg_score,\n            round(\n                case\n                    when home_team_win_probability / 10000 >= 0.50\n                    then round(-30.564 * home_team_win_probability / 10000 + 14.763, 1)\n                    else round(-30.564 * home_team_win_probability / 10000 + 15.801, 1)\n                end\n                * 2,\n                0\n            )\n            / 2.0 as implied_line\n        from {{ ref(\"reg_season_simulator\") }} s\n        left join cte_team_scores h on h.team = s.home_team\n        left join cte_team_scores v on v.team = s.visiting_team\n        group by all\n    ),\n    cte_final as (\n        select\n            *,\n            round(avg_score - (implied_line / 2.0), 0) as home_score,\n            round(avg_score + (implied_line / 2.0), 0) as visiting_score\n        from cte_interim_calcs\n    )\nselect\n    *,\n    home_team\n    || ' '\n    || home_score::int\n    || ' - '\n    || visiting_score::int\n    || ' '\n    || visiting_team as predicted_score\nfrom cte_final", "language": "sql", "refs": [{"name": "nba_results_by_team", "package": null, "version": null}, {"name": "reg_season_simulator", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.american_odds"], "nodes": ["model.sports_sims.nba_results_by_team", "model.sports_sims.reg_season_simulator"]}, "compiled_path": "target/compiled/sports_sims/models/nba/analysis/reg_season_predictions.sql", "compiled": true, "compiled_code": "with\n    cte_team_scores as (\n        from \"nba\".\"main\".\"nba_results_by_team\"\n        select team, avg(score) as pts\n        group by all\n    ),\n    cte_interim_calcs as (\n        select\n            game_id,\n            date,\n            home_team,\n            home_team_elo_rating,\n            visiting_team,\n            visiting_team_elo_rating,\n            home_team_win_probability,\n            winning_team,\n            include_actuals,\n            count(*) as occurances,\n            CASE WHEN home_team_win_probability/10000 >= 0.5 \n        THEN '-' || ROUND( home_team_win_probability/10000 / ( 1.0 - home_team_win_probability/10000 ) * 100 )::int\n        ELSE '+' || ((( 1.0 - home_team_win_probability/10000 ) / (home_team_win_probability/10000::real ) * 100)::int)\n    END as american_odds,\n            type,\n            actual_home_team_score,\n            actual_visiting_team_score,\n            case\n                when actual_home_team_score > actual_visiting_team_score\n                then actual_margin * -1\n                else actual_margin\n            end as actual_margin,\n            (h.pts + v.pts) / 2.0 as avg_score,\n            round(\n                case\n                    when home_team_win_probability / 10000 >= 0.50\n                    then round(-30.564 * home_team_win_probability / 10000 + 14.763, 1)\n                    else round(-30.564 * home_team_win_probability / 10000 + 15.801, 1)\n                end\n                * 2,\n                0\n            )\n            / 2.0 as implied_line\n        from \"nba\".\"main\".\"reg_season_simulator\" s\n        left join cte_team_scores h on h.team = s.home_team\n        left join cte_team_scores v on v.team = s.visiting_team\n        group by all\n    ),\n    cte_final as (\n        select\n            *,\n            round(avg_score - (implied_line / 2.0), 0) as home_score,\n            round(avg_score + (implied_line / 2.0), 0) as visiting_score\n        from cte_interim_calcs\n    )\nselect\n    *,\n    home_team\n    || ' '\n    || home_score::int\n    || ' - '\n    || visiting_score::int\n    || ' '\n    || visiting_team as predicted_score\nfrom cte_final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playin_sim_r1": {"database": "nba", "schema": "main", "name": "playin_sim_r1", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playin/playin_sim_r1.sql", "original_file_path": "models/nba/simulator/playin/playin_sim_r1.sql", "unique_id": "model.sports_sims.playin_sim_r1", "fqn": ["sports_sims", "nba", "simulator", "playin", "playin_sim_r1"], "alias": "playin_sim_r1", "checksum": {"name": "sha256", "checksum": "7f214979a68c4d3129fcc43d2a819c92c0df05d54be70ce24af11acd330c91c7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/simulator/playin/playin_sim_r1.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.043318, "relation_name": "\"nba\".\"main\".\"playin_sim_r1\"", "raw_code": "select\n    r.scenario_id,\n    s.game_id,\n    ev.conf as conf,\n    ev.winning_team as visiting_team,\n    ev.elo_rating as visiting_team_elo_rating,\n    eh.winning_team as home_team,\n    eh.elo_rating as home_team_elo_rating,\n    {{ elo_calc(\"EH.elo_rating\", \"EV.elo_rating\", var(\"nba_elo_offset\")) }}\n    as home_team_win_probability,\n    r.rand_result,\n    case\n        when\n            {{ elo_calc(\"EH.elo_rating\", \"EV.elo_rating\", var(\"nba_elo_offset\")) }}\n            >= r.rand_result\n        then eh.winning_team\n        else ev.winning_team\n    end as winning_team\nfrom {{ ref(\"nba_schedules\") }} s\nleft join {{ ref(\"nba_random_num_gen\") }} r on r.game_id = s.game_id\nleft join\n    {{ ref(\"reg_season_end\") }} eh\n    on s.home_team = eh.seed\n    and r.scenario_id = eh.scenario_id\nleft join\n    {{ ref(\"reg_season_end\") }} ev\n    on s.visiting_team = ev.seed\n    and r.scenario_id = ev.scenario_id\nwhere s.type = 'playin_r1'", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "reg_season_end", "package": null, "version": null}, {"name": "reg_season_end", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.elo_calc"], "nodes": ["model.sports_sims.nba_schedules", "model.sports_sims.nba_random_num_gen", "model.sports_sims.reg_season_end"]}, "compiled_path": "target/compiled/sports_sims/models/nba/simulator/playin/playin_sim_r1.sql", "compiled": true, "compiled_code": "select\n    r.scenario_id,\n    s.game_id,\n    ev.conf as conf,\n    ev.winning_team as visiting_team,\n    ev.elo_rating as visiting_team_elo_rating,\n    eh.winning_team as home_team,\n    eh.elo_rating as home_team_elo_rating,\n    ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000\n    as home_team_win_probability,\n    r.rand_result,\n    case\n        when\n            ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000\n            >= r.rand_result\n        then eh.winning_team\n        else ev.winning_team\n    end as winning_team\nfrom \"nba\".\"main\".\"nba_schedules\" s\nleft join \"nba\".\"main\".\"nba_random_num_gen\" r on r.game_id = s.game_id\nleft join\n    \"nba\".\"main\".\"reg_season_end\" eh\n    on s.home_team = eh.seed\n    and r.scenario_id = eh.scenario_id\nleft join\n    \"nba\".\"main\".\"reg_season_end\" ev\n    on s.visiting_team = ev.seed\n    and r.scenario_id = ev.scenario_id\nwhere s.type = 'playin_r1'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playin_sim_r2": {"database": "nba", "schema": "main", "name": "playin_sim_r2", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playin/playin_sim_r2.sql", "original_file_path": "models/nba/simulator/playin/playin_sim_r2.sql", "unique_id": "model.sports_sims.playin_sim_r2", "fqn": ["sports_sims", "nba", "simulator", "playin", "playin_sim_r2"], "alias": "playin_sim_r2", "checksum": {"name": "sha256", "checksum": "d62c384a128f0f1f91ea02d88838f504caddb7bbcda12030925e2dafe6882abf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/simulator/playin/playin_sim_r2.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.0457768, "relation_name": "\"nba\".\"main\".\"playin_sim_r2\"", "raw_code": "select\n    r.scenario_id,\n    s.game_id,\n    s.home_team[7:] as home_team_id,\n    s.visiting_team[8:] as visiting_team_id,\n    ev.conf as conf,\n    ev.remaining_team as visiting_team,\n    ev.winning_team_elo_rating as visiting_team_elo_rating,\n    eh.remaining_team as home_team,\n    eh.losing_team_elo_rating as home_team_elo_rating,\n    {{\n        elo_calc(\n            \"EH.losing_team_elo_rating\",\n            \"EV.winning_team_elo_rating\",\n            var(\"nba_elo_offset\"),\n        )\n    }} as home_team_win_probability,\n    r.rand_result,\n    case\n        when\n            {{\n                elo_calc(\n                    \"EH.losing_team_elo_rating\",\n                    \"EV.winning_team_elo_rating\",\n                    var(\"nba_elo_offset\"),\n                )\n            }} >= r.rand_result\n        then eh.remaining_team\n        else ev.remaining_team\n    end as winning_team\nfrom {{ ref(\"nba_schedules\") }} s\nleft join {{ ref(\"nba_random_num_gen\") }} r on r.game_id = s.game_id\nleft join\n    {{ ref(\"playin_sim_r1_end\") }} eh\n    on r.scenario_id = eh.scenario_id\n    and eh.game_id = s.home_team[7:]\nleft join\n    {{ ref(\"playin_sim_r1_end\") }} ev\n    on r.scenario_id = ev.scenario_id\n    and ev.game_id = s.visiting_team[8:]\nwhere s.type = 'playin_r2'", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "playin_sim_r1_end", "package": null, "version": null}, {"name": "playin_sim_r1_end", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.elo_calc"], "nodes": ["model.sports_sims.nba_schedules", "model.sports_sims.nba_random_num_gen", "model.sports_sims.playin_sim_r1_end"]}, "compiled_path": "target/compiled/sports_sims/models/nba/simulator/playin/playin_sim_r2.sql", "compiled": true, "compiled_code": "select\n    r.scenario_id,\n    s.game_id,\n    s.home_team[7:] as home_team_id,\n    s.visiting_team[8:] as visiting_team_id,\n    ev.conf as conf,\n    ev.remaining_team as visiting_team,\n    ev.winning_team_elo_rating as visiting_team_elo_rating,\n    eh.remaining_team as home_team,\n    eh.losing_team_elo_rating as home_team_elo_rating,\n    ( 1 - (1 / (10 ^ (-( EV.winning_team_elo_rating - EH.losing_team_elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n    r.rand_result,\n    case\n        when\n            ( 1 - (1 / (10 ^ (-( EV.winning_team_elo_rating - EH.losing_team_elo_rating - 100)::real/400)+1))) * 10000 >= r.rand_result\n        then eh.remaining_team\n        else ev.remaining_team\n    end as winning_team\nfrom \"nba\".\"main\".\"nba_schedules\" s\nleft join \"nba\".\"main\".\"nba_random_num_gen\" r on r.game_id = s.game_id\nleft join\n    \"nba\".\"main\".\"playin_sim_r1_end\" eh\n    on r.scenario_id = eh.scenario_id\n    and eh.game_id = s.home_team[7:]\nleft join\n    \"nba\".\"main\".\"playin_sim_r1_end\" ev\n    on r.scenario_id = ev.scenario_id\n    and ev.game_id = s.visiting_team[8:]\nwhere s.type = 'playin_r2'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playin_sim_r2_end": {"database": "nba", "schema": "main", "name": "playin_sim_r2_end", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playin/playin_sim_r2_end.sql", "original_file_path": "models/nba/simulator/playin/playin_sim_r2_end.sql", "unique_id": "model.sports_sims.playin_sim_r2_end", "fqn": ["sports_sims", "nba", "simulator", "playin", "playin_sim_r2_end"], "alias": "playin_sim_r2_end", "checksum": {"name": "sha256", "checksum": "4defbbe4d14a354b1b32157a5c5eb2faa36946155ab174dbb60810761ed807ab"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/simulator/playin/playin_sim_r2_end.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.048217, "relation_name": "\"nba\".\"main\".\"playin_sim_r2_end\"", "raw_code": "select\n    p1.scenario_id,\n    p1.conf,\n    p1.winning_team,\n    p1.conf || '-7' as seed,\n    p1.winning_team_elo_rating\nfrom {{ ref(\"playin_sim_r1_end\") }} p1\nwhere p1.result = 'winner advance'\nunion all\nselect\n    p2.scenario_id,\n    p2.conf as conf,\n    p2.winning_team,\n    p2.conf || '-8' as seed,\n    case\n        when p2.winning_team = p2.home_team\n        then p2.home_team_elo_rating\n        else p2.visiting_team_elo_rating\n    end as elo_rating\nfrom {{ ref(\"playin_sim_r2\") }} p2", "language": "sql", "refs": [{"name": "playin_sim_r1_end", "package": null, "version": null}, {"name": "playin_sim_r2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.playin_sim_r1_end", "model.sports_sims.playin_sim_r2"]}, "compiled_path": "target/compiled/sports_sims/models/nba/simulator/playin/playin_sim_r2_end.sql", "compiled": true, "compiled_code": "select\n    p1.scenario_id,\n    p1.conf,\n    p1.winning_team,\n    p1.conf || '-7' as seed,\n    p1.winning_team_elo_rating\nfrom \"nba\".\"main\".\"playin_sim_r1_end\" p1\nwhere p1.result = 'winner advance'\nunion all\nselect\n    p2.scenario_id,\n    p2.conf as conf,\n    p2.winning_team,\n    p2.conf || '-8' as seed,\n    case\n        when p2.winning_team = p2.home_team\n        then p2.home_team_elo_rating\n        else p2.visiting_team_elo_rating\n    end as elo_rating\nfrom \"nba\".\"main\".\"playin_sim_r2\" p2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playin_sim_r1_end": {"database": "nba", "schema": "main", "name": "playin_sim_r1_end", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playin/playin_sim_r1_end.sql", "original_file_path": "models/nba/simulator/playin/playin_sim_r1_end.sql", "unique_id": "model.sports_sims.playin_sim_r1_end", "fqn": ["sports_sims", "nba", "simulator", "playin", "playin_sim_r1_end"], "alias": "playin_sim_r1_end", "checksum": {"name": "sha256", "checksum": "fa90d0705488ede78b8e89590be053dfcbff809a32aaf96bcb48fd1a92fc402d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/simulator/playin/playin_sim_r1_end.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.04912, "relation_name": "\"nba\".\"main\".\"playin_sim_r1_end\"", "raw_code": "with\n    cte_playin_details as (\n        select\n            s.scenario_id,\n            s.game_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team\n                then s.home_team_elo_rating\n                else s.visiting_team_elo_rating\n            end as winning_team_elo_rating,\n            s.conf as conf,\n            case\n                when s.winning_team = s.home_team then s.visiting_team else s.home_team\n            end as losing_team,\n            case\n                when s.winning_team = s.home_team\n                then s.visiting_team_elo_rating\n                else s.home_team_elo_rating\n            end as losing_team_elo_rating,\n            case\n                when s.game_id in (1231, 1234)\n                then 'winner advance'\n                when s.game_id in (1232, 1235)\n                then 'loser eliminated'\n            end as result\n        from {{ ref(\"playin_sim_r1\") }} s\n    )\n\nselect\n    *,\n    case\n        when game_id in (1231, 1234)\n        then losing_team\n        when game_id in (1232, 1235)\n        then winning_team\n    end as remaining_team\nfrom cte_playin_details", "language": "sql", "refs": [{"name": "playin_sim_r1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.playin_sim_r1"]}, "compiled_path": "target/compiled/sports_sims/models/nba/simulator/playin/playin_sim_r1_end.sql", "compiled": true, "compiled_code": "with\n    cte_playin_details as (\n        select\n            s.scenario_id,\n            s.game_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team\n                then s.home_team_elo_rating\n                else s.visiting_team_elo_rating\n            end as winning_team_elo_rating,\n            s.conf as conf,\n            case\n                when s.winning_team = s.home_team then s.visiting_team else s.home_team\n            end as losing_team,\n            case\n                when s.winning_team = s.home_team\n                then s.visiting_team_elo_rating\n                else s.home_team_elo_rating\n            end as losing_team_elo_rating,\n            case\n                when s.game_id in (1231, 1234)\n                then 'winner advance'\n                when s.game_id in (1232, 1235)\n                then 'loser eliminated'\n            end as result\n        from \"nba\".\"main\".\"playin_sim_r1\" s\n    )\n\nselect\n    *,\n    case\n        when game_id in (1231, 1234)\n        then losing_team\n        when game_id in (1232, 1235)\n        then winning_team\n    end as remaining_team\nfrom cte_playin_details", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.reg_season_simulator": {"database": "nba", "schema": "main", "name": "reg_season_simulator", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/reg_season/reg_season_simulator.sql", "original_file_path": "models/nba/simulator/reg_season/reg_season_simulator.sql", "unique_id": "model.sports_sims.reg_season_simulator", "fqn": ["sports_sims", "nba", "simulator", "reg_season", "reg_season_simulator"], "alias": "reg_season_simulator", "checksum": {"name": "sha256", "checksum": "04e1dc8c85f8042047faabff700ecc6c0a151dc531f5d0a309980aa7be3e73d8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/simulator/reg_season/reg_season_simulator.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.05002, "relation_name": "\"nba\".\"main\".\"reg_season_simulator\"", "raw_code": "select\n    r.scenario_id,\n    s.*,\n    {{\n        elo_calc(\n            \"S.home_team_elo_rating\",\n            \"S.visiting_team_elo_rating\",\n            var(\"nba_elo_offset\"),\n        )\n    }} as home_team_win_probability,\n    r.rand_result,\n    case\n        when lr.include_actuals = true\n        then lr.winning_team_short\n        when\n            {{\n                elo_calc(\n                    \"S.home_team_elo_rating\",\n                    \"S.visiting_team_elo_rating\",\n                    var(\"nba_elo_offset\"),\n                )\n            }} >= r.rand_result\n        then s.home_team\n        else s.visiting_team\n    end as winning_team,\n    coalesce(lr.include_actuals, false) as include_actuals,\n    lr.home_team_score as actual_home_team_score,\n    lr.visiting_team_score as actual_visiting_team_score,\n    lr.margin as actual_margin\nfrom {{ ref(\"nba_schedules\") }} s\nleft join {{ ref(\"nba_random_num_gen\") }} r on r.game_id = s.game_id\nleft join {{ ref(\"nba_latest_results\") }} lr on lr.game_id = s.game_id\nwhere s.type in ('reg_season', 'tournament', 'knockout')", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.elo_calc"], "nodes": ["model.sports_sims.nba_schedules", "model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_latest_results"]}, "compiled_path": "target/compiled/sports_sims/models/nba/simulator/reg_season/reg_season_simulator.sql", "compiled": true, "compiled_code": "select\n    r.scenario_id,\n    s.*,\n    ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n    r.rand_result,\n    case\n        when lr.include_actuals = true\n        then lr.winning_team_short\n        when\n            ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - 100)::real/400)+1))) * 10000 >= r.rand_result\n        then s.home_team\n        else s.visiting_team\n    end as winning_team,\n    coalesce(lr.include_actuals, false) as include_actuals,\n    lr.home_team_score as actual_home_team_score,\n    lr.visiting_team_score as actual_visiting_team_score,\n    lr.margin as actual_margin\nfrom \"nba\".\"main\".\"nba_schedules\" s\nleft join \"nba\".\"main\".\"nba_random_num_gen\" r on r.game_id = s.game_id\nleft join \"nba\".\"main\".\"nba_latest_results\" lr on lr.game_id = s.game_id\nwhere s.type in ('reg_season', 'tournament', 'knockout')", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playoff_sim_r4": {"database": "nba", "schema": "main", "name": "playoff_sim_r4", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/playoff_sim_r4.sql", "original_file_path": "models/nba/simulator/playoffs/playoff_sim_r4.sql", "unique_id": "model.sports_sims.playoff_sim_r4", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "playoff_sim_r4"], "alias": "playoff_sim_r4", "checksum": {"name": "sha256", "checksum": "21b98e6bec4489ec60232cd35c47cbbed3c1c09dce430a816980fe20435c3c5d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/simulator/playoffs/playoff_sim_r4.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.052429, "relation_name": "\"nba\".\"main\".\"playoff_sim_r4\"", "raw_code": "with\n    cte_playoff_sim as ({{ playoff_sim(\"playoffs_r4\", \"playoff_sim_r3\") }})\n\n    {{ playoff_sim_end(\"cte_playoff_sim\") }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "playoff_sim_r3", "package": null, "version": null}, {"name": "playoff_sim_r3", "package": null, "version": null}, {"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.playoff_sim", "macro.sports_sims.playoff_sim_end"], "nodes": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.playoff_sim_r3", "model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "target/compiled/sports_sims/models/nba/simulator/playoffs/playoff_sim_r4.sql", "compiled": true, "compiled_code": "with\n    cte_playoff_sim as (\n-- depends-on: \"nba\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"nba\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"nba\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"nba\".\"main\".\"playoff_sim_r3\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"nba\".\"main\".\"playoff_sim_r3\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r4'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id)\n\n    SELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"nba\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playoff_sim_r2": {"database": "nba", "schema": "main", "name": "playoff_sim_r2", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/playoff_sim_r2.sql", "original_file_path": "models/nba/simulator/playoffs/playoff_sim_r2.sql", "unique_id": "model.sports_sims.playoff_sim_r2", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "playoff_sim_r2"], "alias": "playoff_sim_r2", "checksum": {"name": "sha256", "checksum": "eeb4471676db3fc4b2d6d7370ad5932ce3891999e9690f29889eb941b248be34"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/simulator/playoffs/playoff_sim_r2.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.056698, "relation_name": "\"nba\".\"main\".\"playoff_sim_r2\"", "raw_code": "with\n    cte_playoff_sim as ({{ playoff_sim(\"playoffs_r2\", \"playoff_sim_r1\") }})\n\n    {{ playoff_sim_end(\"cte_playoff_sim\") }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "playoff_sim_r1", "package": null, "version": null}, {"name": "playoff_sim_r1", "package": null, "version": null}, {"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.playoff_sim", "macro.sports_sims.playoff_sim_end"], "nodes": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.playoff_sim_r1", "model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "target/compiled/sports_sims/models/nba/simulator/playoffs/playoff_sim_r2.sql", "compiled": true, "compiled_code": "with\n    cte_playoff_sim as (\n-- depends-on: \"nba\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"nba\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"nba\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"nba\".\"main\".\"playoff_sim_r1\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"nba\".\"main\".\"playoff_sim_r1\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r2'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id)\n\n    SELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"nba\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playoff_sim_r3": {"database": "nba", "schema": "main", "name": "playoff_sim_r3", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/playoff_sim_r3.sql", "original_file_path": "models/nba/simulator/playoffs/playoff_sim_r3.sql", "unique_id": "model.sports_sims.playoff_sim_r3", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "playoff_sim_r3"], "alias": "playoff_sim_r3", "checksum": {"name": "sha256", "checksum": "30d5be6169644113104b99dd123e463dde2288bd3385879e4443301c1cea96b0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/simulator/playoffs/playoff_sim_r3.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.058689, "relation_name": "\"nba\".\"main\".\"playoff_sim_r3\"", "raw_code": "with\n    cte_playoff_sim as ({{ playoff_sim(\"playoffs_r3\", \"playoff_sim_r2\") }})\n\n    {{ playoff_sim_end(\"cte_playoff_sim\") }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "playoff_sim_r2", "package": null, "version": null}, {"name": "playoff_sim_r2", "package": null, "version": null}, {"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.playoff_sim", "macro.sports_sims.playoff_sim_end"], "nodes": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.playoff_sim_r2", "model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "target/compiled/sports_sims/models/nba/simulator/playoffs/playoff_sim_r3.sql", "compiled": true, "compiled_code": "with\n    cte_playoff_sim as (\n-- depends-on: \"nba\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"nba\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"nba\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"nba\".\"main\".\"playoff_sim_r2\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"nba\".\"main\".\"playoff_sim_r2\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r3'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id)\n\n    SELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"nba\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.playoff_sim_r1": {"database": "nba", "schema": "main", "name": "playoff_sim_r1", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/playoff_sim_r1.sql", "original_file_path": "models/nba/simulator/playoffs/playoff_sim_r1.sql", "unique_id": "model.sports_sims.playoff_sim_r1", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "playoff_sim_r1"], "alias": "playoff_sim_r1", "checksum": {"name": "sha256", "checksum": "c6dab9bf2407af574711015457455fe091cdc0c24c057284772a90a95e9f8f5b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/simulator/playoffs/playoff_sim_r1.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.060642, "relation_name": "\"nba\".\"main\".\"playoff_sim_r1\"", "raw_code": "with\n    cte_playoff_sim as ({{ playoff_sim(\"playoffs_r1\", \"initialize_seeding\") }})\n\n    {{ playoff_sim_end(\"cte_playoff_sim\") }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "nba_schedules", "package": null, "version": null}, {"name": "nba_random_num_gen", "package": null, "version": null}, {"name": "initialize_seeding", "package": null, "version": null}, {"name": "initialize_seeding", "package": null, "version": null}, {"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.playoff_sim", "macro.sports_sims.playoff_sim_end"], "nodes": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.initialize_seeding", "model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": "target/compiled/sports_sims/models/nba/simulator/playoffs/playoff_sim_r1.sql", "compiled": true, "compiled_code": "with\n    cte_playoff_sim as (\n-- depends-on: \"nba\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"nba\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"nba\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"nba\".\"main\".\"initialize_seeding\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"nba\".\"main\".\"initialize_seeding\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r1'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id)\n\n    SELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"nba\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.initialize_seeding": {"database": "nba", "schema": "main", "name": "initialize_seeding", "resource_type": "model", "package_name": "sports_sims", "path": "nba/simulator/playoffs/initialize_seeding.sql", "original_file_path": "models/nba/simulator/playoffs/initialize_seeding.sql", "unique_id": "model.sports_sims.initialize_seeding", "fqn": ["sports_sims", "nba", "simulator", "playoffs", "initialize_seeding"], "alias": "initialize_seeding", "checksum": {"name": "sha256", "checksum": "1a24bc59a1b7db7c6f6a566055788e6ab78aec1d7b5c44631009162876427755"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/simulator/playoffs/initialize_seeding.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.062639, "relation_name": "\"nba\".\"main\".\"initialize_seeding\"", "raw_code": "with\n    cte_teams as (\n        select scenario_id, conf, winning_team, seed, elo_rating\n        from {{ ref(\"reg_season_end\") }}\n        where season_rank < 7\n        union all\n        select *\n        from {{ ref(\"playin_sim_r2_end\") }}\n    )\n\nselect t.*, {{ var(\"sim_start_game_id\") }} as sim_start_game_id\nfrom cte_teams t", "language": "sql", "refs": [{"name": "reg_season_end", "package": null, "version": null}, {"name": "playin_sim_r2_end", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sports_sims.reg_season_end", "model.sports_sims.playin_sim_r2_end"]}, "compiled_path": "target/compiled/sports_sims/models/nba/simulator/playoffs/initialize_seeding.sql", "compiled": true, "compiled_code": "with\n    cte_teams as (\n        select scenario_id, conf, winning_team, seed, elo_rating\n        from \"nba\".\"main\".\"reg_season_end\"\n        where season_rank < 7\n        union all\n        select *\n        from \"nba\".\"main\".\"playin_sim_r2_end\"\n    )\n\nselect t.*, 0 as sim_start_game_id\nfrom cte_teams t", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_raw_results": {"database": "nba", "schema": "main", "name": "nba_raw_results", "resource_type": "model", "package_name": "sports_sims", "path": "nba/raw/nba_raw_results.sql", "original_file_path": "models/nba/raw/nba_raw_results.sql", "unique_id": "model.sports_sims.nba_raw_results", "fqn": ["sports_sims", "nba", "raw", "nba_raw_results"], "alias": "nba_raw_results", "checksum": {"name": "sha256", "checksum": "9306f3e2ff90062e2753b66a6338d6086a439ba661639463ffc0eeaddeb58943"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/raw/nba_raw_results.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.0645819, "relation_name": "\"nba\".\"main\".\"nba_raw_results\"", "raw_code": "with\n    cte_base as (select * from {{ source(\"nba_dlt\", \"games\") }}),\n    cte_seed as (select * from {{ source(\"nba\", \"nba_results\") }})\nselect\n    coalesce(a.date, strptime(b.\"Date\", '%a %b %-d %Y'))::date as \"date\",\n    b.\"Start (ET)\" as \"Start (ET)\",\n    coalesce(away.team_long, b.\"Visitor/Neutral\") as \"VisTm\",\n    coalesce(a.away_points, b.pts)::int as visiting_team_score,\n    coalesce(home.team_long, b.\"Home/Neutral\") as \"HomeTm\",\n    coalesce(a.home_points, b.pts_1)::int as home_team_score,\n    b.\"Attend.\" as \"Attend.\",\n    b.arena as arena,\n    b.notes as notes,\n    case\n        when visiting_team_score > home_team_score then vistm else hometm\n    end as winner,\n    case when visiting_team_score > home_team_score then hometm else vistm end as loser,\n    case\n        when visiting_team_score > home_team_score\n        then visiting_team_score\n        else home_team_score\n    end as winner_pts,\n    case\n        when visiting_team_score > home_team_score\n        then home_team_score\n        else visiting_team_score\n    end as loser_pts\nfrom cte_base a\nleft join\n    {{ ref(\"nba_raw_team_ratings\") }} home on home.alt_key = a.home_team_abbreviation\nleft join\n    {{ ref(\"nba_raw_team_ratings\") }} away on away.alt_key = a.away_team_abbreviation\nfull outer join\n    cte_seed b\n    on strptime(b.\"Date\", '%a %b %-d %Y')::date = a.date\n    and b.\"Home/Neutral\" = home.team_long\nwhere a.date <= '{{ var( 'nba_start_date' ) }}'", "language": "sql", "refs": [{"name": "nba_raw_team_ratings", "package": null, "version": null}, {"name": "nba_raw_team_ratings", "package": null, "version": null}], "sources": [["nba_dlt", "games"], ["nba", "nba_results"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nba_dlt.games", "source.sports_sims.nba.nba_results", "model.sports_sims.nba_raw_team_ratings"]}, "compiled_path": "target/compiled/sports_sims/models/nba/raw/nba_raw_results.sql", "compiled": true, "compiled_code": "with\n    cte_base as (select * from 'dlt/data/nba/nba_data/games/*.csv'),\n    cte_seed as (select * from 'data/nba/nba_results.csv')\nselect\n    coalesce(a.date, strptime(b.\"Date\", '%a %b %-d %Y'))::date as \"date\",\n    b.\"Start (ET)\" as \"Start (ET)\",\n    coalesce(away.team_long, b.\"Visitor/Neutral\") as \"VisTm\",\n    coalesce(a.away_points, b.pts)::int as visiting_team_score,\n    coalesce(home.team_long, b.\"Home/Neutral\") as \"HomeTm\",\n    coalesce(a.home_points, b.pts_1)::int as home_team_score,\n    b.\"Attend.\" as \"Attend.\",\n    b.arena as arena,\n    b.notes as notes,\n    case\n        when visiting_team_score > home_team_score then vistm else hometm\n    end as winner,\n    case when visiting_team_score > home_team_score then hometm else vistm end as loser,\n    case\n        when visiting_team_score > home_team_score\n        then visiting_team_score\n        else home_team_score\n    end as winner_pts,\n    case\n        when visiting_team_score > home_team_score\n        then home_team_score\n        else visiting_team_score\n    end as loser_pts\nfrom cte_base a\nleft join\n    \"nba\".\"main\".\"nba_raw_team_ratings\" home on home.alt_key = a.home_team_abbreviation\nleft join\n    \"nba\".\"main\".\"nba_raw_team_ratings\" away on away.alt_key = a.away_team_abbreviation\nfull outer join\n    cte_seed b\n    on strptime(b.\"Date\", '%a %b %-d %Y')::date = a.date\n    and b.\"Home/Neutral\" = home.team_long\nwhere a.date <= '2024-04-15'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_raw_schedule": {"database": "nba", "schema": "main", "name": "nba_raw_schedule", "resource_type": "model", "package_name": "sports_sims", "path": "nba/raw/nba_raw_schedule.sql", "original_file_path": "models/nba/raw/nba_raw_schedule.sql", "unique_id": "model.sports_sims.nba_raw_schedule", "fqn": ["sports_sims", "nba", "raw", "nba_raw_schedule"], "alias": "nba_raw_schedule", "checksum": {"name": "sha256", "checksum": "5570cd21daefa68975374584fded98e8a6fa5e379a2fefc21dede78fe5e2801d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "target/run/sports_sims/models/nba/raw/nba_raw_schedule.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.239071, "relation_name": "\"nba\".\"main\".\"nba_raw_schedule\"", "raw_code": "select\n    id,\n    type,\n    strptime(\"Year\" || \"Date\", '%Y %b %-d')::date as \"date\",\n    \"Start (ET)\",\n    \"Visitor/Neutral\" as \"VisTm\",\n    \"Home/Neutral\" as \"HomeTm\",\n    \"Attend.\",\n    arena,\n    notes,\n    series_id\nfrom {{ source(\"nba\", \"nba_schedule\") }}", "language": "sql", "refs": [], "sources": [["nba", "nba_schedule"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nba.nba_schedule"]}, "compiled_path": "target/compiled/sports_sims/models/nba/raw/nba_raw_schedule.sql", "compiled": true, "compiled_code": "select\n    id,\n    type,\n    strptime(\"Year\" || \"Date\", '%Y %b %-d')::date as \"date\",\n    \"Start (ET)\",\n    \"Visitor/Neutral\" as \"VisTm\",\n    \"Home/Neutral\" as \"HomeTm\",\n    \"Attend.\",\n    arena,\n    notes,\n    series_id\nfrom 'data/nba/nba_schedule.csv'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_raw_team_ratings": {"database": "nba", "schema": "main", "name": "nba_raw_team_ratings", "resource_type": "model", "package_name": "sports_sims", "path": "nba/raw/nba_raw_team_ratings.sql", "original_file_path": "models/nba/raw/nba_raw_team_ratings.sql", "unique_id": "model.sports_sims.nba_raw_team_ratings", "fqn": ["sports_sims", "nba", "raw", "nba_raw_team_ratings"], "alias": "nba_raw_team_ratings", "checksum": {"name": "sha256", "checksum": "3da8bfc5dedf43918a1a27faccb36ac0cbca001f8b8a9642cea17fbc479155c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "target/run/sports_sims/models/nba/raw/nba_raw_team_ratings.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.2393558, "relation_name": "\"nba\".\"main\".\"nba_raw_team_ratings\"", "raw_code": "select * from {{ source(\"nba\", \"nba_team_ratings\") }}", "language": "sql", "refs": [], "sources": [["nba", "nba_team_ratings"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nba.nba_team_ratings"]}, "compiled_path": "target/compiled/sports_sims/models/nba/raw/nba_raw_team_ratings.sql", "compiled": true, "compiled_code": "select * from 'data/nba/nba_team_ratings.csv'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_raw_xf_series_to_seed": {"database": "nba", "schema": "main", "name": "nba_raw_xf_series_to_seed", "resource_type": "model", "package_name": "sports_sims", "path": "nba/raw/nba_raw_xf_series_to_seed.sql", "original_file_path": "models/nba/raw/nba_raw_xf_series_to_seed.sql", "unique_id": "model.sports_sims.nba_raw_xf_series_to_seed", "fqn": ["sports_sims", "nba", "raw", "nba_raw_xf_series_to_seed"], "alias": "nba_raw_xf_series_to_seed", "checksum": {"name": "sha256", "checksum": "45c8b0161d0d6b491916fe092256d864534fe2caf3f574a5769927d2eb85747b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sports_sims://models/_nba_docs.yml", "build_path": "target/run/sports_sims/models/nba/raw/nba_raw_xf_series_to_seed.sql", "unrendered_config": {"tags": "nba", "materialized": "table"}, "created_at": 1726368442.23957, "relation_name": "\"nba\".\"main\".\"nba_raw_xf_series_to_seed\"", "raw_code": "select * from {{ source(\"nba\", \"xf_series_to_seed\") }} group by all", "language": "sql", "refs": [], "sources": [["nba", "xf_series_to_seed"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sports_sims.nba.xf_series_to_seed"]}, "compiled_path": "target/compiled/sports_sims/models/nba/raw/nba_raw_xf_series_to_seed.sql", "compiled": true, "compiled_code": "select * from 'data/nba/xf_series_to_seed.csv' group by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.sports_sims.nba_elo_rollforward": {"database": "nba", "schema": "main", "name": "nba_elo_rollforward", "resource_type": "model", "package_name": "sports_sims", "path": "nba/prep/nba_elo_rollforward.py", "original_file_path": "models/nba/prep/nba_elo_rollforward.py", "unique_id": "model.sports_sims.nba_elo_rollforward", "fqn": ["sports_sims", "nba", "prep", "nba_elo_rollforward"], "alias": "nba_elo_rollforward", "checksum": {"name": "sha256", "checksum": "123cfb1685c00c54ddcb21d2b795b8482032effe8fe20296042d52a63c692a3a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["nba"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "config_keys_used": ["nba_elo_offset"], "config_keys_defaults": [100.0]}, "tags": ["nba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/sports_sims/models/nba/prep/nba_elo_rollforward.py", "unrendered_config": {"tags": "nba", "materialized": "table", "config_keys_used": ["nba_elo_offset"], "config_keys_defaults": [100.0]}, "created_at": 1726368442.069578, "relation_name": "\"nba\".\"main\".\"nba_elo_rollforward\"", "raw_code": "import pandas as pd\n\ndef calc_elo_diff(margin: float, game_result: float, home_elo: float, visiting_elo: float, home_adv: float) -> float:\n    # just need to make sure i really get a game result that is float (annoying)\n    game_result = float(game_result)\n    elo_diff = -float((visiting_elo - home_elo - home_adv))\n    raw_elo = 20.0 * (( game_result ) - (1.0 / (10.0 ** ( elo_diff / 400.0) + 1.0)))\n    if game_result == 1:\n       elo_chg =  raw_elo * ((margin + 3)** 0.8 ) / (7.5 + (0.006 * elo_diff ))\n    elif game_result == 0:\n       elo_chg =  raw_elo * ((margin + 3)** 0.8 ) / (7.5 + (0.006 * -elo_diff ))\n    return elo_chg\n\ndef model(dbt, sess):\n    # get the existing elo ratings for the teams\n    home_adv = dbt.config.get(\"nba_elo_offset\",100.0)\n    team_ratings = dbt.ref(\"nba_raw_team_ratings\").df()\n    original_elo = dict(zip(team_ratings[\"team_long\"], team_ratings[\"elo_rating\"].astype(float)))\n    working_elo = original_elo.copy()\n\n    # loop over the historical game data and update the elo ratings as we go\n    nba_elo_latest = (dbt.ref(\"nba_latest_results\")\n        .project(\"game_id, visiting_team, home_team, winning_team, margin, game_result\")\n        .order(\"game_id\")\n    )\n    nba_elo_latest.execute()\n    columns = [\"game_id\", \"visiting_team\", \"visiting_team_elo_rating\", \"home_team\", \"home_team_elo_rating\", \"winning_team\", \"elo_change\"]\n    rows = []\n    for (game_id, vteam, hteam, winner, margin, game_result) in nba_elo_latest.fetchall():\n        helo, velo = working_elo[hteam], working_elo[vteam]\n        elo_change =  calc_elo_diff(margin, game_result, helo, velo, home_adv)\n        rows.append((game_id, vteam, velo, hteam, helo, winner, elo_change))\n        working_elo[hteam] -= elo_change\n        working_elo[vteam] += elo_change\n\n    return pd.DataFrame(columns=columns, data=rows)", "language": "python", "refs": [{"name": "nba_raw_team_ratings", "package": null, "version": null}, {"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": ["model.sports_sims.nba_raw_team_ratings", "model.sports_sims.nba_latest_results"]}, "compiled_path": "target/compiled/sports_sims/models/nba/prep/nba_elo_rollforward.py", "compiled": true, "compiled_code": "import pandas as pd\n\ndef calc_elo_diff(margin: float, game_result: float, home_elo: float, visiting_elo: float, home_adv: float) -> float:\n    # just need to make sure i really get a game result that is float (annoying)\n    game_result = float(game_result)\n    elo_diff = -float((visiting_elo - home_elo - home_adv))\n    raw_elo = 20.0 * (( game_result ) - (1.0 / (10.0 ** ( elo_diff / 400.0) + 1.0)))\n    if game_result == 1:\n       elo_chg =  raw_elo * ((margin + 3)** 0.8 ) / (7.5 + (0.006 * elo_diff ))\n    elif game_result == 0:\n       elo_chg =  raw_elo * ((margin + 3)** 0.8 ) / (7.5 + (0.006 * -elo_diff ))\n    return elo_chg\n\ndef model(dbt, sess):\n    # get the existing elo ratings for the teams\n    home_adv = dbt.config.get(\"nba_elo_offset\",100.0)\n    team_ratings = dbt.ref(\"nba_raw_team_ratings\").df()\n    original_elo = dict(zip(team_ratings[\"team_long\"], team_ratings[\"elo_rating\"].astype(float)))\n    working_elo = original_elo.copy()\n\n    # loop over the historical game data and update the elo ratings as we go\n    nba_elo_latest = (dbt.ref(\"nba_latest_results\")\n        .project(\"game_id, visiting_team, home_team, winning_team, margin, game_result\")\n        .order(\"game_id\")\n    )\n    nba_elo_latest.execute()\n    columns = [\"game_id\", \"visiting_team\", \"visiting_team_elo_rating\", \"home_team\", \"home_team_elo_rating\", \"winning_team\", \"elo_change\"]\n    rows = []\n    for (game_id, vteam, hteam, winner, margin, game_result) in nba_elo_latest.fetchall():\n        helo, velo = working_elo[hteam], working_elo[vteam]\n        elo_change =  calc_elo_diff(margin, game_result, helo, velo, home_adv)\n        rows.append((game_id, vteam, velo, hteam, helo, winner, elo_change))\n        working_elo[hteam] -= elo_change\n        working_elo[vteam] += elo_change\n\n    return pd.DataFrame(columns=columns, data=rows)\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"nba_latest_results\": \"\\\"nba\\\".\\\"main\\\".\\\"nba_latest_results\\\"\", \"nba_raw_team_ratings\": \"\\\"nba\\\".\\\"main\\\".\\\"nba_raw_team_ratings\\\"\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {'nba_elo_offset': 100.0}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"nba\"\n    schema = \"main\"\n    identifier = \"nba_elo_rollforward\"\n    \n    def __repr__(self):\n        return '\"nba\".\"main\".\"nba_elo_rollforward\"'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "operation.sports_sims.sports_sims-on-run-start-0": {"database": "nba", "schema": "main", "name": "sports_sims-on-run-start-0", "resource_type": "operation", "package_name": "sports_sims", "path": "hooks/sports_sims-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.sports_sims.sports_sims-on-run-start-0", "fqn": ["sports_sims", "hooks", "sports_sims-on-run-start-0"], "alias": "sports_sims-on-run-start-0", "checksum": {"name": "sha256", "checksum": "88ba3a70800aaedbc42998f0f590de5c0609e308ac7672c9c7e1299aaba719df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.1989172, "relation_name": null, "raw_code": "{{ register_upstream_external_models() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_duckdb.register_upstream_external_models"], "nodes": []}, "compiled_path": "target/compiled/sports_sims/./dbt_project.yml/hooks/sports_sims-on-run-start-0.sql", "compiled": true, "compiled_code": "\n\n\n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n    \n      \n      \n      \n    \n  \n    \n  \n\n  \n    \n      \n      \n      \n    \n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n\n  \n    \n  \n    \n  \n    \n  \n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0": {"database": "nba", "schema": "main_dbt_test__audit", "name": "empty_table_nba_raw_schedule_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_raw_schedule_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0", "fqn": ["sports_sims", "empty_table_nba_raw_schedule_"], "alias": "empty_table_nba_raw_schedule_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.297292, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_raw_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.sports_sims.nba_raw_schedule"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_raw_schedule", "attached_node": "model.sports_sims.nba_raw_schedule", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_raw_schedule')) }}"}, "namespace": null}}, "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759": {"database": "nba", "schema": "main_dbt_test__audit", "name": "empty_table_nba_raw_team_ratings_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_raw_team_ratings_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759", "fqn": ["sports_sims", "empty_table_nba_raw_team_ratings_"], "alias": "empty_table_nba_raw_team_ratings_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.303662, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_raw_team_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.sports_sims.nba_raw_team_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_raw_team_ratings", "attached_node": "model.sports_sims.nba_raw_team_ratings", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_raw_team_ratings')) }}"}, "namespace": null}}, "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f": {"database": "nba", "schema": "main_dbt_test__audit", "name": "empty_table_nba_raw_xf_series_to_seed_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_raw_xf_series_to_seed_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f", "fqn": ["sports_sims", "empty_table_nba_raw_xf_series_to_seed_"], "alias": "empty_table_nba_raw_xf_series_to_seed_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.305134, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_raw_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.sports_sims.nba_raw_xf_series_to_seed"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_raw_xf_series_to_seed", "attached_node": "model.sports_sims.nba_raw_xf_series_to_seed", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_raw_xf_series_to_seed')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f": {"database": "nba", "schema": "main_dbt_test__audit", "name": "unique_nba_latest_elo_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_latest_elo_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f", "fqn": ["sports_sims", "unique_nba_latest_elo_team"], "alias": "unique_nba_latest_elo_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.3064902, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sports_sims.nba_latest_elo"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_latest_elo", "attached_node": "model.sports_sims.nba_latest_elo", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_latest_elo')) }}"}, "namespace": null}}, "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f": {"database": "nba", "schema": "main_dbt_test__audit", "name": "empty_table_nba_latest_elo_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_latest_elo_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f", "fqn": ["sports_sims", "empty_table_nba_latest_elo_"], "alias": "empty_table_nba_latest_elo_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.307046, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_elo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.sports_sims.nba_latest_elo"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_latest_elo", "attached_node": "model.sports_sims.nba_latest_elo", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_latest_elo')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46": {"database": "nba", "schema": "main_dbt_test__audit", "name": "unique_nba_latest_results_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_latest_results_game_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46", "fqn": ["sports_sims", "unique_nba_latest_results_game_id"], "alias": "unique_nba_latest_results_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.309039, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_game_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864", "fqn": ["sports_sims", "not_null_nba_latest_results_game_id"], "alias": "not_null_nba_latest_results_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.309587, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_home_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_home_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c", "fqn": ["sports_sims", "not_null_nba_latest_results_home_team"], "alias": "not_null_nba_latest_results_home_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.310153, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_team", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_home_team_score", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_home_team_score.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd", "fqn": ["sports_sims", "not_null_nba_latest_results_home_team_score"], "alias": "not_null_nba_latest_results_home_team_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.310689, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_team_score", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_score", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_visiting_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_visiting_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2", "fqn": ["sports_sims", "not_null_nba_latest_results_visiting_team"], "alias": "not_null_nba_latest_results_visiting_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.311297, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visiting_team", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_visiting_team_score", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_visiting_team_score.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf", "fqn": ["sports_sims", "not_null_nba_latest_results_visiting_team_score"], "alias": "not_null_nba_latest_results_visiting_team_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.311834, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visiting_team_score", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team_score", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_winning_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_winning_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f", "fqn": ["sports_sims", "not_null_nba_latest_results_winning_team"], "alias": "not_null_nba_latest_results_winning_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.3123589, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "winning_team", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "winning_team", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_latest_results_losing_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_latest_results_losing_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2", "fqn": ["sports_sims", "not_null_nba_latest_results_losing_team"], "alias": "not_null_nba_latest_results_losing_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.312887, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_latest_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_latest_results"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "losing_team", "file_key_name": "models.nba_latest_results", "attached_node": "model.sports_sims.nba_latest_results", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "losing_team", "model": "{{ get_where_subquery(ref('nba_latest_results')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b": {"database": "nba", "schema": "main_dbt_test__audit", "name": "unique_nba_schedules_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_schedules_game_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b", "fqn": ["sports_sims", "unique_nba_schedules_game_id"], "alias": "unique_nba_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.313411, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules", "test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_schedules_game_id", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_schedules_game_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1", "fqn": ["sports_sims", "not_null_nba_schedules_game_id"], "alias": "not_null_nba_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.313979, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "game_id", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}}, "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19": {"database": "nba", "schema": "main_dbt_test__audit", "name": "accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout", "resource_type": "test", "package_name": "sports_sims", "path": "accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19", "fqn": ["sports_sims", "accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout"], "alias": "accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec"}, "created_at": 1726368442.3145149, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_nba_schedules_61237358f43ada87f004b90e5190a9ec\") }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["reg_season", "playin_r1", "playin_r2", "playoffs_r1", "playoffs_r2", "playoffs_r3", "playoffs_r4", "tournament", "knockout"], "column_name": "type", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_schedules_visiting_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_schedules_visiting_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe", "fqn": ["sports_sims", "not_null_nba_schedules_visiting_team"], "alias": "not_null_nba_schedules_visiting_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.318641, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visiting_team", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_schedules_home_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_schedules_home_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c", "fqn": ["sports_sims", "not_null_nba_schedules_home_team"], "alias": "not_null_nba_schedules_home_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.3191822, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_schedules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_schedules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "home_team", "file_key_name": "models.nba_schedules", "attached_node": "model.sports_sims.nba_schedules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team", "model": "{{ get_where_subquery(ref('nba_schedules')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_ratings_team.de3ad0b568": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_ratings_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_ratings_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_ratings_team.de3ad0b568", "fqn": ["sports_sims", "not_null_nba_ratings_team"], "alias": "not_null_nba_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.3197272, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b": {"database": "nba", "schema": "main_dbt_test__audit", "name": "unique_nba_ratings_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_ratings_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b", "fqn": ["sports_sims", "unique_nba_ratings_team"], "alias": "unique_nba_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.320252, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_ratings_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_ratings_team_long.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7", "fqn": ["sports_sims", "not_null_nba_ratings_team_long"], "alias": "not_null_nba_ratings_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.32086, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_ratings_team_long.6615b31795": {"database": "nba", "schema": "main_dbt_test__audit", "name": "unique_nba_ratings_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_ratings_team_long.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_ratings_team_long.6615b31795", "fqn": ["sports_sims", "unique_nba_ratings_team_long"], "alias": "unique_nba_ratings_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.321378, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_ratings_conf", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_ratings_conf.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6", "fqn": ["sports_sims", "not_null_nba_ratings_conf"], "alias": "not_null_nba_ratings_conf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.321895, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "conf", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "conf", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}}, "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69": {"database": "nba", "schema": "main_dbt_test__audit", "name": "accepted_values_nba_ratings_conf__East__West", "resource_type": "test", "package_name": "sports_sims", "path": "accepted_values_nba_ratings_conf__East__West.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69", "fqn": ["sports_sims", "accepted_values_nba_ratings_conf__East__West"], "alias": "accepted_values_nba_ratings_conf__East__West", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.322415, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "conf", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["East", "West"], "column_name": "conf", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_ratings_elo_rating", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_ratings_elo_rating.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393", "fqn": ["sports_sims", "not_null_nba_ratings_elo_rating"], "alias": "not_null_nba_ratings_elo_rating", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.3241441, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "elo_rating", "file_key_name": "models.nba_ratings", "attached_node": "model.sports_sims.nba_ratings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "elo_rating", "model": "{{ get_where_subquery(ref('nba_ratings')) }}"}, "namespace": null}}, "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01": {"database": "nba", "schema": "main_dbt_test__audit", "name": "empty_table_nba_reg_season_schedule_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_reg_season_schedule_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01", "fqn": ["sports_sims", "empty_table_nba_reg_season_schedule_"], "alias": "empty_table_nba_reg_season_schedule_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.324675, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_reg_season_schedule", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.sports_sims.nba_reg_season_schedule"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_reg_season_schedule", "attached_node": "model.sports_sims.nba_reg_season_schedule", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_reg_season_schedule')) }}"}, "namespace": null}}, "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c": {"database": "nba", "schema": "main_dbt_test__audit", "name": "empty_table_nba_random_num_gen_", "resource_type": "test", "package_name": "sports_sims", "path": "empty_table_nba_random_num_gen_.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c", "fqn": ["sports_sims", "empty_table_nba_random_num_gen_"], "alias": "empty_table_nba_random_num_gen_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.326078, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_random_num_gen", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sports_sims.test_empty_table", "macro.dbt.get_where_subquery"], "nodes": ["model.sports_sims.nba_random_num_gen"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nba_random_num_gen", "attached_node": "model.sports_sims.nba_random_num_gen", "test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('nba_random_num_gen')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_teams_team_long.a9afa2e873": {"database": "nba", "schema": "main_dbt_test__audit", "name": "unique_nba_teams_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_teams_team_long.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_teams_team_long.a9afa2e873", "fqn": ["sports_sims", "unique_nba_teams_team_long"], "alias": "unique_nba_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.327381, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sports_sims.nba_teams"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nba_teams", "attached_node": "model.sports_sims.nba_teams", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nba_teams')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_teams_team_long", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_teams_team_long.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e", "fqn": ["sports_sims", "not_null_nba_teams_team_long"], "alias": "not_null_nba_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.3279018, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_teams"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team_long", "file_key_name": "models.nba_teams", "attached_node": "model.sports_sims.nba_teams", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('nba_teams')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1": {"database": "nba", "schema": "main_dbt_test__audit", "name": "unique_nba_teams_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_teams_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1", "fqn": ["sports_sims", "unique_nba_teams_team"], "alias": "unique_nba_teams_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.3284302, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sports_sims.nba_teams"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_teams", "attached_node": "model.sports_sims.nba_teams", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_teams')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_teams_team.6d25569f6c": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_teams_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_teams_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_teams_team.6d25569f6c", "fqn": ["sports_sims", "not_null_nba_teams_team"], "alias": "not_null_nba_teams_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.329045, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_teams", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_teams"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_teams", "attached_node": "model.sports_sims.nba_teams", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_teams')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb": {"database": "nba", "schema": "main_dbt_test__audit", "name": "unique_nba_vegas_wins_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_vegas_wins_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb", "fqn": ["sports_sims", "unique_nba_vegas_wins_team"], "alias": "unique_nba_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.329566, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sports_sims.nba_vegas_wins"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_vegas_wins", "attached_node": "model.sports_sims.nba_vegas_wins", "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_vegas_wins')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_vegas_wins_team.30210c099e": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_vegas_wins_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_vegas_wins_team.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_vegas_wins_team.30210c099e", "fqn": ["sports_sims", "not_null_nba_vegas_wins_team"], "alias": "not_null_nba_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.330082, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_vegas_wins"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.nba_vegas_wins", "attached_node": "model.sports_sims.nba_vegas_wins", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('nba_vegas_wins')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_vegas_wins_win_total", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_vegas_wins_win_total.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b", "fqn": ["sports_sims", "not_null_nba_vegas_wins_win_total"], "alias": "not_null_nba_vegas_wins_win_total", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.3305972, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_vegas_wins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_vegas_wins"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "win_total", "file_key_name": "models.nba_vegas_wins", "attached_node": "model.sports_sims.nba_vegas_wins", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "win_total", "model": "{{ get_where_subquery(ref('nba_vegas_wins')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_xf_series_to_seed_series_id", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_xf_series_to_seed_series_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf", "fqn": ["sports_sims", "not_null_nba_xf_series_to_seed_series_id"], "alias": "not_null_nba_xf_series_to_seed_series_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.3311071, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "series_id", "file_key_name": "models.nba_xf_series_to_seed", "attached_node": "model.sports_sims.nba_xf_series_to_seed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "series_id", "model": "{{ get_where_subquery(ref('nba_xf_series_to_seed')) }}"}, "namespace": null}}, "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed": {"database": "nba", "schema": "main_dbt_test__audit", "name": "unique_nba_xf_series_to_seed_series_id", "resource_type": "test", "package_name": "sports_sims", "path": "unique_nba_xf_series_to_seed_series_id.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed", "fqn": ["sports_sims", "unique_nba_xf_series_to_seed_series_id"], "alias": "unique_nba_xf_series_to_seed_series_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.3316648, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "series_id", "file_key_name": "models.nba_xf_series_to_seed", "attached_node": "model.sports_sims.nba_xf_series_to_seed", "test_metadata": {"name": "unique", "kwargs": {"column_name": "series_id", "model": "{{ get_where_subquery(ref('nba_xf_series_to_seed')) }}"}, "namespace": null}}, "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82": {"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_nba_xf_series_to_seed_seed", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_nba_xf_series_to_seed_seed.sql", "original_file_path": "models/_nba_docs.yml", "unique_id": "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82", "fqn": ["sports_sims", "not_null_nba_xf_series_to_seed_seed"], "alias": "not_null_nba_xf_series_to_seed_seed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.332187, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nba_xf_series_to_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sports_sims.nba_xf_series_to_seed"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "seed", "file_key_name": "models.nba_xf_series_to_seed", "attached_node": "model.sports_sims.nba_xf_series_to_seed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "seed", "model": "{{ get_where_subquery(ref('nba_xf_series_to_seed')) }}"}, "namespace": null}}, "seed.sports_sims.xf_series_to_seed": {"database": "nba", "schema": "main", "name": "xf_series_to_seed", "resource_type": "seed", "package_name": "sports_sims", "path": "nba/xf_series_to_seed.csv", "original_file_path": "data/nba/xf_series_to_seed.csv", "unique_id": "seed.sports_sims.xf_series_to_seed", "fqn": ["sports_sims", "nba", "xf_series_to_seed"], "alias": "xf_series_to_seed", "checksum": {"name": "sha256", "checksum": "bb1257169dab1c51c4f331fc07d4f31884739b01d0cd8d3c82b744178e84e65b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368524.147476, "relation_name": "\"nba\".\"main\".\"xf_series_to_seed\"", "raw_code": "", "root_path": "/Users/leifangyu/workspace/Spider2-C/evaluation_examples/dbt/source/dbt_nba", "depends_on": {"macros": []}}, "seed.sports_sims.nba_schedule": {"database": "nba", "schema": "main", "name": "nba_schedule", "resource_type": "seed", "package_name": "sports_sims", "path": "nba/nba_schedule.csv", "original_file_path": "data/nba/nba_schedule.csv", "unique_id": "seed.sports_sims.nba_schedule", "fqn": ["sports_sims", "nba", "nba_schedule"], "alias": "nba_schedule", "checksum": {"name": "sha256", "checksum": "ccde118805c33ed4a19f9705c6da3f8e8a660a098f9dc38dae5e22ceeb220c17"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368524.1567528, "relation_name": "\"nba\".\"main\".\"nba_schedule\"", "raw_code": "", "root_path": "/Users/leifangyu/workspace/Spider2-C/evaluation_examples/dbt/source/dbt_nba", "depends_on": {"macros": []}}, "seed.sports_sims.nba_team_ratings": {"database": "nba", "schema": "main", "name": "nba_team_ratings", "resource_type": "seed", "package_name": "sports_sims", "path": "nba/nba_team_ratings.csv", "original_file_path": "data/nba/nba_team_ratings.csv", "unique_id": "seed.sports_sims.nba_team_ratings", "fqn": ["sports_sims", "nba", "nba_team_ratings"], "alias": "nba_team_ratings", "checksum": {"name": "sha256", "checksum": "24090113ff0671313881af475d5238ad5e14c0714693bd76fc6f7ce703a7d3e0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368524.157587, "relation_name": "\"nba\".\"main\".\"nba_team_ratings\"", "raw_code": "", "root_path": "/Users/leifangyu/workspace/Spider2-C/evaluation_examples/dbt/source/dbt_nba", "depends_on": {"macros": []}}, "seed.sports_sims.nfl_team_ratings": {"database": "nba", "schema": "main", "name": "nfl_team_ratings", "resource_type": "seed", "package_name": "sports_sims", "path": "nfl/nfl_team_ratings.csv", "original_file_path": "data/nfl/nfl_team_ratings.csv", "unique_id": "seed.sports_sims.nfl_team_ratings", "fqn": ["sports_sims", "nfl", "nfl_team_ratings"], "alias": "nfl_team_ratings", "checksum": {"name": "sha256", "checksum": "f750b63437f721230b5596087ada78bb09b52993fde43fcec0581ba33ac651ca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368524.15836, "relation_name": "\"nba\".\"main\".\"nfl_team_ratings\"", "raw_code": "", "root_path": "/Users/leifangyu/workspace/Spider2-C/evaluation_examples/dbt/source/dbt_nba", "depends_on": {"macros": []}}, "seed.sports_sims.nfl_results": {"database": "nba", "schema": "main", "name": "nfl_results", "resource_type": "seed", "package_name": "sports_sims", "path": "nfl/nfl_results.csv", "original_file_path": "data/nfl/nfl_results.csv", "unique_id": "seed.sports_sims.nfl_results", "fqn": ["sports_sims", "nfl", "nfl_results"], "alias": "nfl_results", "checksum": {"name": "sha256", "checksum": "c58f4f5d7a45ebf5e704df554b3c2bb27027d3836b28ffbc28c162c5336570dc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368524.1591098, "relation_name": "\"nba\".\"main\".\"nfl_results\"", "raw_code": "", "root_path": "/Users/leifangyu/workspace/Spider2-C/evaluation_examples/dbt/source/dbt_nba", "depends_on": {"macros": []}}, "seed.sports_sims.nfl_schedule": {"database": "nba", "schema": "main", "name": "nfl_schedule", "resource_type": "seed", "package_name": "sports_sims", "path": "nfl/nfl_schedule.csv", "original_file_path": "data/nfl/nfl_schedule.csv", "unique_id": "seed.sports_sims.nfl_schedule", "fqn": ["sports_sims", "nfl", "nfl_schedule"], "alias": "nfl_schedule", "checksum": {"name": "sha256", "checksum": "ea77368970f47494f6fe10b92b948bd278db326856a34d892ab239a74c3969fd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368524.159901, "relation_name": "\"nba\".\"main\".\"nfl_schedule\"", "raw_code": "", "root_path": "/Users/leifangyu/workspace/Spider2-C/evaluation_examples/dbt/source/dbt_nba", "depends_on": {"macros": []}}, "seed.sports_sims.nba_results": {"database": "nba", "schema": "main", "name": "nba_results", "resource_type": "seed", "package_name": "sports_sims", "path": "nba/nba_results.csv", "original_file_path": "data/nba/nba_results.csv", "unique_id": "seed.sports_sims.nba_results", "fqn": ["sports_sims", "nba", "nba_results"], "alias": "nba_results", "checksum": {"name": "sha256", "checksum": "3e9a3f6fca4f80bf0d7bcd863aa8ac5837ea9f33424db9cf0f35ba464ed17ac6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368524.160637, "relation_name": "\"nba\".\"main\".\"nba_results\"", "raw_code": "", "root_path": "/Users/leifangyu/workspace/Spider2-C/evaluation_examples/dbt/source/dbt_nba", "depends_on": {"macros": []}}, "seed.sports_sims.nba_elo": {"database": "nba", "schema": "main", "name": "nba_elo", "resource_type": "seed", "package_name": "sports_sims", "path": "nba/nba_elo.csv", "original_file_path": "data/nba/nba_elo.csv", "unique_id": "seed.sports_sims.nba_elo", "fqn": ["sports_sims", "nba", "nba_elo"], "alias": "nba_elo", "checksum": {"name": "path", "checksum": "data/nba/nba_elo.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368524.161371, "relation_name": "\"nba\".\"main\".\"nba_elo\"", "raw_code": "", "root_path": "/Users/leifangyu/workspace/Spider2-C/evaluation_examples/dbt/source/dbt_nba", "depends_on": {"macros": []}}}, "sources": {"source.sports_sims.nba.nba_schedule": {"database": "nba", "schema": "psa", "name": "nba_schedule", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba.nba_schedule", "fqn": ["sports_sims", "nba", "nba_schedule"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_schedule", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "this is the nba schedule", "columns": {}, "meta": {"external_location": "data/nba/{identifier}.csv"}, "source_meta": {"external_location": "data/nba/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'data/nba/nba_schedule.csv'", "created_at": 1726368442.3819368}, "source.sports_sims.nba.nba_team_ratings": {"database": "nba", "schema": "psa", "name": "nba_team_ratings", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba.nba_team_ratings", "fqn": ["sports_sims", "nba", "nba_team_ratings"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_team_ratings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "team ELO ratings & win totals", "columns": {}, "meta": {"external_location": "data/nba/{identifier}.csv"}, "source_meta": {"external_location": "data/nba/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'data/nba/nba_team_ratings.csv'", "created_at": 1726368442.382494}, "source.sports_sims.nba.xf_series_to_seed": {"database": "nba", "schema": "psa", "name": "xf_series_to_seed", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba.xf_series_to_seed", "fqn": ["sports_sims", "nba", "xf_series_to_seed"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "xf_series_to_seed", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "cross ref table to match series to seeds", "columns": {}, "meta": {"external_location": "data/nba/{identifier}.csv"}, "source_meta": {"external_location": "data/nba/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'data/nba/xf_series_to_seed.csv'", "created_at": 1726368442.3825731}, "source.sports_sims.nba.nba_results": {"database": "nba", "schema": "psa", "name": "nba_results", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba.nba_results", "fqn": ["sports_sims", "nba", "nba_results"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_results", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nba results for the current season", "columns": {}, "meta": {"external_location": "data/nba/{identifier}.csv"}, "source_meta": {"external_location": "data/nba/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'data/nba/nba_results.csv'", "created_at": 1726368442.382635}, "source.sports_sims.nba.nba_elo": {"database": "nba", "schema": "psa", "name": "nba_elo", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba.nba_elo", "fqn": ["sports_sims", "nba", "nba_elo"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_elo", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "complete ELO ratings for all teams", "columns": {}, "meta": {"external_location": "data/nba/{identifier}.csv"}, "source_meta": {"external_location": "data/nba/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'data/nba/nba_elo.csv'", "created_at": 1726368442.382694}, "source.sports_sims.nfl.nfl_schedule": {"database": "nba", "schema": "psa", "name": "nfl_schedule", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nfl.nfl_schedule", "fqn": ["sports_sims", "nfl", "nfl_schedule"], "source_name": "nfl", "source_description": "", "loader": "", "identifier": "nfl_schedule", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nfl schedule", "columns": {}, "meta": {"external_location": "data/nfl/{identifier}.csv"}, "source_meta": {"external_location": "data/nfl/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'data/nfl/nfl_schedule.csv'", "created_at": 1726368442.382751}, "source.sports_sims.nfl.nfl_team_ratings": {"database": "nba", "schema": "psa", "name": "nfl_team_ratings", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nfl.nfl_team_ratings", "fqn": ["sports_sims", "nfl", "nfl_team_ratings"], "source_name": "nfl", "source_description": "", "loader": "", "identifier": "nfl_team_ratings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nfl team ratings from vegas", "columns": {}, "meta": {"external_location": "data/nfl/{identifier}.csv"}, "source_meta": {"external_location": "data/nfl/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'data/nfl/nfl_team_ratings.csv'", "created_at": 1726368442.382808}, "source.sports_sims.nfl.nfl_results": {"database": "nba", "schema": "psa", "name": "nfl_results", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nfl.nfl_results", "fqn": ["sports_sims", "nfl", "nfl_results"], "source_name": "nfl", "source_description": "", "loader": "", "identifier": "nfl_results", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nfl results for the current season", "columns": {}, "meta": {"external_location": "data/nfl/{identifier}.csv"}, "source_meta": {"external_location": "data/nfl/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'data/nfl/nfl_results.csv'", "created_at": 1726368442.3828769}, "source.sports_sims.ncaaf.ncaaf_schedule": {"database": "nba", "schema": "psa", "name": "ncaaf_schedule", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.ncaaf.ncaaf_schedule", "fqn": ["sports_sims", "ncaaf", "ncaaf_schedule"], "source_name": "ncaaf", "source_description": "", "loader": "", "identifier": "ncaaf_schedule", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ncaa football schedule", "columns": {}, "meta": {"external_location": "data/ncaaf/{identifier}.csv"}, "source_meta": {"external_location": "data/ncaaf/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'data/ncaaf/ncaaf_schedule.csv'", "created_at": 1726368442.3829398}, "source.sports_sims.ncaaf.ncaaf_team_ratings": {"database": "nba", "schema": "psa", "name": "ncaaf_team_ratings", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.ncaaf.ncaaf_team_ratings", "fqn": ["sports_sims", "ncaaf", "ncaaf_team_ratings"], "source_name": "ncaaf", "source_description": "", "loader": "", "identifier": "ncaaf_team_ratings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ncaa football team ratings from vegas", "columns": {}, "meta": {"external_location": "data/ncaaf/{identifier}.csv"}, "source_meta": {"external_location": "data/ncaaf/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'data/ncaaf/ncaaf_team_ratings.csv'", "created_at": 1726368442.382991}, "source.sports_sims.ncaaf.ncaaf_results": {"database": "nba", "schema": "psa", "name": "ncaaf_results", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.ncaaf.ncaaf_results", "fqn": ["sports_sims", "ncaaf", "ncaaf_results"], "source_name": "ncaaf", "source_description": "", "loader": "", "identifier": "ncaaf_results", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ncaa results for current season", "columns": {}, "meta": {"external_location": "data/ncaaf/{identifier}.csv"}, "source_meta": {"external_location": "data/ncaaf/{identifier}.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'data/ncaaf/ncaaf_results.csv'", "created_at": 1726368442.383042}, "source.sports_sims.nba_dlt.games": {"database": "nba", "schema": "nba_data", "name": "games", "resource_type": "source", "package_name": "sports_sims", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.sports_sims.nba_dlt.games", "fqn": ["sports_sims", "nba_dlt", "games"], "source_name": "nba_dlt", "source_description": "", "loader": "", "identifier": "games", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "nba games as sourced from pbpstats.com", "columns": {}, "meta": {"external_location": "dlt/data/nba/nba_data/games/*.csv"}, "source_meta": {"external_location": "dlt/data/nba/nba_data/games/*.csv"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'dlt/data/nba/nba_data/games/*.csv'", "created_at": 1726368442.383117}}, "macros": {"macro.sports_sims.elo_calc": {"name": "elo_calc", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.elo_calc", "macro_sql": "{%- macro elo_calc(home_team, visiting_team, home_adv) -%}\n\n   ( 1 - (1 / (10 ^ (-( {{visiting_team}} - {{home_team}} - {{home_adv}})::real/400)+1))) * 10000\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6174982, "supported_languages": null}, "macro.sports_sims.elo_diff": {"name": "elo_diff", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.elo_diff", "macro_sql": "{%- macro elo_diff(home_team, visiting_team, result, home_adv)  -%}\n\n   25.0 * (( {{result}} ) - (1 / (10 ^ ( - ({{visiting_team}} - {{home_team}} - {{home_adv}})::real / 400) + 1)))\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.617727, "supported_languages": null}, "macro.sports_sims.playoff_sim": {"name": "playoff_sim", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.playoff_sim", "macro_sql": "{% macro playoff_sim(round,seed_file) %}\n-- depends-on: {{ ref( 'nba_random_num_gen' ) }}\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        {{ elo_calc( 'EH.elo_rating', 'EV.elo_rating',var('nba_elo_offset') ) }} as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN {{ elo_calc( 'EH.elo_rating', 'EV.elo_rating', var('nba_elo_offset') ) }} >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM {{ ref( 'nba_schedules' ) }} S\n        LEFT JOIN {{ ref( 'nba_random_num_gen' ) }} R ON R.game_id = S.game_id\n        LEFT JOIN  {{ ref( seed_file ) }} EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  {{ ref( seed_file ) }} EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  '{{ round }}'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.sports_sims.elo_calc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.618248, "supported_languages": null}, "macro.sports_sims.playoff_sim_end": {"name": "playoff_sim_end", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.playoff_sim_end", "macro_sql": "{%- macro playoff_sim_end(precedent) -%}\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM {{ precedent }} E\nLEFT JOIN {{ ref( 'nba_xf_series_to_seed' ) }} XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.618419, "supported_languages": null}, "macro.sports_sims.american_odds": {"name": "american_odds", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.sports_sims.american_odds", "macro_sql": "{%- macro american_odds(value) -%}\n\n    CASE WHEN {{ value }} >= 0.5 \n        THEN '-' || ROUND( {{ value }} / ( 1.0 - {{ value }} ) * 100 )::int\n        ELSE '+' || ((( 1.0 - {{ value }} ) / ({{ value }}::real ) * 100)::int)\n    END \n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6185632, "supported_languages": null}, "macro.sports_sims.test_empty_table": {"name": "test_empty_table", "resource_type": "macro", "package_name": "sports_sims", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.sports_sims.test_empty_table", "macro_sql": "{% test empty_table(model) %}\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM {{ model }}\n    HAVING COUNT(*) = 0\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.618698, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_binding_char": {"name": "duckdb__get_binding_char", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char", "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.620131, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_batch_size": {"name": "duckdb__get_batch_size", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size", "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6202612, "supported_languages": null}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"name": "duckdb__load_csv_rows", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6216278, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"name": "duckdb__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.622344, "supported_languages": null}, "macro.dbt_duckdb.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.622643, "supported_languages": null}, "macro.dbt_duckdb.duckdb__post_snapshot": {"name": "duckdb__post_snapshot", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__post_snapshot", "macro_sql": "{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.62275, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_catalog": {"name": "duckdb__get_catalog", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    with relations AS (\n      select\n        t.table_name\n        , t.database_name\n        , t.schema_name\n        , 'BASE TABLE' as table_type\n        , {{ adapter.catalog_comment('t') }} as table_comment\n      from duckdb_tables() t\n      WHERE t.database_name = '{{ database }}'\n      UNION ALL\n      SELECT v.view_name as table_name\n      , v.database_name\n      , v.schema_name\n      , 'VIEW' as table_type\n      , {{ adapter.catalog_comment('v') }} as table_comment\n      from duckdb_views() v\n      WHERE v.database_name = '{{ database }}'\n    )\n    select\n        '{{ database }}' as table_database,\n        r.schema_name as table_schema,\n        r.table_name,\n        r.table_type,\n        r.table_comment,\n        c.column_name,\n        c.column_index as column_index,\n        c.data_type as column_type,\n        {{ adapter.catalog_comment('c') }} as column_comment,\n        '' as table_owner\n    FROM relations r JOIN duckdb_columns() c ON r.schema_name = c.schema_name AND r.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(r.schema_name) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    ORDER BY\n        r.schema_name,\n        r.table_name,\n        c.column_index\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6235552, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_schema": {"name": "duckdb__create_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    {% set sql %}\n        select type from duckdb_databases()\n        where database_name='{{ relation.database }}'\n        and type='sqlite'\n    {% endset %}\n    {% set results = run_query(sql) %}\n    {% if results|length == 0 %}\n        create schema if not exists {{ relation.without_identifier() }}\n    {% else %}\n        {% if relation.schema!='main' %}\n            {{ exceptions.raise_compiler_error(\n                \"Schema must be 'main' when writing to sqlite \"\n                ~ \"instead got \" ~ relation.schema\n            )}}\n        {% endif %}\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.629536, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_schema": {"name": "duckdb__drop_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.629668, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_schemas": {"name": "duckdb__list_schemas", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where catalog_name = '{{ database }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.629855, "supported_languages": null}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"name": "duckdb__check_schema_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where schema_name = '{{ schema }}'\n        and catalog_name = '{{ information_schema.database }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.630025, "supported_languages": null}, "macro.dbt_duckdb.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.get_column_names", "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.63027, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_table_as": {"name": "duckdb__create_table_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_duckdb.get_column_names", "macro.dbt.get_select_subquery", "macro.dbt_duckdb.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.630961, "supported_languages": null}, "macro.dbt_duckdb.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.py_write_table", "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    con.execute('create table {{ relation }} as select * from df')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.63109, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_view_as": {"name": "duckdb__create_view_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.63136, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"name": "duckdb__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and table_schema = '{{ relation.schema }}'\n      {% endif %}\n      {% if relation.database %}\n      and table_catalog = '{{ relation.database }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.631687, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"name": "duckdb__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n    and table_catalog = '{{ schema_relation.database }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.631914, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_relation": {"name": "duckdb__drop_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6320572, "supported_languages": null}, "macro.dbt_duckdb.duckdb__rename_relation": {"name": "duckdb__rename_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.632258, "supported_languages": null}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"name": "duckdb__make_temp_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.632493, "supported_languages": null}, "macro.dbt_duckdb.duckdb__current_timestamp": {"name": "duckdb__current_timestamp", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.632549, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"name": "duckdb__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.632669, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"name": "duckdb__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.632742, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {"name": "duckdb__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql", "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6328409, "supported_languages": null}, "macro.dbt_duckdb.location_exists": {"name": "location_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.location_exists", "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.632941, "supported_languages": null}, "macro.dbt_duckdb.write_to_file": {"name": "write_to_file", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.write_to_file", "macro_sql": "{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.633091, "supported_languages": null}, "macro.dbt_duckdb.store_relation": {"name": "store_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.store_relation", "macro_sql": "{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6333802, "supported_languages": null}, "macro.dbt_duckdb.render_write_options": {"name": "render_write_options", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.render_write_options", "macro_sql": "{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.634618, "supported_languages": null}, "macro.dbt_duckdb.duckdb_escape_comment": {"name": "duckdb_escape_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb_escape_comment", "macro_sql": "{% macro duckdb_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.63544, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_comment": {"name": "duckdb__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_comment", "macro_sql": "{% macro duckdb__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = duckdb_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6355991, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_column_comment": {"name": "duckdb__alter_column_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_column_comment", "macro_sql": "{% macro duckdb__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = duckdb_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6360152, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql": {"name": "duckdb__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/incremental_helper.sql", "original_file_path": "macros/incremental_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql", "macro_sql": "{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.637409, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns": {"name": "duckdb__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/columns.sql", "original_file_path": "macros/columns.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns", "macro_sql": "{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.638083, "supported_languages": null}, "macro.dbt_duckdb.materialization_table_duckdb": {"name": "materialization_table_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_duckdb.materialization_table_duckdb", "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.639992, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_external_duckdb": {"name": "materialization_external_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/external.sql", "original_file_path": "macros/materializations/external.sql", "unique_id": "macro.dbt_duckdb.materialization_external_duckdb", "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n  {%- set format = config.get('format', 'parquet') -%}\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation }} as (\n        select * from '{{ read_location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {%- set partition_columns = config.get('partition_columns', []) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_duckdb.write_to_file", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_duckdb.store_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6435788, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_incremental_duckdb": {"name": "materialization_incremental_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb", "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n  -- only create temp tables if using local duckdb, as it is not currently supported for remote databases\n  {%- set temporary = not adapter.is_motherduck() -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if not temporary %}\n      -- if not using a temporary table we will update the temp relation to use a different temp schema (\"dbt_temp\" by default)\n      {% set temp_relation = temp_relation.incorporate(path=adapter.get_temp_relation_path(this)) %}\n      {% do run_query(create_schema(temp_relation)) %}\n      -- then drop the temp relation after we insert the incremental data into the target relation\n      {% do to_drop.append(temp_relation) %}\n    {% endif %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(temporary, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.create_schema", "macro.dbt.statement", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6479979, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.duckdb__dateadd": {"name": "duckdb__dateadd", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_duckdb.duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    date_add({{ from_date_or_timestamp }}, interval ({{ interval }}) {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6482, "supported_languages": null}, "macro.dbt_duckdb.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_duckdb.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.648692, "supported_languages": null}, "macro.dbt_duckdb.duckdb__datediff": {"name": "duckdb__datediff", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_duckdb.duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n    date_diff('{{ datepart }}', {{ first_date }}::timestamp, {{ second_date}}::timestamp )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.648861, "supported_languages": null}, "macro.dbt_duckdb.duckdb__any_value": {"name": "duckdb__any_value", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_duckdb.duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6489558, "supported_languages": null}, "macro.dbt_duckdb.register_upstream_external_models": {"name": "register_upstream_external_models", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/upstream.sql", "original_file_path": "macros/utils/upstream.sql", "unique_id": "macro.dbt_duckdb.register_upstream_external_models", "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.650949, "supported_languages": null}, "macro.dbt_duckdb.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/splitpart.sql", "original_file_path": "macros/utils/splitpart.sql", "unique_id": "macro.dbt_duckdb.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.651167, "supported_languages": null}, "macro.dbt_duckdb.duckdb__last_day": {"name": "duckdb__last_day", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/lastday.sql", "original_file_path": "macros/utils/lastday.sql", "unique_id": "macro.dbt_duckdb.duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.651519, "supported_languages": null}, "macro.dbt_duckdb.external_location": {"name": "external_location", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/external_location.sql", "original_file_path": "macros/utils/external_location.sql", "unique_id": "macro.dbt_duckdb.external_location", "macro_sql": "{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.651981, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.652718, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.652844, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6529438, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.653035, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.653126, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.653384, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.65357, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6537652, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.654062, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6542442, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.65659, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.656696, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.656838, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.657286, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.657397, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.657509, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.658494, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.659293, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.662018, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.662198, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6623092, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.66237, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.662464, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.662538, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6626701, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.663258, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.663383, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.663554, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.663821, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6676831, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6694741, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.67027, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.670468, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.670601, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.670988, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.671238, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.671475, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.672605, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.675911, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.676238, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.676394, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6771882, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6773381, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.677737, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.67961, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.68147, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.682592, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.682936, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.683428, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.683585, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.684048, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.688033, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.689045, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.689226, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.689864, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.690042, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6904662, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.690888, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.691512, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.691663, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.691788, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6919749, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.692096, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.692279, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.692402, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.692649, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.692773, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.69287, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.693048, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.6962812, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.700091, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7008471, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.701601, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.702142, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.702304, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.702379, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.702574, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.702662, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.705018, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7071218, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.710575, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7111402, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.711297, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7116008, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.711731, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.711823, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.71192, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.711997, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.712099, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7121751, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.712481, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.712677, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.713433, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.713716, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.713959, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7143219, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.714495, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.714682, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.714947, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7151139, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.715609, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.715845, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.715965, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.716106, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.716234, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.71682, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.717566, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.717823, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.717986, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.718169, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.718305, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.718519, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7186508, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.719137, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7194161, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.71955, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7197309, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7199712, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.720601, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.720924, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.721206, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.721428, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.721569, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.721767, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.721843, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7220402, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.722139, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.722344, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.722431, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.722614, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.722709, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.723118, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7232451, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.723427, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.723526, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.72371, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.723804, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.724545, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.724624, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.72497, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7250812, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.725169, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.726049, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.726291, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.726511, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.726675, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7267442, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.726923, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.727016, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7271922, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.727285, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.72787, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.727985, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.728252, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7286751, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.728961, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.72908, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.get_column_names", "macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.729195, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.729355, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.729423, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.730012, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.730103, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7307851, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.730911, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7310479, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.731224, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7313159, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.731589, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.731694, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.731807, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.732141, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.732382, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7325802, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.732741, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.733136, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.734101, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.734463, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.734643, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.73591, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.736636, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.737097, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.737246, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.737391, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.737441, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.73792, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.738285, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.738432, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.738663, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.73888, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.739058, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.739267, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.739373, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.739532, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.739614, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.740191, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.740528, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7406578, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7409852, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.741154, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.741225, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.741444, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.741552, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.741697, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.74175, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7419221, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.742013, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.742201, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7422888, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7427032, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7429602, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.743175, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7432861, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7434702, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.743561, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7437282, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.74383, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.743995, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.744098, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.744277, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7443662, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.744527, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.744595, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7447941, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.744956, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.745119, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.745187, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7458718, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7459688, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7460742, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.746173, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.746274, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7463691, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.74647, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.74658, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.746681, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7467752, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.746881, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7469718, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.747071, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.747162, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.747342, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7474291, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.747586, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7476559, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.747884, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.74805, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.748152, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.748499, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.748607, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.748748, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.749008, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.749093, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.749347, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.749501, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.749681, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.74977, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.750083, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7502122, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.750321, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.750442, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.750793, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7509, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7510002, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.751072, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7511868, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.751241, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.751349, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7514539, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.752039, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.752128, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.752228, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.752484, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.752608, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7526982, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7527978, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7528782, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.754354, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.754465, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.754603, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.754787, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.754945, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.755151, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.755265, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.755371, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7555242, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.755873, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7560241, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.756115, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.756394, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7566888, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.756876, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7570171, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.758228, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7583098, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.758419, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.758494, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.758709, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.75883, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.758899, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.75904, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7591639, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7593112, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.759508, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.759653, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.760087, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.760212, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.760375, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.76052, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7612338, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7615921, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7617128, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.761808, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.762281, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.76239, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7625191, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.762626, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.762799, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.763096, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7655191, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.765682, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.765818, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.76598, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7661, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7662, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.766318, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.766476, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.766609, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7668748, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.766995, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.767103, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7672179, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.767321, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.767426, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7675252, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.767659, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.767769, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7693188, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7694201, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.769614, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7697542, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.769891, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.770005, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.770744, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.77097, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.771088, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7713048, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.77145, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.771818, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7719848, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.772467, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7748291, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.775178, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.775885, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.777042, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.777143, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.777657, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.777914, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.7782788, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.77859, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.778641, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.779007, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.779171, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.779368, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1726368441.779562, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"test.sports_sims.not_null_reg_season_summary_team.b21e947402": [{"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_reg_season_summary_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_reg_season_summary_team.sql", "original_file_path": "models/nba/analysis/__analysis.yml", "unique_id": "test.sports_sims.not_null_reg_season_summary_team.b21e947402", "fqn": ["sports_sims", "nba", "analysis", "not_null_reg_season_summary_team"], "alias": "not_null_reg_season_summary_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.3768919, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "reg_season_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.reg_season_summary", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('reg_season_summary')) }}"}, "namespace": null}}], "test.sports_sims.unique_reg_season_summary_team.19dc7ca6be": [{"database": "nba", "schema": "main_dbt_test__audit", "name": "unique_reg_season_summary_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_reg_season_summary_team.sql", "original_file_path": "models/nba/analysis/__analysis.yml", "unique_id": "test.sports_sims.unique_reg_season_summary_team.19dc7ca6be", "fqn": ["sports_sims", "nba", "analysis", "unique_reg_season_summary_team"], "alias": "unique_reg_season_summary_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.377494, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "reg_season_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.reg_season_summary", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('reg_season_summary')) }}"}, "namespace": null}}], "test.sports_sims.not_null_season_summary_team.bc407c3c39": [{"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_season_summary_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_season_summary_team.sql", "original_file_path": "models/nba/analysis/__analysis.yml", "unique_id": "test.sports_sims.not_null_season_summary_team.bc407c3c39", "fqn": ["sports_sims", "nba", "analysis", "not_null_season_summary_team"], "alias": "not_null_season_summary_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.378038, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "season_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.season_summary", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('season_summary')) }}"}, "namespace": null}}], "test.sports_sims.unique_season_summary_team.2a27070143": [{"database": "nba", "schema": "main_dbt_test__audit", "name": "unique_season_summary_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_season_summary_team.sql", "original_file_path": "models/nba/analysis/__analysis.yml", "unique_id": "test.sports_sims.unique_season_summary_team.2a27070143", "fqn": ["sports_sims", "nba", "analysis", "unique_season_summary_team"], "alias": "unique_season_summary_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.378651, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "season_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.season_summary", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('season_summary')) }}"}, "namespace": null}}], "test.sports_sims.not_null_playoff_summary_team.d95853da03": [{"database": "nba", "schema": "main_dbt_test__audit", "name": "not_null_playoff_summary_team", "resource_type": "test", "package_name": "sports_sims", "path": "not_null_playoff_summary_team.sql", "original_file_path": "models/nba/analysis/__analysis.yml", "unique_id": "test.sports_sims.not_null_playoff_summary_team.d95853da03", "fqn": ["sports_sims", "nba", "analysis", "not_null_playoff_summary_team"], "alias": "not_null_playoff_summary_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.379183, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "playoff_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.playoff_summary", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('playoff_summary')) }}"}, "namespace": null}}], "test.sports_sims.unique_playoff_summary_team.5acdcce365": [{"database": "nba", "schema": "main_dbt_test__audit", "name": "unique_playoff_summary_team", "resource_type": "test", "package_name": "sports_sims", "path": "unique_playoff_summary_team.sql", "original_file_path": "models/nba/analysis/__analysis.yml", "unique_id": "test.sports_sims.unique_playoff_summary_team.5acdcce365", "fqn": ["sports_sims", "nba", "analysis", "unique_playoff_summary_team"], "alias": "unique_playoff_summary_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1726368442.3797078, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "playoff_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "team", "file_key_name": "models.playoff_summary", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('playoff_summary')) }}"}, "namespace": null}}]}, "parent_map": {"model.sports_sims.nba_xf_series_to_seed": ["model.sports_sims.nba_raw_xf_series_to_seed"], "model.sports_sims.nba_reg_season_schedule": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_ratings", "model.sports_sims.nba_raw_schedule"], "model.sports_sims.nba_results_by_team": ["model.sports_sims.nba_results_log"], "model.sports_sims.nba_schedules": ["model.sports_sims.nba_post_season_schedule", "model.sports_sims.nba_reg_season_schedule"], "model.sports_sims.nba_seasons": ["model.sports_sims.nba_elo_history"], "model.sports_sims.nba_post_season_schedule": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_ratings", "model.sports_sims.nba_raw_schedule"], "model.sports_sims.nba_latest_results": ["model.sports_sims.nba_raw_results", "model.sports_sims.nba_raw_schedule", "model.sports_sims.nba_teams"], "model.sports_sims.nba_latest_elo": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_raw_team_ratings"], "model.sports_sims.nba_ratings": ["model.sports_sims.nba_latest_elo", "model.sports_sims.nba_raw_team_ratings"], "model.sports_sims.nba_random_num_gen": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_schedules"], "model.sports_sims.nba_results_log": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_latest_elo", "model.sports_sims.nba_latest_results", "model.sports_sims.nba_schedules", "model.sports_sims.nba_teams"], "model.sports_sims.nba_reg_season_actuals": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_teams"], "model.sports_sims.nba_elo_history": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_results_log", "source.sports_sims.nba.nba_elo"], "model.sports_sims.nba_season_teams": ["model.sports_sims.nba_elo_history"], "model.sports_sims.nba_teams": ["model.sports_sims.nba_raw_team_ratings"], "model.sports_sims.nba_vegas_wins": ["model.sports_sims.nba_ratings"], "model.sports_sims.reg_season_actuals_enriched": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_results_log", "model.sports_sims.nba_teams"], "model.sports_sims.reg_season_end": ["model.sports_sims.nba_latest_elo", "model.sports_sims.reg_season_simulator"], "model.sports_sims.nba_team_stats": ["model.sports_sims.nba_elo_history", "model.sports_sims.nba_season_teams"], "model.sports_sims.team_matchups": ["model.sports_sims.nba_ratings"], "model.sports_sims.tournament_end": ["model.sports_sims.nba_latest_elo", "model.sports_sims.nba_teams", "model.sports_sims.reg_season_predictions", "model.sports_sims.reg_season_simulator"], "model.sports_sims.reg_season_predictions": ["model.sports_sims.nba_results_by_team", "model.sports_sims.reg_season_simulator"], "model.sports_sims.playin_sim_r1": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.reg_season_end"], "model.sports_sims.playin_sim_r2": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.playin_sim_r1_end"], "model.sports_sims.playin_sim_r2_end": ["model.sports_sims.playin_sim_r1_end", "model.sports_sims.playin_sim_r2"], "model.sports_sims.playin_sim_r1_end": ["model.sports_sims.playin_sim_r1"], "model.sports_sims.reg_season_simulator": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules"], "model.sports_sims.playoff_sim_r4": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.nba_xf_series_to_seed", "model.sports_sims.playoff_sim_r3"], "model.sports_sims.playoff_sim_r2": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.nba_xf_series_to_seed", "model.sports_sims.playoff_sim_r1"], "model.sports_sims.playoff_sim_r3": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.nba_xf_series_to_seed", "model.sports_sims.playoff_sim_r2"], "model.sports_sims.playoff_sim_r1": ["model.sports_sims.initialize_seeding", "model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_schedules", "model.sports_sims.nba_xf_series_to_seed"], "model.sports_sims.initialize_seeding": ["model.sports_sims.playin_sim_r2_end", "model.sports_sims.reg_season_end"], "model.sports_sims.nba_raw_results": ["model.sports_sims.nba_raw_team_ratings", "source.sports_sims.nba.nba_results", "source.sports_sims.nba_dlt.games"], "model.sports_sims.nba_raw_schedule": ["source.sports_sims.nba.nba_schedule"], "model.sports_sims.nba_raw_team_ratings": ["source.sports_sims.nba.nba_team_ratings"], "model.sports_sims.nba_raw_xf_series_to_seed": ["source.sports_sims.nba.xf_series_to_seed"], "model.sports_sims.nba_elo_rollforward": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_raw_team_ratings"], "operation.sports_sims.sports_sims-on-run-start-0": [], "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0": ["model.sports_sims.nba_raw_schedule"], "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759": ["model.sports_sims.nba_raw_team_ratings"], "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f": ["model.sports_sims.nba_raw_xf_series_to_seed"], "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f": ["model.sports_sims.nba_latest_elo"], "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f": ["model.sports_sims.nba_latest_elo"], "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f": ["model.sports_sims.nba_latest_results"], "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2": ["model.sports_sims.nba_latest_results"], "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b": ["model.sports_sims.nba_schedules"], "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1": ["model.sports_sims.nba_schedules"], "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19": ["model.sports_sims.nba_schedules"], "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe": ["model.sports_sims.nba_schedules"], "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c": ["model.sports_sims.nba_schedules"], "test.sports_sims.not_null_nba_ratings_team.de3ad0b568": ["model.sports_sims.nba_ratings"], "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b": ["model.sports_sims.nba_ratings"], "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7": ["model.sports_sims.nba_ratings"], "test.sports_sims.unique_nba_ratings_team_long.6615b31795": ["model.sports_sims.nba_ratings"], "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6": ["model.sports_sims.nba_ratings"], "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69": ["model.sports_sims.nba_ratings"], "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393": ["model.sports_sims.nba_ratings"], "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01": ["model.sports_sims.nba_reg_season_schedule"], "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c": ["model.sports_sims.nba_random_num_gen"], "test.sports_sims.unique_nba_teams_team_long.a9afa2e873": ["model.sports_sims.nba_teams"], "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e": ["model.sports_sims.nba_teams"], "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1": ["model.sports_sims.nba_teams"], "test.sports_sims.not_null_nba_teams_team.6d25569f6c": ["model.sports_sims.nba_teams"], "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb": ["model.sports_sims.nba_vegas_wins"], "test.sports_sims.not_null_nba_vegas_wins_team.30210c099e": ["model.sports_sims.nba_vegas_wins"], "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b": ["model.sports_sims.nba_vegas_wins"], "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf": ["model.sports_sims.nba_xf_series_to_seed"], "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed": ["model.sports_sims.nba_xf_series_to_seed"], "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82": ["model.sports_sims.nba_xf_series_to_seed"], "seed.sports_sims.xf_series_to_seed": [], "seed.sports_sims.nba_schedule": [], "seed.sports_sims.nba_team_ratings": [], "seed.sports_sims.nfl_team_ratings": [], "seed.sports_sims.nfl_results": [], "seed.sports_sims.nfl_schedule": [], "seed.sports_sims.nba_results": [], "seed.sports_sims.nba_elo": [], "source.sports_sims.nba.nba_schedule": [], "source.sports_sims.nba.nba_team_ratings": [], "source.sports_sims.nba.xf_series_to_seed": [], "source.sports_sims.nba.nba_results": [], "source.sports_sims.nba.nba_elo": [], "source.sports_sims.nfl.nfl_schedule": [], "source.sports_sims.nfl.nfl_team_ratings": [], "source.sports_sims.nfl.nfl_results": [], "source.sports_sims.ncaaf.ncaaf_schedule": [], "source.sports_sims.ncaaf.ncaaf_team_ratings": [], "source.sports_sims.ncaaf.ncaaf_results": [], "source.sports_sims.nba_dlt.games": []}, "child_map": {"model.sports_sims.nba_xf_series_to_seed": ["model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_sim_r4", "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82", "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf", "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed"], "model.sports_sims.nba_reg_season_schedule": ["model.sports_sims.nba_schedules", "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01"], "model.sports_sims.nba_results_by_team": ["model.sports_sims.reg_season_predictions"], "model.sports_sims.nba_schedules": ["model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_results_log", "model.sports_sims.playin_sim_r1", "model.sports_sims.playin_sim_r2", "model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_sim_r4", "model.sports_sims.reg_season_simulator", "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19", "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1", "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c", "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe", "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b"], "model.sports_sims.nba_seasons": [], "model.sports_sims.nba_post_season_schedule": ["model.sports_sims.nba_schedules"], "model.sports_sims.nba_latest_results": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_random_num_gen", "model.sports_sims.nba_reg_season_actuals", "model.sports_sims.nba_results_log", "model.sports_sims.reg_season_actuals_enriched", "model.sports_sims.reg_season_simulator", "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864", "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c", "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd", "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2", "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2", "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf", "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f", "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46"], "model.sports_sims.nba_latest_elo": ["model.sports_sims.nba_ratings", "model.sports_sims.nba_results_log", "model.sports_sims.reg_season_end", "model.sports_sims.tournament_end", "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f", "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f"], "model.sports_sims.nba_ratings": ["model.sports_sims.nba_post_season_schedule", "model.sports_sims.nba_reg_season_schedule", "model.sports_sims.nba_vegas_wins", "model.sports_sims.team_matchups", "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69", "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6", "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393", "test.sports_sims.not_null_nba_ratings_team.de3ad0b568", "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7", "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b", "test.sports_sims.unique_nba_ratings_team_long.6615b31795"], "model.sports_sims.nba_random_num_gen": ["model.sports_sims.playin_sim_r1", "model.sports_sims.playin_sim_r2", "model.sports_sims.playoff_sim_r1", "model.sports_sims.playoff_sim_r2", "model.sports_sims.playoff_sim_r3", "model.sports_sims.playoff_sim_r4", "model.sports_sims.reg_season_simulator", "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c"], "model.sports_sims.nba_results_log": ["model.sports_sims.nba_elo_history", "model.sports_sims.nba_results_by_team", "model.sports_sims.reg_season_actuals_enriched"], "model.sports_sims.nba_reg_season_actuals": [], "model.sports_sims.nba_elo_history": ["model.sports_sims.nba_season_teams", "model.sports_sims.nba_seasons", "model.sports_sims.nba_team_stats"], "model.sports_sims.nba_season_teams": ["model.sports_sims.nba_team_stats"], "model.sports_sims.nba_teams": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_reg_season_actuals", "model.sports_sims.nba_results_log", "model.sports_sims.reg_season_actuals_enriched", "model.sports_sims.tournament_end", "test.sports_sims.not_null_nba_teams_team.6d25569f6c", "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e", "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1", "test.sports_sims.unique_nba_teams_team_long.a9afa2e873"], "model.sports_sims.nba_vegas_wins": ["test.sports_sims.not_null_nba_vegas_wins_team.30210c099e", "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b", "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb"], "model.sports_sims.reg_season_actuals_enriched": [], "model.sports_sims.reg_season_end": ["model.sports_sims.initialize_seeding", "model.sports_sims.playin_sim_r1"], "model.sports_sims.nba_team_stats": [], "model.sports_sims.team_matchups": [], "model.sports_sims.tournament_end": [], "model.sports_sims.reg_season_predictions": ["model.sports_sims.tournament_end"], "model.sports_sims.playin_sim_r1": ["model.sports_sims.playin_sim_r1_end"], "model.sports_sims.playin_sim_r2": ["model.sports_sims.playin_sim_r2_end"], "model.sports_sims.playin_sim_r2_end": ["model.sports_sims.initialize_seeding"], "model.sports_sims.playin_sim_r1_end": ["model.sports_sims.playin_sim_r2", "model.sports_sims.playin_sim_r2_end"], "model.sports_sims.reg_season_simulator": ["model.sports_sims.reg_season_end", "model.sports_sims.reg_season_predictions", "model.sports_sims.tournament_end"], "model.sports_sims.playoff_sim_r4": [], "model.sports_sims.playoff_sim_r2": ["model.sports_sims.playoff_sim_r3"], "model.sports_sims.playoff_sim_r3": ["model.sports_sims.playoff_sim_r4"], "model.sports_sims.playoff_sim_r1": ["model.sports_sims.playoff_sim_r2"], "model.sports_sims.initialize_seeding": ["model.sports_sims.playoff_sim_r1"], "model.sports_sims.nba_raw_results": ["model.sports_sims.nba_latest_results"], "model.sports_sims.nba_raw_schedule": ["model.sports_sims.nba_latest_results", "model.sports_sims.nba_post_season_schedule", "model.sports_sims.nba_reg_season_schedule", "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0"], "model.sports_sims.nba_raw_team_ratings": ["model.sports_sims.nba_elo_rollforward", "model.sports_sims.nba_latest_elo", "model.sports_sims.nba_ratings", "model.sports_sims.nba_raw_results", "model.sports_sims.nba_teams", "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759"], "model.sports_sims.nba_raw_xf_series_to_seed": ["model.sports_sims.nba_xf_series_to_seed", "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f"], "model.sports_sims.nba_elo_rollforward": ["model.sports_sims.nba_elo_history", "model.sports_sims.nba_latest_elo", "model.sports_sims.nba_post_season_schedule", "model.sports_sims.nba_reg_season_schedule", "model.sports_sims.nba_results_log"], "operation.sports_sims.sports_sims-on-run-start-0": [], "test.sports_sims.empty_table_nba_raw_schedule_.24b59817b0": [], "test.sports_sims.empty_table_nba_raw_team_ratings_.80f9465759": [], "test.sports_sims.empty_table_nba_raw_xf_series_to_seed_.b4bb7f007f": [], "test.sports_sims.unique_nba_latest_elo_team.dfbd2eae9f": [], "test.sports_sims.empty_table_nba_latest_elo_.f7dbdac43f": [], "test.sports_sims.unique_nba_latest_results_game_id.88d6e43b46": [], "test.sports_sims.not_null_nba_latest_results_game_id.8d38327864": [], "test.sports_sims.not_null_nba_latest_results_home_team.5cc0e7332c": [], "test.sports_sims.not_null_nba_latest_results_home_team_score.2029f774cd": [], "test.sports_sims.not_null_nba_latest_results_visiting_team.98dc8ddee2": [], "test.sports_sims.not_null_nba_latest_results_visiting_team_score.4553f006cf": [], "test.sports_sims.not_null_nba_latest_results_winning_team.66b848d01f": [], "test.sports_sims.not_null_nba_latest_results_losing_team.e74ec9f6d2": [], "test.sports_sims.unique_nba_schedules_game_id.91aa91dc8b": [], "test.sports_sims.not_null_nba_schedules_game_id.44e8f8f4e1": [], "test.sports_sims.accepted_values_nba_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4__tournament__knockout.8b43685e19": [], "test.sports_sims.not_null_nba_schedules_visiting_team.625dc1a9fe": [], "test.sports_sims.not_null_nba_schedules_home_team.5e454dde1c": [], "test.sports_sims.not_null_nba_ratings_team.de3ad0b568": [], "test.sports_sims.unique_nba_ratings_team.c7c5b57e4b": [], "test.sports_sims.not_null_nba_ratings_team_long.9830a8e3c7": [], "test.sports_sims.unique_nba_ratings_team_long.6615b31795": [], "test.sports_sims.not_null_nba_ratings_conf.5d57fa19e6": [], "test.sports_sims.accepted_values_nba_ratings_conf__East__West.03b1819d69": [], "test.sports_sims.not_null_nba_ratings_elo_rating.b574ed0393": [], "test.sports_sims.empty_table_nba_reg_season_schedule_.3ccec78c01": [], "test.sports_sims.empty_table_nba_random_num_gen_.657d138c9c": [], "test.sports_sims.unique_nba_teams_team_long.a9afa2e873": [], "test.sports_sims.not_null_nba_teams_team_long.7ea71e823e": [], "test.sports_sims.unique_nba_teams_team.7d1b3ba5d1": [], "test.sports_sims.not_null_nba_teams_team.6d25569f6c": [], "test.sports_sims.unique_nba_vegas_wins_team.ac171d83cb": [], "test.sports_sims.not_null_nba_vegas_wins_team.30210c099e": [], "test.sports_sims.not_null_nba_vegas_wins_win_total.78b018fb0b": [], "test.sports_sims.not_null_nba_xf_series_to_seed_series_id.4054a93caf": [], "test.sports_sims.unique_nba_xf_series_to_seed_series_id.d9b62111ed": [], "test.sports_sims.not_null_nba_xf_series_to_seed_seed.bd932f0a82": [], "seed.sports_sims.xf_series_to_seed": [], "seed.sports_sims.nba_schedule": [], "seed.sports_sims.nba_team_ratings": [], "seed.sports_sims.nfl_team_ratings": [], "seed.sports_sims.nfl_results": [], "seed.sports_sims.nfl_schedule": [], "seed.sports_sims.nba_results": [], "seed.sports_sims.nba_elo": [], "source.sports_sims.nba.nba_schedule": ["model.sports_sims.nba_raw_schedule"], "source.sports_sims.nba.nba_team_ratings": ["model.sports_sims.nba_raw_team_ratings"], "source.sports_sims.nba.xf_series_to_seed": ["model.sports_sims.nba_raw_xf_series_to_seed"], "source.sports_sims.nba.nba_results": ["model.sports_sims.nba_raw_results"], "source.sports_sims.nba.nba_elo": ["model.sports_sims.nba_elo_history"], "source.sports_sims.nfl.nfl_schedule": [], "source.sports_sims.nfl.nfl_team_ratings": [], "source.sports_sims.nfl.nfl_results": [], "source.sports_sims.ncaaf.ncaaf_schedule": [], "source.sports_sims.ncaaf.ncaaf_team_ratings": [], "source.sports_sims.ncaaf.ncaaf_results": [], "source.sports_sims.nba_dlt.games": ["model.sports_sims.nba_raw_results"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}