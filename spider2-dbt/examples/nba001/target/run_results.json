{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.4", "generated_at": "2024-09-15T02:48:51.946467Z", "invocation_id": "72b818db-c4a5-4c72-bc17-c5d30036e294", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:44.417131Z", "completed_at": "2024-09-15T02:48:44.418771Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:44.418937Z", "completed_at": "2024-09-15T02:48:44.473225Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06374621391296387, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_raw_schedule", "compiled": true, "compiled_code": "select\n    id,\n    type,\n    strptime(\"Year\" || \"Date\", '%Y %b %-d')::date as \"date\",\n    \"Start (ET)\",\n    \"Visitor/Neutral\" as \"VisTm\",\n    \"Home/Neutral\" as \"HomeTm\",\n    \"Attend.\",\n    arena,\n    notes,\n    series_id\nfrom 'data/nba/nba_schedule.csv'", "relation_name": "\"nba\".\"main\".\"nba_raw_schedule\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:44.482565Z", "completed_at": "2024-09-15T02:48:44.483983Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:44.484138Z", "completed_at": "2024-09-15T02:48:44.496631Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018640995025634766, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_raw_team_ratings", "compiled": true, "compiled_code": "select * from 'data/nba/nba_team_ratings.csv'", "relation_name": "\"nba\".\"main\".\"nba_raw_team_ratings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:44.502616Z", "completed_at": "2024-09-15T02:48:44.504122Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:44.504280Z", "completed_at": "2024-09-15T02:48:44.519354Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01972198486328125, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_raw_xf_series_to_seed", "compiled": true, "compiled_code": "select * from 'data/nba/xf_series_to_seed.csv' group by all", "relation_name": "\"nba\".\"main\".\"nba_raw_xf_series_to_seed\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:44.523562Z", "completed_at": "2024-09-15T02:48:44.525564Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:44.525723Z", "completed_at": "2024-09-15T02:48:44.577175Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06218218803405762, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_raw_results", "compiled": true, "compiled_code": "with\n    cte_base as (select * from 'dlt/data/nba/nba_data/games/*.csv'),\n    cte_seed as (select * from 'data/nba/nba_results.csv')\nselect\n    coalesce(a.date, strptime(b.\"Date\", '%a %b %-d %Y'))::date as \"date\",\n    b.\"Start (ET)\" as \"Start (ET)\",\n    coalesce(away.team_long, b.\"Visitor/Neutral\") as \"VisTm\",\n    coalesce(a.away_points, b.pts)::int as visiting_team_score,\n    coalesce(home.team_long, b.\"Home/Neutral\") as \"HomeTm\",\n    coalesce(a.home_points, b.pts_1)::int as home_team_score,\n    b.\"Attend.\" as \"Attend.\",\n    b.arena as arena,\n    b.notes as notes,\n    case\n        when visiting_team_score > home_team_score then vistm else hometm\n    end as winner,\n    case when visiting_team_score > home_team_score then hometm else vistm end as loser,\n    case\n        when visiting_team_score > home_team_score\n        then visiting_team_score\n        else home_team_score\n    end as winner_pts,\n    case\n        when visiting_team_score > home_team_score\n        then home_team_score\n        else visiting_team_score\n    end as loser_pts\nfrom cte_base a\nleft join\n    \"nba\".\"main\".\"nba_raw_team_ratings\" home on home.alt_key = a.home_team_abbreviation\nleft join\n    \"nba\".\"main\".\"nba_raw_team_ratings\" away on away.alt_key = a.away_team_abbreviation\nfull outer join\n    cte_seed b\n    on strptime(b.\"Date\", '%a %b %-d %Y')::date = a.date\n    and b.\"Home/Neutral\" = home.team_long\nwhere a.date <= '2024-04-15'", "relation_name": "\"nba\".\"main\".\"nba_raw_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:44.587080Z", "completed_at": "2024-09-15T02:48:44.588628Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:44.588791Z", "completed_at": "2024-09-15T02:48:44.601649Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018635034561157227, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_teams", "compiled": true, "compiled_code": "select r.team_long, r.team, tournament_group, conf, alt_key\nfrom \"nba\".\"main\".\"nba_raw_team_ratings\" r", "relation_name": "\"nba\".\"main\".\"nba_teams\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:44.606871Z", "completed_at": "2024-09-15T02:48:44.608372Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:44.608528Z", "completed_at": "2024-09-15T02:48:44.620994Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017198801040649414, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_xf_series_to_seed", "compiled": true, "compiled_code": "select series_id, seed from \"nba\".\"main\".\"nba_raw_xf_series_to_seed\"", "relation_name": "\"nba\".\"main\".\"nba_xf_series_to_seed\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:44.625387Z", "completed_at": "2024-09-15T02:48:44.627316Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:44.627473Z", "completed_at": "2024-09-15T02:48:44.649345Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03187108039855957, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_latest_results", "compiled": true, "compiled_code": "with\n    cte_inner as (\n        select\n            s.id as game_id,\n            s.\"date\" as game_date,\n            s.hometm as home_team,\n            case\n                when s.hometm = r.winner then r.winner_pts else r.loser_pts\n            end as home_team_score,\n            s.vistm as visiting_team,\n            case\n                when s.vistm = r.winner then r.winner_pts else r.loser_pts\n            end as visiting_team_score,\n            r.winner as winning_team,\n            r.loser as losing_team,\n            True as include_actuals\n        from \"nba\".\"main\".\"nba_raw_schedule\" s\n        left join\n            \"nba\".\"main\".\"nba_raw_results\" r\n            on r.\"date\" = s.\"date\"\n            and (s.vistm = r.winner or s.vistm = r.loser)\n        where home_team_score is not null\n        group by all\n    ),\n    cte_outer as (\n        select\n            i.*,\n            case\n                when visiting_team_score > home_team_score\n                then 1\n                when visiting_team_score = home_team_score\n                then 0.5\n                else 0\n            end as game_result,\n            abs(visiting_team_score - home_team_score) as margin,\n            w.team as winning_team_short,\n            l.team as losing_team_short\n        from cte_inner i\n        left join \"nba\".\"main\".\"nba_teams\" w on w.team_long = i.winning_team\n        left join \"nba\".\"main\".\"nba_teams\" l on l.team_long = i.losing_team\n    )\nselect\n    *\nfrom cte_outer", "relation_name": "\"nba\".\"main\".\"nba_latest_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:44.658707Z", "completed_at": "2024-09-15T02:48:44.669517Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:44.669700Z", "completed_at": "2024-09-15T02:48:45.026161Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3735311031341553, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_elo_rollforward", "compiled": true, "compiled_code": "import pandas as pd\n\ndef calc_elo_diff(margin: float, game_result: float, home_elo: float, visiting_elo: float, home_adv: float) -> float:\n    # just need to make sure i really get a game result that is float (annoying)\n    game_result = float(game_result)\n    elo_diff = -float((visiting_elo - home_elo - home_adv))\n    raw_elo = 20.0 * (( game_result ) - (1.0 / (10.0 ** ( elo_diff / 400.0) + 1.0)))\n    if game_result == 1:\n       elo_chg =  raw_elo * ((margin + 3)** 0.8 ) / (7.5 + (0.006 * elo_diff ))\n    elif game_result == 0:\n       elo_chg =  raw_elo * ((margin + 3)** 0.8 ) / (7.5 + (0.006 * -elo_diff ))\n    return elo_chg\n\ndef model(dbt, sess):\n    # get the existing elo ratings for the teams\n    home_adv = dbt.config.get(\"nba_elo_offset\",100.0)\n    team_ratings = dbt.ref(\"nba_raw_team_ratings\").df()\n    original_elo = dict(zip(team_ratings[\"team_long\"], team_ratings[\"elo_rating\"].astype(float)))\n    working_elo = original_elo.copy()\n\n    # loop over the historical game data and update the elo ratings as we go\n    nba_elo_latest = (dbt.ref(\"nba_latest_results\")\n        .project(\"game_id, visiting_team, home_team, winning_team, margin, game_result\")\n        .order(\"game_id\")\n    )\n    nba_elo_latest.execute()\n    columns = [\"game_id\", \"visiting_team\", \"visiting_team_elo_rating\", \"home_team\", \"home_team_elo_rating\", \"winning_team\", \"elo_change\"]\n    rows = []\n    for (game_id, vteam, hteam, winner, margin, game_result) in nba_elo_latest.fetchall():\n        helo, velo = working_elo[hteam], working_elo[vteam]\n        elo_change =  calc_elo_diff(margin, game_result, helo, velo, home_adv)\n        rows.append((game_id, vteam, velo, hteam, helo, winner, elo_change))\n        working_elo[hteam] -= elo_change\n        working_elo[vteam] += elo_change\n\n    return pd.DataFrame(columns=columns, data=rows)\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"nba_latest_results\": \"\\\"nba\\\".\\\"main\\\".\\\"nba_latest_results\\\"\", \"nba_raw_team_ratings\": \"\\\"nba\\\".\\\"main\\\".\\\"nba_raw_team_ratings\\\"\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {'nba_elo_offset': 100.0}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"nba\"\n    schema = \"main\"\n    identifier = \"nba_elo_rollforward\"\n    \n    def __repr__(self):\n        return '\"nba\".\"main\".\"nba_elo_rollforward\"'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "relation_name": "\"nba\".\"main\".\"nba_elo_rollforward\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:45.033571Z", "completed_at": "2024-09-15T02:48:45.035221Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:45.035373Z", "completed_at": "2024-09-15T02:48:45.050230Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020193099975585938, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_reg_season_actuals", "compiled": true, "compiled_code": "with\n    cte_wins as (\n        select winning_team, count(*) as wins\n        from \"nba\".\"main\".\"nba_latest_results\"\n        group by all\n    ),\n\n    cte_losses as (\n        select losing_team, count(*) as losses\n        from \"nba\".\"main\".\"nba_latest_results\"\n        group by all\n    )\n\nselect t.team, coalesce(w.wins, 0) as wins, coalesce(l.losses, 0) as losses\nfrom \"nba\".\"main\".\"nba_teams\" t\nleft join cte_wins w on w.winning_team = t.team_long\nleft join cte_losses l on l.losing_team = t.team_long", "relation_name": "\"nba\".\"main\".\"nba_reg_season_actuals\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:45.054979Z", "completed_at": "2024-09-15T02:48:45.056785Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:45.056938Z", "completed_at": "2024-09-15T02:48:45.073336Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022359132766723633, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_latest_elo", "compiled": true, "compiled_code": "with\n    home_rating as (\n        select\n            home_team as team,\n            max(game_id) game_id,\n            max_by(home_team_elo_rating - elo_change, game_id) elo_rating\n        from \"nba\".\"main\".\"nba_elo_rollforward\"\n        group by all\n    ),\n    visiting_rating as (\n        select\n            visiting_team as team,\n            max(game_id) game_id,\n            max_by(visiting_team_elo_rating + elo_change, game_id) elo_rating\n        from \"nba\".\"main\".\"nba_elo_rollforward\"\n        group by all\n    ),\n    union_rating as (\n        select *\n        from home_rating\n        union all\n        select *\n        from visiting_rating\n    ),\n    final_rating as (\n        select team, max_by(elo_rating, game_id) as elo_rating\n        from union_rating\n        group by all\n    )\nselect\n    f.team as team_long,\n    o.team,\n    f.elo_rating as elo_rating,\n    o.elo_rating as original_rating,\n    True as latest_ratings\nfrom final_rating f\ninner join \"nba\".\"main\".\"nba_raw_team_ratings\" o on f.team = o.team_long", "relation_name": "\"nba\".\"main\".\"nba_latest_elo\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:45.078798Z", "completed_at": "2024-09-15T02:48:45.080285Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:45.080446Z", "completed_at": "2024-09-15T02:48:45.094881Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021097898483276367, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_ratings", "compiled": true, "compiled_code": "select\n    orig.team,\n    orig.team_long,\n    orig.conf,\n    case\n        when latest.latest_ratings = true and latest.elo_rating is not null\n        then latest.elo_rating\n        else orig.elo_rating\n    end as elo_rating,\n    orig.elo_rating as original_rating,\n    orig.win_total\nfrom \"nba\".\"main\".\"nba_raw_team_ratings\" orig\nleft join \"nba\".\"main\".\"nba_latest_elo\" latest on latest.team = orig.team\ngroup by all", "relation_name": "\"nba\".\"main\".\"nba_ratings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:45.101352Z", "completed_at": "2024-09-15T02:48:45.103100Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:45.103247Z", "completed_at": "2024-09-15T02:48:45.118150Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02096700668334961, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_post_season_schedule", "compiled": true, "compiled_code": "select\n    s.id::int as game_id,\n    s.date,\n    s.type,\n    s.series_id,\n    null as visiting_conf,\n    s.vistm as visiting_team,\n    null as visiting_team_elo_rating,\n    null as home_conf,\n    s.hometm as home_team,\n    null as home_team_elo_rating\nfrom \"nba\".\"main\".\"nba_raw_schedule\" as s\n-- LEFT JOIN \"nba\".\"main\".\"nba_ratings\" V ON V.team = S.VisTm\n-- LEFT JOIN \"nba\".\"main\".\"nba_ratings\" H ON H.team = S.HomeTm\n-- LEFT JOIN \"nba\".\"main\".\"nba_elo_rollforward\" R ON R.game_id = S.id\nwhere s.type <> 'reg_season'\ngroup by all", "relation_name": "\"nba\".\"main\".\"nba_post_season_schedule\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:45.123430Z", "completed_at": "2024-09-15T02:48:45.125299Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:45.125451Z", "completed_at": "2024-09-15T02:48:45.141592Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02386474609375, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_reg_season_schedule", "compiled": true, "compiled_code": "select\n    s.id as game_id,\n    s.date as date,\n    case\n        when s.notes = 'In-Season Tournament'\n        then 'tournament'\n        when s.notes = 'Knockout Rounds'\n        then 'knockout'\n        else 'reg_season'\n    end as type,\n    0 as series_id,\n    v.conf as visiting_conf,\n    v.team as visiting_team,\n    coalesce(r.visiting_team_elo_rating, v.elo_rating::int) as visiting_team_elo_rating,\n    h.conf as home_conf,\n    h.team as home_team,\n    coalesce(r.home_team_elo_rating, h.elo_rating::int) as home_team_elo_rating\nfrom \"nba\".\"main\".\"nba_raw_schedule\" as s\nleft join \"nba\".\"main\".\"nba_ratings\" v on v.team_long = s.vistm\nleft join \"nba\".\"main\".\"nba_ratings\" h on h.team_long = s.hometm\nleft join \"nba\".\"main\".\"nba_elo_rollforward\" r on r.game_id = s.id\nwhere s.type = 'reg_season'\ngroup by all", "relation_name": "\"nba\".\"main\".\"nba_reg_season_schedule\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:45.148837Z", "completed_at": "2024-09-15T02:48:45.150483Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:45.150637Z", "completed_at": "2024-09-15T02:48:45.162860Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018677949905395508, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_vegas_wins", "compiled": true, "compiled_code": "select team, win_total::double as win_total from \"nba\".\"main\".\"nba_ratings\" group by all", "relation_name": "\"nba\".\"main\".\"nba_vegas_wins\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:45.168759Z", "completed_at": "2024-09-15T02:48:45.171420Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:45.171579Z", "completed_at": "2024-09-15T02:48:45.193486Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02813124656677246, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.team_matchups", "compiled": true, "compiled_code": "select\n    home.team as home_team,\n    home.elo_rating as home_elo_rating,\n    away.team as away_team,\n    away.elo_rating as away_elo_rating,\n    ( 1 - (1 / (10 ^ (-( away_elo_rating - home_elo_rating - 100)::real/400)+1))) * 10000\n    as home_team_win_probability,\n    home_elo_rating - away_elo_rating as elo_diff,\n    elo_diff + 100 as elo_diff_hfa,\n    home_team_win_probability / 10000 as home_win,\n    CASE WHEN home_team_win_probability/10000 >= 0.5 \n        THEN '-' || ROUND( home_team_win_probability/10000 / ( 1.0 - home_team_win_probability/10000 ) * 100 )::int\n        ELSE '+' || ((( 1.0 - home_team_win_probability/10000 ) / (home_team_win_probability/10000::real ) * 100)::int)\n    END as american_odds,\n    round(\n        case\n            when home_team_win_probability / 10000 >= 0.50\n            then round(-30.564 * home_team_win_probability / 10000 + 14.763, 1)\n            else round(-30.564 * home_team_win_probability / 10000 + 15.801, 1)\n        end\n        * 2,\n        0\n    )\n    / 2.0 as implied_line\nfrom \"nba\".\"main\".\"nba_ratings\" home\njoin \"nba\".\"main\".\"nba_ratings\" away on 1 = 1\nwhere home.team <> away.team", "relation_name": "\"nba\".\"main\".\"team_matchups\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:45.198257Z", "completed_at": "2024-09-15T02:48:45.200128Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:45.200284Z", "completed_at": "2024-09-15T02:48:45.213642Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022137880325317383, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_schedules", "compiled": true, "compiled_code": "select *\nfrom \"nba\".\"main\".\"nba_reg_season_schedule\"\nunion all\nselect *\nfrom \"nba\".\"main\".\"nba_post_season_schedule\"", "relation_name": "\"nba\".\"main\".\"nba_schedules\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:45.221680Z", "completed_at": "2024-09-15T02:48:45.223477Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:45.223639Z", "completed_at": "2024-09-15T02:48:46.061653Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8445630073547363, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_random_num_gen", "compiled": true, "compiled_code": "\n\nwith\n    cte_scenario_gen as (\n        select i.generate_series as scenario_id\n        from generate_series(1, 10000) as i\n    )\nselect\n    i.scenario_id,\n    s.game_id,\n    (random() * 10000)::smallint as rand_result,\n    0 as sim_start_game_id\nfrom cte_scenario_gen as i\ncross join\n    \"nba\".\"main\".\"nba_schedules\" as s\n    -- LEFT JOIN \"nba\".\"main\".\"nba_latest_results\" AS R ON R.game_id = S.game_id\n    -- WHERE R.game_id IS NULL OR (R.game_id IS NOT NULL AND i.scenario_id = 1)", "relation_name": "\"nba\".\"main\".\"nba_random_num_gen\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:46.067458Z", "completed_at": "2024-09-15T02:48:46.069395Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:46.069543Z", "completed_at": "2024-09-15T02:48:46.088993Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03494715690612793, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_results_log", "compiled": true, "compiled_code": "with\n    cte_avg_elo as (\n        select avg(elo_rating) as elo_rating from \"nba\".\"main\".\"nba_latest_elo\"\n    )\nselect\n    rl.*,\n    a.elo_rating as avg,\n    case\n        when rl.visiting_team_elo_rating > rl.home_team_elo_rating\n        then rl.visiting_team\n        else rl.home_team\n    end as favored_team,\n    case\n        when rl.visiting_team_elo_rating > a.elo_rating then 1 else 0\n    end as visiting_team_above_avg,\n    case\n        when rl.home_team_elo_rating > a.elo_rating then 1 else 0\n    end as home_team_above_avg,\n    case\n        when rl.winning_team = rl.home_team then rl.visiting_team else rl.home_team\n    end as losing_team,\n    lr.game_date,\n    lr.home_team_score,\n    lr.visiting_team_score,\n    h.team as hmtm,\n    v.team as vstm,\n    s.type\nfrom \"nba\".\"main\".\"nba_elo_rollforward\" rl\nleft join cte_avg_elo a on 1 = 1\nleft join \"nba\".\"main\".\"nba_latest_results\" lr on lr.game_id = rl.game_id\nleft join \"nba\".\"main\".\"nba_teams\" h on h.team_long = rl.home_team\nleft join \"nba\".\"main\".\"nba_teams\" v on v.team_long = rl.visiting_team\nleft join \"nba\".\"main\".\"nba_schedules\" s on s.game_id = rl.game_id", "relation_name": "\"nba\".\"main\".\"nba_results_log\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:46.103765Z", "completed_at": "2024-09-15T02:48:46.105890Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:46.106042Z", "completed_at": "2024-09-15T02:48:47.709848Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6177113056182861, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.reg_season_simulator", "compiled": true, "compiled_code": "select\n    r.scenario_id,\n    s.*,\n    ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n    r.rand_result,\n    case\n        when lr.include_actuals = true\n        then lr.winning_team_short\n        when\n            ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - 100)::real/400)+1))) * 10000 >= r.rand_result\n        then s.home_team\n        else s.visiting_team\n    end as winning_team,\n    coalesce(lr.include_actuals, false) as include_actuals,\n    lr.home_team_score as actual_home_team_score,\n    lr.visiting_team_score as actual_visiting_team_score,\n    lr.margin as actual_margin\nfrom \"nba\".\"main\".\"nba_schedules\" s\nleft join \"nba\".\"main\".\"nba_random_num_gen\" r on r.game_id = s.game_id\nleft join \"nba\".\"main\".\"nba_latest_results\" lr on lr.game_id = s.game_id\nwhere s.type in ('reg_season', 'tournament', 'knockout')", "relation_name": "\"nba\".\"main\".\"reg_season_simulator\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:47.722839Z", "completed_at": "2024-09-15T02:48:47.724777Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:47.724940Z", "completed_at": "2024-09-15T02:48:47.885795Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.20704102516174316, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_elo_history", "compiled": true, "compiled_code": "\n\nselect a.*\nfrom 'data/nba/nba_elo.csv' a\nunion all\nselect\n    l.game_date as date,\n    2024 as season,\n    null as nuetral,\n    'r' as playoff,\n    l.hmtm as team1,\n    l.vstm as team2,\n    r.home_team_elo_rating as elo1_pre,\n    r.visiting_team_elo_rating as elo2_pre,\n    null as elo_prob1,\n    null as elo_prob2,\n    case\n        when l.home_team_score > l.visiting_team_score\n        then r.home_team_elo_rating - r.elo_change\n        else r.home_team_elo_rating + r.elo_change\n    end as elo1_post,\n    case\n        when l.home_team_score > l.visiting_team_score\n        then r.visiting_team_elo_rating + r.elo_change\n        else r.visiting_team_elo_rating - r.elo_change\n    end as elo2_post,\n    l.home_team_score as score1,\n    l.visiting_team_score as score2\nfrom \"nba\".\"main\".\"nba_elo_rollforward\" r\nleft join \"nba\".\"main\".\"nba_results_log\" l on r.game_id = l.game_id", "relation_name": "\"nba\".\"main\".\"nba_elo_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:47.931216Z", "completed_at": "2024-09-15T02:48:47.932860Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:47.933041Z", "completed_at": "2024-09-15T02:48:47.949301Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03867912292480469, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_results_by_team", "compiled": true, "compiled_code": "from \"nba\".\"main\".\"nba_results_log\"\nselect\n    game_id,\n    'home' as team_type,\n    hmtm as team,\n    home_team as team_long,\n    home_team_score as score,\n    case when home_team = winning_team then 'WIN' else 'LOSS' end as game_results,\n    home_team_score - visiting_team_score as margin,\n    type\nunion all\nfrom \"nba\".\"main\".\"nba_results_log\"\nselect\n    game_id,\n    'visitor' as team_type,\n    vstm as team,\n    visiting_team as team_long,\n    visiting_team_score as score,\n    case when visiting_team = winning_team then 'WIN' else 'LOSS' end as game_results,\n    visiting_team_score - home_team_score as margin,\n    type", "relation_name": "\"nba\".\"main\".\"nba_results_by_team\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:47.971294Z", "completed_at": "2024-09-15T02:48:47.974080Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:47.974242Z", "completed_at": "2024-09-15T02:48:47.996819Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04148411750793457, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.reg_season_actuals_enriched", "compiled": true, "compiled_code": "\n\nwith\n    cte_wins as (\n        select winning_team, count(*) as wins\n        from \"nba\".\"main\".\"nba_latest_results\"\n        group by all\n    ),\n\n    cte_losses as (\n        select losing_team, count(*) as losses\n        from \"nba\".\"main\".\"nba_latest_results\"\n        group by all\n    ),\n\n    cte_favored_wins as (\n        select lr.winning_team, count(*) as wins\n        from \"nba\".\"main\".\"nba_latest_results\" lr\n        inner join\n            \"nba\".\"main\".\"nba_results_log\" r\n            on r.game_id = lr.game_id\n            and r.favored_team = lr.winning_team\n        group by all\n    ),\n\n    cte_favored_losses as (\n        select lr.losing_team, count(*) as losses\n        from \"nba\".\"main\".\"nba_latest_results\" lr\n        inner join\n            \"nba\".\"main\".\"nba_results_log\" r\n            on r.game_id = lr.game_id\n            and r.favored_team = lr.losing_team\n        group by all\n    ),\n\n    cte_avg_opponent_wins as (\n        select lr.winning_team, count(*) as wins\n        from \"nba\".\"main\".\"nba_latest_results\" lr\n        inner join\n            \"nba\".\"main\".\"nba_results_log\" r\n            on r.game_id = lr.game_id\n            and (\n                (lr.winning_team = r.home_team and r.visiting_team_above_avg = 1)\n                or (lr.winning_team = r.visiting_team and r.home_team_above_avg = 1)\n            )\n        group by all\n    ),\n\n    cte_avg_opponent_losses as (\n        select lr.losing_team, count(*) as losses\n        from \"nba\".\"main\".\"nba_latest_results\" lr\n        inner join\n            \"nba\".\"main\".\"nba_results_log\" r\n            on r.game_id = lr.game_id\n            and (\n                (lr.losing_team = r.visiting_team and r.home_team_above_avg = 1)\n                or (lr.losing_team = r.home_team and r.visiting_team_above_avg = 1)\n            )\n        group by all\n    ),\n\n    cte_home_wins as (\n        select lr.home_team, count(*) as wins\n        from \"nba\".\"main\".\"nba_latest_results\" lr\n        where lr.home_team = lr.winning_team\n        group by all\n    ),\n\n    cte_home_losses as (\n        select lr.home_team, count(*) as losses\n        from \"nba\".\"main\".\"nba_latest_results\" lr\n        where lr.home_team = lr.losing_team\n        group by all\n    )\n\nselect\n    t.team,\n    coalesce(w.wins, 0) as wins,\n    coalesce(l.losses, 0) as losses,\n    coalesce(fw.wins, 0) as wins_as_favorite,\n    coalesce(fl.losses, 0) as losses_as_favorite,\n    coalesce(w.wins, 0) - coalesce(fw.wins, 0) as wins_as_underdog,\n    coalesce(l.losses, 0) - coalesce(fl.losses, 0) as losses_as_underdog,\n    coalesce(aw.wins, 0) as wins_vs_good_teams,\n    coalesce(al.losses, 0) as losses_vs_good_teams,\n    coalesce(w.wins, 0) - coalesce(aw.wins, 0) as wins_vs_bad_teams,\n    coalesce(l.losses, 0) - coalesce(al.losses, 0) as losses_vs_bad_teams,\n    coalesce(hw.wins, 0) as home_wins,\n    coalesce(hl.losses, 0) as home_losses,\n    coalesce(w.wins, 0) - coalesce(hw.wins, 0) as away_wins,\n    coalesce(l.losses, 0) - coalesce(hl.losses, 0) as away_losses\nfrom \"nba\".\"main\".\"nba_teams\" t\nleft join cte_wins w on w.winning_team = t.team_long\nleft join cte_losses l on l.losing_team = t.team_long\nleft join cte_favored_wins fw on fw.winning_team = t.team_long\nleft join cte_favored_losses fl on fl.losing_team = t.team_long\nleft join cte_avg_opponent_wins aw on aw.winning_team = t.team_long\nleft join cte_avg_opponent_losses al on al.losing_team = t.team_long\nleft join cte_home_wins hw on hw.home_team = t.team_long\nleft join cte_home_losses hl on hl.home_team = t.team_long", "relation_name": "\"nba\".\"main\".\"reg_season_actuals_enriched\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:48.014225Z", "completed_at": "2024-09-15T02:48:48.016058Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:48.016211Z", "completed_at": "2024-09-15T02:48:48.029859Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03323078155517578, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.reg_season_end", "compiled": true, "compiled_code": "with\n    cte_wins as (\n        select\n            s.scenario_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team then s.home_conf else s.visiting_conf\n            end as conf,\n            /*    CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating, */\n            count(*) as wins\n        from \"nba\".\"main\".\"reg_season_simulator\" s\n        group by all\n    ),\n\n    cte_ranked_wins as (\n        select\n            *,\n            -- no tiebreaker, so however row number handles order ties will need to be\n            -- dealt with\n            row_number() over (\n                partition by scenario_id, conf order by wins desc, winning_team desc\n            ) as season_rank\n        from cte_wins\n\n    ),\n\n    cte_made_playoffs as (\n        select\n            *,\n            case when season_rank <= 10 then 1 else 0 end as made_playoffs,\n            case when season_rank between 7 and 10 then 1 else 0 end as made_play_in,\n            conf || '-' || season_rank::text as seed\n        from cte_ranked_wins\n    )\n\nselect mp.*, le.elo_rating, 0 as sim_start_game_id\nfrom cte_made_playoffs mp\nleft join \"nba\".\"main\".\"nba_latest_elo\" le on le.team = mp.winning_team", "relation_name": "\"nba\".\"main\".\"reg_season_end\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:49.913892Z", "completed_at": "2024-09-15T02:48:49.919631Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:49.920161Z", "completed_at": "2024-09-15T02:48:49.953755Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06409502029418945, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_season_teams", "compiled": true, "compiled_code": "select c.*\nfrom\n    (\n        select a.season, a.team1 as team\n        from \"nba\".\"main\".\"nba_elo_history\" a\n        union all\n        select b.season, b.team2\n        from \"nba\".\"main\".\"nba_elo_history\" b\n    ) as c\ngroup by all\norder by c.team", "relation_name": "\"nba\".\"main\".\"nba_season_teams\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:49.978250Z", "completed_at": "2024-09-15T02:48:49.980054Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:49.980245Z", "completed_at": "2024-09-15T02:48:49.995280Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03309178352355957, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_seasons", "compiled": true, "compiled_code": "select a.season from \"nba\".\"main\".\"nba_elo_history\" a group by all order by a.season", "relation_name": "\"nba\".\"main\".\"nba_seasons\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:50.012596Z", "completed_at": "2024-09-15T02:48:50.014583Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:50.014757Z", "completed_at": "2024-09-15T02:48:50.028425Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02978038787841797, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.reg_season_predictions", "compiled": true, "compiled_code": "with\n    cte_team_scores as (\n        from \"nba\".\"main\".\"nba_results_by_team\"\n        select team, avg(score) as pts\n        group by all\n    ),\n    cte_interim_calcs as (\n        select\n            game_id,\n            date,\n            home_team,\n            home_team_elo_rating,\n            visiting_team,\n            visiting_team_elo_rating,\n            home_team_win_probability,\n            winning_team,\n            include_actuals,\n            count(*) as occurances,\n            CASE WHEN home_team_win_probability/10000 >= 0.5 \n        THEN '-' || ROUND( home_team_win_probability/10000 / ( 1.0 - home_team_win_probability/10000 ) * 100 )::int\n        ELSE '+' || ((( 1.0 - home_team_win_probability/10000 ) / (home_team_win_probability/10000::real ) * 100)::int)\n    END as american_odds,\n            type,\n            actual_home_team_score,\n            actual_visiting_team_score,\n            case\n                when actual_home_team_score > actual_visiting_team_score\n                then actual_margin * -1\n                else actual_margin\n            end as actual_margin,\n            (h.pts + v.pts) / 2.0 as avg_score,\n            round(\n                case\n                    when home_team_win_probability / 10000 >= 0.50\n                    then round(-30.564 * home_team_win_probability / 10000 + 14.763, 1)\n                    else round(-30.564 * home_team_win_probability / 10000 + 15.801, 1)\n                end\n                * 2,\n                0\n            )\n            / 2.0 as implied_line\n        from \"nba\".\"main\".\"reg_season_simulator\" s\n        left join cte_team_scores h on h.team = s.home_team\n        left join cte_team_scores v on v.team = s.visiting_team\n        group by all\n    ),\n    cte_final as (\n        select\n            *,\n            round(avg_score - (implied_line / 2.0), 0) as home_score,\n            round(avg_score + (implied_line / 2.0), 0) as visiting_score\n        from cte_interim_calcs\n    )\nselect\n    *,\n    home_team\n    || ' '\n    || home_score::int\n    || ' - '\n    || visiting_score::int\n    || ' '\n    || visiting_team as predicted_score\nfrom cte_final", "relation_name": "\"nba\".\"main\".\"reg_season_predictions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:50.043806Z", "completed_at": "2024-09-15T02:48:50.045909Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:50.046068Z", "completed_at": "2024-09-15T02:48:50.478049Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4749610424041748, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.playin_sim_r1", "compiled": true, "compiled_code": "select\n    r.scenario_id,\n    s.game_id,\n    ev.conf as conf,\n    ev.winning_team as visiting_team,\n    ev.elo_rating as visiting_team_elo_rating,\n    eh.winning_team as home_team,\n    eh.elo_rating as home_team_elo_rating,\n    ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000\n    as home_team_win_probability,\n    r.rand_result,\n    case\n        when\n            ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000\n            >= r.rand_result\n        then eh.winning_team\n        else ev.winning_team\n    end as winning_team\nfrom \"nba\".\"main\".\"nba_schedules\" s\nleft join \"nba\".\"main\".\"nba_random_num_gen\" r on r.game_id = s.game_id\nleft join\n    \"nba\".\"main\".\"reg_season_end\" eh\n    on s.home_team = eh.seed\n    and r.scenario_id = eh.scenario_id\nleft join\n    \"nba\".\"main\".\"reg_season_end\" ev\n    on s.visiting_team = ev.seed\n    and r.scenario_id = ev.scenario_id\nwhere s.type = 'playin_r1'", "relation_name": "\"nba\".\"main\".\"playin_sim_r1\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:50.520150Z", "completed_at": "2024-09-15T02:48:50.522164Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:50.522321Z", "completed_at": "2024-09-15T02:48:50.718809Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.21660900115966797, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.nba_team_stats", "compiled": true, "compiled_code": "\n\nwith\n    cte_games as (\n        select\n            team1,\n            team2,\n            score1,\n            score2,\n            playoff,\n            case when score1 > score2 then team1 else team2 end as winner,\n            case when score1 < score2 then team1 else team2 end as loser,\n            case when team1 = t.team then elo1_pre else elo2_pre end as elo,\n            case when team1 = t.team then score1 else score2 end as pf,\n            case when team1 = t.team then score2 else score1 end as pa,\n            t.team || ':' || t.season as key,\n            t.team,\n            t.season\n        from \"nba\".\"main\".\"nba_elo_history\" h\n        left join\n            \"nba\".\"main\".\"nba_season_teams\" t\n            on (t.team = h.team1 or t.team = h.team2)\n            and h.season = t.season\n    )\nselect\n    key,\n    count(*) as ct,\n    count(*) filter (where winner = team and playoff = 'r') as wins,\n    - count(*) filter (where loser = team and playoff = 'r') as losses,\n    count(*) filter (\n        where winner = team and team1 = team and playoff = 'r'\n    ) as home_wins, - count(*) filter (\n        where loser = team and team1 = team and playoff = 'r'\n    ) as home_losses,\n    count(*) filter (\n        where winner = team and team2 = team and playoff = 'r'\n    ) as away_wins, - count(*) filter (\n        where loser = team and team2 = team and playoff = 'r'\n    ) as away_losses,\n    count(*) filter (where winner = team and playoff <> 'r') as playoff_wins,\n    - count(*) filter (where loser = team and playoff <> 'r') as playoff_losses,\n    avg(pf) as pf,\n    avg(- pa) as pa,\n    avg(pf) - avg(pa) as margin,\n    min(elo) as min_elo,\n    avg(elo) as avg_elo,\n    max(elo) as max_elo,\n    team as team,\n    season as season\nfrom cte_games\ngroup by all", "relation_name": "\"nba\".\"main\".\"nba_team_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:50.738103Z", "completed_at": "2024-09-15T02:48:50.740818Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:50.740972Z", "completed_at": "2024-09-15T02:48:50.760154Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03671383857727051, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.tournament_end", "compiled": true, "compiled_code": "with\n    cte_wins as (\n        select\n            s.scenario_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team then s.home_conf else s.visiting_conf\n            end as conf,\n            count(*) as wins,\n            sum(case when include_actuals = true then 1 else 0 end) as actual_wins\n        from \"nba\".\"main\".\"reg_season_simulator\" s\n        where s.type = 'tournament'\n        group by all\n    ),\n\n    cte_losses as (\n        select\n            s.scenario_id,\n            case\n                when s.home_team = s.winning_team then s.visiting_team else s.home_team\n            end as losing_team,\n            case\n                when s.winning_team = s.home_team then s.visiting_conf else s.home_conf\n            end as conf,\n            count(*) as losses,\n            sum(case when include_actuals = true then 1 else 0 end) as actual_losses\n        from \"nba\".\"main\".\"reg_season_simulator\" s\n        where s.type = 'tournament'\n        group by all\n    ),\n\n    cte_results_with_group as (\n        select\n            scenarios.scenario_id,\n            t.team as winning_team,\n            t.conf,\n            coalesce(w.wins, 0) as wins,\n            coalesce(l.losses, 0) as losses,\n            t.tournament_group,\n            coalesce(w.actual_wins, 0) as actual_wins,\n            coalesce(l.actual_losses, 0) as actual_losses\n        from \"nba\".\"main\".\"nba_teams\" t\n        left join\n            (\n                select i.generate_series as scenario_id\n                from generate_series(1, 10000) as i\n            ) as scenarios\n            on 1 = 1\n        left join\n            cte_wins w\n            on t.team = w.winning_team\n            and scenarios.scenario_id = w.scenario_id\n        left join\n            cte_losses l\n            on t.team = l.losing_team\n            and scenarios.scenario_id = l.scenario_id\n    ),\n\n    cte_home_margin as (\n        select\n            t.team,\n            coalesce(\n                sum(coalesce(- h.actual_margin, - h.implied_line)), 0\n            ) as home_pt_diff\n        from \"nba\".\"main\".\"nba_teams\" t\n        left join\n            \"nba\".\"main\".\"reg_season_predictions\" h\n            on h.home_team = t.team\n            and h.type = 'tournament'\n            -- conditional join on reg season predictions\n            and case\n                when h.actual_margin is null\n                then h.winning_team = h.home_team\n                else 1 = 1\n            end\n        group by all\n    ),\n\n    cte_visitor_margin as (\n        select\n            t.team,\n            coalesce(\n                sum(coalesce(v.actual_margin, v.implied_line)), 0\n            ) as visitor_pt_diff\n        from \"nba\".\"main\".\"nba_teams\" t\n        left join\n            \"nba\".\"main\".\"reg_season_predictions\" v\n            on v.visiting_team = t.team\n            and v.type = 'tournament'\n            -- conditional join on reg season predictions\n            and case\n                when v.actual_margin is null\n                then v.winning_team = v.home_team\n                else 1 = 1\n            end\n        group by all\n    ),\n\n    cte_head_to_head as (\n        select\n            g.scenario_id,\n            g.winning_team,\n            case\n                when g.winning_team = g.home_team then g.visiting_team else g.home_team\n            end as losing_team\n        from \"nba\".\"main\".\"reg_season_simulator\" g\n        where type = 'tournament'\n    ),\n\n    cte_head_to_head_wins as (\n        select h.scenario_id, h.winning_team as team, count(*) as h2h_wins\n        from cte_head_to_head h\n        inner join\n            cte_wins w\n            on h.winning_team = w.winning_team\n            and h.scenario_id = w.scenario_id\n            and h.losing_team in (\n                select winning_team\n                from cte_wins\n                where\n                    wins = w.wins\n                    and winning_team != w.winning_team\n                    and scenario_id = w.scenario_id\n            )\n        group by all\n    ),\n\n    cte_fuzz as (\n        select\n            r.scenario_id,\n            r.winning_team,\n            ((r.wins - r.actual_wins) * floor(random() * 5))\n            + ((r.losses - r.actual_losses) * floor(random() * -5)) as fuzz\n        from cte_results_with_group r\n    ),\n\n    /* tiebreaking criteria: https://www.nba.com/news/in-season-tournament-101\n\n  \u2022 Head-to-head record in the Group Stage;\n  \u2022 Point differential in the Group Stage;\n  \u2022 Total points scored in the Group Stage;\n  \u2022 Regular season record from the 2022-23 NBA regular season; and\n  \u2022 Random drawing (in the unlikely scenario that two or more teams are still tied following the previous tiebreakers).\n\n*/\n    cte_ranked_wins as (\n        select\n            r.*,\n            h2h.h2h_wins,\n            -- fuzzing pt diff by scenario via brute force (7 pt swing either way)\n            home_pt_diff + visitor_pt_diff + f.fuzz as pt_diff,\n            -- no tiebreaker, so however row number handles order ties will need to be\n            -- dealt with\n            row_number() over (\n                partition by r.scenario_id, tournament_group\n                order by wins desc, h2h_wins desc, pt_diff desc\n            ) as group_rank\n        from cte_results_with_group r\n        left join cte_home_margin h on h.team = r.winning_team\n        left join cte_visitor_margin v on v.team = r.winning_team\n        left join\n            cte_head_to_head_wins h2h\n            on h2h.team = r.winning_team\n            and h2h.scenario_id = r.scenario_id\n        left join\n            cte_fuzz f\n            on f.scenario_id = r.scenario_id\n            and f.winning_team = r.winning_team\n    ),\n\n    cte_wildcard as (\n        select\n            scenario_id,\n            winning_team,\n            conf,\n            wins,\n            pt_diff,\n            group_rank,\n            row_number() over (\n                partition by scenario_id, conf\n                order by wins desc, pt_diff desc, random()\n            ) as wildcard_rank\n        from cte_ranked_wins r\n        where group_rank = 2\n    ),\n\n    cte_made_tournament as (\n        select\n            w.*,\n            case when w.group_rank = 1 then 1 else 0 end as made_tournament,\n            case\n                when wc.wildcard_rank = 1 and wc.wildcard_rank is not null then 1 else 0\n            end as made_wildcard,\n            w.tournament_group || '-' || w.group_rank::text as seed\n        from cte_ranked_wins w\n        left join\n            cte_wildcard wc\n            on wc.winning_team = w.winning_team\n            and wc.scenario_id = w.scenario_id\n    )\n\nselect mp.*, le.elo_rating, 0 as sim_start_game_id\nfrom cte_made_tournament mp\nleft join \"nba\".\"main\".\"nba_latest_elo\" le on le.team = mp.winning_team", "relation_name": "\"nba\".\"main\".\"tournament_end\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:50.776163Z", "completed_at": "2024-09-15T02:48:50.777648Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:50.777804Z", "completed_at": "2024-09-15T02:48:50.811198Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06638503074645996, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.playin_sim_r1_end", "compiled": true, "compiled_code": "with\n    cte_playin_details as (\n        select\n            s.scenario_id,\n            s.game_id,\n            s.winning_team,\n            case\n                when s.winning_team = s.home_team\n                then s.home_team_elo_rating\n                else s.visiting_team_elo_rating\n            end as winning_team_elo_rating,\n            s.conf as conf,\n            case\n                when s.winning_team = s.home_team then s.visiting_team else s.home_team\n            end as losing_team,\n            case\n                when s.winning_team = s.home_team\n                then s.visiting_team_elo_rating\n                else s.home_team_elo_rating\n            end as losing_team_elo_rating,\n            case\n                when s.game_id in (1231, 1234)\n                then 'winner advance'\n                when s.game_id in (1232, 1235)\n                then 'loser eliminated'\n            end as result\n        from \"nba\".\"main\".\"playin_sim_r1\" s\n    )\n\nselect\n    *,\n    case\n        when game_id in (1231, 1234)\n        then losing_team\n        when game_id in (1232, 1235)\n        then winning_team\n    end as remaining_team\nfrom cte_playin_details", "relation_name": "\"nba\".\"main\".\"playin_sim_r1_end\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:50.844058Z", "completed_at": "2024-09-15T02:48:50.846145Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:50.846299Z", "completed_at": "2024-09-15T02:48:50.887348Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07416391372680664, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.playin_sim_r2", "compiled": true, "compiled_code": "select\n    r.scenario_id,\n    s.game_id,\n    s.home_team[7:] as home_team_id,\n    s.visiting_team[8:] as visiting_team_id,\n    ev.conf as conf,\n    ev.remaining_team as visiting_team,\n    ev.winning_team_elo_rating as visiting_team_elo_rating,\n    eh.remaining_team as home_team,\n    eh.losing_team_elo_rating as home_team_elo_rating,\n    ( 1 - (1 / (10 ^ (-( EV.winning_team_elo_rating - EH.losing_team_elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n    r.rand_result,\n    case\n        when\n            ( 1 - (1 / (10 ^ (-( EV.winning_team_elo_rating - EH.losing_team_elo_rating - 100)::real/400)+1))) * 10000 >= r.rand_result\n        then eh.remaining_team\n        else ev.remaining_team\n    end as winning_team\nfrom \"nba\".\"main\".\"nba_schedules\" s\nleft join \"nba\".\"main\".\"nba_random_num_gen\" r on r.game_id = s.game_id\nleft join\n    \"nba\".\"main\".\"playin_sim_r1_end\" eh\n    on r.scenario_id = eh.scenario_id\n    and eh.game_id = s.home_team[7:]\nleft join\n    \"nba\".\"main\".\"playin_sim_r1_end\" ev\n    on r.scenario_id = ev.scenario_id\n    and ev.game_id = s.visiting_team[8:]\nwhere s.type = 'playin_r2'", "relation_name": "\"nba\".\"main\".\"playin_sim_r2\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:50.919655Z", "completed_at": "2024-09-15T02:48:50.921190Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:50.921346Z", "completed_at": "2024-09-15T02:48:50.947285Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.052243947982788086, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.playin_sim_r2_end", "compiled": true, "compiled_code": "select\n    p1.scenario_id,\n    p1.conf,\n    p1.winning_team,\n    p1.conf || '-7' as seed,\n    p1.winning_team_elo_rating\nfrom \"nba\".\"main\".\"playin_sim_r1_end\" p1\nwhere p1.result = 'winner advance'\nunion all\nselect\n    p2.scenario_id,\n    p2.conf as conf,\n    p2.winning_team,\n    p2.conf || '-8' as seed,\n    case\n        when p2.winning_team = p2.home_team\n        then p2.home_team_elo_rating\n        else p2.visiting_team_elo_rating\n    end as elo_rating\nfrom \"nba\".\"main\".\"playin_sim_r2\" p2", "relation_name": "\"nba\".\"main\".\"playin_sim_r2_end\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:50.973423Z", "completed_at": "2024-09-15T02:48:50.975007Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:50.975161Z", "completed_at": "2024-09-15T02:48:51.228256Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.27904391288757324, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.initialize_seeding", "compiled": true, "compiled_code": "with\n    cte_teams as (\n        select scenario_id, conf, winning_team, seed, elo_rating\n        from \"nba\".\"main\".\"reg_season_end\"\n        where season_rank < 7\n        union all\n        select *\n        from \"nba\".\"main\".\"playin_sim_r2_end\"\n    )\n\nselect t.*, 0 as sim_start_game_id\nfrom cte_teams t", "relation_name": "\"nba\".\"main\".\"initialize_seeding\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:51.254048Z", "completed_at": "2024-09-15T02:48:51.257485Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:51.257651Z", "completed_at": "2024-09-15T02:48:51.464674Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.24813508987426758, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.playoff_sim_r1", "compiled": true, "compiled_code": "with\n    cte_playoff_sim as (\n-- depends-on: \"nba\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"nba\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"nba\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"nba\".\"main\".\"initialize_seeding\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"nba\".\"main\".\"initialize_seeding\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r1'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id)\n\n    SELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"nba\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "relation_name": "\"nba\".\"main\".\"playoff_sim_r1\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:51.503778Z", "completed_at": "2024-09-15T02:48:51.505633Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:51.505788Z", "completed_at": "2024-09-15T02:48:51.641446Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16896891593933105, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.playoff_sim_r2", "compiled": true, "compiled_code": "with\n    cte_playoff_sim as (\n-- depends-on: \"nba\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"nba\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"nba\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"nba\".\"main\".\"playoff_sim_r1\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"nba\".\"main\".\"playoff_sim_r1\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r2'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id)\n\n    SELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"nba\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "relation_name": "\"nba\".\"main\".\"playoff_sim_r2\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:51.674182Z", "completed_at": "2024-09-15T02:48:51.676906Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:51.677072Z", "completed_at": "2024-09-15T02:48:51.788746Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1437687873840332, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.playoff_sim_r3", "compiled": true, "compiled_code": "with\n    cte_playoff_sim as (\n-- depends-on: \"nba\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"nba\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"nba\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"nba\".\"main\".\"playoff_sim_r2\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"nba\".\"main\".\"playoff_sim_r2\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r3'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id)\n\n    SELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"nba\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "relation_name": "\"nba\".\"main\".\"playoff_sim_r3\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-15T02:48:51.819440Z", "completed_at": "2024-09-15T02:48:51.821267Z"}, {"name": "execute", "started_at": "2024-09-15T02:48:51.821424Z", "completed_at": "2024-09-15T02:48:51.910855Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11763286590576172, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sports_sims.playoff_sim_r4", "compiled": true, "compiled_code": "with\n    cte_playoff_sim as (\n-- depends-on: \"nba\".\"main\".\"nba_random_num_gen\"\n\n    WITH cte_step_1 AS (\n        SELECT\n        R.scenario_id,\n        S.game_id,\n        S.series_id,\n        S.visiting_team AS visitor_key,\n        S.home_team AS home_key,\n        EV.winning_team AS visiting_team,\n        EV.elo_rating AS visiting_team_elo_rating,\n        EH.winning_team AS home_team,\n        EH.elo_rating AS home_team_elo_rating,\n        ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 as home_team_win_probability,\n        R.rand_result,\n        CASE\n            WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 100)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n            ELSE EV.winning_team\n        END AS winning_team \n        FROM \"nba\".\"main\".\"nba_schedules\" S\n        LEFT JOIN \"nba\".\"main\".\"nba_random_num_gen\" R ON R.game_id = S.game_id\n        LEFT JOIN  \"nba\".\"main\".\"playoff_sim_r3\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n        LEFT JOIN  \"nba\".\"main\".\"playoff_sim_r3\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n        WHERE S.type =  'playoffs_r4'\n    ),\n    cte_step_2 AS (\n        SELECT step1.*,\n            ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n        FROM cte_step_1 step1\n    ),\n    cte_final_game AS (\n        SELECT scenario_id,\n            series_id,\n            game_id\n        FROM cte_step_2\n        WHERE series_result = 4\n    )\n    SELECT step2.* \n    FROM cte_step_2 step2\n        INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n            AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\n    ORDER BY step2.scenario_id, \n        step2.series_id, \n        step2.game_id)\n\n    SELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"nba\".\"main\".\"nba_xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "relation_name": "\"nba\".\"main\".\"playoff_sim_r4\""}], "elapsed_time": 7.641306161880493, "args": {"strict_mode": false, "enable_legacy_logger": false, "version_check": true, "introspect": true, "empty": false, "defer": false, "printer_width": 80, "require_resource_names_without_spaces": false, "warn_error_options": {"include": [], "exclude": []}, "profiles_dir": "/Users/leifangyu/workspace/Spider2-C/evaluation_examples/dbt/source/dbt_nba", "project_dir": "/Users/leifangyu/workspace/Spider2-C/evaluation_examples/dbt/source/dbt_nba", "send_anonymous_usage_stats": true, "log_path": "/Users/leifangyu/workspace/Spider2-C/evaluation_examples/dbt/source/dbt_nba/logs", "favor_state": false, "use_colors": true, "write_json": true, "invocation_command": "dbt run", "cache_selected_only": false, "partial_parse_file_diff": true, "vars": {}, "log_file_max_bytes": 10485760, "indirect_selection": "eager", "show_resource_report": false, "log_format": "default", "log_format_file": "debug", "log_level_file": "debug", "quiet": false, "require_explicit_package_overrides_for_builtin_materializations": true, "select": [], "macro_debugging": false, "log_level": "info", "static_parser": true, "partial_parse": true, "which": "run", "print": true, "use_colors_file": true, "populate_cache": true, "source_freshness_run_project_hooks": false, "exclude": []}}