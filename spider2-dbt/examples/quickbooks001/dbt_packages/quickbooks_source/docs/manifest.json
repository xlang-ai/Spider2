{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.16", "generated_at": "2024-07-17T22:39:33.146419Z", "invocation_id": "0488b465-58f3-4156-b397-f86f039c8970", "env": {}, "project_name": "quickbooks_source_integration_tests", "project_id": "aa9386a7fba3fd9e54dc759cf0b5037c", "user_id": "81581f81-d5af-4143-8fbf-c2f0001e4f56", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"seed.quickbooks_source_integration_tests.bill_payment_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "bill_payment_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "bill_payment_data.csv", "original_file_path": "seeds/bill_payment_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.bill_payment_data", "fqn": ["quickbooks_source_integration_tests", "bill_payment_data"], "alias": "bill_payment_data", "checksum": {"name": "sha256", "checksum": "654e27fe99f7891483ba67ae67202f00a166df46c6463965f831bd47d3bc53cf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.6534889, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"bill_payment_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.bundle_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "bundle_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "bundle_data.csv", "original_file_path": "seeds/bundle_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.bundle_data", "fqn": ["quickbooks_source_integration_tests", "bundle_data"], "alias": "bundle_data", "checksum": {"name": "sha256", "checksum": "090d802f05c558f45f05a760b5fb1fa879dfeb26c737e6356dcf6bfcb9fbbefb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.6612952, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"bundle_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.bill_payment_line_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "bill_payment_line_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "bill_payment_line_data.csv", "original_file_path": "seeds/bill_payment_line_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.bill_payment_line_data", "fqn": ["quickbooks_source_integration_tests", "bill_payment_line_data"], "alias": "bill_payment_line_data", "checksum": {"name": "sha256", "checksum": "ae8e7b58ddb78ecbcb7facd257a29f27db08cb69e4014ee40e3a07d02e7ea51a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.662532, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"bill_payment_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.payment_line_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "payment_line_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "payment_line_data.csv", "original_file_path": "seeds/payment_line_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.payment_line_data", "fqn": ["quickbooks_source_integration_tests", "payment_line_data"], "alias": "payment_line_data", "checksum": {"name": "sha256", "checksum": "6e54b93beaddd05e86b071eb43833845bfc76a841b2780e3e1059f6d661cd238"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.663729, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"payment_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.vendor_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "vendor_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "vendor_data.csv", "original_file_path": "seeds/vendor_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.vendor_data", "fqn": ["quickbooks_source_integration_tests", "vendor_data"], "alias": "vendor_data", "checksum": {"name": "sha256", "checksum": "98ce313c6a3acf1262de91d25905b85fe760227a534703d9c6bc0e4149b055b5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.664895, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.address_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "address_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "address_data.csv", "original_file_path": "seeds/address_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.address_data", "fqn": ["quickbooks_source_integration_tests", "address_data"], "alias": "address_data", "checksum": {"name": "sha256", "checksum": "2b7bfb3f76e41e3fee0443c10a939053b0edb31b9f4be1bcd0af8d4b686da7b0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.666195, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"address_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.purchase_order_linked_txn_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "purchase_order_linked_txn_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "purchase_order_linked_txn_data.csv", "original_file_path": "seeds/purchase_order_linked_txn_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.purchase_order_linked_txn_data", "fqn": ["quickbooks_source_integration_tests", "purchase_order_linked_txn_data"], "alias": "purchase_order_linked_txn_data", "checksum": {"name": "sha256", "checksum": "783640948c1f42079de535df23609064f3195e20ce34dffe56ac54f0c0f16ada"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.667347, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_linked_txn_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.invoice_line_bundle_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "invoice_line_bundle_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "invoice_line_bundle_data.csv", "original_file_path": "seeds/invoice_line_bundle_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.invoice_line_bundle_data", "fqn": ["quickbooks_source_integration_tests", "invoice_line_bundle_data"], "alias": "invoice_line_bundle_data", "checksum": {"name": "sha256", "checksum": "f1cdc81c2fb1ec4f76c5226e2f5e4ed6f17f7b446cb53cfa539d8caafb252a5c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.668499, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_line_bundle_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.invoice_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "invoice_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "invoice_data.csv", "original_file_path": "seeds/invoice_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.invoice_data", "fqn": ["quickbooks_source_integration_tests", "invoice_data"], "alias": "invoice_data", "checksum": {"name": "sha256", "checksum": "cd8527ea11d19987f98860a31d2d99ac78cf045bf1af9c135c354310edd7c65b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.6696498, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.payment_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "payment_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "payment_data.csv", "original_file_path": "seeds/payment_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.payment_data", "fqn": ["quickbooks_source_integration_tests", "payment_data"], "alias": "payment_data", "checksum": {"name": "sha256", "checksum": "1d04470de19b7e48f687a9ee6300cfaefcb777e49316bbd55d52a12f34e4d357"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.670966, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"payment_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.invoice_line_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "invoice_line_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "invoice_line_data.csv", "original_file_path": "seeds/invoice_line_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.invoice_line_data", "fqn": ["quickbooks_source_integration_tests", "invoice_line_data"], "alias": "invoice_line_data", "checksum": {"name": "sha256", "checksum": "a05f10afc36145c8449665e8f314939d4a039eb87969448d98685d5964decfb7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.6720982, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.deposit_line_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "deposit_line_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "deposit_line_data.csv", "original_file_path": "seeds/deposit_line_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.deposit_line_data", "fqn": ["quickbooks_source_integration_tests", "deposit_line_data"], "alias": "deposit_line_data", "checksum": {"name": "sha256", "checksum": "43cf2e49d2ccc28c38ba7db60582b36e46c0ec96827b475e145975fdf8bf9d4e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.67324, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"deposit_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.estimate_line_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "estimate_line_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "estimate_line_data.csv", "original_file_path": "seeds/estimate_line_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.estimate_line_data", "fqn": ["quickbooks_source_integration_tests", "estimate_line_data"], "alias": "estimate_line_data", "checksum": {"name": "sha256", "checksum": "cff0f0d902a16e9ab0b877d174dd67536537fc669c16505c2efadb0721ce6c26"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.6743722, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"estimate_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.purchase_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "purchase_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "purchase_data.csv", "original_file_path": "seeds/purchase_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.purchase_data", "fqn": ["quickbooks_source_integration_tests", "purchase_data"], "alias": "purchase_data", "checksum": {"name": "sha256", "checksum": "ac38b4fff602a8b6503082d010e026efc561fb55567fb52b4c3cd0a6fb295cfc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.675539, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.refund_receipt_line_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "refund_receipt_line_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "refund_receipt_line_data.csv", "original_file_path": "seeds/refund_receipt_line_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.refund_receipt_line_data", "fqn": ["quickbooks_source_integration_tests", "refund_receipt_line_data"], "alias": "refund_receipt_line_data", "checksum": {"name": "sha256", "checksum": "8a67266f87e49dda0de57a6d66b4c1a053af545a6c8d394f8df6470b98cd31c7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.676845, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"refund_receipt_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.credit_memo_line_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "credit_memo_line_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "credit_memo_line_data.csv", "original_file_path": "seeds/credit_memo_line_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.credit_memo_line_data", "fqn": ["quickbooks_source_integration_tests", "credit_memo_line_data"], "alias": "credit_memo_line_data", "checksum": {"name": "sha256", "checksum": "01898bc6786c3c48ebf5aa4170ea54257dd66e6fc38931067c9012bc639f6994"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.677974, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"credit_memo_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.bill_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "bill_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "bill_data.csv", "original_file_path": "seeds/bill_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.bill_data", "fqn": ["quickbooks_source_integration_tests", "bill_data"], "alias": "bill_data", "checksum": {"name": "sha256", "checksum": "3241a63054f0ffb9737a402a18fbe8286e86114e18425db853ff0673fc410314"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.679105, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"bill_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.bill_linked_txn_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "bill_linked_txn_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "bill_linked_txn_data.csv", "original_file_path": "seeds/bill_linked_txn_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.bill_linked_txn_data", "fqn": ["quickbooks_source_integration_tests", "bill_linked_txn_data"], "alias": "bill_linked_txn_data", "checksum": {"name": "sha256", "checksum": "14f88fc0716d3c253043a68af9b026ab54a93a33784c682b6ec700671f1e03c7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.680227, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"bill_linked_txn_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.vendor_credit_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "vendor_credit_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "vendor_credit_data.csv", "original_file_path": "seeds/vendor_credit_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.vendor_credit_data", "fqn": ["quickbooks_source_integration_tests", "vendor_credit_data"], "alias": "vendor_credit_data", "checksum": {"name": "sha256", "checksum": "ccc4a1ca3967e3eb7f61d2831242f07b1e5a77006dd4312a17fd36e7ea008bea"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.681522, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_credit_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.customer_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "customer_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "customer_data.csv", "original_file_path": "seeds/customer_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.customer_data", "fqn": ["quickbooks_source_integration_tests", "customer_data"], "alias": "customer_data", "checksum": {"name": "sha256", "checksum": "2b72eabf58923823033e461d1960295c156b31bf5ace046fc388c336fd96a29d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.682647, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"customer_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.estimate_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "estimate_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "estimate_data.csv", "original_file_path": "seeds/estimate_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.estimate_data", "fqn": ["quickbooks_source_integration_tests", "estimate_data"], "alias": "estimate_data", "checksum": {"name": "sha256", "checksum": "b74a86af936ab89d26162e2f0184387241d748c1008380ac1e7a7e1c475c69a8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.683774, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"estimate_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.purchase_line_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "purchase_line_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "purchase_line_data.csv", "original_file_path": "seeds/purchase_line_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.purchase_line_data", "fqn": ["quickbooks_source_integration_tests", "purchase_line_data"], "alias": "purchase_line_data", "checksum": {"name": "sha256", "checksum": "33355dd453e68ac5a5afa2f71e3c515dc414cdd55a489c65d2c2c4fa06fd18e7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.6849012, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.journal_entry_line_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "journal_entry_line_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "journal_entry_line_data.csv", "original_file_path": "seeds/journal_entry_line_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.journal_entry_line_data", "fqn": ["quickbooks_source_integration_tests", "journal_entry_line_data"], "alias": "journal_entry_line_data", "checksum": {"name": "sha256", "checksum": "a17bbafe90f2f00403538657b9f45c14d929ce2d9b5b29a55828855756024516"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.686046, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"journal_entry_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.journal_entry_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "journal_entry_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "journal_entry_data.csv", "original_file_path": "seeds/journal_entry_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.journal_entry_data", "fqn": ["quickbooks_source_integration_tests", "journal_entry_data"], "alias": "journal_entry_data", "checksum": {"name": "sha256", "checksum": "6f717632a6fe0901786fbdfed63db69af1c928331ed9cb83f9fd389fe2b9ab83"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.687328, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"journal_entry_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.bill_line_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "bill_line_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "bill_line_data.csv", "original_file_path": "seeds/bill_line_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.bill_line_data", "fqn": ["quickbooks_source_integration_tests", "bill_line_data"], "alias": "bill_line_data", "checksum": {"name": "sha256", "checksum": "ea538cd77d1034c9b0d941677d4f92040a5e73cf839135ac7173a0b30649dbd1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.688459, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"bill_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.bundle_item_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "bundle_item_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "bundle_item_data.csv", "original_file_path": "seeds/bundle_item_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.bundle_item_data", "fqn": ["quickbooks_source_integration_tests", "bundle_item_data"], "alias": "bundle_item_data", "checksum": {"name": "sha256", "checksum": "69218d4dc89cf8da55d1a5aab12bbe45129b48377fa7615f0030616d8c34fe9d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.68958, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"bundle_item_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.invoice_linked_txn_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "invoice_linked_txn_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "invoice_linked_txn_data.csv", "original_file_path": "seeds/invoice_linked_txn_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.invoice_linked_txn_data", "fqn": ["quickbooks_source_integration_tests", "invoice_linked_txn_data"], "alias": "invoice_linked_txn_data", "checksum": {"name": "sha256", "checksum": "88dda316adf9a5921231dbe5bd5d0c425391ccf9b72a7d6c937155d67b3b45ba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.6907158, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_linked_txn_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.account_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "account_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "account_data.csv", "original_file_path": "seeds/account_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.account_data", "fqn": ["quickbooks_source_integration_tests", "account_data"], "alias": "account_data", "checksum": {"name": "sha256", "checksum": "21711c5f4113de909d70da0ef80633513b932ca8db2558503e1cc0e4bb663a8b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.692344, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"account_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.purchase_order_line_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "purchase_order_line_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "purchase_order_line_data.csv", "original_file_path": "seeds/purchase_order_line_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.purchase_order_line_data", "fqn": ["quickbooks_source_integration_tests", "purchase_order_line_data"], "alias": "purchase_order_line_data", "checksum": {"name": "sha256", "checksum": "39d5f88917f7d5d8ec70465d8569a38bd19d72bfb26bc495f3231b3e6599c945"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.6934888, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.transfer_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "transfer_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "transfer_data.csv", "original_file_path": "seeds/transfer_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.transfer_data", "fqn": ["quickbooks_source_integration_tests", "transfer_data"], "alias": "transfer_data", "checksum": {"name": "sha256", "checksum": "79139d758013f9fe26aec7a1283224df79f5bb780c3b896ed8ead578bc4f8ff5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.694623, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"transfer_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.purchase_order_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "purchase_order_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "purchase_order_data.csv", "original_file_path": "seeds/purchase_order_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.purchase_order_data", "fqn": ["quickbooks_source_integration_tests", "purchase_order_data"], "alias": "purchase_order_data", "checksum": {"name": "sha256", "checksum": "b9348ee111769ebb6e08dda6b5cf73209cd853d86267de1a28574bf630e02431"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.6957471, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.sales_receipt_line_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "sales_receipt_line_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "sales_receipt_line_data.csv", "original_file_path": "seeds/sales_receipt_line_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.sales_receipt_line_data", "fqn": ["quickbooks_source_integration_tests", "sales_receipt_line_data"], "alias": "sales_receipt_line_data", "checksum": {"name": "sha256", "checksum": "19895ca1cfb2ebe0a4e8ef0e5c5ef9c0dbb505053cc4b98bb06de8bd3ead523f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.696882, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"sales_receipt_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.vendor_credit_line_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "vendor_credit_line_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "vendor_credit_line_data.csv", "original_file_path": "seeds/vendor_credit_line_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.vendor_credit_line_data", "fqn": ["quickbooks_source_integration_tests", "vendor_credit_line_data"], "alias": "vendor_credit_line_data", "checksum": {"name": "sha256", "checksum": "8c60276eb72f29fcd60b6aff2615648b71ce47e0b738331b54f86c988a979737"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.698157, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_credit_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.credit_card_payment_txn_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "credit_card_payment_txn_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "credit_card_payment_txn_data.csv", "original_file_path": "seeds/credit_card_payment_txn_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.credit_card_payment_txn_data", "fqn": ["quickbooks_source_integration_tests", "credit_card_payment_txn_data"], "alias": "credit_card_payment_txn_data", "checksum": {"name": "sha256", "checksum": "b841a2f9402ba5f52789b27002186dd63d63c303bce30c02aba104b787c048d6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.699295, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"credit_card_payment_txn_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.credit_memo_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "credit_memo_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "credit_memo_data.csv", "original_file_path": "seeds/credit_memo_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.credit_memo_data", "fqn": ["quickbooks_source_integration_tests", "credit_memo_data"], "alias": "credit_memo_data", "checksum": {"name": "sha256", "checksum": "e78544a27c48f4cad0b44f943800fa35faf9fd82d6c0a058535b980e59e1ca9e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.700428, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"credit_memo_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.department_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "department_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "department_data.csv", "original_file_path": "seeds/department_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.department_data", "fqn": ["quickbooks_source_integration_tests", "department_data"], "alias": "department_data", "checksum": {"name": "sha256", "checksum": "079a79543e6cfcdac83eeeeb9672451756cc6c48e7d4c572d9f761b9314b18d4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.7015731, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"department_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.item_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "item_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "item_data.csv", "original_file_path": "seeds/item_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.item_data", "fqn": ["quickbooks_source_integration_tests", "item_data"], "alias": "item_data", "checksum": {"name": "sha256", "checksum": "8057771cc5c837c6193ad423e6a52f7058f6001550eaa0c15098857415aee7d4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.702873, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"item_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.sales_receipt_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "sales_receipt_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "sales_receipt_data.csv", "original_file_path": "seeds/sales_receipt_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.sales_receipt_data", "fqn": ["quickbooks_source_integration_tests", "sales_receipt_data"], "alias": "sales_receipt_data", "checksum": {"name": "sha256", "checksum": "2ac15faf0cdff7d71155fc20bb86e69d0a67d25f2172f220dbe850d45738230b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.703996, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"sales_receipt_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.deposit_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "deposit_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "deposit_data.csv", "original_file_path": "seeds/deposit_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.deposit_data", "fqn": ["quickbooks_source_integration_tests", "deposit_data"], "alias": "deposit_data", "checksum": {"name": "sha256", "checksum": "e1760cc02ddb9a24070897c75be589a777585167b423c7704c7c60a76ba98a15"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.7051241, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"deposit_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "seed.quickbooks_source_integration_tests.refund_receipt_data": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "refund_receipt_data", "resource_type": "seed", "package_name": "quickbooks_source_integration_tests", "path": "refund_receipt_data.csv", "original_file_path": "seeds/refund_receipt_data.csv", "unique_id": "seed.quickbooks_source_integration_tests.refund_receipt_data", "fqn": ["quickbooks_source_integration_tests", "refund_receipt_data"], "alias": "refund_receipt_data", "checksum": {"name": "sha256", "checksum": "0bfb44ee366239221dfee9e985b0c66d5a7cbc6d0bb8c18cf02acba7616c135d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"transaction_date": "date", "due_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transaction_date": "date", "due_date": "date"}}, "created_at": 1721255626.706261, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"refund_receipt_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "depends_on": {"macros": []}}, "model.quickbooks_source.stg_quickbooks__journal_entry_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__journal_entry_line", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__journal_entry_line.sql", "original_file_path": "models/stg_quickbooks__journal_entry_line.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line", "fqn": ["quickbooks_source", "stg_quickbooks__journal_entry_line"], "alias": "stg_quickbooks__journal_entry_line", "checksum": {"name": "sha256", "checksum": "4516b55a1200da7d649fb094705d8d74566704462e11b0c6f4533d7ca266e1a5"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing individual line items of a transaction associated with a journal entry.", "columns": {"journal_entry_id": {"name": "journal_entry_id", "description": "Unique identifier of the journal entry record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the journal entry record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account id of the account which the journal entry is credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the journal entry line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the customer which the journal entry is credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the journal entry is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the journal entry is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billable_status": {"name": "billable_status", "description": "Status of the journal entry indicating whether it is billable or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the journal entry line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "posting_type": {"name": "posting_type", "description": "Indicates whether this JournalEntry line is a debit or credit. Valid values are Credit and Debit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for this journal entry.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.603532, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"", "raw_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_journal_entry', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__journal_entry_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__journal_entry_line_tmp')),\n                staging_columns=get_journal_entry_line_columns()\n            )\n        }}\n        \n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(journal_entry_id as {{ dbt.type_string() }}) as journal_entry_id,\n        index,\n        cast(account_id as {{ dbt.type_string() }}) as account_id,\n        amount,\n        cast(customer_id as {{ dbt.type_string() }}) as customer_id,\n        cast(department_id as {{ dbt.type_string() }}) as department_id,\n        cast(class_id as {{ dbt.type_string() }}) as class_id,\n        description,\n        billable_status,\n        posting_type,\n        cast(vendor_id as {{ dbt.type_string() }}) as vendor_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__journal_entry_line_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__journal_entry_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_journal_entry_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__journal_entry_line.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    billable_status\n    \n as \n    \n    billable_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    posting_type\n    \n as \n    \n    posting_type\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_applicable_on\n    \n as \n    \n    tax_applicable_on\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(journal_entry_id as TEXT) as journal_entry_id,\n        index,\n        cast(account_id as TEXT) as account_id,\n        amount,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        description,\n        billable_status,\n        posting_type,\n        cast(vendor_id as TEXT) as vendor_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__transfer": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__transfer", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__transfer.sql", "original_file_path": "models/stg_quickbooks__transfer.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__transfer", "fqn": ["quickbooks_source", "stg_quickbooks__transfer"], "alias": "stg_quickbooks__transfer", "checksum": {"name": "sha256", "checksum": "80d61f3899f388de1ba0d6d3811e78ce9db6814214a88e8a314fa111214193c8"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing records of transfers. A Transfer represents a transaction where funds are moved between two accounts from the company's QuickBooks chart of accounts.", "columns": {"transfer_id": {"name": "transfer_id", "description": "Unique identifier of the transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from_account_id": {"name": "from_account_id", "description": "Account id of the account which the transfer is from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "to_account_id": {"name": "to_account_id", "description": "Account id of the account which the transfer is to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date which the transfer occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.6111438, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer\"", "raw_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_transfer', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__transfer_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__transfer_tmp')),\n                staging_columns=get_transfer_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as transfer_id,\n        amount,\n        cast(from_account_id as {{ dbt.type_string() }}) as from_account_id,\n        cast(to_account_id as {{ dbt.type_string() }}) as to_account_id,\n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__transfer_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__transfer_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_transfer_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__transfer_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__transfer.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    from_account_id\n    \n as \n    \n    from_account_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    to_account_id\n    \n as \n    \n    to_account_id\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as transfer_id,\n        amount,\n        cast(from_account_id as TEXT) as from_account_id,\n        cast(to_account_id as TEXT) as to_account_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__bill_payment_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__bill_payment_line", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__bill_payment_line.sql", "original_file_path": "models/stg_quickbooks__bill_payment_line.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line", "fqn": ["quickbooks_source", "stg_quickbooks__bill_payment_line"], "alias": "stg_quickbooks__bill_payment_line", "checksum": {"name": "sha256", "checksum": "658cf9c659df8b7a0ac31c6b2d2e00896b94f7fc51aecbd3e43422e29151b4fb"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing individual line items of a bill payment, which are recorded within the `bill_payment` table.", "columns": {"bill_payment_id": {"name": "bill_payment_id", "description": "The Unique identifier of the bill payment record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of payments associated with the parent bill payment record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_id": {"name": "bill_id", "description": "Unique identifier of the bill record associated with the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_id": {"name": "deposit_id", "description": "Unique identifier of the deposit record associated with the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expense_id": {"name": "expense_id", "description": "Unique identifier of the purchase record associated with the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "linked_bill_payment_id": {"name": "linked_bill_payment_id", "description": "Unique identifier of the bill record associated with the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_credit_id": {"name": "vendor_credit_id", "description": "Unique identifier of the vendor_credit record associated with the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "Unique identifier of the journal entry record associated with the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.58688, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line\"", "raw_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__bill_payment_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__bill_payment_line_tmp')),\n                staging_columns=get_bill_payment_line_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n  \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_payment_id as {{ dbt.type_string() }}) as bill_payment_id,\n        index,\n        amount,\n        cast(bill_id as {{ dbt.type_string() }}) as bill_id,\n        deposit_id,\n        expense_id,\n        journal_entry_id,\n        linked_bill_payment_id,\n        vendor_credit_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__bill_payment_line_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__bill_payment_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_bill_payment_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__bill_payment_line.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_credit_card_id\n    \n as \n    \n    bill_payment_credit_card_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    linked_bill_payment_id\n    \n as \n    \n    linked_bill_payment_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        index,\n        amount,\n        cast(bill_id as TEXT) as bill_id,\n        deposit_id,\n        expense_id,\n        journal_entry_id,\n        linked_bill_payment_id,\n        vendor_credit_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__payment_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__payment_line", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__payment_line.sql", "original_file_path": "models/stg_quickbooks__payment_line.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line", "fqn": ["quickbooks_source", "stg_quickbooks__payment_line"], "alias": "stg_quickbooks__payment_line", "checksum": {"name": "sha256", "checksum": "0fbd1adbbf9c8c71e606f1987f6f645d363121a71306098dd17e5f3c073b39c5"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing individual line items recorded within a payment.", "columns": {"payment_id": {"name": "payment_id", "description": "Unique identifier of the payment record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the payment record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the payment line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "Journal entry reference associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_id": {"name": "deposit_id", "description": "Deposit reference associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "Invoice reference associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_memo_id": {"name": "credit_memo_id", "description": "credit memo reference associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.604446, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line\"", "raw_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_payment', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__payment_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__payment_line_tmp')),\n                staging_columns=get_payment_line_columns()\n            )\n        }}\n        \n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(payment_id as {{ dbt.type_string() }}) as payment_id,\n        index,\n        amount,\n        journal_entry_id,\n        deposit_id,\n        cast(invoice_id as {{ dbt.type_string() }}) as invoice_id,\n        credit_memo_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__payment_line_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__payment_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_payment_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__payment_line_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__payment_line.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(payment_id as TEXT) as payment_id,\n        index,\n        amount,\n        journal_entry_id,\n        deposit_id,\n        cast(invoice_id as TEXT) as invoice_id,\n        credit_memo_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__vendor": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__vendor", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__vendor.sql", "original_file_path": "models/stg_quickbooks__vendor.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__vendor", "fqn": ["quickbooks_source", "stg_quickbooks__vendor"], "alias": "stg_quickbooks__vendor", "checksum": {"name": "sha256", "checksum": "5cdb5d8c19632b511599aeb891ddc9cf2bc2298e452914c257e9f8b313efa34e"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing all vendor records. A vendor is the seller from whom your company purchases any service or product.", "columns": {"vendor_id": {"name": "vendor_id", "description": "Unique identifier of the vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "Name or number of the account associated with this vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_address_id": {"name": "billing_address_id", "description": "Address reference for the billing address of the vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether the vendor is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the open balance amount or the amount unpaid by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The name of the company associated with the person or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the vendor was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts associated with this vendor are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "The name of the vendor as displayed. Must be unique across all Vendor, Customer, and Employee objects.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "web_url": {"name": "web_url", "description": "Website url associated with the vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_vendor_1099": {"name": "is_vendor_1099", "description": "Boolean indicating whether this vendor is an independent contractor; someone who is given a 1099-MISC form at the end of the year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table"}, "created_at": 1721255627.6131032, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_quickbooks__vendor_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__vendor_tmp')),\n                staging_columns=get_vendor_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as vendor_id,\n        account_number,\n        active as is_active,\n        balance,\n        cast(billing_address_id as {{ dbt.type_string() }}) as billing_address_id,\n        company_name,\n        created_at,\n        currency_id,\n        display_name,\n        web_url,\n        vendor_1099 as is_vendor_1099,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__vendor_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__vendor_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_vendor_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__vendor.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone\n    \n as \n    \n    alternate_phone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_phone\n    \n as \n    \n    mobile_phone\n    \n, \n    \n    \n    other_contacts\n    \n as \n    \n    other_contacts\n    \n, \n    \n    \n    primary_phone\n    \n as \n    \n    primary_phone\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_identifier\n    \n as \n    \n    tax_identifier\n    \n, \n    \n    \n    term_id\n    \n as \n    \n    term_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_1099\n    \n as \n    \n    vendor_1099\n    \n, \n    \n    \n    web_url\n    \n as \n    \n    web_url\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_id,\n        account_number,\n        active as is_active,\n        balance,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        company_name,\n        created_at,\n        currency_id,\n        display_name,\n        web_url,\n        vendor_1099 as is_vendor_1099,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__invoice_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__invoice_line", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__invoice_line.sql", "original_file_path": "models/stg_quickbooks__invoice_line.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line", "fqn": ["quickbooks_source", "stg_quickbooks__invoice_line"], "alias": "stg_quickbooks__invoice_line", "checksum": {"name": "sha256", "checksum": "3dd2b7cd4fd25540efca287c76c5ccb76ecf698064cef051509cf01ca6b9d870"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing individual records from invoices.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier of the invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the invoice line record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "Account reference for an item invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Item reference for an item invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_class_id": {"name": "sales_item_class_id", "description": "Class reference for an item invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of the item for an item invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item for an item invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "Account reference for a discount invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Class reference for a discount invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the invoice line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bundle_quantity": {"name": "bundle_quantity", "description": "Quantity of items included in the invoice bundle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bundle_id": {"name": "bundle_id", "description": "Reference to the bundle associated with the invoice line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Reference to the account associated with the invoice line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item associated with the invoice line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity of the item included on the invoice line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "detail_type": {"name": "detail_type", "description": "Individual line items of a transaction. Valid line types include SalesItemLineDetail, DescriptionOnly (also used for inline Subtotal lines), DiscountLineDetail and SubTotalLineDetail (used for the overall transaction). FYI - Records synced prior to 11/2021 will have a null value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.5996852, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line\"", "raw_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__invoice_line_tmp') }}\n\n),\n\nfields as ( \n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__invoice_line_tmp')),\n                staging_columns=get_invoice_line_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as {{ dbt.type_string() }}) as invoice_id,\n        index,\n        amount,\n        cast(sales_item_account_id as {{ dbt.type_string() }}) as sales_item_account_id,\n        cast(sales_item_item_id as {{ dbt.type_string() }}) as sales_item_item_id,\n        cast(sales_item_class_id as {{ dbt.type_string() }}) as sales_item_class_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as {{ dbt.type_string() }}) as discount_account_id,\n        detail_type,\n        cast(discount_class_id as {{ dbt.type_string() }}) as discount_class_id,\n        description,\n        quantity,\n        bundle_quantity,\n        cast(bundle_id as {{ dbt.type_string() }}) as bundle_id,\n        cast(account_id as {{ dbt.type_string() }}) as account_id,\n        cast(item_id as {{ dbt.type_string() }}) as item_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__invoice_line_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__invoice_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_invoice_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_line_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__invoice_line.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_tmp\"\n\n),\n\nfields as ( \n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        detail_type,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        quantity,\n        bundle_quantity,\n        cast(bundle_id as TEXT) as bundle_id,\n        cast(account_id as TEXT) as account_id,\n        cast(item_id as TEXT) as item_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__estimate": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__estimate", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__estimate.sql", "original_file_path": "models/stg_quickbooks__estimate.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__estimate", "fqn": ["quickbooks_source", "stg_quickbooks__estimate"], "alias": "stg_quickbooks__estimate", "checksum": {"name": "sha256", "checksum": "fdd6491a32b918fc67d7b595f773acf0e341dd42f31cf8652665d536773bbcb3"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing estimates. An estimate represents a proposal for a financial transaction from a business to a customer for goods or services proposed to be sold, including proposed pricing.", "columns": {"estimate_id": {"name": "estimate_id", "description": "Unique identifier of the estimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the estimate record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the estimate was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency which the estimate was provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated with the estimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the estimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date which the estimate is due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total amount of all line items included in the estimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date which the estimate occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_status": {"name": "transaction_status", "description": "Current status of the estimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.597745, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate\"", "raw_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_estimate', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__estimate_tmp') }}\n\n),\n \nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__estimate_tmp')),\n                staging_columns=get_estimate_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as estimate_id,\n        cast(class_id as {{ dbt.type_string() }}) as class_id,\n        created_at,\n        currency_id,\n        customer_id,\n        cast(department_id as {{ dbt.type_string() }}) as department_id,\n        cast( {{ dbt.date_trunc('day', 'due_date') }} as date) as due_date, \n        exchange_rate,\n        total_amount,\n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__estimate_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__estimate_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_estimate_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__estimate_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__estimate.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_tmp\"\n\n),\n \nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepted_by\n    \n as \n    \n    accepted_by\n    \n, \n    \n    \n    accepted_date\n    \n as \n    \n    accepted_date\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    expiration_date\n    \n as \n    \n    expiration_date\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as estimate_id,\n        cast(class_id as TEXT) as class_id,\n        created_at,\n        currency_id,\n        customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        exchange_rate,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__credit_memo_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__credit_memo_line", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__credit_memo_line.sql", "original_file_path": "models/stg_quickbooks__credit_memo_line.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line", "fqn": ["quickbooks_source", "stg_quickbooks__credit_memo_line"], "alias": "stg_quickbooks__credit_memo_line", "checksum": {"name": "sha256", "checksum": "8ac0a7118ae843a7c8e6818daa2cf5301a6e2cf1abecc89605729219581a1e0c"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing individual records of credit memos.", "columns": {"credit_memo_id": {"name": "credit_memo_id", "description": "Unique identifier of the credit memo record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records from a credit memo record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the credit memo line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "The identifier of the account associated with the credited refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_class_id": {"name": "sales_item_class_id", "description": "Reference to the class associated with the refunded item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Reference to the item with the refunded item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of item related to the credit memo line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item related to the credit memo line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "The identifier of the account associated with the income account used to track discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Reference to the class associated with the discount of the refunded item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the credit memo line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.593187, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line\"", "raw_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_credit_memo', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__credit_memo_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__credit_memo_line_tmp')),\n                staging_columns=get_credit_memo_line_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(credit_memo_id as {{ dbt.type_string() }}) as credit_memo_id,\n        index,\n        amount,\n        cast(sales_item_account_id as {{ dbt.type_string() }}) as sales_item_account_id,\n        cast(sales_item_class_id as {{ dbt.type_string() }}) as sales_item_class_id,\n        cast(sales_item_item_id as {{ dbt.type_string() }}) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as {{ dbt.type_string() }}) as discount_account_id,\n        cast(discount_class_id as {{ dbt.type_string() }}) as discount_class_id,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__credit_memo_line_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__credit_memo_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_credit_memo_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__credit_memo_line.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(credit_memo_id as TEXT) as credit_memo_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__bundle": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__bundle", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__bundle.sql", "original_file_path": "models/stg_quickbooks__bundle.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__bundle", "fqn": ["quickbooks_source", "stg_quickbooks__bundle"], "alias": "stg_quickbooks__bundle", "checksum": {"name": "sha256", "checksum": "65bf79ea34bcf9732e209a25e0b1b12c8afc653a75b9a12749b0580332d8d3d5"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing all bundles possible to be used within an invoice.", "columns": {"bundle_id": {"name": "bundle_id", "description": "Unique identifier of the bundle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date which the bundle was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether the bundle is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Full name given to the bundle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date when the bundle was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.590497, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle\"", "raw_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice_bundle', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__bundle_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__bundle_tmp')),\n                staging_columns=get_bundle_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as bundle_id,\n        created_at,\n        active as is_active,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n\n    from fields\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_quickbooks__bundle_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__bundle_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_bundle_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__bundle_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__bundle.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    print_grouped_items\n    \n as \n    \n    print_grouped_items\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bundle_id,\n        created_at,\n        active as is_active,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__department": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__department", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__department.sql", "original_file_path": "models/stg_quickbooks__department.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__department", "fqn": ["quickbooks_source", "stg_quickbooks__department"], "alias": "stg_quickbooks__department", "checksum": {"name": "sha256", "checksum": "1659044c58f503e71c44d05b15ac038aecfe57bf321e33b6cd790530d964eb86"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing records representing physical locations such as stores, and sales regions.", "columns": {"department_id": {"name": "department_id", "description": "Unique identifier of the department.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether the department is currently active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the department was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date when the department was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Fully qualified name of the department.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the department.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_sub_department": {"name": "is_sub_department", "description": "Boolean indicating whether the department is a sub department.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_department_id": {"name": "parent_department_id", "description": "Reference to the Unique identifier of the parent department if is_sub_department = true.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.595646, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__department\"", "raw_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_department', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__department_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__department_tmp')),\n                staging_columns=get_department_columns()\n            )\n        }}\n        \n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as department_id,\n        active as is_active,\n        created_at,\n        updated_at,\n        fully_qualified_name,\n        name,\n        sub_department as is_sub_department,\n        parent_department_id,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__department_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__department_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_department_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__department_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__department.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__department_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_department_id\n    \n as \n    \n    parent_department_id\n    \n, \n    \n    \n    sub_department\n    \n as \n    \n    sub_department\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as department_id,\n        active as is_active,\n        created_at,\n        updated_at,\n        fully_qualified_name,\n        name,\n        sub_department as is_sub_department,\n        parent_department_id,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__credit_card_payment_txn": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__credit_card_payment_txn", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__credit_card_payment_txn.sql", "original_file_path": "models/stg_quickbooks__credit_card_payment_txn.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__credit_card_payment_txn", "fqn": ["quickbooks_source", "stg_quickbooks__credit_card_payment_txn"], "alias": "stg_quickbooks__credit_card_payment_txn", "checksum": {"name": "sha256", "checksum": "b55d1388adb41c3bb7c6fb84a70b683186d12c04f11627b854183765fb16c7f4"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing all credit card payment transactions.", "columns": {"credit_card_payment_id": {"name": "credit_card_payment_id", "description": "Unique identifier of the credit card payment transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total amount of money applied to the credit card payment transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bank_account_id": {"name": "bank_account_id", "description": "Reference to the bank account which the credit card payment is debited towards.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_card_account_id": {"name": "credit_card_account_id", "description": "Reference to the credit card account which the credit card payment is credited towards.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp when the credit card payment was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the credit card payment was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency used for the credit card payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date the credit card payment transaction took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating if the credit card payment was deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean indicating if the record is the most recent updated version of the credit card payment transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.59122, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_card_payment_txn\"", "raw_code": "--To enable this model, set the using_invoice_bundle variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_credit_card_payment_txn', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__credit_card_payment_txn_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__credit_card_payment_txn_tmp')),\n                staging_columns=get_credit_card_payment_txn_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as credit_card_payment_id,\n        amount,\n        bank_account_id,\n        credit_card_account_id,\n        created_at,\n        updated_at,\n        currency_id,\n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        _fivetran_deleted,\n        row_number() over (partition by id, updated_at, source_relation order by source_relation, updated_at desc) = 1 as is_most_recent_record,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__credit_card_payment_txn_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__credit_card_payment_txn_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_credit_card_payment_txn_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__credit_card_payment_txn_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__credit_card_payment_txn.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice_bundle variable within your dbt_project.yml file to True.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_card_payment_txn_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_account_id\n    \n as \n    \n    credit_card_account_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as credit_card_payment_id,\n        amount,\n        bank_account_id,\n        credit_card_account_id,\n        created_at,\n        updated_at,\n        currency_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        row_number() over (partition by id, updated_at, source_relation order by source_relation, updated_at desc) = 1 as is_most_recent_record,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__purchase_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__purchase_line", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__purchase_line.sql", "original_file_path": "models/stg_quickbooks__purchase_line.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line", "fqn": ["quickbooks_source", "stg_quickbooks__purchase_line"], "alias": "stg_quickbooks__purchase_line", "checksum": {"name": "sha256", "checksum": "ee8d20a394aa51a62186bc273ac2041bb5299540a8886d515fa120a873662ff1"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing individual line items of a transaction associated with a purchase.", "columns": {"purchase_id": {"name": "purchase_id", "description": "Unique identifier of the purchase record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the purchase record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "Account id of the account which the purchase is credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "The class reference associated with the account based expense purchase line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "Status of the purchase billable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "The customer id associated with the account based expense purchase line", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "Tax code reference associated to the purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "The item reference associated with the item based expense purchase line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense purchase line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_class_id": {"name": "item_expense_class_id", "description": "The class id associated with the item based expense purchase line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "The customer id associated with the item based expense purchase line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the purchase line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table"}, "created_at": 1721255627.605715, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_quickbooks__purchase_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__purchase_line_tmp')),\n                staging_columns=get_purchase_line_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_id as {{ dbt.type_string() }}) as purchase_id,\n        index,\n        cast(account_expense_account_id as {{ dbt.type_string() }}) as account_expense_account_id,\n        cast(account_expense_class_id as {{ dbt.type_string() }}) as account_expense_class_id, \n        account_expense_billable_status,\n        cast(account_expense_customer_id as {{ dbt.type_string() }}) as account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as {{ dbt.type_string() }}) as item_expense_item_id,\n        item_expense_billable_status,\n        cast(item_expense_customer_id as {{ dbt.type_string() }}) as item_expense_customer_id,\n        cast(item_expense_class_id as {{ dbt.type_string() }}) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase_line_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__purchase_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_purchase_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_line_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__purchase_line.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_id as TEXT) as purchase_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id, \n        account_expense_billable_status,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_billable_status,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__purchase": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__purchase", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__purchase.sql", "original_file_path": "models/stg_quickbooks__purchase.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__purchase", "fqn": ["quickbooks_source", "stg_quickbooks__purchase"], "alias": "stg_quickbooks__purchase", "checksum": {"name": "sha256", "checksum": "1893b79d4bda2c17cbb993a5d4c7e6fa6833ec851a30c18a750dd2133c6ec030"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing records of purchase expenses.", "columns": {"purchase_id": {"name": "purchase_id", "description": "Unique identifier of the purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Specifies the account reference to which this purchase is applied based on the PaymentType.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the purchase was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit": {"name": "credit", "description": "Boolean where `false` represents a charge and `true` represents a refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the purchase is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer which the purchase is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date when the purchase occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_type": {"name": "payment_type", "description": "Payment type of the purchase. Type can be Cash, Check, or CreditCard.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for the purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table"}, "created_at": 1721255627.6064541, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_quickbooks__purchase_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__purchase_tmp')),\n                staging_columns=get_purchase_columns()\n            )\n        }}\n        \n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n     \n    select \n        cast(id as {{ dbt.type_string() }}) as purchase_id,\n        cast(account_id as {{ dbt.type_string() }}) as account_id,\n        created_at,\n        cast(doc_number as {{ dbt.type_string() }}) as doc_number,\n        currency_id,\n        exchange_rate,\n        credit,\n        total_amount,\n        payment_type,\n        cast(department_id as {{ dbt.type_string() }}) as department_id,\n        cast(customer_id as {{ dbt.type_string() }}) as customer_id,\n        cast(vendor_id as {{ dbt.type_string() }}) as vendor_id,\n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__purchase_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_purchase_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__purchase.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remit_to_address_id\n    \n as \n    \n    remit_to_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n     \n    select \n        cast(id as TEXT) as purchase_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        exchange_rate,\n        credit,\n        total_amount,\n        payment_type,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        cast(vendor_id as TEXT) as vendor_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__refund_receipt_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__refund_receipt_line", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__refund_receipt_line.sql", "original_file_path": "models/stg_quickbooks__refund_receipt_line.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line", "fqn": ["quickbooks_source", "stg_quickbooks__refund_receipt_line"], "alias": "stg_quickbooks__refund_receipt_line", "checksum": {"name": "sha256", "checksum": "b64cbbb683f3869fa379c6e696c76381a36f6159c8f02ffcc597c42c23f41479"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing individual line items of a refund transaction.", "columns": {"refund_id": {"name": "refund_id", "description": "Unique identifier of the refund record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the refund record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the refund line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the refund line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "Reference to Income account used to track discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Class id of the discount associated with the refunded item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of the item associated with the refund receipt line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item associated with the refund receipt line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "Account id of the account which the refund is credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_class_id": {"name": "sales_item_class_id", "description": "Class id of the refunded item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Item id of the refunded item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_tax_code_id": {"name": "sales_item_tax_code_id", "description": "Tax code id of the tax code associated with the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.608854, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line\"", "raw_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_refund_receipt', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__refund_receipt_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__refund_receipt_line_tmp')),\n                staging_columns=get_refund_receipt_line_columns()\n            )\n        }}\n        \n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(refund_id as {{ dbt.type_string() }}) as refund_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as {{ dbt.type_string() }}) as discount_account_id,\n        cast(discount_class_id as {{ dbt.type_string() }}) as discount_class_id,\n        cast(sales_item_account_id as {{ dbt.type_string() }}) as sales_item_account_id,\n        cast(sales_item_class_id as {{ dbt.type_string() }}) as sales_item_class_id, \n        cast(sales_item_item_id as {{ dbt.type_string() }}) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        sales_item_tax_code_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__refund_receipt_line_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__refund_receipt_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_refund_receipt_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__refund_receipt_line.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(refund_id as TEXT) as refund_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id, \n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        sales_item_tax_code_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__bundle_item": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__bundle_item", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__bundle_item.sql", "original_file_path": "models/stg_quickbooks__bundle_item.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item", "fqn": ["quickbooks_source", "stg_quickbooks__bundle_item"], "alias": "stg_quickbooks__bundle_item", "checksum": {"name": "sha256", "checksum": "09a4714c1eda51603398c47f55a9d1a766a3198b3a10200c3e5048b17ce6f7f2"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Mapping table containing all bundle and item combinations.", "columns": {"bundle_id": {"name": "bundle_id", "description": "Reference to the bundle table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item which the bundle is mapped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_quantity": {"name": "item_quantity", "description": "Total item quantity associated with the bunlde and item mapping.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.590166, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_item\"", "raw_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice_bundle', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__bundle_item_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__bundle_item_tmp')),\n                staging_columns=get_bundle_item_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n  \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bundle_id as {{ dbt.type_string() }}) as bundle_id,\n        cast(item_id as {{ dbt.type_string() }}) as item_id,\n        item_quantity,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__bundle_item_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__bundle_item_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_bundle_item_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__bundle_item_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__bundle_item.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    item_quantity\n    \n as \n    \n    item_quantity\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bundle_id as TEXT) as bundle_id,\n        cast(item_id as TEXT) as item_id,\n        item_quantity,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__credit_memo": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__credit_memo", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__credit_memo.sql", "original_file_path": "models/stg_quickbooks__credit_memo.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo", "fqn": ["quickbooks_source", "stg_quickbooks__credit_memo"], "alias": "stg_quickbooks__credit_memo", "checksum": {"name": "sha256", "checksum": "c566e7e3dce1b07775e0d2ce15d828ce24a44d523328019ca17498a6aa03a7c1"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing credit memo records. A credit memo is a refund or credit of payment or part of a payment for goods or services that have been sold.", "columns": {"credit_memo_id": {"name": "credit_memo_id", "description": "Unique identifier for a credit memo.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the credit memo.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the credit memo.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated with the credit memo.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date when the credit memo occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.593868, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo\"", "raw_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_credit_memo', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__credit_memo_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__credit_memo_tmp')),\n                staging_columns=get_credit_memo_columns()\n            )\n        }}\n        \n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as credit_memo_id,\n        balance,\n        cast(doc_number as {{ dbt.type_string() }}) as doc_number,\n        total_amount,\n        currency_id,\n        cast(class_id as {{ dbt.type_string() }}) as class_id,\n        cast(department_id as {{ dbt.type_string() }}) as department_id,\n        cast(customer_id as {{ dbt.type_string() }}) as customer_id,\n        exchange_rate,\n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__credit_memo_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__credit_memo_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_credit_memo_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__credit_memo_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__credit_memo.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remaining_credit\n    \n as \n    \n    remaining_credit\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as credit_memo_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(class_id as TEXT) as class_id,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__purchase_order": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__purchase_order", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__purchase_order.sql", "original_file_path": "models/stg_quickbooks__purchase_order.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order", "fqn": ["quickbooks_source", "stg_quickbooks__purchase_order"], "alias": "stg_quickbooks__purchase_order", "checksum": {"name": "sha256", "checksum": "8e15004ff7dd6f58f0b34b708baf4607d233edaaa16bbf228ef67d5c86030879"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing records of purchase orders (PO).", "columns": {"purchase_order_id": {"name": "purchase_order_id", "description": "Unique identifier of the purchase order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the purchase order was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "custom_po_number": {"name": "custom_po_number", "description": "Custom field for PO number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date when the purchase order is due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date when the purchase order occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payable_account_id": {"name": "payable_account_id", "description": "Account id for which the purchase order will credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Purchase order status. Valid values are \"Open\" and \"Closed\".", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for the purchase order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.6081111, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order\"", "raw_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_purchase_order', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_quickbooks__purchase_order_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__purchase_order_tmp')),\n                staging_columns=get_purchase_order_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as {{ dbt.type_string() }}) as purchase_order_id,\n        created_at,\n        custom_po_number,\n        cast(doc_number as {{ dbt.type_string() }}) as doc_number,\n        currency_id,\n        exchange_rate,\n        total_amount,\n        cast(payable_account_id as {{ dbt.type_string() }}) as payable_account_id,\n        cast(vendor_id as {{ dbt.type_string() }}) as vendor_id,\n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        status,\n        cast( {{ dbt.date_trunc('day', 'due_date') }} as date) as due_date, \n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase_order_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__purchase_order_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_purchase_order_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_order_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__purchase_order.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_customer_type\n    \n as \n    \n    custom_customer_type\n    \n, \n    cast(null as TEXT) as \n    \n    custom_po_number\n    \n , \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_address_id\n    \n as \n    \n    vendor_address_id\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as purchase_order_id,\n        created_at,\n        custom_po_number,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        exchange_rate,\n        total_amount,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        cast(vendor_id as TEXT) as vendor_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        status,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__sales_receipt_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__sales_receipt_line", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__sales_receipt_line.sql", "original_file_path": "models/stg_quickbooks__sales_receipt_line.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line", "fqn": ["quickbooks_source", "stg_quickbooks__sales_receipt_line"], "alias": "stg_quickbooks__sales_receipt_line", "checksum": {"name": "sha256", "checksum": "196add17e2234d22a220f6f275691b23f18a3a4e692e7b8d6a63f2996834ae28"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing individual line items of a sales transaction.", "columns": {"sales_receipt_id": {"name": "sales_receipt_id", "description": "Unique identifier of the sales record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the sales record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the sales line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the sales receipt line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "Reference to Income account used to track discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Class id of the discount credited to the sales line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "Account id of the account credited with the sales line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_class_id": {"name": "sales_item_class_id", "description": "Class id of the receipt credited with the sales line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Item id of the item sold in the sale line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_tax_code_id": {"name": "sales_item_tax_code_id", "description": "Tax code id of the tax code associated with the sales line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Total quantity of items included in the sales line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item included on the sales line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.609956, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line\"", "raw_code": "{{ config(enabled=var('using_sales_receipt', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__sales_receipt_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__sales_receipt_line_tmp')),\n                staging_columns=get_sales_receipt_line_columns()\n            )\n        }}\n        \n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(sales_receipt_id as {{ dbt.type_string() }}) as sales_receipt_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as {{ dbt.type_string() }}) as discount_account_id,\n        cast(discount_class_id as {{ dbt.type_string() }}) as discount_class_id,\n        cast(sales_item_account_id as {{ dbt.type_string() }}) as sales_item_account_id,\n        cast(sales_item_class_id as {{ dbt.type_string() }}) as sales_item_class_id,\n        cast(sales_item_item_id as {{ dbt.type_string() }}) as sales_item_item_id,\n        sales_item_tax_code_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__sales_receipt_line_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__sales_receipt_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_sales_receipt_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__sales_receipt_line.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(sales_receipt_id as TEXT) as sales_receipt_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_tax_code_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__sales_receipt": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__sales_receipt", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__sales_receipt.sql", "original_file_path": "models/stg_quickbooks__sales_receipt.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt", "fqn": ["quickbooks_source", "stg_quickbooks__sales_receipt"], "alias": "stg_quickbooks__sales_receipt", "checksum": {"name": "sha256", "checksum": "9dc669226580ea77ad9dd79053c189d77614d8c9172305158a380cef60c7372c"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing sales receipts that are given to a customer. A sales receipt, payment is received as part of the sale of goods and services. The sales receipt specifies a deposit account where the customer's payment is deposited.", "columns": {"sales_receipt_id": {"name": "sales_receipt_id", "description": "Unique identifier of the sales receipt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "Account to which payment money is deposited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the sale was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the sold to customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the sales receipt is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the sales receipt is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date which the sale occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.6104178, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt\"", "raw_code": "{{ config(enabled=var('using_sales_receipt', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__sales_receipt_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__sales_receipt_tmp')),\n                staging_columns=get_sales_receipt_columns()\n            )\n        }}\n        \n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as sales_receipt_id,\n        balance,\n        cast(doc_number as {{ dbt.type_string() }}) as doc_number,\n        total_amount,\n        cast(deposit_to_account_id as {{ dbt.type_string() }}) as deposit_to_account_id,\n        created_at,\n        cast(customer_id as {{ dbt.type_string() }}) as customer_id,\n        cast(department_id as {{ dbt.type_string() }}) as department_id,\n        cast(class_id as {{ dbt.type_string() }}) as class_id,\n        currency_id,\n        exchange_rate,\n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__sales_receipt_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__sales_receipt_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_sales_receipt_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__sales_receipt_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__sales_receipt.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as sales_receipt_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__purchase_order_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__purchase_order_line", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__purchase_order_line.sql", "original_file_path": "models/stg_quickbooks__purchase_order_line.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_line", "fqn": ["quickbooks_source", "stg_quickbooks__purchase_order_line"], "alias": "stg_quickbooks__purchase_order_line", "checksum": {"name": "sha256", "checksum": "6ae0b5a2541deaa12283dc51b2c10bf1c5d6293358da0f145690d9088c4d1de7"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing individual line items of a transaction associated with a purchase order.", "columns": {"purchase_order_id": {"name": "purchase_order_id", "description": "Unique identifier of the purchase order record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the purchase order record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "Account id of the account which the purchase order is credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "The class reference associated with the account based expense purchase order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "Status of the purchase billable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "The customer id associated with the account based purchase order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "Tax code reference associated to the purchase order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "The item reference associated with the item based expense purchase order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense purchase order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "The customer id associated with the item based purchase order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the purchase line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.607025, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line\"", "raw_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_purchase_order', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_quickbooks__purchase_order_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__purchase_order_line_tmp')),\n                staging_columns=get_purchase_order_line_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_order_id as {{ dbt.type_string() }}) as purchase_order_id,\n        index,\n        cast(account_expense_account_id as {{ dbt.type_string() }}) as account_expense_account_id,\n        account_expense_class_id,\n        account_expense_billable_status,\n        cast(account_expense_customer_id as {{ dbt.type_string() }}) as account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as {{ dbt.type_string() }}) as item_expense_item_id,\n        item_expense_billable_status,\n        cast(item_expense_customer_id as {{ dbt.type_string() }}) as item_expense_customer_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase_order_line_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__purchase_order_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_purchase_order_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_order_line_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__purchase_order_line.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    purchase_order_id\n    \n as \n    \n    purchase_order_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_order_id as TEXT) as purchase_order_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        account_expense_class_id,\n        account_expense_billable_status,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_billable_status,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__invoice_linked_txn": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__invoice_linked_txn", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__invoice_linked_txn.sql", "original_file_path": "models/stg_quickbooks__invoice_linked_txn.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn", "fqn": ["quickbooks_source", "stg_quickbooks__invoice_linked_txn"], "alias": "stg_quickbooks__invoice_linked_txn", "checksum": {"name": "sha256", "checksum": "bb49211839145c91b7cdcd024fccb07fd423d683a46dad77f89382edf53df703"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Mapping table for invoices records to respective estimate and payment objects.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Reference to the unique invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_id": {"name": "payment_id", "description": "Reference to the respective payment object for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "estimate_id": {"name": "estimate_id", "description": "Reference to the respective estimate object for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the invoice mapping record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.598923, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn\"", "raw_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__invoice_linked_txn_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__invoice_linked_txn_tmp')),\n                staging_columns=get_invoice_linked_txn_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as {{ dbt.type_string() }}) as invoice_id,\n        cast(payment_id as {{ dbt.type_string() }}) as payment_id,\n        cast(estimate_id as {{ dbt.type_string() }}) as estimate_id,\n        index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__invoice_linked_txn_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__invoice_linked_txn_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_invoice_linked_txn_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__invoice_linked_txn.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    charge_credit_id\n    \n as \n    \n    charge_credit_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    reimburse_charge_id\n    \n as \n    \n    reimburse_charge_id\n    \n, \n    \n    \n    statement_charge_id\n    \n as \n    \n    statement_charge_id\n    \n, \n    \n    \n    time_activity_id\n    \n as \n    \n    time_activity_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        cast(payment_id as TEXT) as payment_id,\n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__invoice": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__invoice", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__invoice.sql", "original_file_path": "models/stg_quickbooks__invoice.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__invoice", "fqn": ["quickbooks_source", "stg_quickbooks__invoice"], "alias": "stg_quickbooks__invoice", "checksum": {"name": "sha256", "checksum": "8286df3daa633d4a141a6dc43ea58925b8c648e36f56f7738e29d8624663eeba"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing invoice records. An Invoice represents a sales form where the customer pays for a product or service later.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "Identifies the account to be used for this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date which the deposit transaction occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer reference is associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_address_id": {"name": "billing_address_id", "description": "Reference to the address where the invoice is billed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_id": {"name": "shipping_address_id", "description": "Reference to the address where the invoice is to be shipped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_type": {"name": "delivery_type", "description": "How the invoice is delivered to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date which the invoice payment is due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class to which the invoice is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.601495, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice\"", "raw_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__invoice_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__invoice_tmp')),\n                staging_columns=get_invoice_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as invoice_id,\n        balance,\n        cast(doc_number as {{ dbt.type_string() }}) as doc_number,\n        total_amount,\n        currency_id,\n        cast(department_id as {{ dbt.type_string() }}) as department_id,\n        cast(deposit_to_account_id as {{ dbt.type_string() }}) as deposit_to_account_id,\n        exchange_rate,\n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        cast(customer_id as {{ dbt.type_string() }}) as customer_id,\n        cast(billing_address_id as {{ dbt.type_string() }}) as billing_address_id,\n        shipping_address_id,\n        delivery_type,\n        cast( {{ dbt.date_trunc('day', 'due_date') }} as date) as due_date, \n        cast(class_id as {{ dbt.type_string() }}) as class_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__invoice_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__invoice_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_invoice_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__invoice.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allow_ipnpayment\n    \n as \n    \n    allow_ipnpayment\n    \n, \n    \n    \n    allow_online_achpayment\n    \n as \n    \n    allow_online_achpayment\n    \n, \n    \n    \n    allow_online_credit_card_payment\n    \n as \n    \n    allow_online_credit_card_payment\n    \n, \n    \n    \n    allow_online_payment\n    \n as \n    \n    allow_online_payment\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    billing_bcc_email\n    \n as \n    \n    billing_bcc_email\n    \n, \n    \n    \n    billing_cc_email\n    \n as \n    \n    billing_cc_email\n    \n, \n    \n    \n    billing_email\n    \n as \n    \n    billing_email\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    custom_sales_rep\n    \n as \n    \n    custom_sales_rep\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit\n    \n as \n    \n    deposit\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as invoice_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        shipping_address_id,\n        delivery_type,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        cast(class_id as TEXT) as class_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__bill_payment": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__bill_payment", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__bill_payment.sql", "original_file_path": "models/stg_quickbooks__bill_payment.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment", "fqn": ["quickbooks_source", "stg_quickbooks__bill_payment"], "alias": "stg_quickbooks__bill_payment", "checksum": {"name": "sha256", "checksum": "a0d37a8d17ab821a2dca64277e09e035b6685394a09c8b4e79619b550a7cb69d"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing payment transactions bills that the business owner receives from a vendor for goods or services purchased from the vendor.", "columns": {"bill_payment_id": {"name": "bill_payment_id", "description": "Unique identifier of the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "check_bank_account_id": {"name": "check_bank_account_id", "description": "Account id of the account which the bill payment is credited. Only applicable if bill payment `pay_type` is of type check.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "check_print_status": {"name": "check_print_status", "description": "Status of the check which was used as payment for the bill. Only applicable if bill payment `pay_type` is of type Check.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_card_account_id": {"name": "credit_card_account_id", "description": "Account id of the account which the bill is credited. Only applicable if bill payment `pay_type` is of type CreditCard.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by CurrencyRef. Applicable if multicurrency is enabled for the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to a Department object specifying the location of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_type": {"name": "pay_type", "description": "The payment type. Valid values include Check, CreditCard", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount associated with this payment. This includes the total of all the payments from the payment line details.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of the day the transaction took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for this transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.588546, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment\"", "raw_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__bill_payment_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__bill_payment_tmp')),\n                staging_columns=get_bill_payment_columns()\n            )\n        }}\n        \n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as bill_payment_id,\n        cast(check_bank_account_id as {{ dbt.type_string() }}) as check_bank_account_id,\n        check_print_status,\n        cast(credit_card_account_id as {{ dbt.type_string() }}) as credit_card_account_id,\n        exchange_rate,\n        currency_id,\n        cast(department_id as {{ dbt.type_string() }}) as department_id,\n        pay_type,\n        total_amount,\n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        cast(vendor_id as {{ dbt.type_string() }}) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__bill_payment_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__bill_payment_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_bill_payment_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_payment_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__bill_payment.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    check_bank_account_id\n    \n as \n    \n    check_bank_account_id\n    \n, \n    \n    \n    check_print_status\n    \n as \n    \n    check_print_status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_account_id\n    \n as \n    \n    credit_card_account_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    pay_type\n    \n as \n    \n    pay_type\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_bill_payment\n    \n as \n    \n    process_bill_payment\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_payment_id,\n        cast(check_bank_account_id as TEXT) as check_bank_account_id,\n        check_print_status,\n        cast(credit_card_account_id as TEXT) as credit_card_account_id,\n        exchange_rate,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        pay_type,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__invoice_line_bundle": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__invoice_line_bundle", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__invoice_line_bundle.sql", "original_file_path": "models/stg_quickbooks__invoice_line_bundle.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle", "fqn": ["quickbooks_source", "stg_quickbooks__invoice_line_bundle"], "alias": "stg_quickbooks__invoice_line_bundle", "checksum": {"name": "sha256", "checksum": "40042ced0fa4753a77042f69d19a85a5954fce059c64c0ff5ca0f670570a3875"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing lines of an invoice which were bundled.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier of the invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_line_index": {"name": "invoice_line_index", "description": "Invoice index count of records associated with the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the invoice line bundle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total monetary value of the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Reference to the sales item on the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item on the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Total quantity of the item on the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Total quantity in relation to the sales item on the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Reference to the account associated with the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "Unit price of the line item included on the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.6004639, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle\"", "raw_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice_bundle', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__invoice_line_bundle_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__invoice_line_bundle_tmp')),\n                staging_columns=get_invoice_line_bundle_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as {{ dbt.type_string() }}) as invoice_id,\n        index,\n        cast(class_id as {{ dbt.type_string() }}) as class_id,\n        description,\n        amount,\n        cast(sales_item_item_id as {{ dbt.type_string() }}) as sales_item_item_id,\n        cast(item_id as {{ dbt.type_string() }}) as item_id,\n        quantity,\n        sales_item_quantity,\n        cast(account_id as {{ dbt.type_string() }}) as account_id,\n        unit_price,\n        invoice_line_index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__invoice_line_bundle_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__invoice_line_bundle_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_invoice_line_bundle_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__invoice_line_bundle.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_amount\n    \n as \n    \n    discount_amount\n    \n, \n    \n    \n    discount_rate\n    \n as \n    \n    discount_rate\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_line_index\n    \n as \n    \n    invoice_line_index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    line_num\n    \n as \n    \n    line_num\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    service_date\n    \n as \n    \n    service_date\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        cast(class_id as TEXT) as class_id,\n        description,\n        amount,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(item_id as TEXT) as item_id,\n        quantity,\n        sales_item_quantity,\n        cast(account_id as TEXT) as account_id,\n        unit_price,\n        invoice_line_index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__account": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__account", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__account.sql", "original_file_path": "models/stg_quickbooks__account.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__account", "fqn": ["quickbooks_source", "stg_quickbooks__account"], "alias": "stg_quickbooks__account", "checksum": {"name": "sha256", "checksum": "c363c2c2ed0bd1cdb52064560957c75ad004c3e727f72b5b1bc361e9d8ccf37a"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing components of a Chart Of Accounts and is part of a ledger. It is used to record a total monetary amount allocated against a specific use. Accounts are one of five basic types: asset, liability, revenue (income), expenses, or equity.", "columns": {"account_id": {"name": "account_id", "description": "Unique identifier for an account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "User-defined account number intended to identify the account within the Chart of Accounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_sub_account": {"name": "is_sub_account", "description": "Specifies whether this object represents a parent (false) or a sub_account (true).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "User entered description for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "User recognizable name for the Account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "A detailed account classification that specifies the use of this account. The type is based on the Classification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether an account is currently active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_sub_type": {"name": "account_sub_type", "description": "The account sub-type classification and is based on the AccountType value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "classification": {"name": "classification", "description": "The classification of an account. Not supported for non-posting accounts. Valid values include Asset, Equity, Expense, Liability, Revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency which the account records the balance in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Full name of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the balance amount for the current Account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_with_sub_accounts": {"name": "balance_with_sub_accounts", "description": "Specifies the balance amount for the current Account sub accounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the account was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table"}, "created_at": 1721255627.582104, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account\"", "raw_code": "with base as (\n    select *\n    from {{ ref('stg_quickbooks__account_tmp') }}\n\n),\n\naccount as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__account_tmp')),\n                staging_columns=get_account_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as {{ dbt.type_string() }}) as account_id,\n        cast(account_number as {{ dbt.type_string() }}) as account_number,\n        sub_account as is_sub_account,\n        cast(parent_account_id as {{ dbt.type_string() }}) as parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        classification,\n        balance,\n        balance_with_sub_accounts,\n        active as is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n    from account\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__account_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__account_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_account_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__account_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__account.sql", "compiled": true, "compiled_code": "with base as (\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account_tmp\"\n\n),\n\naccount as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    account_sub_type\n    \n as \n    \n    account_sub_type\n    \n, \n    \n    \n    account_type\n    \n as \n    \n    account_type\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_sub_accounts\n    \n as \n    \n    balance_with_sub_accounts\n    \n, \n    \n    \n    classification\n    \n as \n    \n    classification\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    sub_account\n    \n as \n    \n    sub_account\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as account_id,\n        cast(account_number as TEXT) as account_number,\n        sub_account as is_sub_account,\n        cast(parent_account_id as TEXT) as parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        classification,\n        balance,\n        balance_with_sub_accounts,\n        active as is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n    from account\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__payment": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__payment", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__payment.sql", "original_file_path": "models/stg_quickbooks__payment.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__payment", "fqn": ["quickbooks_source", "stg_quickbooks__payment"], "alias": "stg_quickbooks__payment", "checksum": {"name": "sha256", "checksum": "d0fa9e29f67ad312d9d6b315026fe29cb6febc252406f9ee37bbc9d79d2b6644"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing all payment records. The payment can be applied for a particular customer against multiple Invoices and Credit Memos. It can also be created without any Invoice or Credit Memo, by just specifying an amount.", "columns": {"payment_id": {"name": "payment_id", "description": "Unique identifier of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unapplied_amount": {"name": "unapplied_amount", "description": "Indicates the amount that has not been applied to pay amounts owed for sales transactions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receivable_account_id": {"name": "receivable_account_id", "description": "Identifies the account for obtaining a receivable from this payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "Identifies the account to be used for this payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date when the payment occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to a customer or job.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.6050959, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment\"", "raw_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_payment', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__payment_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__payment_tmp')),\n                staging_columns=get_payment_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as payment_id,\n        unapplied_amount,\n        total_amount,\n        currency_id,\n        cast(receivable_account_id as {{ dbt.type_string() }}) as receivable_account_id,\n        cast(deposit_to_account_id as {{ dbt.type_string() }}) as deposit_to_account_id,\n        exchange_rate,\n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        cast(customer_id as {{ dbt.type_string() }}) as customer_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__payment_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__payment_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_payment_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__payment_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__payment.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_payment\n    \n as \n    \n    process_payment\n    \n, \n    \n    \n    receivable_account_id\n    \n as \n    \n    receivable_account_id\n    \n, \n    \n    \n    reference_number\n    \n as \n    \n    reference_number\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    unapplied_amount\n    \n as \n    \n    unapplied_amount\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as payment_id,\n        unapplied_amount,\n        total_amount,\n        currency_id,\n        cast(receivable_account_id as TEXT) as receivable_account_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__estimate_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__estimate_line", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__estimate_line.sql", "original_file_path": "models/stg_quickbooks__estimate_line.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line", "fqn": ["quickbooks_source", "stg_quickbooks__estimate_line"], "alias": "stg_quickbooks__estimate_line", "checksum": {"name": "sha256", "checksum": "21869ab5e01acfd7c637f73791ce66e4237c3d48691f0f4470ff9502f9cb7ea9"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing line item records of an estimate.", "columns": {"estimate_id": {"name": "estimate_id", "description": "Reference to the unique estimate record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the estimate line record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "Reference to the account associated with the discount estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Reference to the class associated with the discount estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "Reference to the account associated with the sales estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_class_id": {"name": "sales_item_class_id", "description": "Reference to the class associated with the sales estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Reference to the item associated with a sales estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of the item for a sales estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item associated with the estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity of the item for the estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Reference to the account associated with the estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.598378, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line\"", "raw_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_estimate', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__estimate_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__estimate_line_tmp')),\n                staging_columns=get_estimate_line_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(estimate_id as {{ dbt.type_string() }}) as estimate_id,\n        index,\n        description,\n        discount_account_id,\n        cast(discount_class_id as {{ dbt.type_string() }}) as discount_class_id,\n        sales_item_account_id,\n        cast(sales_item_class_id as {{ dbt.type_string() }}) as sales_item_class_id,\n        sales_item_item_id,\n        sales_item_quantity,\n        item_id,\n        quantity,\n        account_id,\n        amount,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__estimate_line_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__estimate_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_estimate_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__estimate_line_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__estimate_line.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        description,\n        discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_item_id,\n        sales_item_quantity,\n        item_id,\n        quantity,\n        account_id,\n        amount,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__bill_linked_txn": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__bill_linked_txn", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__bill_linked_txn.sql", "original_file_path": "models/stg_quickbooks__bill_linked_txn.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn", "fqn": ["quickbooks_source", "stg_quickbooks__bill_linked_txn"], "alias": "stg_quickbooks__bill_linked_txn", "checksum": {"name": "sha256", "checksum": "516a32bd9bf6c3592d911ecca3304b44d9fce3d9793fab1abceff9596f6e1755"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Mapping table containing bill payment transactions linked to a bill.", "columns": {"bill_id": {"name": "bill_id", "description": "The Unique identifier of the bill record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records from a single bill record associated with payment ids.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_payment_id": {"name": "bill_payment_id", "description": "The Unique identifier of the bill payment id record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.5858822, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn\"", "raw_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__bill_linked_txn_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__bill_linked_txn_tmp')),\n                staging_columns=get_bill_linked_txn_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as {{ dbt.type_string() }}) as bill_id,\n        index,\n        cast(bill_payment_id as {{ dbt.type_string() }}) as bill_payment_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__bill_linked_txn_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__bill_linked_txn_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_bill_linked_txn_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__bill_linked_txn.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__address": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__address", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__address.sql", "original_file_path": "models/stg_quickbooks__address.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__address", "fqn": ["quickbooks_source", "stg_quickbooks__address"], "alias": "stg_quickbooks__address", "checksum": {"name": "sha256", "checksum": "33aa8f1a41d608a881f7278c4c9628529b0dc0c0e0202b22666e042bb175aedd"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing address details.", "columns": {"address_id": {"name": "address_id", "description": "Unique identifier for an address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "The city which the address is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "The country which the address is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_1": {"name": "address_1", "description": "The address_line_1 associated with the address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_2": {"name": "address_2", "description": "The address_line_2 associated with the address (if applicable).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "postal_code": {"name": "postal_code", "description": "The postal code which the address is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.5833652, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address\"", "raw_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_address', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__address_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__address_tmp')),\n                staging_columns=get_address_columns()\n            )\n        }}\n        \n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as address_id,\n        city,\n        country,\n        line_1 as address_1,\n        line_2 as address_2,\n        postal_code,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__address_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__address_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_address_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__address_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__address.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_sub_division_code\n    \n as \n    \n    country_sub_division_code\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    line_1\n    \n as \n    \n    line_1\n    \n, \n    \n    \n    line_2\n    \n as \n    \n    line_2\n    \n, \n    \n    \n    line_3\n    \n as \n    \n    line_3\n    \n, \n    \n    \n    line_4\n    \n as \n    \n    line_4\n    \n, \n    \n    \n    line_5\n    \n as \n    \n    line_5\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    postal_code\n    \n as \n    \n    postal_code\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as address_id,\n        city,\n        country,\n        line_1 as address_1,\n        line_2 as address_2,\n        postal_code,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__bill": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__bill", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__bill.sql", "original_file_path": "models/stg_quickbooks__bill.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__bill", "fqn": ["quickbooks_source", "stg_quickbooks__bill"], "alias": "stg_quickbooks__bill", "checksum": {"name": "sha256", "checksum": "0cfa46e4802ec8c5532be9084b04bd5c3eda3de4d1b8a0fe15b662eebf6ea9fd"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing AP transactions representing a request-for-payment from a third party for goods/services rendered, received, or both.", "columns": {"bill_id": {"name": "bill_id", "description": "Unique identifier of the bill record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department the bill is linked with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total monetary amount of all bill line items.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor the bill is linked with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date_at": {"name": "due_date_at", "description": "Date which the bill is due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date when the bill transaction occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payable_account_id": {"name": "payable_account_id", "description": "Account id of the account which the bill is credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.589482, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill\"", "raw_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__bill_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__bill_tmp')),\n                staging_columns=get_bill_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n \nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as bill_id,\n        balance,\n        cast(doc_number as {{ dbt.type_string() }}) as doc_number,\n        currency_id,\n        cast(department_id as {{ dbt.type_string() }}) as department_id,\n        cast( {{ dbt.date_trunc('day', 'due_date') }} as date) as due_date_at, \n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        exchange_rate,\n        cast(payable_account_id as {{ dbt.type_string() }}) as payable_account_id,\n        total_amount,\n        cast(vendor_id as {{ dbt.type_string() }}) as vendor_id,\n        private_note,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__bill_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__bill_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_bill_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__bill.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n \nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date_at, \n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        exchange_rate,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        total_amount,\n        cast(vendor_id as TEXT) as vendor_id,\n        private_note,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__bill_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__bill_line", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__bill_line.sql", "original_file_path": "models/stg_quickbooks__bill_line.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line", "fqn": ["quickbooks_source", "stg_quickbooks__bill_line"], "alias": "stg_quickbooks__bill_line", "checksum": {"name": "sha256", "checksum": "44ef859df96026bf155072c979ce7f823131b3444c917424f3573ccef213ac51"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing distinct line items from bills within the `bill` table.", "columns": {"bill_id": {"name": "bill_id", "description": "The Unique identifier of the parent bill record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Bill line index in reference to the parent bill.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "The class reference associated with the account based expense bill line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "The customer reference associated with the account based expense bill line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "The item reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "The customer reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense bill line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_class_id": {"name": "item_expense_class_id", "description": "The class reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "The id of the account being expensed from the bill.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "The status of the bill line item expense.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "The tax code id associated with the bill.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the bill line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the bill line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.585397, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line\"", "raw_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__bill_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__bill_line_tmp')),\n                staging_columns=get_bill_line_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as {{ dbt.type_string() }}) as bill_id,\n        index,\n        cast(account_expense_account_id as {{ dbt.type_string() }}) as account_expense_account_id,\n        cast(account_expense_class_id as {{ dbt.type_string() }}) as account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_customer_id as {{ dbt.type_string() }}) as account_expense_customer_id,\n        cast(item_expense_item_id as {{ dbt.type_string() }}) as item_expense_item_id,\n        cast(item_expense_customer_id as {{ dbt.type_string() }}) as item_expense_customer_id,\n        item_expense_billable_status,\n        cast(item_expense_class_id as {{ dbt.type_string() }}) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__bill_line_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__bill_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_bill_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_line_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__bill_line.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        item_expense_billable_status,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__journal_entry": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__journal_entry", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__journal_entry.sql", "original_file_path": "models/stg_quickbooks__journal_entry.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry", "fqn": ["quickbooks_source", "stg_quickbooks__journal_entry"], "alias": "stg_quickbooks__journal_entry", "checksum": {"name": "sha256", "checksum": "493f237b88aba155a011797bffd6c182cb49e9e0b8ef32a4472bca090fbc1022"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing journal entry transactions.", "columns": {"journal_entry_id": {"name": "journal_entry_id", "description": "Unique identifier of the journal entry.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_adjustment": {"name": "is_adjustment", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes. By default, this is recalculated by the system based on sub-items total and overridden.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the journal entry was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "The value of this field will always be set to zero.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date when the journal entry was transacted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.604085, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry\"", "raw_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_journal_entry', True)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_quickbooks__journal_entry_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__journal_entry_tmp')),\n                staging_columns=get_journal_entry_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as {{ dbt.type_string() }}) as journal_entry_id,\n        adjustment as is_adjustment,\n        created_at,\n        currency_id,\n        cast(doc_number as {{ dbt.type_string() }}) as doc_number,\n        exchange_rate,\n        private_note,\n        total_amount,\n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__journal_entry_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__journal_entry_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_journal_entry_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__journal_entry_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__journal_entry.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    adjustment\n    \n as \n    \n    adjustment\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as journal_entry_id,\n        adjustment as is_adjustment,\n        created_at,\n        currency_id,\n        cast(doc_number as TEXT) as doc_number,\n        exchange_rate,\n        private_note,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__refund_receipt": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__refund_receipt", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__refund_receipt.sql", "original_file_path": "models/stg_quickbooks__refund_receipt.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt", "fqn": ["quickbooks_source", "stg_quickbooks__refund_receipt"], "alias": "stg_quickbooks__refund_receipt", "checksum": {"name": "sha256", "checksum": "42ed77b5ca60fb2a5019ec90ad8093776a44c45d9adb3b534f6492a21aaea796"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing refunds to the customer for a product or service that was provided.", "columns": {"refund_id": {"name": "refund_id", "description": "Unique identifier of the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the refund receipt is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the refund receipt is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "Account from which payment money is refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the refund was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the customer credited with the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date in which the refund occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.609388, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt\"", "raw_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_refund_receipt', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__refund_receipt_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__refund_receipt_tmp')),\n                staging_columns=get_refund_receipt_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as refund_id,\n        balance,\n        cast(doc_number as {{ dbt.type_string() }}) as doc_number,\n        total_amount,\n        cast(class_id as {{ dbt.type_string() }}) as class_id,\n        cast(deposit_to_account_id as {{ dbt.type_string() }}) as deposit_to_account_id,\n        created_at,\n        cast(department_id as {{ dbt.type_string() }}) as department_id,\n        cast(customer_id as {{ dbt.type_string() }}) as customer_id,\n        currency_id,\n        exchange_rate,\n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__refund_receipt_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__refund_receipt_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_refund_receipt_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__refund_receipt_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__refund_receipt.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    check_payment_account_number\n    \n as \n    \n    check_payment_account_number\n    \n, \n    \n    \n    check_payment_bank_name\n    \n as \n    \n    check_payment_bank_name\n    \n, \n    \n    \n    check_payment_check_number\n    \n as \n    \n    check_payment_check_number\n    \n, \n    \n    \n    check_payment_name_on_account\n    \n as \n    \n    check_payment_name_on_account\n    \n, \n    \n    \n    check_payment_status\n    \n as \n    \n    check_payment_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as refund_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(class_id as TEXT) as class_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__deposit_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__deposit_line", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__deposit_line.sql", "original_file_path": "models/stg_quickbooks__deposit_line.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line", "fqn": ["quickbooks_source", "stg_quickbooks__deposit_line"], "alias": "stg_quickbooks__deposit_line", "checksum": {"name": "sha256", "checksum": "de246c1bea4573024fdc27cc59a27b875f0536d2effe6cb69a23c8104fb94ebd"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing individual line items comprising the deposit.", "columns": {"deposit_id": {"name": "deposit_id", "description": "Unique identifier of the deposit record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the deposit record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the deposit line record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the deposit line record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_class_id": {"name": "deposit_class_id", "description": "Reference to the class which the deposit line record is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_account_id": {"name": "deposit_account_id", "description": "Account id of the account which the deposit is credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_customer_id": {"name": "deposit_customer_id", "description": "Customer id of the customer which the deposit is credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.59641, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line\"", "raw_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_deposit', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__deposit_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__deposit_line_tmp')),\n                staging_columns=get_deposit_line_columns()\n            )\n        }}\n        \n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(deposit_id as {{ dbt.type_string() }}) as deposit_id,\n        index,\n        amount,\n        description,\n        cast(deposit_account_id as {{ dbt.type_string() }}) as deposit_account_id,\n        cast(deposit_class_id as {{ dbt.type_string() }}) as deposit_class_id,\n        cast(deposit_customer_id as {{ dbt.type_string() }}) as deposit_customer_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__deposit_line_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__deposit_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_deposit_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__deposit_line_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__deposit_line.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    deposit_account_id\n    \n as \n    \n    deposit_account_id\n    \n, \n    \n    \n    deposit_check_number\n    \n as \n    \n    deposit_check_number\n    \n, \n    \n    \n    deposit_class_id\n    \n as \n    \n    deposit_class_id\n    \n, \n    \n    \n    deposit_customer_id\n    \n as \n    \n    deposit_customer_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    deposit_payment_method_id\n    \n as \n    \n    deposit_payment_method_id\n    \n, \n    \n    \n    deposit_tax_applicable_on\n    \n as \n    \n    deposit_tax_applicable_on\n    \n, \n    \n    \n    deposit_tax_code_id\n    \n as \n    \n    deposit_tax_code_id\n    \n, \n    \n    \n    deposit_transaction_type\n    \n as \n    \n    deposit_transaction_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n, \n    \n    \n    refund_receipt_id\n    \n as \n    \n    refund_receipt_id\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(deposit_id as TEXT) as deposit_id,\n        index,\n        amount,\n        description,\n        cast(deposit_account_id as TEXT) as deposit_account_id,\n        cast(deposit_class_id as TEXT) as deposit_class_id,\n        cast(deposit_customer_id as TEXT) as deposit_customer_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__vendor_credit": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__vendor_credit", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__vendor_credit.sql", "original_file_path": "models/stg_quickbooks__vendor_credit.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit", "fqn": ["quickbooks_source", "stg_quickbooks__vendor_credit"], "alias": "stg_quickbooks__vendor_credit", "checksum": {"name": "sha256", "checksum": "bc1123430a27d32603356ede184119a14481c031c90bdf380aeedaedca594635"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing all vendor credit records. A vendor credit is an accounts payable transaction that represents a refund or credit of payment for goods or services.", "columns": {"vendor_credit_id": {"name": "vendor_credit_id", "description": "Unique identifier of the vendor credit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The current amount of the vendor credit reflecting any adjustments to the original credit amount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total credit amount, determined by taking the total of all all lines of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the vendor credit was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payable_account_id": {"name": "payable_account_id", "description": "Specifies to which AP account the bill is credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the vendor credit is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "The date entered by the user when this transaction occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for this transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.6124532, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit\"", "raw_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_vendor_credit', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__vendor_credit_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__vendor_credit_tmp')),\n                staging_columns=get_vendor_credit_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as vendor_credit_id,\n        balance,\n        cast(doc_number as {{ dbt.type_string() }}) as doc_number,\n        total_amount,\n        currency_id,\n        exchange_rate,\n        created_at,\n        cast(payable_account_id as {{ dbt.type_string() }}) as payable_account_id,\n        cast(department_id as {{ dbt.type_string() }}) as department_id,\n        private_note,\n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        cast(vendor_id as {{ dbt.type_string() }}) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__vendor_credit_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__vendor_credit_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_vendor_credit_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor_credit_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__vendor_credit.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_credit_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        exchange_rate,\n        created_at,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        cast(department_id as TEXT) as department_id,\n        private_note,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__vendor_credit_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__vendor_credit_line", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__vendor_credit_line.sql", "original_file_path": "models/stg_quickbooks__vendor_credit_line.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line", "fqn": ["quickbooks_source", "stg_quickbooks__vendor_credit_line"], "alias": "stg_quickbooks__vendor_credit_line", "checksum": {"name": "sha256", "checksum": "bb84d3c8d454b097f7311c13ff6fb9c8ef739f6303649946af98afc241c192b5"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing individual vendor credit line items.", "columns": {"vendor_credit_id": {"name": "vendor_credit_id", "description": "Unique identifier of the vendor credit record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "test": ["not_null"]}, "index": {"name": "index", "description": "Index count of records associated with the vendor credit record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "Account id of the account credited for the vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "Status of the billable related to the vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "Tax code id of the tax code associated with the vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "Customer reference for the vendor credit expense.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "The class reference associated with the account based expense vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "Customer reference for the item on the vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "The item reference associated with the item based expense vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_quantity": {"name": "item_expense_quantity", "description": "Quantity of the item within the item based expense vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_unit_price": {"name": "item_expense_unit_price", "description": "Unit price of the item within the item based expense vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_class_id": {"name": "item_expense_class_id", "description": "Reference to the class associated with the item based expense vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.611973, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line\"", "raw_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_vendor_credit', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__vendor_credit_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__vendor_credit_line_tmp')),\n                staging_columns=get_vendor_credit_line_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(vendor_credit_id as {{ dbt.type_string() }}) as vendor_credit_id,\n        index,\n        cast(account_expense_customer_id as {{ dbt.type_string() }}) as account_expense_customer_id,\n        cast(account_expense_account_id as {{ dbt.type_string() }}) as account_expense_account_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_class_id as {{ dbt.type_string() }}) as account_expense_class_id,\n        cast(item_expense_customer_id as {{ dbt.type_string() }}) as item_expense_customer_id,\n        cast(item_expense_item_id as {{ dbt.type_string() }}) as item_expense_item_id,\n        item_expense_quantity,\n        item_expense_unit_price,\n        cast(item_expense_class_id as {{ dbt.type_string() }}) as item_expense_class_id,\n        item_expense_billable_status,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__vendor_credit_line_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__vendor_credit_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_vendor_credit_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__vendor_credit_line.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(vendor_credit_id as TEXT) as vendor_credit_id,\n        index,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_quantity,\n        item_expense_unit_price,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        item_expense_billable_status,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__deposit": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__deposit", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__deposit.sql", "original_file_path": "models/stg_quickbooks__deposit.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__deposit", "fqn": ["quickbooks_source", "stg_quickbooks__deposit"], "alias": "stg_quickbooks__deposit", "checksum": {"name": "sha256", "checksum": "7877127964ef01bcd3bc4b81cf0d95dbfe3ccf25c7a0a0b92f31488cb8c96e13"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing records of transactions that record on or more deposits of a customer payment or a new direct deposit.", "columns": {"deposit_id": {"name": "deposit_id", "description": "Unique identifier of the deposit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Identifies the account to be used for this deposit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date which the deposit was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the deposit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_total_amount": {"name": "home_total_amount", "description": "Indicates the total amount of the transaction in the home currency. This includes the total of all the charges, allowances, and taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date which the deposit transaction occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_status": {"name": "transaction_status", "description": "Status of the deposit transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.597056, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit\"", "raw_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_deposit', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__deposit_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__deposit_tmp')),\n                staging_columns=get_deposit_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as deposit_id,\n        cast(account_id as {{ dbt.type_string() }}) as account_id,\n        created_at,\n        currency_id,\n        cast(department_id as {{ dbt.type_string() }}) as department_id,\n        total_amount,\n        home_total_amount,\n        cast( {{ dbt.date_trunc('day', 'transaction_date') }} as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "language": "sql", "refs": [{"name": "stg_quickbooks__deposit_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__deposit_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_deposit_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string", "macro.dbt.date_trunc"], "nodes": ["model.quickbooks_source.stg_quickbooks__deposit_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__deposit.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    cash_back_account_id\n    \n as \n    \n    cash_back_account_id\n    \n, \n    \n    \n    cash_back_amount\n    \n as \n    \n    cash_back_amount\n    \n, \n    \n    \n    cash_back_memo\n    \n as \n    \n    cash_back_memo\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as deposit_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        total_amount,\n        home_total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__item": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__item", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__item.sql", "original_file_path": "models/stg_quickbooks__item.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__item", "fqn": ["quickbooks_source", "stg_quickbooks__item"], "alias": "stg_quickbooks__item", "checksum": {"name": "sha256", "checksum": "240cb272c7c48962945ab97a2c7f933ac892d87df8dd01c53b5ddf46c4f6b5dc"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing item records. An item is a thing that your company buys, sells, or re-sells, such as products and services.", "columns": {"item_id": {"name": "item_id", "description": "Unique identifier of the item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether the object is currently enabled for use by QuickBooks.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the item was created within QuickBooks.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "income_account_id": {"name": "income_account_id", "description": "Reference to the posting account, that is, the account that records the proceeds from the sale of this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "asset_account_id": {"name": "asset_account_id", "description": "Reference to the Inventory Asset account that tracks the current value of the inventory.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expense_account_id": {"name": "expense_account_id", "description": "Reference to the expense account used to pay the vendor for this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Full name of the item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inventory_start_date": {"name": "inventory_start_date", "description": "Timestamp of the date the item was started as inventory.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_item_id": {"name": "parent_item_id", "description": "Reference to the parent item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "purchase_cost": {"name": "purchase_cost", "description": "Amount paid when buying or ordering the item, as expressed in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Boolean indicating whether the item is taxable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Classification that specifies the use of this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "The monetary value of the service or product, as expressed in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table"}, "created_at": 1721255627.6028259, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_quickbooks__item_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__item_tmp')),\n                staging_columns=get_item_columns()\n            )\n        }}\n        \n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as item_id,\n        active as is_active,\n        created_at,\n        cast(income_account_id as {{ dbt.type_string() }}) as income_account_id,\n        cast(asset_account_id as {{ dbt.type_string() }}) as asset_account_id,\n        cast(expense_account_id as {{ dbt.type_string() }}) as expense_account_id,\n        name,\n        purchase_cost,\n        taxable,\n        type,\n        unit_price,\n        inventory_start_date,\n        cast(parent_item_id as {{ dbt.type_string() }}) as parent_item_id,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__item_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__item_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_item_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__item_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__item.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    asset_account_id\n    \n as \n    \n    asset_account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    \n    \n    inventory_start_date\n    \n as \n    \n    inventory_start_date\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_item_id\n    \n as \n    \n    parent_item_id\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    purchase_description\n    \n as \n    \n    purchase_description\n    \n, \n    \n    \n    purchase_tax_code_id\n    \n as \n    \n    purchase_tax_code_id\n    \n, \n    \n    \n    purchase_tax_included\n    \n as \n    \n    purchase_tax_included\n    \n, \n    \n    \n    quantity_on_hand\n    \n as \n    \n    quantity_on_hand\n    \n, \n    \n    \n    sales_tax_code_id\n    \n as \n    \n    sales_tax_code_id\n    \n, \n    \n    \n    sales_tax_included\n    \n as \n    \n    sales_tax_included\n    \n, \n    \n    \n    stock_keeping_unit\n    \n as \n    \n    stock_keeping_unit\n    \n, \n    \n    \n    sub_item\n    \n as \n    \n    sub_item\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    track_quantity_on_hand\n    \n as \n    \n    track_quantity_on_hand\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as item_id,\n        active as is_active,\n        created_at,\n        cast(income_account_id as TEXT) as income_account_id,\n        cast(asset_account_id as TEXT) as asset_account_id,\n        cast(expense_account_id as TEXT) as expense_account_id,\n        name,\n        purchase_cost,\n        taxable,\n        type,\n        unit_price,\n        inventory_start_date,\n        cast(parent_item_id as TEXT) as parent_item_id,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__purchase_order_linked_txn", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__purchase_order_linked_txn.sql", "original_file_path": "models/stg_quickbooks__purchase_order_linked_txn.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn", "fqn": ["quickbooks_source", "stg_quickbooks__purchase_order_linked_txn"], "alias": "stg_quickbooks__purchase_order_linked_txn", "checksum": {"name": "sha256", "checksum": "6ef807fad30f8788b8a9944047e1259c1a2f433498d450b11d2c7cdf6a1929b7"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Mapping table for purchase order records to respective bill and purchase objects.", "columns": {"purchase_order_id": {"name": "purchase_order_id", "description": "Reference to the unique purchase order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_id": {"name": "bill_id", "description": "Reference to the respective bill object for the purchase order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "purchase_id": {"name": "purchase_id", "description": "Reference to the respective purchase object for the purchase_order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_credit_id": {"name": "vendor_credit_id", "description": "Reference to the respective vendor credit object for the purchase_order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the purchase order mapping record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "created_at": 1721255627.607379, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_linked_txn\"", "raw_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_purchase_order', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_quickbooks__purchase_order_linked_txn_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__purchase_order_linked_txn_tmp')),\n                staging_columns=get_purchase_order_linked_txn_columns()\n            )\n        }}\n\n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_order_id as {{ dbt.type_string() }}) as purchase_order_id,\n        cast(bill_id as {{ dbt.type_string() }}) as bill_id,\n        cast(purchase_id as {{ dbt.type_string() }}) as purchase_id,\n        cast(vendor_credit_id as {{ dbt.type_string() }}) as vendor_credit_id,\n        index,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase_order_linked_txn_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__purchase_order_linked_txn_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_purchase_order_linked_txn_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__purchase_order_linked_txn.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n, \n    \n    \n    purchase_order_id\n    \n as \n    \n    purchase_order_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_order_id as TEXT) as purchase_order_id,\n        cast(bill_id as TEXT) as bill_id,\n        cast(purchase_id as TEXT) as purchase_id,\n        cast(vendor_credit_id as TEXT) as vendor_credit_id,\n        index,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__customer": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__customer", "resource_type": "model", "package_name": "quickbooks_source", "path": "stg_quickbooks__customer.sql", "original_file_path": "models/stg_quickbooks__customer.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__customer", "fqn": ["quickbooks_source", "stg_quickbooks__customer"], "alias": "stg_quickbooks__customer", "checksum": {"name": "sha256", "checksum": "523f1f35b87119a6cffef9e90e95ebe35982cb7ac9cf8b771792bf42f583abff"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table containing customers of which are consumers of the service or product that your business offers.", "columns": {"customer_id": {"name": "customer_id", "description": "Unique identifier of the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether it is currently enabled for use by QuickBooks.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the open balance amount or the amount unpaid by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_with_jobs": {"name": "balance_with_jobs", "description": "Cumulative open balance amount for the Customer (or Job) and all its sub-jobs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_with_parent": {"name": "bill_with_parent", "description": "Boolean indicating whether this Customer object is billed with its parent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "Full name of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Fully qualified name of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts associated with this customer are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "Name of the customer which is displayed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "website": {"name": "website", "description": "Website url associated with the vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Boolean indicating whether the customer is taxable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "quickbooks_source://models/stg_quickbooks.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table"}, "created_at": 1721255627.595073, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_quickbooks__customer_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__customer_tmp')),\n                staging_columns=get_customer_columns()\n            )\n        }}\n        \n        {{ \n            fivetran_utils.source_relation(\n                union_schema_variable='quickbooks_union_schemas', \n                union_database_variable='quickbooks_union_databases'\n                ) \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt.type_string() }}) as customer_id,\n        active as is_active,\n        balance,\n        balance_with_jobs,\n        bill_with_parent,\n        company_name,\n        fully_qualified_name,\n        currency_id,\n        display_name,\n        website,\n        taxable,\n        source_relation\n\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_quickbooks__customer_tmp", "package": null, "version": null}, {"name": "stg_quickbooks__customer_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.quickbooks_source.get_customer_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__customer_tmp"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks__customer.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone_number\n    \n as \n    \n    alternate_phone_number\n    \n, \n    \n    \n    ar_account_id\n    \n as \n    \n    ar_account_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_jobs\n    \n as \n    \n    balance_with_jobs\n    \n, \n    \n    \n    bill_address_id\n    \n as \n    \n    bill_address_id\n    \n, \n    \n    \n    bill_with_parent\n    \n as \n    \n    bill_with_parent\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    default_tax_code_id\n    \n as \n    \n    default_tax_code_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    job\n    \n as \n    \n    job\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_number\n    \n as \n    \n    mobile_number\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    open_balance_date\n    \n as \n    \n    open_balance_date\n    \n, \n    \n    \n    parent_customer_id\n    \n as \n    \n    parent_customer_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    preferred_delivery_method\n    \n as \n    \n    preferred_delivery_method\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    resale_number\n    \n as \n    \n    resale_number\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_exemption_reason_id\n    \n as \n    \n    tax_exemption_reason_id\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    website\n    \n as \n    \n    website\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as customer_id,\n        active as is_active,\n        balance,\n        balance_with_jobs,\n        bill_with_parent,\n        company_name,\n        fully_qualified_name,\n        currency_id,\n        display_name,\n        website,\n        taxable,\n        source_relation\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__vendor_credit_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__vendor_credit_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__vendor_credit_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__vendor_credit_tmp"], "alias": "stg_quickbooks__vendor_credit_tmp", "checksum": {"name": "sha256", "checksum": "9938bbb45d56450c95b943349ff3a88b95120bbbd31878b6635f574d91020e59"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.318089, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_tmp\"", "raw_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_vendor_credit', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='vendor_credit', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='vendor_credit',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "vendor_credit"], ["quickbooks", "vendor_credit"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.vendor_credit"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__vendor_credit_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_credit_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__refund_receipt_line_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__refund_receipt_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__refund_receipt_line_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__refund_receipt_line_tmp"], "alias": "stg_quickbooks__refund_receipt_line_tmp", "checksum": {"name": "sha256", "checksum": "4c8116c0a09943657aae1ee701565a8b503466f228abe688aa58e7d5ff103e0f"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.334408, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line_tmp\"", "raw_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_refund_receipt', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='refund_receipt_line', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='refund_receipt_line',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "refund_receipt_line"], ["quickbooks", "refund_receipt_line"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.refund_receipt_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__refund_receipt_line_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"refund_receipt_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__estimate_line_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__estimate_line_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__estimate_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__estimate_line_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__estimate_line_tmp"], "alias": "stg_quickbooks__estimate_line_tmp", "checksum": {"name": "sha256", "checksum": "e6b43f9598030c138d67898959d3bcc06d4b571b16bd790974c5bda4e90dfe18"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.338254, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line_tmp\"", "raw_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_estimate', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='estimate_line', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='estimate_line',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "estimate_line"], ["quickbooks", "estimate_line"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.estimate_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__estimate_line_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"estimate_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__purchase_order_line_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__purchase_order_line_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__purchase_order_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__purchase_order_line_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_line_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__purchase_order_line_tmp"], "alias": "stg_quickbooks__purchase_order_line_tmp", "checksum": {"name": "sha256", "checksum": "be4cdef26ee4b271e7c425130b4c3b80be45214b5be926af060d32331badcc0f"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.342679, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line_tmp\"", "raw_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_purchase_order', False)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='purchase_order_line', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='purchase_order_line',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "purchase_order_line"], ["quickbooks", "purchase_order_line"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.purchase_order_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__purchase_order_line_tmp.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__credit_memo_line_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__credit_memo_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__credit_memo_line_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__credit_memo_line_tmp"], "alias": "stg_quickbooks__credit_memo_line_tmp", "checksum": {"name": "sha256", "checksum": "e0b5daf12c47995a8930f8bdc9e7d6c4b23f86eb7db6d810664598dd865f6d05"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.346402, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line_tmp\"", "raw_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_credit_memo', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='credit_memo_line', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='credit_memo_line',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "credit_memo_line"], ["quickbooks", "credit_memo_line"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.credit_memo_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__credit_memo_line_tmp.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"credit_memo_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__journal_entry_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__journal_entry_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__journal_entry_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__journal_entry_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__journal_entry_tmp"], "alias": "stg_quickbooks__journal_entry_tmp", "checksum": {"name": "sha256", "checksum": "4cc1a32910c8e5255f3d3bbe4578fb9f562e3f2fb56eff69e22f7f69b11fa32e"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.350267, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_tmp\"", "raw_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_journal_entry', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='journal_entry', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='journal_entry',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "journal_entry"], ["quickbooks", "journal_entry"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.journal_entry"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__journal_entry_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"journal_entry_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__invoice_line_bundle_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__invoice_line_bundle_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__invoice_line_bundle_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__invoice_line_bundle_tmp"], "alias": "stg_quickbooks__invoice_line_bundle_tmp", "checksum": {"name": "sha256", "checksum": "a2dc8302a76014fdede73acb185944cb3901457f568da00b9400dbadd61a4781"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.3539991, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle_tmp\"", "raw_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice_bundle', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='invoice_line_bundle', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='invoice_line_bundle',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "invoice_line_bundle"], ["quickbooks", "invoice_line_bundle"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.invoice_line_bundle"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__invoice_line_bundle_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_line_bundle_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__payment_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__payment_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__payment_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__payment_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__payment_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__payment_tmp"], "alias": "stg_quickbooks__payment_tmp", "checksum": {"name": "sha256", "checksum": "afe62d4646d63e7fc44dbe73ad04eb3af6f94e1fd98953cfdd5a5fae5464818f"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.35787, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_tmp\"", "raw_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_payment', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='payment', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='payment',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "payment"], ["quickbooks", "payment"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.payment"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__payment_tmp.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"payment_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__invoice_line_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__invoice_line_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__invoice_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__invoice_line_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__invoice_line_tmp"], "alias": "stg_quickbooks__invoice_line_tmp", "checksum": {"name": "sha256", "checksum": "ec89045532e817aed8e8dc0a09e66f53a2c88aba038c7dcbbb51f6875d044f5d"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.362452, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_tmp\"", "raw_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_invoice', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='invoice_line', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='invoice_line',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "invoice_line"], ["quickbooks", "invoice_line"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.invoice_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__invoice_line_tmp.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__deposit_line_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__deposit_line_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__deposit_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__deposit_line_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__deposit_line_tmp"], "alias": "stg_quickbooks__deposit_line_tmp", "checksum": {"name": "sha256", "checksum": "2a560b4173366349cc88aa5c091b2f10c61f60c0bfe73b3b0f673877627002a4"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.3665202, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line_tmp\"", "raw_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_deposit', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='deposit_line', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='deposit_line',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "deposit_line"], ["quickbooks", "deposit_line"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.deposit_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__deposit_line_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"deposit_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__customer_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__customer_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__customer_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__customer_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__customer_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__customer_tmp"], "alias": "stg_quickbooks__customer_tmp", "checksum": {"name": "sha256", "checksum": "2125a8e00af7bd53a1c2d0b414a756fa128457d4ecda78c77f813ba133a81325"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view"}, "created_at": 1721255627.37038, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='customer', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='customer',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "customer"], ["quickbooks", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.customer"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__customer_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"customer_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__bill_line_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__bill_line_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__bill_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__bill_line_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__bill_line_tmp"], "alias": "stg_quickbooks__bill_line_tmp", "checksum": {"name": "sha256", "checksum": "8f06919fa5048f09e127332ef0675a7fac11b3d0787e6672612010db4a7f6193"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.3739269, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line_tmp\"", "raw_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='bill_line', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='bill_line',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "bill_line"], ["quickbooks", "bill_line"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.bill_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__bill_line_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__item_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__item_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__item_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__item_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__item_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__item_tmp"], "alias": "stg_quickbooks__item_tmp", "checksum": {"name": "sha256", "checksum": "0db4c37e6bea881ee6f85348bc069b1ba7d74ce4fd550ed0ac643d4ef780ab79"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view"}, "created_at": 1721255627.377986, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='item', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='item',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "item"], ["quickbooks", "item"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.item"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__item_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"item_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__account_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__account_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__account_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__account_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__account_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__account_tmp"], "alias": "stg_quickbooks__account_tmp", "checksum": {"name": "sha256", "checksum": "1157f7c518bf6f5e15bd9080fe829b06b7e3ddf59ea3e3a06164fe453e0def85"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view"}, "created_at": 1721255627.382281, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='account', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='account',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "account"], ["quickbooks", "account"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.account"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__account_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"account_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__credit_card_payment_txn_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__credit_card_payment_txn_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__credit_card_payment_txn_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__credit_card_payment_txn_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__credit_card_payment_txn_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__credit_card_payment_txn_tmp"], "alias": "stg_quickbooks__credit_card_payment_txn_tmp", "checksum": {"name": "sha256", "checksum": "8bad0e0be1654e7cc21513296d51b99df612d56297efda82436474b76c0a2e7d"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.386414, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_card_payment_txn_tmp\"", "raw_code": "--To enable this model, set the using_credit_card_payment_txn variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_credit_card_payment_txn', False)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='credit_card_payment_txn', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='credit_card_payment_txn',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "credit_card_payment_txn"], ["quickbooks", "credit_card_payment_txn"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.credit_card_payment_txn"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__credit_card_payment_txn_tmp.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_card_payment_txn variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"credit_card_payment_txn_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__vendor_credit_line_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__vendor_credit_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__vendor_credit_line_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__vendor_credit_line_tmp"], "alias": "stg_quickbooks__vendor_credit_line_tmp", "checksum": {"name": "sha256", "checksum": "0a6d94050edf7556e4d19cbd3999b0bcb4b58658f4e2e7bfa8e183ddd6a28d2c"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.3905149, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line_tmp\"", "raw_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_vendor_credit', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='vendor_credit_line', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='vendor_credit_line',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "vendor_credit_line"], ["quickbooks", "vendor_credit_line"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.vendor_credit_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__vendor_credit_line_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_credit_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__department_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__department_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__department_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__department_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__department_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__department_tmp"], "alias": "stg_quickbooks__department_tmp", "checksum": {"name": "sha256", "checksum": "ea310c765f23c51e6a2ef7bef84749f2a3fa89ac06b768173788080096354a00"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.394581, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__department_tmp\"", "raw_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_department', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='department', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='department',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "department"], ["quickbooks", "department"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.department"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__department_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"department_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__bundle_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__bundle_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__bundle_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__bundle_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__bundle_tmp"], "alias": "stg_quickbooks__bundle_tmp", "checksum": {"name": "sha256", "checksum": "722d0a1b955a8c123522a87f6b97c8770d00365b98d1fc057d1724e9c5c06667"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.3983412, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_tmp\"", "raw_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice_bundle', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='bundle', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='bundle',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "bundle"], ["quickbooks", "bundle"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.bundle"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__bundle_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bundle_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__bundle_item_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__bundle_item_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__bundle_item_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__bundle_item_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__bundle_item_tmp"], "alias": "stg_quickbooks__bundle_item_tmp", "checksum": {"name": "sha256", "checksum": "f716d0ef63ccb44a3ff2cf8ecff39d94f15052deb185a6c2c0595981c62fb8cb"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.403082, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_item_tmp\"", "raw_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice_bundle', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='bundle_item', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='bundle_item',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "bundle_item"], ["quickbooks", "bundle_item"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.bundle_item"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__bundle_item_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bundle_item_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__purchase_order_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__purchase_order_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__purchase_order_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__purchase_order_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__purchase_order_tmp"], "alias": "stg_quickbooks__purchase_order_tmp", "checksum": {"name": "sha256", "checksum": "0f307a8a80ab953923a4cbae395cd5836055698095ad6d1fbb47c09a8f829e8c"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.40683, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_tmp\"", "raw_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_purchase_order', False)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='purchase_order', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='purchase_order',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "purchase_order"], ["quickbooks", "purchase_order"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.purchase_order"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__purchase_order_tmp.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__bill_payment_line_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__bill_payment_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__bill_payment_line_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__bill_payment_line_tmp"], "alias": "stg_quickbooks__bill_payment_line_tmp", "checksum": {"name": "sha256", "checksum": "914efeefeb70efc2b64e7bae87b298f93f419a08b170e06c3efb825f8eca1968"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.410723, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line_tmp\"", "raw_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='bill_payment_line', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='bill_payment_line',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "bill_payment_line"], ["quickbooks", "bill_payment_line"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.bill_payment_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__bill_payment_line_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_payment_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__estimate_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__estimate_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__estimate_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__estimate_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__estimate_tmp"], "alias": "stg_quickbooks__estimate_tmp", "checksum": {"name": "sha256", "checksum": "bd7a335748a13aae584ae7ee6a45b8565299cf7a48a0495be863920c797d83c6"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.414473, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_tmp\"", "raw_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_estimate', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='estimate', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='estimate',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "estimate"], ["quickbooks", "estimate"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.estimate"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__estimate_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"estimate_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__purchase_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__purchase_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__purchase_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__purchase_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__purchase_tmp"], "alias": "stg_quickbooks__purchase_tmp", "checksum": {"name": "sha256", "checksum": "1ad34ab2fb967805e5387b4dcf01716431d1008430faee53027f043466c3896d"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view"}, "created_at": 1721255627.4191601, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='purchase', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='purchase',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "purchase"], ["quickbooks", "purchase"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.purchase"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__purchase_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__credit_memo_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__credit_memo_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__credit_memo_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__credit_memo_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__credit_memo_tmp"], "alias": "stg_quickbooks__credit_memo_tmp", "checksum": {"name": "sha256", "checksum": "b03c0272b980cd970a93970dab9696b945649ea42a46c4ebc4ffcf5094a1e8db"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.4226408, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_tmp\"", "raw_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_credit_memo', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='credit_memo', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='credit_memo',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "credit_memo"], ["quickbooks", "credit_memo"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.credit_memo"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__credit_memo_tmp.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"credit_memo_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__bill_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__bill_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__bill_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__bill_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__bill_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__bill_tmp"], "alias": "stg_quickbooks__bill_tmp", "checksum": {"name": "sha256", "checksum": "b579ba85c94cfa32fdb6fe9e65c2ee8e804c21417af340278c7370a7b9a31f2c"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.4266062, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_tmp\"", "raw_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='bill', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='bill',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "bill"], ["quickbooks", "bill"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.bill"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__bill_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__transfer_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__transfer_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__transfer_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__transfer_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__transfer_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__transfer_tmp"], "alias": "stg_quickbooks__transfer_tmp", "checksum": {"name": "sha256", "checksum": "f8f0e5207d431293f5adc30455c8c834cd6bab7475b906c2b781cdb8db9a059a"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.430235, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer_tmp\"", "raw_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_transfer', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='transfer', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='transfer',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "transfer"], ["quickbooks", "transfer"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.transfer"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__transfer_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"transfer_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__vendor_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__vendor_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__vendor_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__vendor_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__vendor_tmp"], "alias": "stg_quickbooks__vendor_tmp", "checksum": {"name": "sha256", "checksum": "99087fb776ee0e7ab8b1a75536a23d6019ce7de382c2bd0ae006db290dd2d485"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view"}, "created_at": 1721255627.434208, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='vendor', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='vendor',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "vendor"], ["quickbooks", "vendor"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.vendor"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__vendor_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__purchase_line_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__purchase_line_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__purchase_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__purchase_line_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__purchase_line_tmp"], "alias": "stg_quickbooks__purchase_line_tmp", "checksum": {"name": "sha256", "checksum": "39c7787a6481961b9d80bf3173afd5ece106fdb67bad2edbd69d436c6bbc3aca"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view"}, "created_at": 1721255627.438325, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line_tmp\"", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='purchase_line', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='purchase_line',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "purchase_line"], ["quickbooks", "purchase_line"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.purchase_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__purchase_line_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__address_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__address_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__address_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__address_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__address_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__address_tmp"], "alias": "stg_quickbooks__address_tmp", "checksum": {"name": "sha256", "checksum": "39a9820afa24c94b220f35fa72a0452806f5cdb828e5eb70583cded4ceb71454"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.441997, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address_tmp\"", "raw_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_address', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='address', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='address',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "address"], ["quickbooks", "address"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.address"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__address_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"address_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__payment_line_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__payment_line_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__payment_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__payment_line_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__payment_line_tmp"], "alias": "stg_quickbooks__payment_line_tmp", "checksum": {"name": "sha256", "checksum": "333d6ce9e2621c99b011bfbb668c38c1fe20d45a9e155278371ad1c5c19fffa3"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.445945, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line_tmp\"", "raw_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_payment', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='payment_line', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='payment_line',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "payment_line"], ["quickbooks", "payment_line"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.payment_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__payment_line_tmp.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"payment_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__refund_receipt_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__refund_receipt_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__refund_receipt_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__refund_receipt_tmp"], "alias": "stg_quickbooks__refund_receipt_tmp", "checksum": {"name": "sha256", "checksum": "274dbd883a2adaf7559f8bc8812a558a95b52329f18218fe5494c63b7abcf7a5"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.449873, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_tmp\"", "raw_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_refund_receipt', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='refund_receipt', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='refund_receipt',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "refund_receipt"], ["quickbooks", "refund_receipt"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.refund_receipt"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__refund_receipt_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"refund_receipt_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__sales_receipt_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__sales_receipt_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__sales_receipt_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__sales_receipt_tmp"], "alias": "stg_quickbooks__sales_receipt_tmp", "checksum": {"name": "sha256", "checksum": "a05a40a4c7d85d3d74b1f331c2fa2cfae1f6ed9f883d1f67650277ea03681ea7"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.453701, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_tmp\"", "raw_code": "{{ config(enabled=var('using_sales_receipt', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='sales_receipt', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='sales_receipt',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "sales_receipt"], ["quickbooks", "sales_receipt"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.sales_receipt"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__sales_receipt_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"sales_receipt_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__bill_payment_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__bill_payment_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__bill_payment_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__bill_payment_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__bill_payment_tmp"], "alias": "stg_quickbooks__bill_payment_tmp", "checksum": {"name": "sha256", "checksum": "f956078b3ec8d833f517f431c67509fe75f494b11a6fa4a735b85d232453dba4"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.458355, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_tmp\"", "raw_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='bill_payment', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='bill_payment',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "bill_payment"], ["quickbooks", "bill_payment"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.bill_payment"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__bill_payment_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_payment_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__journal_entry_line_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__journal_entry_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__journal_entry_line_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__journal_entry_line_tmp"], "alias": "stg_quickbooks__journal_entry_line_tmp", "checksum": {"name": "sha256", "checksum": "bcba66ad0358646e9993b39ecdd17c69130874858cb027ed198364bb77a3d283"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.462186, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line_tmp\"", "raw_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_journal_entry', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='journal_entry_line', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='journal_entry_line',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "journal_entry_line"], ["quickbooks", "journal_entry_line"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.journal_entry_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__journal_entry_line_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"journal_entry_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__deposit_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__deposit_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__deposit_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__deposit_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__deposit_tmp"], "alias": "stg_quickbooks__deposit_tmp", "checksum": {"name": "sha256", "checksum": "e1f40c890b39fe0dd1bcec03c90b403c4e77015c805426b90ca3c3b1c93eb3b2"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.4659991, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_tmp\"", "raw_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_deposit', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='deposit', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='deposit',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "deposit"], ["quickbooks", "deposit"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.deposit"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__deposit_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"deposit_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__bill_linked_txn_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__bill_linked_txn_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__bill_linked_txn_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__bill_linked_txn_tmp"], "alias": "stg_quickbooks__bill_linked_txn_tmp", "checksum": {"name": "sha256", "checksum": "2583068246d6617f1e99a3b11589211fb7cb90f66035526cee17be299ba826ec"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.469805, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn_tmp\"", "raw_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='bill_linked_txn', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='bill_linked_txn',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "bill_linked_txn"], ["quickbooks", "bill_linked_txn"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.bill_linked_txn"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__bill_linked_txn_tmp.sql", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_linked_txn_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__invoice_linked_txn_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__invoice_linked_txn_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__invoice_linked_txn_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__invoice_linked_txn_tmp"], "alias": "stg_quickbooks__invoice_linked_txn_tmp", "checksum": {"name": "sha256", "checksum": "813acd5c2445c8886b2aa20afb05c5dc8165b9d38b3081b12a879e67abc67520"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.473678, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn_tmp\"", "raw_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_invoice', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='invoice_linked_txn', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='invoice_linked_txn',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "invoice_linked_txn"], ["quickbooks", "invoice_linked_txn"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.invoice_linked_txn"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__invoice_linked_txn_tmp.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_linked_txn_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__sales_receipt_line_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__sales_receipt_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__sales_receipt_line_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__sales_receipt_line_tmp"], "alias": "stg_quickbooks__sales_receipt_line_tmp", "checksum": {"name": "sha256", "checksum": "b463d162c1fb701954a94b8322f6d5f7be39431fde28ce6eb0cb7ded9d7f1b07"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.4781911, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line_tmp\"", "raw_code": "{{ config(enabled=var('using_sales_receipt', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='sales_receipt_line', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='sales_receipt_line',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "sales_receipt_line"], ["quickbooks", "sales_receipt_line"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.sales_receipt_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__sales_receipt_line_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"sales_receipt_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__purchase_order_linked_txn_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__purchase_order_linked_txn_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__purchase_order_linked_txn_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__purchase_order_linked_txn_tmp"], "alias": "stg_quickbooks__purchase_order_linked_txn_tmp", "checksum": {"name": "sha256", "checksum": "926409c011fa67fdcd598c4c0c21b87fb5dabe8654d46f0ee7caac0a028d5d99"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.482144, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_linked_txn_tmp\"", "raw_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_purchase_order', False)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='purchase_order_linked_txn', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='purchase_order_linked_txn',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "purchase_order_linked_txn"], ["quickbooks", "purchase_order_linked_txn"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.purchase_order_linked_txn"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__purchase_order_linked_txn_tmp.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_linked_txn_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.quickbooks_source.stg_quickbooks__invoice_tmp": {"database": "postgres", "schema": "quickbooks_source_integrations_tests_quickbooks_staging", "name": "stg_quickbooks__invoice_tmp", "resource_type": "model", "package_name": "quickbooks_source", "path": "tmp/stg_quickbooks__invoice_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__invoice_tmp.sql", "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_tmp", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__invoice_tmp"], "alias": "stg_quickbooks__invoice_tmp", "checksum": {"name": "sha256", "checksum": "c901088fa713bc1e59f7299c7c7d6ac7aea71b7c97e5a2821fd8efd33214bfc1"}, "config": {"enabled": true, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "created_at": 1721255627.485842, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_tmp\"", "raw_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_invoice', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='invoice', \n        database_variable='quickbooks_database', \n        schema_variable='quickbooks_schema', \n        default_database=target.database,\n        default_schema='quickbooks',\n        default_variable='invoice',\n        union_schema_variable='quickbooks_union_schemas',\n        union_database_variable='quickbooks_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["quickbooks", "invoice"], ["quickbooks", "invoice"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.quickbooks_source.quickbooks.invoice"]}, "compiled_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__invoice_tmp.sql", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.quickbooks_source.not_null_stg_quickbooks__account_account_id.9944488b9d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__account')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__account_account_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__account_account_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__account_account_id.9944488b9d", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__account_account_id"], "alias": "not_null_stg_quickbooks__account_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.655248, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__account"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__account_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.stg_quickbooks__account", "attached_node": "model.quickbooks_source.stg_quickbooks__account"}, "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue.127506f73f": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Asset", "Equity", "Expense", "Liability", "Revenue"], "column_name": "classification", "model": "{{ get_where_subquery(ref('stg_quickbooks__account')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue", "resource_type": "test", "package_name": "quickbooks_source", "path": "accepted_values_stg_quickbooks_e07a6bf709efec96a0a6e115c0aeefe9.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue.127506f73f", "fqn": ["quickbooks_source", "accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue"], "alias": "accepted_values_stg_quickbooks_e07a6bf709efec96a0a6e115c0aeefe9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_quickbooks_e07a6bf709efec96a0a6e115c0aeefe9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_quickbooks_e07a6bf709efec96a0a6e115c0aeefe9"}, "created_at": 1721255627.656514, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_quickbooks_e07a6bf709efec96a0a6e115c0aeefe9\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__account"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/accepted_values_stg_quickbooks_e07a6bf709efec96a0a6e115c0aeefe9.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        classification as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account\"\n    group by classification\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Asset','Equity','Expense','Liability','Revenue'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "classification", "file_key_name": "models.stg_quickbooks__account", "attached_node": "model.quickbooks_source.stg_quickbooks__account"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation.864a4b056a": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__account')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_2c250fbd62d33682b7816cb52dfc3c29.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation.864a4b056a", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation"], "alias": "dbt_utils_unique_combination_o_2c250fbd62d33682b7816cb52dfc3c29", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2c250fbd62d33682b7816cb52dfc3c29", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2c250fbd62d33682b7816cb52dfc3c29"}, "created_at": 1721255627.6633961, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2c250fbd62d33682b7816cb52dfc3c29\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__account"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_2c250fbd62d33682b7816cb52dfc3c29.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account\"\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__account", "attached_node": "model.quickbooks_source.stg_quickbooks__account"}, "test.quickbooks_source.not_null_stg_quickbooks__address_address_id.4f100ae50c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "address_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__address')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__address_address_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__address_address_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__address_address_id.4f100ae50c", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__address_address_id"], "alias": "not_null_stg_quickbooks__address_address_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.668384, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__address", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__address"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__address_address_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address\"\nwhere address_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address_id", "file_key_name": "models.stg_quickbooks__address", "attached_node": "model.quickbooks_source.stg_quickbooks__address"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation.5bc813a014": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["address_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__address')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_ea2ca4111a1d5463abe776e005c7d772.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation.5bc813a014", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation"], "alias": "dbt_utils_unique_combination_o_ea2ca4111a1d5463abe776e005c7d772", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ea2ca4111a1d5463abe776e005c7d772", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ea2ca4111a1d5463abe776e005c7d772"}, "created_at": 1721255627.6693451, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ea2ca4111a1d5463abe776e005c7d772\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__address", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__address"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_ea2ca4111a1d5463abe776e005c7d772.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address\"\n    group by address_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__address", "attached_node": "model.quickbooks_source.stg_quickbooks__address"}, "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id.25c5ea7348": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bill_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__bill_line')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__bill_line_bill_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__bill_line_bill_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id.25c5ea7348", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__bill_line_bill_id"], "alias": "not_null_stg_quickbooks__bill_line_bill_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.671796, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__bill_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__bill_line_bill_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line\"\nwhere bill_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bill_id", "file_key_name": "models.stg_quickbooks__bill_line", "attached_node": "model.quickbooks_source.stg_quickbooks__bill_line"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation.73722b1062": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["bill_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__bill_line')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_bef323d83a6624b59a493fe8678153b1.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation.73722b1062", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_bef323d83a6624b59a493fe8678153b1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bef323d83a6624b59a493fe8678153b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_bef323d83a6624b59a493fe8678153b1"}, "created_at": 1721255627.6727521, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bef323d83a6624b59a493fe8678153b1\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__bill_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_bef323d83a6624b59a493fe8678153b1.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line\"\n    group by bill_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__bill_line", "attached_node": "model.quickbooks_source.stg_quickbooks__bill_line"}, "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id.35f96199bd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bill_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__bill_linked_txn')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__bill_linked_txn_bill_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__bill_linked_txn_bill_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id.35f96199bd", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__bill_linked_txn_bill_id"], "alias": "not_null_stg_quickbooks__bill_linked_txn_bill_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.675051, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__bill_linked_txn", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_linked_txn"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__bill_linked_txn_bill_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn\"\nwhere bill_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bill_id", "file_key_name": "models.stg_quickbooks__bill_linked_txn", "attached_node": "model.quickbooks_source.stg_quickbooks__bill_linked_txn"}, "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id.1dbb366150": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bill_payment_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__bill_payment_line')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__bill_payment_line_bill_payment_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__bill_payment_line_bill_payment_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id.1dbb366150", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__bill_payment_line_bill_payment_id"], "alias": "not_null_stg_quickbooks__bill_payment_line_bill_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.6759732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__bill_payment_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_payment_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__bill_payment_line_bill_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line\"\nwhere bill_payment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bill_payment_id", "file_key_name": "models.stg_quickbooks__bill_payment_line", "attached_node": "model.quickbooks_source.stg_quickbooks__bill_payment_line"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation.0a7e17967c": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["bill_payment_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__bill_payment_line')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_487ae4ed3e6515e1119410b052e6f614.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation.0a7e17967c", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_487ae4ed3e6515e1119410b052e6f614", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_487ae4ed3e6515e1119410b052e6f614", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_487ae4ed3e6515e1119410b052e6f614"}, "created_at": 1721255627.6769018, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_487ae4ed3e6515e1119410b052e6f614\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__bill_payment_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_payment_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_487ae4ed3e6515e1119410b052e6f614.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line\"\n    group by bill_payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__bill_payment_line", "attached_node": "model.quickbooks_source.stg_quickbooks__bill_payment_line"}, "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id.908899ccfb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bill_payment_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__bill_payment')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__bill_payment_bill_payment_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__bill_payment_bill_payment_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id.908899ccfb", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__bill_payment_bill_payment_id"], "alias": "not_null_stg_quickbooks__bill_payment_bill_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.679872, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__bill_payment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_payment"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__bill_payment_bill_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment\"\nwhere bill_payment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bill_payment_id", "file_key_name": "models.stg_quickbooks__bill_payment", "attached_node": "model.quickbooks_source.stg_quickbooks__bill_payment"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation.4b7aafd630": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["bill_payment_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__bill_payment')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_c3c16cc237119d09c84e75057a9582ec.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation.4b7aafd630", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation"], "alias": "dbt_utils_unique_combination_o_c3c16cc237119d09c84e75057a9582ec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c3c16cc237119d09c84e75057a9582ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c3c16cc237119d09c84e75057a9582ec"}, "created_at": 1721255627.680821, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c3c16cc237119d09c84e75057a9582ec\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__bill_payment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_payment"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_c3c16cc237119d09c84e75057a9582ec.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment\"\n    group by bill_payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__bill_payment", "attached_node": "model.quickbooks_source.stg_quickbooks__bill_payment"}, "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id.ca717958c8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bill_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__bill')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__bill_bill_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__bill_bill_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id.ca717958c8", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__bill_bill_id"], "alias": "not_null_stg_quickbooks__bill_bill_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.6835551, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__bill", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__bill_bill_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill\"\nwhere bill_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bill_id", "file_key_name": "models.stg_quickbooks__bill", "attached_node": "model.quickbooks_source.stg_quickbooks__bill"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation.8c08249abf": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["bill_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__bill')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_c28ddd5789110418dc73ea10c40920f4.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation.8c08249abf", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation"], "alias": "dbt_utils_unique_combination_o_c28ddd5789110418dc73ea10c40920f4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c28ddd5789110418dc73ea10c40920f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c28ddd5789110418dc73ea10c40920f4"}, "created_at": 1721255627.6845272, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c28ddd5789110418dc73ea10c40920f4\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__bill", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_c28ddd5789110418dc73ea10c40920f4.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill\"\n    group by bill_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__bill", "attached_node": "model.quickbooks_source.stg_quickbooks__bill"}, "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id.6d547b8c07": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bundle_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__bundle_item')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__bundle_item_bundle_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__bundle_item_bundle_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id.6d547b8c07", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__bundle_item_bundle_id"], "alias": "not_null_stg_quickbooks__bundle_item_bundle_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.687072, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__bundle_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__bundle_item"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__bundle_item_bundle_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_item\"\nwhere bundle_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bundle_id", "file_key_name": "models.stg_quickbooks__bundle_item", "attached_node": "model.quickbooks_source.stg_quickbooks__bundle_item"}, "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id.382e1dad60": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bundle_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__bundle')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__bundle_bundle_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__bundle_bundle_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id.382e1dad60", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__bundle_bundle_id"], "alias": "not_null_stg_quickbooks__bundle_bundle_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.688071, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__bundle", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__bundle"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__bundle_bundle_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle\"\nwhere bundle_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bundle_id", "file_key_name": "models.stg_quickbooks__bundle", "attached_node": "model.quickbooks_source.stg_quickbooks__bundle"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation.e241a21ebc": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["bundle_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__bundle')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_09730cf68ccfa2ddf1a0171abdbe7727.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation.e241a21ebc", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation"], "alias": "dbt_utils_unique_combination_o_09730cf68ccfa2ddf1a0171abdbe7727", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_09730cf68ccfa2ddf1a0171abdbe7727", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_09730cf68ccfa2ddf1a0171abdbe7727"}, "created_at": 1721255627.689004, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_09730cf68ccfa2ddf1a0171abdbe7727\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__bundle", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__bundle"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_09730cf68ccfa2ddf1a0171abdbe7727.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bundle_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle\"\n    group by bundle_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__bundle", "attached_node": "model.quickbooks_source.stg_quickbooks__bundle"}, "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id.58953be02b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_memo_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__credit_memo_line')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__credit_memo_line_credit_memo_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__credit_memo_line_credit_memo_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id.58953be02b", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__credit_memo_line_credit_memo_id"], "alias": "not_null_stg_quickbooks__credit_memo_line_credit_memo_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.691371, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__credit_memo_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__credit_memo_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__credit_memo_line_credit_memo_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line\"\nwhere credit_memo_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "credit_memo_id", "file_key_name": "models.stg_quickbooks__credit_memo_line", "attached_node": "model.quickbooks_source.stg_quickbooks__credit_memo_line"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation.7a43f0e186": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["credit_memo_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__credit_memo_line')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_d11c458ea2ce7f40d69dbe2502aff858.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation.7a43f0e186", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_d11c458ea2ce7f40d69dbe2502aff858", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d11c458ea2ce7f40d69dbe2502aff858", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d11c458ea2ce7f40d69dbe2502aff858"}, "created_at": 1721255627.692319, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d11c458ea2ce7f40d69dbe2502aff858\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__credit_memo_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__credit_memo_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_d11c458ea2ce7f40d69dbe2502aff858.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line\"\n    group by credit_memo_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__credit_memo_line", "attached_node": "model.quickbooks_source.stg_quickbooks__credit_memo_line"}, "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id.d921d2b152": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_memo_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__credit_memo')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__credit_memo_credit_memo_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__credit_memo_credit_memo_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id.d921d2b152", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__credit_memo_credit_memo_id"], "alias": "not_null_stg_quickbooks__credit_memo_credit_memo_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.69462, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__credit_memo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__credit_memo"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__credit_memo_credit_memo_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo\"\nwhere credit_memo_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "credit_memo_id", "file_key_name": "models.stg_quickbooks__credit_memo", "attached_node": "model.quickbooks_source.stg_quickbooks__credit_memo"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation.917f24c5ca": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["credit_memo_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__credit_memo')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_0370ab2c481d81737ad54a6b44ec7083.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation.917f24c5ca", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation"], "alias": "dbt_utils_unique_combination_o_0370ab2c481d81737ad54a6b44ec7083", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0370ab2c481d81737ad54a6b44ec7083", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0370ab2c481d81737ad54a6b44ec7083"}, "created_at": 1721255627.6955898, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0370ab2c481d81737ad54a6b44ec7083\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__credit_memo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__credit_memo"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_0370ab2c481d81737ad54a6b44ec7083.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo\"\n    group by credit_memo_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__credit_memo", "attached_node": "model.quickbooks_source.stg_quickbooks__credit_memo"}, "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id.98232a9723": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__customer')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__customer_customer_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__customer_customer_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id.98232a9723", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__customer_customer_id"], "alias": "not_null_stg_quickbooks__customer_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.697953, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__customer"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__customer_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer\"\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_quickbooks__customer", "attached_node": "model.quickbooks_source.stg_quickbooks__customer"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation.61cc22a568": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["customer_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__customer')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_94a5b3ccc73a9f1372dd56afe4104c9a.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation.61cc22a568", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation"], "alias": "dbt_utils_unique_combination_o_94a5b3ccc73a9f1372dd56afe4104c9a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_94a5b3ccc73a9f1372dd56afe4104c9a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_94a5b3ccc73a9f1372dd56afe4104c9a"}, "created_at": 1721255627.698894, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_94a5b3ccc73a9f1372dd56afe4104c9a\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__customer"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_94a5b3ccc73a9f1372dd56afe4104c9a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__customer", "attached_node": "model.quickbooks_source.stg_quickbooks__customer"}, "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id.d615f463e1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "deposit_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__deposit_line')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__deposit_line_deposit_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__deposit_line_deposit_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id.d615f463e1", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__deposit_line_deposit_id"], "alias": "not_null_stg_quickbooks__deposit_line_deposit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.701217, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__deposit_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__deposit_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__deposit_line_deposit_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line\"\nwhere deposit_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "deposit_id", "file_key_name": "models.stg_quickbooks__deposit_line", "attached_node": "model.quickbooks_source.stg_quickbooks__deposit_line"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation.443de63985": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["deposit_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__deposit_line')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_c925ee73881ebc194f9cd06282c3b48b.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation.443de63985", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_c925ee73881ebc194f9cd06282c3b48b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c925ee73881ebc194f9cd06282c3b48b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c925ee73881ebc194f9cd06282c3b48b"}, "created_at": 1721255627.702165, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c925ee73881ebc194f9cd06282c3b48b\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__deposit_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__deposit_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_c925ee73881ebc194f9cd06282c3b48b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line\"\n    group by deposit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__deposit_line", "attached_node": "model.quickbooks_source.stg_quickbooks__deposit_line"}, "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id.880b8c37b1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "deposit_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__deposit')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__deposit_deposit_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__deposit_deposit_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id.880b8c37b1", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__deposit_deposit_id"], "alias": "not_null_stg_quickbooks__deposit_deposit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.7045171, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__deposit", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__deposit"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__deposit_deposit_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit\"\nwhere deposit_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "deposit_id", "file_key_name": "models.stg_quickbooks__deposit", "attached_node": "model.quickbooks_source.stg_quickbooks__deposit"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation.5574d8e908": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["deposit_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__deposit')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_092a258f34ac4a7fefe159e881ac39cb.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation.5574d8e908", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation"], "alias": "dbt_utils_unique_combination_o_092a258f34ac4a7fefe159e881ac39cb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_092a258f34ac4a7fefe159e881ac39cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_092a258f34ac4a7fefe159e881ac39cb"}, "created_at": 1721255627.705735, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_092a258f34ac4a7fefe159e881ac39cb\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__deposit", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__deposit"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_092a258f34ac4a7fefe159e881ac39cb.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit\"\n    group by deposit_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__deposit", "attached_node": "model.quickbooks_source.stg_quickbooks__deposit"}, "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id.0331d3c310": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "estimate_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__estimate')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__estimate_estimate_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__estimate_estimate_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id.0331d3c310", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__estimate_estimate_id"], "alias": "not_null_stg_quickbooks__estimate_estimate_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.708426, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__estimate", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__estimate"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__estimate_estimate_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate\"\nwhere estimate_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "estimate_id", "file_key_name": "models.stg_quickbooks__estimate", "attached_node": "model.quickbooks_source.stg_quickbooks__estimate"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation.412260b882": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["estimate_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__estimate')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_7bf162cb88029051f57dba3c7fb04a68.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation.412260b882", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation"], "alias": "dbt_utils_unique_combination_o_7bf162cb88029051f57dba3c7fb04a68", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7bf162cb88029051f57dba3c7fb04a68", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7bf162cb88029051f57dba3c7fb04a68"}, "created_at": 1721255627.709384, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7bf162cb88029051f57dba3c7fb04a68\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__estimate", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__estimate"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_7bf162cb88029051f57dba3c7fb04a68.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate\"\n    group by estimate_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__estimate", "attached_node": "model.quickbooks_source.stg_quickbooks__estimate"}, "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id.c060f99b4c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "estimate_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__estimate_line')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__estimate_line_estimate_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__estimate_line_estimate_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id.c060f99b4c", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__estimate_line_estimate_id"], "alias": "not_null_stg_quickbooks__estimate_line_estimate_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.7115798, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__estimate_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__estimate_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__estimate_line_estimate_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line\"\nwhere estimate_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "estimate_id", "file_key_name": "models.stg_quickbooks__estimate_line", "attached_node": "model.quickbooks_source.stg_quickbooks__estimate_line"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation.cc61ab0953": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["estimate_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__estimate_line')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_32a21fecfc924c9112967c0151ed2e2a.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation.cc61ab0953", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_32a21fecfc924c9112967c0151ed2e2a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_32a21fecfc924c9112967c0151ed2e2a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_32a21fecfc924c9112967c0151ed2e2a"}, "created_at": 1721255627.712746, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_32a21fecfc924c9112967c0151ed2e2a\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__estimate_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__estimate_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_32a21fecfc924c9112967c0151ed2e2a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line\"\n    group by estimate_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__estimate_line", "attached_node": "model.quickbooks_source.stg_quickbooks__estimate_line"}, "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id.c9b9c8f8f4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__invoice_linked_txn')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__invoice_linked_txn_invoice_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__invoice_linked_txn_invoice_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id.c9b9c8f8f4", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__invoice_linked_txn_invoice_id"], "alias": "not_null_stg_quickbooks__invoice_linked_txn_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.715096, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__invoice_linked_txn", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_linked_txn"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__invoice_linked_txn_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn\"\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_quickbooks__invoice_linked_txn", "attached_node": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn"}, "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id.0424087a8f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__invoice_line')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__invoice_line_invoice_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__invoice_line_invoice_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id.0424087a8f", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__invoice_line_invoice_id"], "alias": "not_null_stg_quickbooks__invoice_line_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.716241, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__invoice_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__invoice_line_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line\"\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_quickbooks__invoice_line", "attached_node": "model.quickbooks_source.stg_quickbooks__invoice_line"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation.99b74bc327": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["invoice_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__invoice_line')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_c6315f3241abd1bacbc31091d17954d0.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation.99b74bc327", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_c6315f3241abd1bacbc31091d17954d0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c6315f3241abd1bacbc31091d17954d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c6315f3241abd1bacbc31091d17954d0"}, "created_at": 1721255627.717174, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c6315f3241abd1bacbc31091d17954d0\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__invoice_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_c6315f3241abd1bacbc31091d17954d0.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line\"\n    group by invoice_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__invoice_line", "attached_node": "model.quickbooks_source.stg_quickbooks__invoice_line"}, "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id.cfd59b83a9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__invoice_line_bundle')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__invoice_line_bundle_invoice_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__invoice_line_bundle_invoice_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id.cfd59b83a9", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__invoice_line_bundle_invoice_id"], "alias": "not_null_stg_quickbooks__invoice_line_bundle_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.7195709, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__invoice_line_bundle", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_line_bundle"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__invoice_line_bundle_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle\"\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_quickbooks__invoice_line_bundle", "attached_node": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation.5370e9fcd0": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["invoice_id", "index", "invoice_line_index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__invoice_line_bundle')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_50efaaff0f1b2a391c218200ac15163a.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation.5370e9fcd0", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation"], "alias": "dbt_utils_unique_combination_o_50efaaff0f1b2a391c218200ac15163a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_50efaaff0f1b2a391c218200ac15163a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_50efaaff0f1b2a391c218200ac15163a"}, "created_at": 1721255627.7205172, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_50efaaff0f1b2a391c218200ac15163a\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__invoice_line_bundle", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_line_bundle"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_50efaaff0f1b2a391c218200ac15163a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, invoice_line_index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle\"\n    group by invoice_id, index, invoice_line_index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__invoice_line_bundle", "attached_node": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle"}, "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id.b6d8e1ad7d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__invoice')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__invoice_invoice_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__invoice_invoice_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id.b6d8e1ad7d", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__invoice_invoice_id"], "alias": "not_null_stg_quickbooks__invoice_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.72319, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__invoice_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice\"\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_quickbooks__invoice", "attached_node": "model.quickbooks_source.stg_quickbooks__invoice"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation.ef51800044": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["invoice_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__invoice')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_319edd8e021d4717bac9384ad54afc4c.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation.ef51800044", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation"], "alias": "dbt_utils_unique_combination_o_319edd8e021d4717bac9384ad54afc4c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_319edd8e021d4717bac9384ad54afc4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_319edd8e021d4717bac9384ad54afc4c"}, "created_at": 1721255627.72419, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_319edd8e021d4717bac9384ad54afc4c\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_319edd8e021d4717bac9384ad54afc4c.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice\"\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__invoice", "attached_node": "model.quickbooks_source.stg_quickbooks__invoice"}, "test.quickbooks_source.not_null_stg_quickbooks__item_item_id.da906d8fb9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__item')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__item_item_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__item_item_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__item_item_id.da906d8fb9", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__item_item_id"], "alias": "not_null_stg_quickbooks__item_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.7265, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__item"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__item_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item\"\nwhere item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_id", "file_key_name": "models.stg_quickbooks__item", "attached_node": "model.quickbooks_source.stg_quickbooks__item"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation.169465a2a6": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["item_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__item')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_7426c41960b95c9389dbbbc54a1cf5d5.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation.169465a2a6", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation"], "alias": "dbt_utils_unique_combination_o_7426c41960b95c9389dbbbc54a1cf5d5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7426c41960b95c9389dbbbc54a1cf5d5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7426c41960b95c9389dbbbc54a1cf5d5"}, "created_at": 1721255627.7276359, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7426c41960b95c9389dbbbc54a1cf5d5\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__item"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_7426c41960b95c9389dbbbc54a1cf5d5.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        item_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item\"\n    group by item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__item", "attached_node": "model.quickbooks_source.stg_quickbooks__item"}, "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id.bd89a6f784": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "journal_entry_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__journal_entry_line')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__journal_entry_line_journal_entry_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__journal_entry_line_journal_entry_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id.bd89a6f784", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__journal_entry_line_journal_entry_id"], "alias": "not_null_stg_quickbooks__journal_entry_line_journal_entry_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.729986, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__journal_entry_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__journal_entry_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__journal_entry_line_journal_entry_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"\nwhere journal_entry_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "journal_entry_id", "file_key_name": "models.stg_quickbooks__journal_entry_line", "attached_node": "model.quickbooks_source.stg_quickbooks__journal_entry_line"}, "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.ab661907c3": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Credit", "Debit"], "column_name": "posting_type", "model": "{{ get_where_subquery(ref('stg_quickbooks__journal_entry_line')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit", "resource_type": "test", "package_name": "quickbooks_source", "path": "accepted_values_stg_quickbooks_b036fbffbcb85c40f92072d6f5f9ff55.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.ab661907c3", "fqn": ["quickbooks_source", "accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit"], "alias": "accepted_values_stg_quickbooks_b036fbffbcb85c40f92072d6f5f9ff55", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_quickbooks_b036fbffbcb85c40f92072d6f5f9ff55", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_quickbooks_b036fbffbcb85c40f92072d6f5f9ff55"}, "created_at": 1721255627.731137, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_quickbooks_b036fbffbcb85c40f92072d6f5f9ff55\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__journal_entry_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__journal_entry_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/accepted_values_stg_quickbooks_b036fbffbcb85c40f92072d6f5f9ff55.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        posting_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"\n    group by posting_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Credit','Debit'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "posting_type", "file_key_name": "models.stg_quickbooks__journal_entry_line", "attached_node": "model.quickbooks_source.stg_quickbooks__journal_entry_line"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation.0cd1d9f232": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["journal_entry_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__journal_entry_line')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_4c8432634b226965133f1e7c71701fee.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation.0cd1d9f232", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_4c8432634b226965133f1e7c71701fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4c8432634b226965133f1e7c71701fee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4c8432634b226965133f1e7c71701fee"}, "created_at": 1721255627.7342348, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4c8432634b226965133f1e7c71701fee\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__journal_entry_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__journal_entry_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_4c8432634b226965133f1e7c71701fee.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        journal_entry_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"\n    group by journal_entry_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__journal_entry_line", "attached_node": "model.quickbooks_source.stg_quickbooks__journal_entry_line"}, "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id.39198c4ff2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "journal_entry_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__journal_entry')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__journal_entry_journal_entry_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__journal_entry_journal_entry_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id.39198c4ff2", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__journal_entry_journal_entry_id"], "alias": "not_null_stg_quickbooks__journal_entry_journal_entry_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.73663, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__journal_entry", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__journal_entry"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__journal_entry_journal_entry_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry\"\nwhere journal_entry_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "journal_entry_id", "file_key_name": "models.stg_quickbooks__journal_entry", "attached_node": "model.quickbooks_source.stg_quickbooks__journal_entry"}, "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id.6351e3fe26": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__payment_line')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__payment_line_payment_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__payment_line_payment_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id.6351e3fe26", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__payment_line_payment_id"], "alias": "not_null_stg_quickbooks__payment_line_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.73758, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__payment_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__payment_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__payment_line_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line\"\nwhere payment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.stg_quickbooks__payment_line", "attached_node": "model.quickbooks_source.stg_quickbooks__payment_line"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation.25be3cf2e5": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["payment_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__payment_line')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_7392e0f7492547c3f7fdf460f4541625.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation.25be3cf2e5", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_7392e0f7492547c3f7fdf460f4541625", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7392e0f7492547c3f7fdf460f4541625", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7392e0f7492547c3f7fdf460f4541625"}, "created_at": 1721255627.738695, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7392e0f7492547c3f7fdf460f4541625\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__payment_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__payment_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_7392e0f7492547c3f7fdf460f4541625.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line\"\n    group by payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__payment_line", "attached_node": "model.quickbooks_source.stg_quickbooks__payment_line"}, "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id.ca2c1ef54f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__payment')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__payment_payment_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__payment_payment_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id.ca2c1ef54f", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__payment_payment_id"], "alias": "not_null_stg_quickbooks__payment_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.740958, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__payment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__payment"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__payment_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment\"\nwhere payment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.stg_quickbooks__payment", "attached_node": "model.quickbooks_source.stg_quickbooks__payment"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation.1998a8282e": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["payment_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__payment')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_f2adbcdbbcee8d760b8061840cafa557.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation.1998a8282e", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation"], "alias": "dbt_utils_unique_combination_o_f2adbcdbbcee8d760b8061840cafa557", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f2adbcdbbcee8d760b8061840cafa557", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f2adbcdbbcee8d760b8061840cafa557"}, "created_at": 1721255627.742042, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f2adbcdbbcee8d760b8061840cafa557\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__payment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__payment"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_f2adbcdbbcee8d760b8061840cafa557.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment\"\n    group by payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__payment", "attached_node": "model.quickbooks_source.stg_quickbooks__payment"}, "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id.5406fca79c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "purchase_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__purchase_line')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__purchase_line_purchase_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__purchase_line_purchase_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id.5406fca79c", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__purchase_line_purchase_id"], "alias": "not_null_stg_quickbooks__purchase_line_purchase_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.74486, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__purchase_line_purchase_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line\"\nwhere purchase_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "purchase_id", "file_key_name": "models.stg_quickbooks__purchase_line", "attached_node": "model.quickbooks_source.stg_quickbooks__purchase_line"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation.a23c661eb5": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["purchase_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__purchase_line')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_af6a2ae9538ebdc44c401715aaef9153.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation.a23c661eb5", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_af6a2ae9538ebdc44c401715aaef9153", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_af6a2ae9538ebdc44c401715aaef9153", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_af6a2ae9538ebdc44c401715aaef9153"}, "created_at": 1721255627.745899, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_af6a2ae9538ebdc44c401715aaef9153\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_af6a2ae9538ebdc44c401715aaef9153.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line\"\n    group by purchase_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__purchase_line", "attached_node": "model.quickbooks_source.stg_quickbooks__purchase_line"}, "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id.fc2090959b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "purchase_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__purchase')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__purchase_purchase_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__purchase_purchase_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id.fc2090959b", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__purchase_purchase_id"], "alias": "not_null_stg_quickbooks__purchase_purchase_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.748717, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__purchase_purchase_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase\"\nwhere purchase_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "purchase_id", "file_key_name": "models.stg_quickbooks__purchase", "attached_node": "model.quickbooks_source.stg_quickbooks__purchase"}, "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard.7de7edf458": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Cash", "Check", "CreditCard"], "column_name": "payment_type", "model": "{{ get_where_subquery(ref('stg_quickbooks__purchase')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard", "resource_type": "test", "package_name": "quickbooks_source", "path": "accepted_values_stg_quickbooks_b3d99f90b13d6a36cf512ed42db44216.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard.7de7edf458", "fqn": ["quickbooks_source", "accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard"], "alias": "accepted_values_stg_quickbooks_b3d99f90b13d6a36cf512ed42db44216", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_quickbooks_b3d99f90b13d6a36cf512ed42db44216", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_quickbooks_b3d99f90b13d6a36cf512ed42db44216"}, "created_at": 1721255627.7496908, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_quickbooks_b3d99f90b13d6a36cf512ed42db44216\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/accepted_values_stg_quickbooks_b3d99f90b13d6a36cf512ed42db44216.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase\"\n    group by payment_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Cash','Check','CreditCard'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_type", "file_key_name": "models.stg_quickbooks__purchase", "attached_node": "model.quickbooks_source.stg_quickbooks__purchase"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation.172340b49e": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["purchase_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__purchase')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_386d04b86fca1a7980db6f9572202563.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation.172340b49e", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation"], "alias": "dbt_utils_unique_combination_o_386d04b86fca1a7980db6f9572202563", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_386d04b86fca1a7980db6f9572202563", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_386d04b86fca1a7980db6f9572202563"}, "created_at": 1721255627.7529879, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_386d04b86fca1a7980db6f9572202563\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_386d04b86fca1a7980db6f9572202563.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase\"\n    group by purchase_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__purchase", "attached_node": "model.quickbooks_source.stg_quickbooks__purchase"}, "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_line_purchase_order_id.210718c1c7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "purchase_order_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__purchase_order_line')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__purchase_order_line_purchase_order_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__purchase_order_line_purchase_order_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_line_purchase_order_id.210718c1c7", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__purchase_order_line_purchase_order_id"], "alias": "not_null_stg_quickbooks__purchase_order_line_purchase_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.755587, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_order_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__purchase_order_line_purchase_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_order_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line\"\nwhere purchase_order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "purchase_order_id", "file_key_name": "models.stg_quickbooks__purchase_order_line", "attached_node": "model.quickbooks_source.stg_quickbooks__purchase_order_line"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_line_purchase_order_id__index__source_relation.e47fe7ae13": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["purchase_order_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__purchase_order_line')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_line_purchase_order_id__index__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_3ba099633a523f1dc8a259e210e71943.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_line_purchase_order_id__index__source_relation.e47fe7ae13", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_line_purchase_order_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_3ba099633a523f1dc8a259e210e71943", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3ba099633a523f1dc8a259e210e71943", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3ba099633a523f1dc8a259e210e71943"}, "created_at": 1721255627.756516, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3ba099633a523f1dc8a259e210e71943\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase_order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_order_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_3ba099633a523f1dc8a259e210e71943.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_order_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line\"\n    group by purchase_order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__purchase_order_line", "attached_node": "model.quickbooks_source.stg_quickbooks__purchase_order_line"}, "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id.d9f0186f4e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "purchase_order_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__purchase_order_linked_txn')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__purch_f65b0771229ffce1e0cec6cb8fa708f1.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id.d9f0186f4e", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id"], "alias": "not_null_stg_quickbooks__purch_f65b0771229ffce1e0cec6cb8fa708f1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_quickbooks__purch_f65b0771229ffce1e0cec6cb8fa708f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_quickbooks__purch_f65b0771229ffce1e0cec6cb8fa708f1"}, "created_at": 1721255627.75886, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_quickbooks__purch_f65b0771229ffce1e0cec6cb8fa708f1\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase_order_linked_txn", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__purch_f65b0771229ffce1e0cec6cb8fa708f1.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_order_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_linked_txn\"\nwhere purchase_order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "purchase_order_id", "file_key_name": "models.stg_quickbooks__purchase_order_linked_txn", "attached_node": "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn"}, "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_purchase_order_id.4158032222": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "purchase_order_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__purchase_order')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__purchase_order_purchase_order_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__purchase_order_purchase_order_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_purchase_order_id.4158032222", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__purchase_order_purchase_order_id"], "alias": "not_null_stg_quickbooks__purchase_order_purchase_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.759768, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase_order", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_order"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__purchase_order_purchase_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_order_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order\"\nwhere purchase_order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "purchase_order_id", "file_key_name": "models.stg_quickbooks__purchase_order", "attached_node": "model.quickbooks_source.stg_quickbooks__purchase_order"}, "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_order_status__Open__Closed.a86f736065": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Open", "Closed"], "column_name": "status", "model": "{{ get_where_subquery(ref('stg_quickbooks__purchase_order')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "accepted_values_stg_quickbooks__purchase_order_status__Open__Closed", "resource_type": "test", "package_name": "quickbooks_source", "path": "accepted_values_stg_quickbooks_b59f9d5f36eebc1dfce3c2fd46711614.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_order_status__Open__Closed.a86f736065", "fqn": ["quickbooks_source", "accepted_values_stg_quickbooks__purchase_order_status__Open__Closed"], "alias": "accepted_values_stg_quickbooks_b59f9d5f36eebc1dfce3c2fd46711614", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_quickbooks_b59f9d5f36eebc1dfce3c2fd46711614", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_quickbooks_b59f9d5f36eebc1dfce3c2fd46711614"}, "created_at": 1721255627.760671, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_quickbooks_b59f9d5f36eebc1dfce3c2fd46711614\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase_order", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_order"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/accepted_values_stg_quickbooks_b59f9d5f36eebc1dfce3c2fd46711614.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Open','Closed'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "status", "file_key_name": "models.stg_quickbooks__purchase_order", "attached_node": "model.quickbooks_source.stg_quickbooks__purchase_order"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_purchase_order_id__source_relation.1ade9ebad8": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["purchase_order_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__purchase_order')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_purchase_order_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_8808ebb4f985933b6458aa95672f633d.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_purchase_order_id__source_relation.1ade9ebad8", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_purchase_order_id__source_relation"], "alias": "dbt_utils_unique_combination_o_8808ebb4f985933b6458aa95672f633d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8808ebb4f985933b6458aa95672f633d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8808ebb4f985933b6458aa95672f633d"}, "created_at": 1721255627.764098, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8808ebb4f985933b6458aa95672f633d\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__purchase_order", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_order"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_8808ebb4f985933b6458aa95672f633d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_order_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order\"\n    group by purchase_order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__purchase_order", "attached_node": "model.quickbooks_source.stg_quickbooks__purchase_order"}, "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id.57df809b80": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "refund_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__refund_receipt_line')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__refund_receipt_line_refund_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__refund_receipt_line_refund_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id.57df809b80", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__refund_receipt_line_refund_id"], "alias": "not_null_stg_quickbooks__refund_receipt_line_refund_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.766832, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__refund_receipt_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__refund_receipt_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__refund_receipt_line_refund_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line\"\nwhere refund_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "refund_id", "file_key_name": "models.stg_quickbooks__refund_receipt_line", "attached_node": "model.quickbooks_source.stg_quickbooks__refund_receipt_line"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation.614411eb40": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["refund_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__refund_receipt_line')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_0576ca2d4762e19d78b83d83ac2c0576.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation.614411eb40", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_0576ca2d4762e19d78b83d83ac2c0576", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0576ca2d4762e19d78b83d83ac2c0576", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0576ca2d4762e19d78b83d83ac2c0576"}, "created_at": 1721255627.767808, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0576ca2d4762e19d78b83d83ac2c0576\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__refund_receipt_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__refund_receipt_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_0576ca2d4762e19d78b83d83ac2c0576.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line\"\n    group by refund_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__refund_receipt_line", "attached_node": "model.quickbooks_source.stg_quickbooks__refund_receipt_line"}, "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id.29e8a8216e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "refund_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__refund_receipt')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__refund_receipt_refund_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__refund_receipt_refund_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id.29e8a8216e", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__refund_receipt_refund_id"], "alias": "not_null_stg_quickbooks__refund_receipt_refund_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.771133, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__refund_receipt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__refund_receipt"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__refund_receipt_refund_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt\"\nwhere refund_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "refund_id", "file_key_name": "models.stg_quickbooks__refund_receipt", "attached_node": "model.quickbooks_source.stg_quickbooks__refund_receipt"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation.60f976841d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["refund_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__refund_receipt')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_98a0d08c840b3e48e476b15f4128e605.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation.60f976841d", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation"], "alias": "dbt_utils_unique_combination_o_98a0d08c840b3e48e476b15f4128e605", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_98a0d08c840b3e48e476b15f4128e605", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_98a0d08c840b3e48e476b15f4128e605"}, "created_at": 1721255627.772112, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_98a0d08c840b3e48e476b15f4128e605\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__refund_receipt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__refund_receipt"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_98a0d08c840b3e48e476b15f4128e605.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt\"\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__refund_receipt", "attached_node": "model.quickbooks_source.stg_quickbooks__refund_receipt"}, "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.9be0667fc3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_receipt_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__sales_receipt_line')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.9be0667fc3", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id"], "alias": "not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.7744992, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__sales_receipt_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__sales_receipt_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line\"\nwhere sales_receipt_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_receipt_id", "file_key_name": "models.stg_quickbooks__sales_receipt_line", "attached_node": "model.quickbooks_source.stg_quickbooks__sales_receipt_line"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation.20e80dcbd5": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["sales_receipt_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__sales_receipt_line')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_3c761efd9d55d2e81605c5aa8b69c899.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation.20e80dcbd5", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_3c761efd9d55d2e81605c5aa8b69c899", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3c761efd9d55d2e81605c5aa8b69c899", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3c761efd9d55d2e81605c5aa8b69c899"}, "created_at": 1721255627.775407, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3c761efd9d55d2e81605c5aa8b69c899\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__sales_receipt_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__sales_receipt_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_3c761efd9d55d2e81605c5aa8b69c899.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line\"\n    group by sales_receipt_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__sales_receipt_line", "attached_node": "model.quickbooks_source.stg_quickbooks__sales_receipt_line"}, "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id.b97c1a238a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_receipt_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__sales_receipt')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__sales_receipt_sales_receipt_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__sales_receipt_sales_receipt_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id.b97c1a238a", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__sales_receipt_sales_receipt_id"], "alias": "not_null_stg_quickbooks__sales_receipt_sales_receipt_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.777647, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__sales_receipt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__sales_receipt"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__sales_receipt_sales_receipt_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt\"\nwhere sales_receipt_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_receipt_id", "file_key_name": "models.stg_quickbooks__sales_receipt", "attached_node": "model.quickbooks_source.stg_quickbooks__sales_receipt"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation.36bdbcffde": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["sales_receipt_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__sales_receipt')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_8270165597a02c4fdee4d5d05b75b03d.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation.36bdbcffde", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation"], "alias": "dbt_utils_unique_combination_o_8270165597a02c4fdee4d5d05b75b03d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8270165597a02c4fdee4d5d05b75b03d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8270165597a02c4fdee4d5d05b75b03d"}, "created_at": 1721255627.778555, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8270165597a02c4fdee4d5d05b75b03d\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__sales_receipt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__sales_receipt"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_8270165597a02c4fdee4d5d05b75b03d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt\"\n    group by sales_receipt_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__sales_receipt", "attached_node": "model.quickbooks_source.stg_quickbooks__sales_receipt"}, "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id.c1c80a253c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transfer_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__transfer')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__transfer_transfer_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__transfer_transfer_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id.c1c80a253c", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__transfer_transfer_id"], "alias": "not_null_stg_quickbooks__transfer_transfer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.780629, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__transfer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__transfer"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__transfer_transfer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transfer_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer\"\nwhere transfer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transfer_id", "file_key_name": "models.stg_quickbooks__transfer", "attached_node": "model.quickbooks_source.stg_quickbooks__transfer"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation.bfa4c7345e": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transfer_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__transfer')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_2c8c7ac1eb8b4669ad2cee7a8f4ed233.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation.bfa4c7345e", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation"], "alias": "dbt_utils_unique_combination_o_2c8c7ac1eb8b4669ad2cee7a8f4ed233", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2c8c7ac1eb8b4669ad2cee7a8f4ed233", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2c8c7ac1eb8b4669ad2cee7a8f4ed233"}, "created_at": 1721255627.7816892, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2c8c7ac1eb8b4669ad2cee7a8f4ed233\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__transfer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__transfer"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_2c8c7ac1eb8b4669ad2cee7a8f4ed233.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer\"\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__transfer", "attached_node": "model.quickbooks_source.stg_quickbooks__transfer"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation.094b35ac4d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["vendor_credit_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__vendor_credit_line')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_d15906fc804bc105aea1840c47631e4b.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation.094b35ac4d", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_d15906fc804bc105aea1840c47631e4b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d15906fc804bc105aea1840c47631e4b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d15906fc804bc105aea1840c47631e4b"}, "created_at": 1721255627.784534, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d15906fc804bc105aea1840c47631e4b\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__vendor_credit_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor_credit_line"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_d15906fc804bc105aea1840c47631e4b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_credit_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line\"\n    group by vendor_credit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__vendor_credit_line", "attached_node": "model.quickbooks_source.stg_quickbooks__vendor_credit_line"}, "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id.1275a5ab5a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_credit_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__vendor_credit')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__vendor_credit_vendor_credit_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__vendor_credit_vendor_credit_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id.1275a5ab5a", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__vendor_credit_vendor_credit_id"], "alias": "not_null_stg_quickbooks__vendor_credit_vendor_credit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.787327, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__vendor_credit", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor_credit"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__vendor_credit_vendor_credit_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_credit_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit\"\nwhere vendor_credit_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_credit_id", "file_key_name": "models.stg_quickbooks__vendor_credit", "attached_node": "model.quickbooks_source.stg_quickbooks__vendor_credit"}, "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id.f509a77195": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('stg_quickbooks__vendor')) }}"}, "namespace": null}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "not_null_stg_quickbooks__vendor_vendor_id", "resource_type": "test", "package_name": "quickbooks_source", "path": "not_null_stg_quickbooks__vendor_vendor_id.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id.f509a77195", "fqn": ["quickbooks_source", "not_null_stg_quickbooks__vendor_vendor_id"], "alias": "not_null_stg_quickbooks__vendor_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1721255627.7883341, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_quickbooks__vendor", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/not_null_stg_quickbooks__vendor_vendor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor\"\nwhere vendor_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vendor_id", "file_key_name": "models.stg_quickbooks__vendor", "attached_node": "model.quickbooks_source.stg_quickbooks__vendor"}, "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation.4960d9d21a": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["vendor_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_quickbooks__vendor')) }}"}, "namespace": "dbt_utils"}, "database": "postgres", "schema": "quickbooks_source_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation", "resource_type": "test", "package_name": "quickbooks_source", "path": "dbt_utils_unique_combination_o_53c8360ba41e0cdcbf50ea70bfa40ce4.sql", "original_file_path": "models/stg_quickbooks.yml", "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation.4960d9d21a", "fqn": ["quickbooks_source", "dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation"], "alias": "dbt_utils_unique_combination_o_53c8360ba41e0cdcbf50ea70bfa40ce4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_53c8360ba41e0cdcbf50ea70bfa40ce4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_53c8360ba41e0cdcbf50ea70bfa40ce4"}, "created_at": 1721255627.789299, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_53c8360ba41e0cdcbf50ea70bfa40ce4\") }}", "language": "sql", "refs": [{"name": "stg_quickbooks__vendor", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor"]}, "compiled_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/dbt_utils_unique_combination_o_53c8360ba41e0cdcbf50ea70bfa40ce4.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor\"\n    group by vendor_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_quickbooks__vendor", "attached_node": "model.quickbooks_source.stg_quickbooks__vendor"}}, "sources": {"source.quickbooks_source.quickbooks.account": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "account", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.account", "fqn": ["quickbooks_source", "quickbooks", "account"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "account_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing components of a Chart Of Accounts and is part of a ledger. It is used to record a total monetary amount allocated against a specific use. Accounts are one of five basic types: asset, liability, revenue (income), expenses, or equity.", "columns": {"id": {"name": "id", "description": "Unique identifier of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "User-defined account number intended to identify the account within the Chart of Accounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sub_account": {"name": "sub_account", "description": "Specifies whether this object represents a parent (false) or a sub_account (true).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "User entered description for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "User recognizable name for the Account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "A detailed account classification that specifies the use of this account. The type is based on the Classification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether an account is currently active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_sub_type": {"name": "account_sub_type", "description": "The account sub-type classification and is based on the AccountType value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "classification": {"name": "classification", "description": "The classification of an account. Not supported for non-posting accounts. Valid values include Asset, Equity, Expense, Liability, Revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the creation date for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency which the account records the balance in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Full name of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the balance amount for the current Account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_with_sub_accounts": {"name": "balance_with_sub_accounts", "description": "Specifies the balance amount for the current Account sub accounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the account was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"account_data\"", "created_at": 1721255627.8546822}, "source.quickbooks_source.quickbooks.address": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "address", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.address", "fqn": ["quickbooks_source", "quickbooks", "address"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "address_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing address details.", "columns": {"id": {"name": "id", "description": "Unique identifier of the address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "The city which the address is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "The country which the address is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "line_1": {"name": "line_1", "description": "The address_line_1 associated with the address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "line_2": {"name": "line_2", "description": "The address_line_2 associated with the address (if applicable).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "postal_code": {"name": "postal_code", "description": "The postal code which the address is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"address_data\"", "created_at": 1721255627.8548381}, "source.quickbooks_source.quickbooks.bill_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "bill_line", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.bill_line", "fqn": ["quickbooks_source", "quickbooks", "bill_line"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "bill_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing distinct line items from bills within the `bill` table.", "columns": {"bill_id": {"name": "bill_id", "description": "Unique identifier of the parent bill record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Bill line index in reference to the parent bill.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "Reference to the class associated with the account based expense bill line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "Reference to the customer associated with the account based expense bill line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "Reference to the item with the item based expense bill line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_class_id": {"name": "item_expense_class_id", "description": "Reference to the class associated with the item based expense bill line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "Reference to the customer associated with the item based expense bill line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense bill line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "The identifier of the account associated with account being expensed from the bill.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "The status of the bill line item expense.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "The tax code id associated with the bill.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the bill line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the bill line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"bill_line_data\"", "created_at": 1721255627.855136}, "source.quickbooks_source.quickbooks.bill_linked_txn": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "bill_linked_txn", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.bill_linked_txn", "fqn": ["quickbooks_source", "quickbooks", "bill_linked_txn"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "bill_linked_txn_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Mapping table containing bill payment transactions linked to a bill.", "columns": {"bill_id": {"name": "bill_id", "description": "Unique identifier of the bill record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records from a single bill record associated with payment ids.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_payment_id": {"name": "bill_payment_id", "description": "The \"Unique identifier of the bill payment id record.\"", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"bill_linked_txn_data\"", "created_at": 1721255627.855233}, "source.quickbooks_source.quickbooks.bill_payment_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "bill_payment_line", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.bill_payment_line", "fqn": ["quickbooks_source", "quickbooks", "bill_payment_line"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "bill_payment_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items of a bill payment, which are recorded within the `bill_payment` table.", "columns": {"bill_payment_id": {"name": "bill_payment_id", "description": "Unique identifier of the bill payment record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of payments associated with the parent bill payment record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_id": {"name": "bill_id", "description": "Unique identifier of the bill record associated with the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_id": {"name": "deposit_id", "description": "Unique identifier of the deposit record associated with the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expense_id": {"name": "expense_id", "description": "Unique identifier of the purchase record associated with the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "linked_bill_payment_id": {"name": "linked_bill_payment_id", "description": "Unique identifier of the bill record associated with the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_credit_id": {"name": "vendor_credit_id", "description": "Unique identifier of the vendor_credit record associated with the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "Unique identifier of the journal entry record associated with the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"bill_payment_line_data\"", "created_at": 1721255627.85533}, "source.quickbooks_source.quickbooks.bill_payment": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "bill_payment", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.bill_payment", "fqn": ["quickbooks_source", "quickbooks", "bill_payment"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "bill_payment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing payment transactions bills that the business owner receives from a vendor for goods or services purchased from the vendor.", "columns": {"id": {"name": "id", "description": "Unique identifier of the bill payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "check_bank_account_id": {"name": "check_bank_account_id", "description": "The identifier of the account associated with the credited bill payment. Only applicable if bill payment `pay_type` is of type check.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "check_print_status": {"name": "check_print_status", "description": "Status of the check which was used as payment for the bill. Only applicable if bill payment `pay_type` is of type Check.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_card_account_id": {"name": "credit_card_account_id", "description": "The identifier of the account associated with the credited bill payment. Only applicable if bill payment `pay_type` is of type CreditCard.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by CurrencyRef. Applicable if multicurrency is enabled for the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department specifying the location of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_type": {"name": "pay_type", "description": "The payment type. Valid values include Check, CreditCard", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount associated with this payment. This includes the total of all the payments from the payment line details.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of the day the payment took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for this transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"bill_payment_data\"", "created_at": 1721255627.855428}, "source.quickbooks_source.quickbooks.bill": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "bill", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.bill", "fqn": ["quickbooks_source", "quickbooks", "bill"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "bill_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing AP transactions representing a request-for-payment from a third party for goods/services rendered, received, or both.", "columns": {"id": {"name": "id", "description": "Unique identifier of the bill record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department the bill is linked with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total \"Monetary amount of all bill line items.\"", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor the bill is linked with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date which the bill is due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of the day when the bill transaction occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payable_account_id": {"name": "payable_account_id", "description": "The identifier of the account associated with the account which the bill is credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"bill_data\"", "created_at": 1721255627.85553}, "source.quickbooks_source.quickbooks.bundle_item": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "bundle_item", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.bundle_item", "fqn": ["quickbooks_source", "quickbooks", "bundle_item"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "bundle_item_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Mapping table containing all bundle and item combinations", "columns": {"bundle_id": {"name": "bundle_id", "description": "Reference to the bundle table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item which the bundle is mapped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_quantity": {"name": "item_quantity", "description": "Total item quantity associated with the bundle and item mapping.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"bundle_item_data\"", "created_at": 1721255627.855615}, "source.quickbooks_source.quickbooks.bundle": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "bundle", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.bundle", "fqn": ["quickbooks_source", "quickbooks", "bundle"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "bundle_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing all bundles possible to be used within an invoice.", "columns": {"id": {"name": "id", "description": "Unique identifier of the bundle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the creation date for the bundle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether the bundle is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Full name given to the bundle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date when the bundle was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"bundle_data\"", "created_at": 1721255627.8556979}, "source.quickbooks_source.quickbooks.credit_card_payment_txn": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "credit_card_payment_txn", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.credit_card_payment_txn", "fqn": ["quickbooks_source", "quickbooks", "credit_card_payment_txn"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "credit_card_payment_txn_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing all credit card payment transactions.", "columns": {"id": {"name": "id", "description": "Unique identifier of the credit card payment transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total amount of money applied to the credit card payment transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bank_account_id": {"name": "bank_account_id", "description": "The identifier of the account associated with the bank which the credit card payment is debited towards.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_card_account_id": {"name": "credit_card_account_id", "description": "The identifier of the account associated with the credit card which the payment is credited towards.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp when the credit card payment was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the credit card payment was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency used for the credit card payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Day the credit card payment transaction took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean indicating if the credit card payment was deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"credit_card_payment_txn_data\"", "created_at": 1721255627.855786}, "source.quickbooks_source.quickbooks.credit_memo_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "credit_memo_line", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.credit_memo_line", "fqn": ["quickbooks_source", "quickbooks", "credit_memo_line"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "credit_memo_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual records of credit memos.", "columns": {"credit_memo_id": {"name": "credit_memo_id", "description": "Unique identifier of the credit memo record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records from a credit memo record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the credit memo line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "The identifier of the account associated with an item credit memo record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_class_id": {"name": "sales_item_class_id", "description": "Reference to the class associated for an item credit memo record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Reference to the item for an item credit memo record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of item related to the credit memo line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item related to the credit memo line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "The identifier of the account associated with a discount credit memo record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Reference to the class associated for a discount credit memo record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the credit memo line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"credit_memo_line_data\"", "created_at": 1721255627.85588}, "source.quickbooks_source.quickbooks.credit_memo": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "credit_memo", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.credit_memo", "fqn": ["quickbooks_source", "quickbooks", "credit_memo"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "credit_memo_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing credit memo records. A credit memo is a refund or credit of payment or part of a payment for goods or services that have been sold.", "columns": {"id": {"name": "id", "description": "Unique identifier of the credit memo.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the credit memo.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the credit memo.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated with the credit memo.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of the day when the credit memo occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"credit_memo_data\"", "created_at": 1721255627.855971}, "source.quickbooks_source.quickbooks.customer": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "customer", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.customer", "fqn": ["quickbooks_source", "quickbooks", "customer"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "customer_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing customers of which are consumers of the service or product that your business offers.", "columns": {"id": {"name": "id", "description": "Unique identifier of the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether it is currently enabled for use by QuickBooks.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the open balance amount or the amount unpaid by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_with_jobs": {"name": "balance_with_jobs", "description": "Cumulative open balance amount for the Customer (or Job) and all its sub-jobs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_with_parent": {"name": "bill_with_parent", "description": "Boolean indicating whether this Customer object is billed with its parent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "Full name of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Fully qualified name of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts associated with this customer are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "Name of the customer which is displayed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "website": {"name": "website", "description": "The website url associated with the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Boolean indicating whether the customer is taxable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"customer_data\"", "created_at": 1721255627.856063}, "source.quickbooks_source.quickbooks.department": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "department", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.department", "fqn": ["quickbooks_source", "quickbooks", "department"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "department_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing records representing physical locations such as stores, and sales regions.", "columns": {"id": {"name": "id", "description": "Unique identifier of the department.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether the department is currently active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the creation date for the department.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date when the department was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Fully qualified name of the department.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the department.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sub_department": {"name": "sub_department", "description": "Boolean indicating whether the department is a sub department.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_department_id": {"name": "parent_department_id", "description": "Reference to the Unique identifier of the parent department if sub_department = true.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"department_data\"", "created_at": 1721255627.856808}, "source.quickbooks_source.quickbooks.deposit_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "deposit_line", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.deposit_line", "fqn": ["quickbooks_source", "quickbooks", "deposit_line"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "deposit_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items comprising the deposit.", "columns": {"deposit_id": {"name": "deposit_id", "description": "Unique identifier of the deposit record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the deposit record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the deposit line record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the deposit line record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_class_id": {"name": "deposit_class_id", "description": "Reference to the class associated the deposit line record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_account_id": {"name": "deposit_account_id", "description": "The identifier of the account associated with the credited deposit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_customer_id": {"name": "deposit_customer_id", "description": "Reference to the customer associated with the credited deposit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"deposit_line_data\"", "created_at": 1721255627.856897}, "source.quickbooks_source.quickbooks.deposit": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "deposit", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.deposit", "fqn": ["quickbooks_source", "quickbooks", "deposit"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "deposit_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing records of transactions that record on or more deposits of a customer payment or a new direct deposit.", "columns": {"id": {"name": "id", "description": "Unique identifier of the deposit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The identifier of the account associated with this deposit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the creation date for the deposit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the deposit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of the day which the deposit transaction occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_status": {"name": "transaction_status", "description": "Status of the deposit transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_total_amount": {"name": "home_total_amount", "description": "Indicates the total amount of the transaction in the home currency. This includes the total of all the charges, allowances, and taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"deposit_data\"", "created_at": 1721255627.856986}, "source.quickbooks_source.quickbooks.estimate": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "estimate", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.estimate", "fqn": ["quickbooks_source", "quickbooks", "estimate"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "estimate_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing estimates. An estimate represents a proposal for a financial transaction from a business to a customer for goods or services proposed to be sold, including proposed pricing.", "columns": {"id": {"name": "id", "description": "Unique identifier of the estimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the estimate record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the creation date for the estimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency which the estimate was provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated with the estimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the estimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date which the estimate is due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total amount of all line items included in the estimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of the day which the estimate occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_status": {"name": "transaction_status", "description": "Current status of the estimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"estimate_data\"", "created_at": 1721255627.857077}, "source.quickbooks_source.quickbooks.estimate_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "estimate_line", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.estimate_line", "fqn": ["quickbooks_source", "quickbooks", "estimate_line"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "estimate_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing line item records of an estimate.", "columns": {"estimate_id": {"name": "estimate_id", "description": "Reference to the unique estimate record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the estimate line record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "The identifier of the account associated with the discount estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Reference to the class associated with the discount estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "The identifier of the account associated with the sales estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_class_id": {"name": "sales_item_class_id", "description": "Reference to the class associated with the sales estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Reference to the item associated with a sales estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of the item for a sales estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item associated with the estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity of the item for the estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The identifier of the account associated associated with the estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the estimate line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"estimate_line_data\"", "created_at": 1721255627.8571641}, "source.quickbooks_source.quickbooks.invoice_linked_txn": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "invoice_linked_txn", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.invoice_linked_txn", "fqn": ["quickbooks_source", "quickbooks", "invoice_linked_txn"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "invoice_linked_txn_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Mapping table for invoices records to respective estimate and payment objects.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Reference to the unique invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_id": {"name": "payment_id", "description": "Reference to the respective payment object for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "estimate_id": {"name": "estimate_id", "description": "Reference to the respective estimate object for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the invoice mapping record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_linked_txn_data\"", "created_at": 1721255627.857242}, "source.quickbooks_source.quickbooks.invoice_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "invoice_line", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.invoice_line", "fqn": ["quickbooks_source", "quickbooks", "invoice_line"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "invoice_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual records from invoices.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier of the invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the invoice line record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "The identifier of the account associated for an item invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Reference to the item  for an item invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_class_id": {"name": "sales_item_class_id", "description": "Reference to the class associated with an item invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of the item for an item invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item for an item invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "The identifier of the account associated for a discount invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Reference to the class associated with a discount invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the invoice line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bundle_quantity": {"name": "bundle_quantity", "description": "Quantity of items included in the invoice bundle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bundle_id": {"name": "bundle_id", "description": "Reference to the bundle associated with the invoice line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The identifier of the account associated with the invoice line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item associated with the invoice line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity of the item included on the invoice line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "detail_type": {"name": "detail_type", "description": "Individual line items of a transaction. Valid line types include SalesItemLineDetail, DescriptionOnly (also used for inline Subtotal lines), DiscountLineDetail and SubTotalLineDetail (used for the overall transaction). FYI - Records synced prior to 11/2021 will have a null value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_line_data\"", "created_at": 1721255627.857335}, "source.quickbooks_source.quickbooks.invoice_line_bundle": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "invoice_line_bundle", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.invoice_line_bundle", "fqn": ["quickbooks_source", "quickbooks", "invoice_line_bundle"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "invoice_line_bundle_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing lines of an invoice which were bundled.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier of the invoice record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_line_index": {"name": "invoice_line_index", "description": "Invoice index count of records associated with the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the invoice line bundle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total monetary value of the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Reference to the item for sales on the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item on the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Total quantity of the item on the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Total quantity in relation to the sales item on the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The identifier of the account associated with the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "Unit price of the line item included on the invoice bundle line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_line_bundle_data\"", "created_at": 1721255627.857426}, "source.quickbooks_source.quickbooks.invoice": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "invoice", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.invoice", "fqn": ["quickbooks_source", "quickbooks", "invoice"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "invoice_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing invoice records. An Invoice represents a sales form where the customer pays for a product or service later.", "columns": {"id": {"name": "id", "description": "Unique identifier of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "The identifier of the account associated to be used for this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of the day which the deposit transaction occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_address_id": {"name": "billing_address_id", "description": "Reference to the address where the invoice is billed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_id": {"name": "shipping_address_id", "description": "Reference to the address where the invoice is to be shipped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delivery_type": {"name": "delivery_type", "description": "How the invoice is delivered to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date which the invoice payment is due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_data\"", "created_at": 1721255627.857517}, "source.quickbooks_source.quickbooks.item": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "item", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.item", "fqn": ["quickbooks_source", "quickbooks", "item"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "item_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing item records. An item is a thing that your company buys, sells, or re-sells, such as products and services.", "columns": {"id": {"name": "id", "description": "Unique identifier of the item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether the object is currently enabled for use by QuickBooks.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the creation date for the item within QuickBooks.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "income_account_id": {"name": "income_account_id", "description": "The identifier of the account associated with the proceeds from the sale of this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "asset_account_id": {"name": "asset_account_id", "description": "The identifier of the account associated with the inventory asset that tracks its current value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expense_account_id": {"name": "expense_account_id", "description": "The identifier of the account associated used to pay the vendor for this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inventory_start_date": {"name": "inventory_start_date", "description": "Timestamp of the date the item was started as inventory.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_item_id": {"name": "parent_item_id", "description": "Reference to the parent item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Full name of the item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "purchase_cost": {"name": "purchase_cost", "description": "Amount paid when buying or ordering the item, as expressed in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Boolean indicating whether the item is taxable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Classification that specifies the use of this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "The monetary value of the service or product, as expressed in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"item_data\"", "created_at": 1721255627.857606}, "source.quickbooks_source.quickbooks.journal_entry_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "journal_entry_line", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.journal_entry_line", "fqn": ["quickbooks_source", "quickbooks", "journal_entry_line"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "journal_entry_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items of a transaction associated with a journal entry.", "columns": {"journal_entry_id": {"name": "journal_entry_id", "description": "Unique identifier of the journal entry record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the journal entry record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The identifier of the account associated with the credited journal entry.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the journal entry line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated with the credited journal entry.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the journal entry is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the journal entry.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billable_status": {"name": "billable_status", "description": "Status of the journal entry indicating whether it is billable or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the journal entry line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "posting_type": {"name": "posting_type", "description": "Indicates whether this JournalEntry line is a debit or credit. Valid values are Credit and Debit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for this journal entry.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"journal_entry_line_data\"", "created_at": 1721255627.857693}, "source.quickbooks_source.quickbooks.journal_entry": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "journal_entry", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.journal_entry", "fqn": ["quickbooks_source", "quickbooks", "journal_entry"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "journal_entry_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing journal entry transactions.", "columns": {"id": {"name": "id", "description": "Unique identifier of the journal entry.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adjustment": {"name": "adjustment", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes. By default, this is recalculated by the system based on sub-items total and overridden.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the creation date for the journal entry.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "The value of this field will always be set to zero.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of the day when the journal entry was transacted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"journal_entry_data\"", "created_at": 1721255627.8578}, "source.quickbooks_source.quickbooks.payment_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "payment_line", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.payment_line", "fqn": ["quickbooks_source", "quickbooks", "payment_line"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "payment_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items recorded within a payment.", "columns": {"payment_id": {"name": "payment_id", "description": "Unique identifier of the payment record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the payment record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the payment line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "Journal entry reference associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_id": {"name": "deposit_id", "description": "Deposit reference associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "Invoice reference associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_memo_id": {"name": "credit_memo_id", "description": "credit memo reference associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"payment_line_data\"", "created_at": 1721255627.857879}, "source.quickbooks_source.quickbooks.payment": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "payment", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.payment", "fqn": ["quickbooks_source", "quickbooks", "payment"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "payment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing all payment records. The payment can be applied for a particular customer against multiple Invoices and Credit Memos. It can also be created without any Invoice or Credit Memo, by just specifying an amount.", "columns": {"id": {"name": "id", "description": "Unique identifier of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unapplied_amount": {"name": "unapplied_amount", "description": "Indicates the amount that has not been applied to pay amounts owed for sales transactions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receivable_account_id": {"name": "receivable_account_id", "description": "The identifier of the account associated with obtaining a receivable from this payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "The identifier of the account associated with the deposit to be used for this payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of the day when the payment occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"payment_data\"", "created_at": 1721255627.857962}, "source.quickbooks_source.quickbooks.purchase_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "purchase_line", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.purchase_line", "fqn": ["quickbooks_source", "quickbooks", "purchase_line"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "purchase_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items of a transaction associated with a purchase.", "columns": {"purchase_id": {"name": "purchase_id", "description": "Unique identifier of the purchase record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the purchase record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "The identifier of the account associated with the credited purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "Reference to the class associated with the account based expense purchase line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "Status of the purchase billable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "Tax code reference associated to the purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "Reference to the item associated with the item based expense purchase line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_class_id": {"name": "item_expense_class_id", "description": "Reference to the class associated with the item based expense purchase line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense purchase line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the purchase line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_line_data\"", "created_at": 1721255627.858047}, "source.quickbooks_source.quickbooks.purchase": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "purchase", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.purchase", "fqn": ["quickbooks_source", "quickbooks", "purchase"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "purchase_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing records of purchase expenses.", "columns": {"id": {"name": "id", "description": "Unique identifier of the purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The identifier of the account associated with the applied purchase based on the PaymentType.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the creation date for the purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit": {"name": "credit", "description": "Boolean where `false` represents a charge and `true` represents a refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the purchase is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated with the purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of the day when the purchase occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_type": {"name": "payment_type", "description": "Payment type of the purchase. Type can be Cash, Check, or CreditCard.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for the purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_data\"", "created_at": 1721255627.8581371}, "source.quickbooks_source.quickbooks.purchase_order_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "purchase_order_line", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.purchase_order_line", "fqn": ["quickbooks_source", "quickbooks", "purchase_order_line"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "purchase_order_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items of a transaction associated with a purchase order.", "columns": {"purchase_order_id": {"name": "purchase_order_id", "description": "Unique identifier of the purchase order record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the purchase order record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "The identifier of the account associated with the credited purchase order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "Reference to the class associated with the account based expense purchase order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "Status of the purchase billable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "Reference to the customer associated with the account based purchase order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "Tax code reference associated to the purchase order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "Reference to the item with the item based expense purchase order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense purchase order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "Reference to the customer associated with the item based purchase order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the purchase line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_line_data\"", "created_at": 1721255627.8582249}, "source.quickbooks_source.quickbooks.purchase_order_linked_txn": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "purchase_order_linked_txn", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.purchase_order_linked_txn", "fqn": ["quickbooks_source", "quickbooks", "purchase_order_linked_txn"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "purchase_order_linked_txn_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Mapping table for purchase order records to respective bill and purchase objects.", "columns": {"purchase_order_id": {"name": "purchase_order_id", "description": "Reference to the unique purchase order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_id": {"name": "bill_id", "description": "Reference to the respective bill object for the purchase order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "purchase_id": {"name": "purchase_id", "description": "Reference to the respective purchase object for the purchase_order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_credit_id": {"name": "vendor_credit_id", "description": "Reference to the respective vendor credit object for the purchase_order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the purchase order mapping record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_linked_txn_data\"", "created_at": 1721255627.858303}, "source.quickbooks_source.quickbooks.purchase_order": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "purchase_order", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.purchase_order", "fqn": ["quickbooks_source", "quickbooks", "purchase_order"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "purchase_order_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing records of purchase orders (PO).", "columns": {"id": {"name": "id", "description": "Unique identifier of the purchase order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the purchase order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the purchase order was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "custom_po_number": {"name": "custom_po_number", "description": "Custom field for PO number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "custom_customer_type": {"name": "custom_customer_type", "description": "Custom field for customer type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date when the purchase order is due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "memo": {"name": "memo", "description": "A message for the vendor. This text appears on the purchase order object sent to the vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of the day when the purchase order occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction. This note does not appear on the purchase order to the vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payable_account_id": {"name": "payable_account_id", "description": "The identifier of the account associated with the credited purchase order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Purchase order status. Valid values are \"Open\" and \"Closed\".", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for the purchase order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_data\"", "created_at": 1721255627.858397}, "source.quickbooks_source.quickbooks.refund_receipt_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "refund_receipt_line", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.refund_receipt_line", "fqn": ["quickbooks_source", "quickbooks", "refund_receipt_line"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "refund_receipt_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items of a refund transaction.", "columns": {"refund_id": {"name": "refund_id", "description": "Unique identifier of the refund record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the refund record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the refund line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the refund line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "The identifier of the account associated with the income account used to track discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Reference to the class associated with the discount of the refunded item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of the item associated with the refund receipt line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item associated with the refund receipt line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "The identifier of the account associated with the credited refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_class_id": {"name": "sales_item_class_id", "description": "Reference to the class associated with the refunded item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Reference to the item with the refunded item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_tax_code_id": {"name": "sales_item_tax_code_id", "description": "Tax code id of the tax code associated with the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"refund_receipt_line_data\"", "created_at": 1721255627.858485}, "source.quickbooks_source.quickbooks.refund_receipt": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "refund_receipt", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.refund_receipt", "fqn": ["quickbooks_source", "quickbooks", "refund_receipt"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "refund_receipt_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing refunds to the customer for a product or service that was provided.", "columns": {"id": {"name": "id", "description": "Unique identifier of the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the refund receipt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the refund receipt is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "The identifier of the account associated with which payment money is refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the creation date for the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated with the customer credited with the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of the day in which the refund occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"refund_receipt_data\"", "created_at": 1721255627.858573}, "source.quickbooks_source.quickbooks.sales_receipt_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "sales_receipt_line", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.sales_receipt_line", "fqn": ["quickbooks_source", "quickbooks", "sales_receipt_line"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "sales_receipt_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items of a sales transaction.", "columns": {"sales_receipt_id": {"name": "sales_receipt_id", "description": "Unique identifier of the sales record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the sales record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the sales line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the sales receipt line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "The identifier of the account associated with income account used to track discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Reference to the class associated with the discount credited to the sales line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "The identifier of the account associated with the sales line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_class_id": {"name": "sales_item_class_id", "description": "Reference to the class associated with the receipt credited with the sales line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Reference to the item with the item sold in the sale line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_tax_code_id": {"name": "sales_item_tax_code_id", "description": "Tax code id of the tax code associated with the sales line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Total quantity of items included in the sales line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item included on the sales line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"sales_receipt_line_data\"", "created_at": 1721255627.858665}, "source.quickbooks_source.quickbooks.sales_receipt": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "sales_receipt", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.sales_receipt", "fqn": ["quickbooks_source", "quickbooks", "sales_receipt"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "sales_receipt_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing sales receipts that are given to a customer. A sales receipt, payment is received as part of the sale of goods and services. The sales receipt specifies a deposit account where the customer's payment is deposited.", "columns": {"id": {"name": "id", "description": "Unique identifier of the sales receipt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "The identifier of the account associated with where payment money is deposited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the creation date for the sale.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated sales receipt to customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the sales receipt is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated which the sales receipt is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of the day which the sale occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"sales_receipt_data\"", "created_at": 1721255627.858777}, "source.quickbooks_source.quickbooks.transfer": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "transfer", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.transfer", "fqn": ["quickbooks_source", "quickbooks", "transfer"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "transfer_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing records of transfers. A Transfer represents a transaction where funds are moved between two accounts from the company's QuickBooks chart of accounts.", "columns": {"id": {"name": "id", "description": "Unique identifier of the transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from_account_id": {"name": "from_account_id", "description": "The identifier of the account associated with where the transfer is from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "to_account_id": {"name": "to_account_id", "description": "The identifier of the account associated with where the transfer is to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date of the day which the transfer occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"transfer_data\"", "created_at": 1721255627.85886}, "source.quickbooks_source.quickbooks.vendor_credit_line": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "vendor_credit_line", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.vendor_credit_line", "fqn": ["quickbooks_source", "quickbooks", "vendor_credit_line"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "vendor_credit_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual vendor credit line items.", "columns": {"vendor_credit_id": {"name": "vendor_credit_id", "description": "Unique identifier of the vendor credit record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the vendor credit record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "The identifier of the account associated with the vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "Status of the billable related to the vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "Tax code id of the tax code associated with the vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "Reference to the customer associated with the vendor credit expense.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "Reference to the class associated with the account based expense vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "Reference to the customer associated with the item on the vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "Reference to the item with the item based expense vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_quantity": {"name": "item_expense_quantity", "description": "Quantity of the item within the item based expense vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_unit_price": {"name": "item_expense_unit_price", "description": "Unit price of the item within the item based expense vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_class_id": {"name": "item_expense_class_id", "description": "Reference to the class associated with the item based expense vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the vendor credit line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_credit_line_data\"", "created_at": 1721255627.858952}, "source.quickbooks_source.quickbooks.vendor_credit": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "vendor_credit", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.vendor_credit", "fqn": ["quickbooks_source", "quickbooks", "vendor_credit"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "vendor_credit_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing all vendor credit records. A vendor credit is an accounts payable transaction that represents a refund or credit of payment for goods or services.", "columns": {"id": {"name": "id", "description": "Unique identifier of the vendor credit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The current amount of the vendor credit reflecting any adjustments to the original credit amount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total credit amount, determined by taking the total of all all lines of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the creation date for the vendor credit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payable_account_id": {"name": "payable_account_id", "description": "The identifier of the account associated with which AP account the bill is credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the vendor credit is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "The date entered by the user when this transaction occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for this transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_credit_data\"", "created_at": 1721255627.859045}, "source.quickbooks_source.quickbooks.vendor": {"database": "postgres", "schema": "quickbooks_source_integrations_tests", "name": "vendor", "resource_type": "source", "package_name": "quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "unique_id": "source.quickbooks_source.quickbooks.vendor", "fqn": ["quickbooks_source", "quickbooks", "vendor"], "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "vendor_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing all vendor records. A vendor is the seller from whom your company purchases any service or product.", "columns": {"id": {"name": "id", "description": "Unique identifier of the vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "Name or number of the account associated with this vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_address_id": {"name": "billing_address_id", "description": "Address reference for the billing address of the vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether the vendor is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the open balance amount or the amount unpaid by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The name of the company associated with the person or organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the creation date for the vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts associated with this vendor are expressed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "The name of the vendor as displayed. Must be unique across all Vendor, Customer, and Employee objects.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "web_url": {"name": "web_url", "description": "Website url associated with the vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendor_1099": {"name": "vendor_1099", "description": "Boolean indicating whether this vendor is an independent contractor; someone who is given a 1099-MISC form at the end of the year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_data\"", "created_at": 1721255627.859134}}, "macros": {"macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.889759, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.889997, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.8901062, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.89026, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.890444, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.891863, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.892195, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.892792, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.8929129, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.900536, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9010718, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.901397, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.901703, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.902148, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.902648, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.902814, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9031308, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9034922, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.904317, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.904501, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.904799, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.905057, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.905451, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.905656, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.90622, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.906445, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.906581, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9067478, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.906891, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9072618, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.907925, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.908072, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.908347, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.90848, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9086342, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.909513, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }}\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n    {{ ';' if not loop.last else \"\" }}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.91, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.910274, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}{{ ';' if not loop.last else \"\" }}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.910675, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.910808, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.911423, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.911584, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9117088, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9122088, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.912367, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.912564, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9131122, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.916021, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.916165, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9166331, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.917006, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.917985, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.918175, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.918304, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9184341, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9185631, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.918891, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.919163, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9194329, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9198349, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.920079, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.923297, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.923455, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9236531, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.924306, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.92446, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.924621, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9259121, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.927139, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9306219, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9308832, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.931057, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.931135, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9312692, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.931375, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.931564, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9323661, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.932537, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.932765, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9331589, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9384918, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.940989, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9414, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9416819, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9420211, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.942361, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9465768, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.946958, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.947207, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.948412, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.948628, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.949224, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9518652, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.954463, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.955937, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.95645, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.95706, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.957282, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.957936, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9632268, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.964673, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9649122, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9658089, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.966053, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.966649, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.967214, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.968004, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.968222, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.968399, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.968666, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.968896, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.969167, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9693398, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.969583, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9697542, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.969888, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.970138, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.974782, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.979545, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.980659, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.981765, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.98253, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.982749, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.982856, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.983125, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.983249, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.986461, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.989423, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9936142, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.994421, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.994637, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.995104, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.995282, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.995407, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9955552, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.995662, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.995809, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.995914, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.996353, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.996524, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.997686, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.99807, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9984179, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9988961, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9991329, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.999392, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.9997492, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255625.999973, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.000612, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.000947, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0011241, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.001302, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.001481, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.002219, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.00337, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.003735, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.003962, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.004246, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.004436, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.005068, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.005465, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.005653, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.005909, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0062249, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.006478, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.006902, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0072992, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0075939, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0077848, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.008031, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0081291, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.008379, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.008511, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.008799, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.008984, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0092318, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.009367, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0099158, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0100899, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.01035, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.010484, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0107362, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.01087, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.011838, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.011949, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0124311, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.012588, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.012714, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0139341, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.014281, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.014598, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.014841, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.014938, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0151849, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.015316, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.015563, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.015697, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.01646, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0166342, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.017025, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.017653, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0180821, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.018253, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.018419, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0186691, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0187678, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.019561, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.019722, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0208561, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.021037, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.021237, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.021489, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.021624, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0220292, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.022191, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.022366, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.02278, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.023134, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.023415, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.023645, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.024163, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.025514, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0260391, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.026309, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.027946, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.029123, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.029813, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.030037, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.030244, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0303192, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.030986, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.03152, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.031728, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.032066, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0323699, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.032521, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.032743, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.032854, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.033587, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.033965, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0341399, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.034605, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.03484, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0349498, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.03525, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0354, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.035626, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.035787, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.036043, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.036175, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.036441, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.036566, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0371158, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.037475, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.037777, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.037926, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.038184, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.038316, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.038548, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.038699, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0389252, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.039071, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0392919, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.039387, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.039649, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0397708, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.039993, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0401511, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.041003, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.04114, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.041291, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.04143, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.04158, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.041717, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.041868, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.04203, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0421782, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.042319, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0424662, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.042597, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.042739, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.042874, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.043125, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.043246, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.043467, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0435588, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.043969, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.044234, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.044373, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0448341, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.044985, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.045185, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.045435, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0455549, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.045891, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.04611, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.046365, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.046486, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0468202, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.046987, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.047136, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.047301, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.047738, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0478752, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.048007, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.048107, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0483258, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.048396, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.048546, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.048699, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.049437, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.049563, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.049719, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.050077, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0502489, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.050375, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.050519, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.050636, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.052403, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0525708, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0527658, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0530272, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.05325, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.053542, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.053706, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.054057, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.054282, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.054784, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.054995, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0551271, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0555022, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.055875, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.05613, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.05634, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.057878, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0579882, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0581388, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.058243, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.058552, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.058732, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.058825, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.05903, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0592089, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.059413, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.059648, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.059861, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.060541, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.060719, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.060939, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.061146, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.062183, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.062657, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0628312, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.062952, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.063553, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.063711, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0638962, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.064053, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.064296, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.064734, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.067214, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.06745, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.067637, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.067939, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.068106, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0682628, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.068426, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.068665, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.068853, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0691268, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0693, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.06945, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0696042, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.069746, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.069937, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.070092, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.072067, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.072224, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0725062, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.072701, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.072887, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.073052, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0741508, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.074465, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.074634, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.074947, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.075158, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.075698, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.075936, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.076649, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.078142, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0783029, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0790908, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.079488, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0800261, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.080467, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.080535, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.081009, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.081218, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0814788, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.081735, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0820532, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.082506, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.082919, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.083626, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0839171, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.084233, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.085231, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.086155, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.086931, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.087896, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.088504, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.088809, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.089456, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.090213, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.090625, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.091041, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0915961, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.092017, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.092543, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.092896, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0934908, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.094264, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.094818, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0953972, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.095913, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.09622, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0966022, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.096925, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.0975099, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.098242, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.099048, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.099872, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1016588, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.105261, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1057332, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.106009, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.109107, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.110476, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1107259, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.110879, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1112802, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.111535, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.111716, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.111947, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.112104, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.112659, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1134021, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1140249, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.114555, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.114763, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.115096, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.115445, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1160388, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1163368, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.116668, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1172962, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1181388, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1190479, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.119454, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.119636, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.120116, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.120723, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.121498, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1218681, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1221278, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.123216, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.124555, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.125747, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.127202, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.127485, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1276102, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1302972, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.133502, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.133782, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.134013, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1348422, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1350431, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1351979, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.135367, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.135516, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.135673, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1358259, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1361768, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.136401, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.13675, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.137242, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.137547, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.137846, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1405811, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.141005, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1416562, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.142297, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1427588, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1437829, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.145142, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.146087, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1468391, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.14726, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.147913, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.148597, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.149035, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1492312, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1495922, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.150125, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.150532, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.151108, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1515672, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.151701, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.15183, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.151958, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.152468, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1531332, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.154104, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1543539, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.154881, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1556082, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.155971, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.15681, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.15697, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.157119, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.157273, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.157405, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.157551, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.158276, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.158859, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.160055, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.160278, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1605, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.160948, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1611662, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1614022, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.161637, "supported_languages": null}, "macro.fivetran_utils.sqlserver__json_parse": {"name": "sqlserver__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.sqlserver__json_parse", "macro_sql": "{% macro sqlserver__json_parse(string, string_path) %}\n\n  json_value({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.161851, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.162143, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.162236, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.162324, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1624131, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.162743, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.163363, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.164271, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.164791, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.165531, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.165982, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.166104, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1662211, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.166336, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1664581, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.169033, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.192488, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.192686, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1928372, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.194413, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.195294, "supported_languages": null}, "macro.fivetran_utils.default__try_cast": {"name": "default__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__try_cast", "macro_sql": "{% macro default__try_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1954272, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1956842, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.195947, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.196068, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.196182, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.196298, "supported_languages": null}, "macro.fivetran_utils.sqlserver__try_cast": {"name": "sqlserver__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.sqlserver__try_cast", "macro_sql": "{% macro sqlserver__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.196414, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.196867, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.19749, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.197985, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.198178, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.198383, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.198621, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.1996238, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.203246, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.203585, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2039301, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.205302, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2058492, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.206388, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2065332, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.206677, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2068322, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.206972, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.207106, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2078688, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n\n  {% if dbt_version.split('.') | map('int') | list >= [1, 5, 0]  %}\n    {{ return(load_result('collect_freshness')) }}\n  {% else %}\n    {{ return(load_result('collect_freshness').table) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2090209, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2096782, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2098298, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.209973, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.21012, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.210262, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2104251, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.210656, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.210829, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.210922, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.211506, "supported_languages": null}, "macro.fivetran_utils.fivetran_date_spine": {"name": "fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.fivetran_date_spine", "macro_sql": "{% macro fivetran_date_spine(datepart, start_date, end_date) -%}\n\n{{ return(adapter.dispatch('fivetran_date_spine', 'fivetran_utils') (datepart, start_date, end_date)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__fivetran_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.21266, "supported_languages": null}, "macro.fivetran_utils.default__fivetran_date_spine": {"name": "default__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.default__fivetran_date_spine", "macro_sql": "{% macro default__fivetran_date_spine(datepart, start_date, end_date) %}\n\n    {{ dbt_utils.date_spine(datepart, start_date, end_date) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2128232, "supported_languages": null}, "macro.fivetran_utils.sqlserver__fivetran_date_spine": {"name": "sqlserver__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.sqlserver__fivetran_date_spine", "macro_sql": "{% macro sqlserver__fivetran_date_spine(datepart, start_date, end_date) -%}\n\n    {% set date_spine_query %}\n        with\n\n        l0 as (\n\n            select c\n            from (select 1 union all select 1) as d(c)\n\n        ),\n        l1 as (\n\n            select\n                1 as c\n            from l0 as a\n            cross join l0 as b\n\n        ),\n\n        l2 as (\n\n            select 1 as c\n            from l1 as a\n            cross join l1 as b\n        ),\n\n        l3 as (\n\n            select 1 as c\n            from l2 as a\n            cross join l2 as b\n        ),\n\n        l4 as (\n\n            select 1 as c\n            from l3 as a\n            cross join l3 as b\n        ),\n\n        l5 as (\n\n            select 1 as c\n            from l4 as a\n            cross join l4 as b\n        ),\n\n        nums as (\n\n            select row_number() over (order by (select null)) as rownum\n            from l5\n        ),\n\n        rawdata as (\n\n            select top ({{dbt.datediff(start_date, end_date, datepart)}}) rownum -1 as n\n            from nums\n            order by rownum\n        ),\n\n        all_periods as (\n\n            select (\n                {{\n                    dbt.dateadd(\n                        datepart,\n                        'n',\n                        start_date\n                    )\n                }}\n            ) as date_{{datepart}}\n            from rawdata\n        ),\n\n        filtered as (\n\n            select *\n            from all_periods\n            where date_{{datepart}} <= {{ end_date }}\n\n        )\n\n        select * from filtered\n        order by 1\n\n    {% endset %}\n\n    {% set results = run_query(date_spine_query) %}\n\n    {% if execute %}\n\n        {% set results_list = results.columns[0].values() %}\n    \n    {% else %}\n\n        {% set results_list = [] %}\n\n    {% endif %}\n\n    {%- for date_field in results_list %}\n        select cast('{{ date_field }}' as date) as date_{{datepart}} {{ 'union all ' if not loop.last else '' }}\n    {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.dateadd", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.213587, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.216851, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.221051, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.222393, "supported_languages": null}, "macro.fivetran_utils.extract_url_parameter": {"name": "extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.extract_url_parameter", "macro_sql": "{% macro extract_url_parameter(field, url_parameter) -%}\n\n{{ adapter.dispatch('extract_url_parameter', 'fivetran_utils') (field, url_parameter) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__extract_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.22273, "supported_languages": null}, "macro.fivetran_utils.default__extract_url_parameter": {"name": "default__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.default__extract_url_parameter", "macro_sql": "{% macro default__extract_url_parameter(field, url_parameter) -%}\n\n{{ dbt_utils.get_url_parameter(field, url_parameter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.222873, "supported_languages": null}, "macro.fivetran_utils.spark__extract_url_parameter": {"name": "spark__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.spark__extract_url_parameter", "macro_sql": "{% macro spark__extract_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"=([^&]+)'\" -%}\nnullif(regexp_extract({{ field }}, {{ formatted_url_parameter }}, 1), '')\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.223052, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.postgres__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.223365, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.223468, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.223572, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.223661, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2237508, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2239869, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.224084, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.224173, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2245362, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.224891, "supported_languages": null}, "macro.quickbooks_source.get_deposit_line_columns": {"name": "get_deposit_line_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_deposit_line_columns.sql", "original_file_path": "macros/get_deposit_line_columns.sql", "unique_id": "macro.quickbooks_source.get_deposit_line_columns", "macro_sql": "{% macro get_deposit_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit_check_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit_customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit_tax_applicable_on\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit_transaction_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"detail_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"expense_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"purchase_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refund_receipt_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_receipt_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transfer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor_credit_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.227432, "supported_languages": null}, "macro.quickbooks_source.get_vendor_credit_line_columns": {"name": "get_vendor_credit_line_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_vendor_credit_line_columns.sql", "original_file_path": "macros/get_vendor_credit_line_columns.sql", "unique_id": "macro.quickbooks_source.get_vendor_credit_line_columns", "macro_sql": "{% macro get_vendor_credit_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_expense_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_billable_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_tax_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"account_expense_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_billable_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_quantity\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_unit_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor_credit_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2294168, "supported_languages": null}, "macro.quickbooks_source.get_account_columns": {"name": "get_account_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_account_columns.sql", "original_file_path": "macros/get_account_columns.sql", "unique_id": "macro.quickbooks_source.get_account_columns", "macro_sql": "{% macro get_account_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_sub_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"balance_with_sub_accounts\", \"datatype\": dbt.type_float()},\n    {\"name\": \"classification\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fully_qualified_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sub_account\", \"datatype\": \"boolean\"},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.231413, "supported_languages": null}, "macro.quickbooks_source.get_purchase_order_linked_txn_columns": {"name": "get_purchase_order_linked_txn_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_purchase_order_linked_txn_columns.sql", "original_file_path": "macros/get_purchase_order_linked_txn_columns.sql", "unique_id": "macro.quickbooks_source.get_purchase_order_linked_txn_columns", "macro_sql": "{% macro get_purchase_order_linked_txn_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"bill_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"purchase_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"purchase_order_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor_credit_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.232131, "supported_languages": null}, "macro.quickbooks_source.get_sales_receipt_line_columns": {"name": "get_sales_receipt_line_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_sales_receipt_line_columns.sql", "original_file_path": "macros/get_sales_receipt_line_columns.sql", "unique_id": "macro.quickbooks_source.get_sales_receipt_line_columns", "macro_sql": "{% macro get_sales_receipt_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bundle_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bundle_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description_service_date\", \"datatype\": \"date\"},\n    {\"name\": \"description_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_discount_percent\", \"datatype\": dbt.type_float()},\n    {\"name\": \"discount_percent_based\", \"datatype\": \"boolean\"},\n    {\"name\": \"discount_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_discount_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_discount_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_service_date\", \"datatype\": \"date\"},\n    {\"name\": \"sales_item_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_unit_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_receipt_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sub_total_item_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2346041, "supported_languages": null}, "macro.quickbooks_source.get_bill_linked_txn_columns": {"name": "get_bill_linked_txn_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_bill_linked_txn_columns.sql", "original_file_path": "macros/get_bill_linked_txn_columns.sql", "unique_id": "macro.quickbooks_source.get_bill_linked_txn_columns", "macro_sql": "{% macro get_bill_linked_txn_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"bill_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_payment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.235141, "supported_languages": null}, "macro.quickbooks_source.get_bill_payment_line_columns": {"name": "get_bill_payment_line_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_bill_payment_line_columns.sql", "original_file_path": "macros/get_bill_payment_line_columns.sql", "unique_id": "macro.quickbooks_source.get_bill_payment_line_columns", "macro_sql": "{% macro get_bill_payment_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_payment_credit_card_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_payment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"check_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_credit_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"expense_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"linked_bill_payment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor_credit_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.236585, "supported_languages": null}, "macro.quickbooks_source.get_transfer_columns": {"name": "get_transfer_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_transfer_columns.sql", "original_file_path": "macros/get_transfer_columns.sql", "unique_id": "macro.quickbooks_source.get_transfer_columns", "macro_sql": "{% macro get_transfer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"from_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"to_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2377222, "supported_languages": null}, "macro.quickbooks_source.get_purchase_columns": {"name": "get_purchase_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_purchase_columns.sql", "original_file_path": "macros/get_purchase_columns.sql", "unique_id": "macro.quickbooks_source.get_purchase_columns", "macro_sql": "{% macro get_purchase_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit\", \"datatype\": \"boolean\"},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"employee_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"print_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"remit_to_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"transaction_source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.240479, "supported_languages": null}, "macro.quickbooks_source.get_journal_entry_line_columns": {"name": "get_journal_entry_line_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_journal_entry_line_columns.sql", "original_file_path": "macros/get_journal_entry_line_columns.sql", "unique_id": "macro.quickbooks_source.get_journal_entry_line_columns", "macro_sql": "{% macro get_journal_entry_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"billable_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description_service_date\", \"datatype\": \"date\"},\n    {\"name\": \"description_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"employee_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"posting_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"tax_applicable_on\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.242314, "supported_languages": null}, "macro.quickbooks_source.get_deposit_columns": {"name": "get_deposit_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_deposit_columns.sql", "original_file_path": "macros/get_deposit_columns.sql", "unique_id": "macro.quickbooks_source.get_deposit_columns", "macro_sql": "{% macro get_deposit_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cash_back_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cash_back_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"cash_back_memo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"home_total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"transaction_source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.24427, "supported_languages": null}, "macro.quickbooks_source.get_purchase_order_columns": {"name": "get_purchase_order_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_purchase_order_columns.sql", "original_file_path": "macros/get_purchase_order_columns.sql", "unique_id": "macro.quickbooks_source.get_purchase_order_columns", "macro_sql": "{% macro get_purchase_order_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"custom_customer_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"custom_po_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"due_date\", \"datatype\": \"date\"},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"memo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payable_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_term_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"vendor_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2470899, "supported_languages": null}, "macro.quickbooks_source.get_credit_memo_line_columns": {"name": "get_credit_memo_line_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_credit_memo_line_columns.sql", "original_file_path": "macros/get_credit_memo_line_columns.sql", "unique_id": "macro.quickbooks_source.get_credit_memo_line_columns", "macro_sql": "{% macro get_credit_memo_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bundle_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bundle_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"credit_memo_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description_service_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_discount_percent\", \"datatype\": dbt.type_float()},\n    {\"name\": \"discount_percent_based\", \"datatype\": \"boolean\"},\n    {\"name\": \"discount_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_discount_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_discount_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_service_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sales_item_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_unit_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sub_total_item_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.249734, "supported_languages": null}, "macro.quickbooks_source.get_journal_entry_columns": {"name": "get_journal_entry_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_journal_entry_columns.sql", "original_file_path": "macros/get_journal_entry_columns.sql", "unique_id": "macro.quickbooks_source.get_journal_entry_columns", "macro_sql": "{% macro get_journal_entry_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"adjustment\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"home_total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.251314, "supported_languages": null}, "macro.quickbooks_source.get_vendor_columns": {"name": "get_vendor_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_vendor_columns.sql", "original_file_path": "macros/get_vendor_columns.sql", "unique_id": "macro.quickbooks_source.get_vendor_columns", "macro_sql": "{% macro get_vendor_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"alternate_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"billing_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"display_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"family_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fax_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"given_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"middle_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mobile_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"other_contacts\", \"datatype\": dbt.type_string()},\n    {\"name\": \"primary_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"print_on_check_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"suffix\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_identifier\", \"datatype\": dbt.type_string()},\n    {\"name\": \"term_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"vendor_1099\", \"datatype\": \"boolean\"},\n    {\"name\": \"web_url\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.254144, "supported_languages": null}, "macro.quickbooks_source.get_invoice_linked_txn_columns": {"name": "get_invoice_linked_txn_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_invoice_linked_txn_columns.sql", "original_file_path": "macros/get_invoice_linked_txn_columns.sql", "unique_id": "macro.quickbooks_source.get_invoice_linked_txn_columns", "macro_sql": "{% macro get_invoice_linked_txn_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"charge_credit_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"estimate_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reimburse_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"statement_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"time_activity_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.25535, "supported_languages": null}, "macro.quickbooks_source.get_item_columns": {"name": "get_item_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_item_columns.sql", "original_file_path": "macros/get_item_columns.sql", "unique_id": "macro.quickbooks_source.get_item_columns", "macro_sql": "{% macro get_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"asset_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"expense_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fully_qualified_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"income_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"inventory_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"purchase_cost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchase_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"purchase_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"purchase_tax_included\", \"datatype\": \"boolean\"},\n    {\"name\": \"quantity_on_hand\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_tax_included\", \"datatype\": \"boolean\"},\n    {\"name\": \"stock_keeping_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sub_item\", \"datatype\": \"boolean\"},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\"},\n    {\"name\": \"track_quantity_on_hand\", \"datatype\": \"boolean\"},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unit_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2581, "supported_languages": null}, "macro.quickbooks_source.get_credit_memo_columns": {"name": "get_credit_memo_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_credit_memo_columns.sql", "original_file_path": "macros/get_credit_memo_columns.sql", "unique_id": "macro.quickbooks_source.get_credit_memo_columns", "macro_sql": "{% macro get_credit_memo_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"apply_tax_after_discount\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"custom_p_o_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_memo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"home_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"home_total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"print_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"remaining_credit\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_term_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.261206, "supported_languages": null}, "macro.quickbooks_source.get_bundle_item_columns": {"name": "get_bundle_item_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_bundle_item_columns.sql", "original_file_path": "macros/get_bundle_item_columns.sql", "unique_id": "macro.quickbooks_source.get_bundle_item_columns", "macro_sql": "{% macro get_bundle_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"bundle_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_quantity\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.26173, "supported_languages": null}, "macro.quickbooks_source.get_payment_columns": {"name": "get_payment_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_payment_columns.sql", "original_file_path": "macros/get_payment_columns.sql", "unique_id": "macro.quickbooks_source.get_payment_columns", "macro_sql": "{% macro get_payment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_card_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"credit_card_auth_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_billing_address_street\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_cc_expiry_month\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_cc_expiry_year\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_cctrans_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_name_on_account\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_process_payment\", \"datatype\": \"boolean\"},\n    {\"name\": \"credit_card_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_transaction_authorization_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_card_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit_to_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"process_payment\", \"datatype\": \"boolean\"},\n    {\"name\": \"receivable_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reference_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"transaction_source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unapplied_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.265026, "supported_languages": null}, "macro.quickbooks_source.get_vendor_credit_columns": {"name": "get_vendor_credit_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_vendor_credit_columns.sql", "original_file_path": "macros/get_vendor_credit_columns.sql", "unique_id": "macro.quickbooks_source.get_vendor_credit_columns", "macro_sql": "{% macro get_vendor_credit_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payable_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.266711, "supported_languages": null}, "macro.quickbooks_source.get_refund_receipt_columns": {"name": "get_refund_receipt_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_refund_receipt_columns.sql", "original_file_path": "macros/get_refund_receipt_columns.sql", "unique_id": "macro.quickbooks_source.get_refund_receipt_columns", "macro_sql": "{% macro get_refund_receipt_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"apply_tax_after_discount\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"check_payment_account_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"check_payment_bank_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"check_payment_check_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"check_payment_name_on_account\", \"datatype\": dbt.type_string()},\n    {\"name\": \"check_payment_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_card_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"credit_card_auth_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_billing_address_street\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_cc_expiry_month\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_cc_expiry_year\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_cctrans_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_name_on_account\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_process_payment\", \"datatype\": \"boolean\"},\n    {\"name\": \"credit_card_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_transaction_authorization_time\", \"datatype\": \"date\"},\n    {\"name\": \"credit_card_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_memo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit_to_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"home_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"home_total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_reference_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"print_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"transaction_source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.272029, "supported_languages": null}, "macro.quickbooks_source.get_bill_columns": {"name": "get_bill_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_bill_columns.sql", "original_file_path": "macros/get_bill_columns.sql", "unique_id": "macro.quickbooks_source.get_bill_columns", "macro_sql": "{% macro get_bill_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"due_date\", \"datatype\": \"date\"},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"home_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payable_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_term_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.274014, "supported_languages": null}, "macro.quickbooks_source.get_credit_card_payment_txn_columns": {"name": "get_credit_card_payment_txn_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_credit_card_payment_txn_columns.sql", "original_file_path": "macros/get_credit_card_payment_txn_columns.sql", "unique_id": "macro.quickbooks_source.get_credit_card_payment_txn_columns", "macro_sql": "{% macro get_credit_card_payment_txn_columns() %}\n\n{% set columns = [    \t\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bank_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_card_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.275305, "supported_languages": null}, "macro.quickbooks_source.get_bill_line_columns": {"name": "get_bill_line_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_bill_line_columns.sql", "original_file_path": "macros/get_bill_line_columns.sql", "unique_id": "macro.quickbooks_source.get_bill_line_columns", "macro_sql": "{% macro get_bill_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_expense_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_billable_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_tax_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"account_expense_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_billable_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"item_expense_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_unit_price\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.277451, "supported_languages": null}, "macro.quickbooks_source.get_customer_columns": {"name": "get_customer_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_customer_columns.sql", "original_file_path": "macros/get_customer_columns.sql", "unique_id": "macro.quickbooks_source.get_customer_columns", "macro_sql": "{% macro get_customer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"alternate_phone_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ar_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"balance_with_jobs\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_with_parent\", \"datatype\": \"boolean\"},\n    {\"name\": \"company_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"display_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"family_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fax_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fully_qualified_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"given_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"job\", \"datatype\": \"boolean\"},\n    {\"name\": \"level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"middle_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mobile_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"open_balance_date\", \"datatype\": \"date\"},\n    {\"name\": \"parent_customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"phone_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"preferred_delivery_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"print_on_check_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"resale_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_term_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"suffix\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_exemption_reason_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\"},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"website\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.282002, "supported_languages": null}, "macro.quickbooks_source.get_invoice_columns": {"name": "get_invoice_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_invoice_columns.sql", "original_file_path": "macros/get_invoice_columns.sql", "unique_id": "macro.quickbooks_source.get_invoice_columns", "macro_sql": "{% macro get_invoice_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"allow_ipnpayment\", \"datatype\": \"boolean\"},\n    {\"name\": \"allow_online_achpayment\", \"datatype\": \"boolean\"},\n    {\"name\": \"allow_online_credit_card_payment\", \"datatype\": \"boolean\"},\n    {\"name\": \"allow_online_payment\", \"datatype\": \"boolean\"},\n    {\"name\": \"apply_tax_after_discount\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"billing_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_bcc_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_cc_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"custom_p_o_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"custom_sales_rep\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_memo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"delivery_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"delivery_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit\", \"datatype\": dbt.type_float()},\n    {\"name\": \"deposit_to_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"due_date\", \"datatype\": \"date\"},\n    {\"name\": \"email_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"home_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"home_total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"print_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_term_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ship_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"shipping_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt.type_float()},\n    {\"name\": \"tracking_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"transaction_source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.287225, "supported_languages": null}, "macro.quickbooks_source.get_payment_line_columns": {"name": "get_payment_line_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_payment_line_columns.sql", "original_file_path": "macros/get_payment_line_columns.sql", "unique_id": "macro.quickbooks_source.get_payment_line_columns", "macro_sql": "{% macro get_payment_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"check_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_credit_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_memo_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"expense_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.288637, "supported_languages": null}, "macro.quickbooks_source.get_department_columns": {"name": "get_department_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_department_columns.sql", "original_file_path": "macros/get_department_columns.sql", "unique_id": "macro.quickbooks_source.get_department_columns", "macro_sql": "{% macro get_department_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"fully_qualified_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_department_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sub_department\", \"datatype\": \"boolean\"},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.289732, "supported_languages": null}, "macro.quickbooks_source.get_invoice_line_columns": {"name": "get_invoice_line_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_invoice_line_columns.sql", "original_file_path": "macros/get_invoice_line_columns.sql", "unique_id": "macro.quickbooks_source.get_invoice_line_columns", "macro_sql": "{% macro get_invoice_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bundle_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bundle_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description_service_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_discount_percent\", \"datatype\": dbt.type_float()},\n    {\"name\": \"discount_percent_based\", \"datatype\": \"boolean\"},\n    {\"name\": \"discount_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"detail_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_discount_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_discount_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_service_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sales_item_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_unit_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sub_total_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.292798, "supported_languages": null}, "macro.quickbooks_source.get_purchase_order_line_columns": {"name": "get_purchase_order_line_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_purchase_order_line_columns.sql", "original_file_path": "macros/get_purchase_order_line_columns.sql", "unique_id": "macro.quickbooks_source.get_purchase_order_line_columns", "macro_sql": "{% macro get_purchase_order_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_expense_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_billable_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_tax_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"account_expense_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_billable_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"item_expense_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_unit_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchase_order_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.294707, "supported_languages": null}, "macro.quickbooks_source.get_purchase_line_columns": {"name": "get_purchase_line_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_purchase_line_columns.sql", "original_file_path": "macros/get_purchase_line_columns.sql", "unique_id": "macro.quickbooks_source.get_purchase_line_columns", "macro_sql": "{% macro get_purchase_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_expense_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_billable_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_expense_tax_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"account_expense_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_billable_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"item_expense_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_expense_unit_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"purchase_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.2965991, "supported_languages": null}, "macro.quickbooks_source.get_refund_receipt_line_columns": {"name": "get_refund_receipt_line_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_refund_receipt_line_columns.sql", "original_file_path": "macros/get_refund_receipt_line_columns.sql", "unique_id": "macro.quickbooks_source.get_refund_receipt_line_columns", "macro_sql": "{% macro get_refund_receipt_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bundle_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bundle_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description_service_date\", \"datatype\": \"date\"},\n    {\"name\": \"description_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_discount_percent\", \"datatype\": dbt.type_float()},\n    {\"name\": \"discount_percent_based\", \"datatype\": \"boolean\"},\n    {\"name\": \"discount_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refund_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_discount_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_discount_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_service_date\", \"datatype\": \"date\"},\n    {\"name\": \"sales_item_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_unit_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sub_total_item_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.29908, "supported_languages": null}, "macro.quickbooks_source.get_estimate_columns": {"name": "get_estimate_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_estimate_columns.sql", "original_file_path": "macros/get_estimate_columns.sql", "unique_id": "macro.quickbooks_source.get_estimate_columns", "macro_sql": "{% macro get_estimate_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"accepted_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accepted_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"apply_tax_after_discount\", \"datatype\": \"boolean\"},\n    {\"name\": \"bill_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_memo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"delivery_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"due_date\", \"datatype\": \"date\"},\n    {\"name\": \"email_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"expiration_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"home_total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"print_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_term_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ship_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"shipping_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"transaction_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.302857, "supported_languages": null}, "macro.quickbooks_source.get_bill_payment_columns": {"name": "get_bill_payment_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_bill_payment_columns.sql", "original_file_path": "macros/get_bill_payment_columns.sql", "unique_id": "macro.quickbooks_source.get_bill_payment_columns", "macro_sql": "{% macro get_bill_payment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"check_bank_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"check_print_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_card_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pay_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payable_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"process_bill_payment\", \"datatype\": \"boolean\"},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.3048902, "supported_languages": null}, "macro.quickbooks_source.get_sales_receipt_columns": {"name": "get_sales_receipt_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_sales_receipt_columns.sql", "original_file_path": "macros/get_sales_receipt_columns.sql", "unique_id": "macro.quickbooks_source.get_sales_receipt_columns", "macro_sql": "{% macro get_sales_receipt_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"apply_tax_after_discount\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_card_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"credit_card_auth_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_billing_address_street\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_cc_expiry_month\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_cc_expiry_year\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_cctrans_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_name_on_account\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_process_payment\", \"datatype\": \"boolean\"},\n    {\"name\": \"credit_card_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_card_transaction_authorization_time\", \"datatype\": \"date\"},\n    {\"name\": \"credit_card_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_memo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"delivery_time\", \"datatype\": \"date\"},\n    {\"name\": \"delivery_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deposit_to_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"home_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"home_total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_reference_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"print_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ship_date\", \"datatype\": \"date\"},\n    {\"name\": \"shipping_address_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt.type_float()},\n    {\"name\": \"tracking_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"transaction_source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.3102431, "supported_languages": null}, "macro.quickbooks_source.get_bundle_columns": {"name": "get_bundle_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_bundle_columns.sql", "original_file_path": "macros/get_bundle_columns.sql", "unique_id": "macro.quickbooks_source.get_bundle_columns", "macro_sql": "{% macro get_bundle_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fully_qualified_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"print_grouped_items\", \"datatype\": \"boolean\"},\n    {\"name\": \"purchase_cost\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sync_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\"},\n    {\"name\": \"unit_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.311605, "supported_languages": null}, "macro.quickbooks_source.get_estimate_line_columns": {"name": "get_estimate_line_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_estimate_line_columns.sql", "original_file_path": "macros/get_estimate_line_columns.sql", "unique_id": "macro.quickbooks_source.get_estimate_line_columns", "macro_sql": "{% macro get_estimate_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bundle_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bundle_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description_service_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_discount_percent\", \"datatype\": dbt.type_float()},\n    {\"name\": \"discount_percent_based\", \"datatype\": \"boolean\"},\n    {\"name\": \"discount_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"estimate_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_discount_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_discount_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_service_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sales_item_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_unit_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sub_total_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.314545, "supported_languages": null}, "macro.quickbooks_source.get_address_columns": {"name": "get_address_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_address_columns.sql", "original_file_path": "macros/get_address_columns.sql", "unique_id": "macro.quickbooks_source.get_address_columns", "macro_sql": "{% macro get_address_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country_sub_division_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"latitude\", \"datatype\": dbt.type_string()},\n    {\"name\": \"line_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"line_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"line_3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"line_4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"line_5\", \"datatype\": dbt.type_string()},\n    {\"name\": \"longitude\", \"datatype\": dbt.type_string()},\n    {\"name\": \"postal_code\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.315899, "supported_languages": null}, "macro.quickbooks_source.get_invoice_line_bundle_columns": {"name": "get_invoice_line_bundle_columns", "resource_type": "macro", "package_name": "quickbooks_source", "path": "macros/get_invoice_line_bundle_columns.sql", "original_file_path": "macros/get_invoice_line_bundle_columns.sql", "unique_id": "macro.quickbooks_source.get_invoice_line_bundle_columns", "macro_sql": "{% macro get_invoice_line_bundle_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"discount_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_line_index\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"line_num\", \"datatype\": dbt.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_item_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sales_item_tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"service_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unit_price\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1721255626.317961, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.quickbooks_source.account_table": {"name": "account_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.account_table", "block_contents": "Table containing components of a Chart Of Accounts and is part of a ledger. It is used to record a total monetary amount allocated against a specific use. Accounts are one of five basic types: asset, liability, revenue (income), expenses, or equity."}, "doc.quickbooks_source.address_table": {"name": "address_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.address_table", "block_contents": "Table containing address details."}, "doc.quickbooks_source.bill_line_table": {"name": "bill_line_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.bill_line_table", "block_contents": "Table containing distinct line items from bills within the `bill` table."}, "doc.quickbooks_source.bill_linked_txn_table": {"name": "bill_linked_txn_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.bill_linked_txn_table", "block_contents": "Mapping table containing bill payment transactions linked to a bill."}, "doc.quickbooks_source.bill_payment_line_table": {"name": "bill_payment_line_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.bill_payment_line_table", "block_contents": "Table containing individual line items of a bill payment, which are recorded within the `bill_payment` table."}, "doc.quickbooks_source.bill_payment_table": {"name": "bill_payment_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.bill_payment_table", "block_contents": "Table containing payment transactions bills that the business owner receives from a vendor for goods or services purchased from the vendor."}, "doc.quickbooks_source.bill_table": {"name": "bill_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.bill_table", "block_contents": "Table containing AP transactions representing a request-for-payment from a third party for goods/services rendered, received, or both."}, "doc.quickbooks_source.bundle_item_table": {"name": "bundle_item_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.bundle_item_table", "block_contents": "Mapping table containing all bundle and item combinations."}, "doc.quickbooks_source.bundle_table": {"name": "bundle_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.bundle_table", "block_contents": "Table containing all bundles possible to be used within an invoice."}, "doc.quickbooks_source.credit_card_payment_txn_table": {"name": "credit_card_payment_txn_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.credit_card_payment_txn_table", "block_contents": "Table containing all credit card payment transactions."}, "doc.quickbooks_source.credit_memo_line_table": {"name": "credit_memo_line_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.credit_memo_line_table", "block_contents": "Table containing individual records of credit memos."}, "doc.quickbooks_source.credit_memo_table": {"name": "credit_memo_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.credit_memo_table", "block_contents": "Table containing credit memo records. A credit memo is a refund or credit of payment or part of a payment for goods or services that have been sold."}, "doc.quickbooks_source.customer_table": {"name": "customer_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.customer_table", "block_contents": "Table containing customers of which are consumers of the service or product that your business offers."}, "doc.quickbooks_source.department_table": {"name": "department_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.department_table", "block_contents": "Table containing records representing physical locations such as stores, and sales regions."}, "doc.quickbooks_source.deposit_line_table": {"name": "deposit_line_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.deposit_line_table", "block_contents": "Table containing individual line items comprising the deposit."}, "doc.quickbooks_source.deposit_table": {"name": "deposit_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.deposit_table", "block_contents": "Table containing records of transactions that record on or more deposits of a customer payment or a new direct deposit."}, "doc.quickbooks_source.estimate_line_table": {"name": "estimate_line_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.estimate_line_table", "block_contents": "Table containing line item records of an estimate."}, "doc.quickbooks_source.estimate_table": {"name": "estimate_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.estimate_table", "block_contents": "Table containing estimates. An estimate represents a proposal for a financial transaction from a business to a customer for goods or services proposed to be sold, including proposed pricing."}, "doc.quickbooks_source.invoice_line_bundle_table": {"name": "invoice_line_bundle_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.invoice_line_bundle_table", "block_contents": "Table containing lines of an invoice which were bundled."}, "doc.quickbooks_source.invoice_line_table": {"name": "invoice_line_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.invoice_line_table", "block_contents": "Table containing individual records from invoices."}, "doc.quickbooks_source.invoice_linked_txn_table": {"name": "invoice_linked_txn_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.invoice_linked_txn_table", "block_contents": "Mapping table for invoices records to respective estimate and payment objects."}, "doc.quickbooks_source.invoice_table": {"name": "invoice_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.invoice_table", "block_contents": "Table containing invoice records. An Invoice represents a sales form where the customer pays for a product or service later."}, "doc.quickbooks_source.item_table": {"name": "item_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.item_table", "block_contents": "Table containing item records. An item is a thing that your company buys, sells, or re-sells, such as products and services."}, "doc.quickbooks_source.journal_entry_line_table": {"name": "journal_entry_line_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.journal_entry_line_table", "block_contents": "Table containing individual line items of a transaction associated with a journal entry."}, "doc.quickbooks_source.journal_entry_table": {"name": "journal_entry_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.journal_entry_table", "block_contents": "Table containing journal entry transactions."}, "doc.quickbooks_source.payment_line_table": {"name": "payment_line_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.payment_line_table", "block_contents": "Table containing individual line items recorded within a payment."}, "doc.quickbooks_source.payment_table": {"name": "payment_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.payment_table", "block_contents": "Table containing all payment records. The payment can be applied for a particular customer against multiple Invoices and Credit Memos. It can also be created without any Invoice or Credit Memo, by just specifying an amount."}, "doc.quickbooks_source.purchase_line_table": {"name": "purchase_line_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.purchase_line_table", "block_contents": "Table containing individual line items of a transaction associated with a purchase."}, "doc.quickbooks_source.purchase_order_line_table": {"name": "purchase_order_line_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.purchase_order_line_table", "block_contents": "Table containing individual line items of a transaction associated with a purchase order."}, "doc.quickbooks_source.purchase_order_linked_txn_table": {"name": "purchase_order_linked_txn_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.purchase_order_linked_txn_table", "block_contents": "Mapping table for purchase order records to respective bill and purchase objects."}, "doc.quickbooks_source.purchase_order_table": {"name": "purchase_order_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.purchase_order_table", "block_contents": "Table containing records of purchase orders (PO)."}, "doc.quickbooks_source.purchase_table": {"name": "purchase_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.purchase_table", "block_contents": "Table containing records of purchase expenses."}, "doc.quickbooks_source.refund_receipt_line_table": {"name": "refund_receipt_line_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.refund_receipt_line_table", "block_contents": "Table containing individual line items of a refund transaction."}, "doc.quickbooks_source.refund_receipt_table": {"name": "refund_receipt_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.refund_receipt_table", "block_contents": "Table containing refunds to the customer for a product or service that was provided."}, "doc.quickbooks_source.sales_receipt_line_table": {"name": "sales_receipt_line_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.sales_receipt_line_table", "block_contents": "Table containing individual line items of a sales transaction."}, "doc.quickbooks_source.sales_receipt_table": {"name": "sales_receipt_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.sales_receipt_table", "block_contents": "Table containing sales receipts that are given to a customer. A sales receipt, payment is received as part of the sale of goods and services. The sales receipt specifies a deposit account where the customer's payment is deposited."}, "doc.quickbooks_source.source_relation": {"name": "source_relation", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.source_relation", "block_contents": "The source of the record if the unioning functionality is being used. If not this field will be null."}, "doc.quickbooks_source.transfer_table": {"name": "transfer_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.transfer_table", "block_contents": "Table containing records of transfers. A Transfer represents a transaction where funds are moved between two accounts from the company's QuickBooks chart of accounts."}, "doc.quickbooks_source.vendor_credit_line_table": {"name": "vendor_credit_line_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.vendor_credit_line_table", "block_contents": "Table containing individual vendor credit line items."}, "doc.quickbooks_source.vendor_credit_table": {"name": "vendor_credit_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.vendor_credit_table", "block_contents": "Table containing all vendor credit records. A vendor credit is an accounts payable transaction that represents a refund or credit of payment for goods or services."}, "doc.quickbooks_source.vendor_table": {"name": "vendor_table", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.vendor_table", "block_contents": "Table containing all vendor records. A vendor is the seller from whom your company purchases any service or product."}, "doc.quickbooks_source.account_id": {"name": "account_id", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.account_id", "block_contents": "The identifier of the account associated"}, "doc.quickbooks_source.amount": {"name": "amount", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.amount", "block_contents": "Monetary amount of"}, "doc.quickbooks_source.class_id": {"name": "class_id", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.class_id", "block_contents": "Reference to the class associated"}, "doc.quickbooks_source.created_at": {"name": "created_at", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.created_at", "block_contents": "Timestamp of the creation date"}, "doc.quickbooks_source.currency_id": {"name": "currency_id", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.currency_id", "block_contents": "Reference to the currency"}, "doc.quickbooks_source.customer_id": {"name": "customer_id", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.customer_id", "block_contents": "Reference to the customer associated"}, "doc.quickbooks_source.department_id": {"name": "department_id", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.department_id", "block_contents": "Reference to the department"}, "doc.quickbooks_source.id": {"name": "id", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.id", "block_contents": "Unique identifier of the"}, "doc.quickbooks_source.item_id": {"name": "item_id", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source.item_id", "block_contents": "Reference to the item"}, "doc.quickbooks_source._fivetran_deleted": {"name": "_fivetran_deleted", "resource_type": "doc", "package_name": "quickbooks_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.quickbooks_source._fivetran_deleted", "block_contents": "Boolean created by Fivetran to indicate whether the record has been deleted."}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"seed.quickbooks_source_integration_tests.bill_payment_data": [], "seed.quickbooks_source_integration_tests.bundle_data": [], "seed.quickbooks_source_integration_tests.bill_payment_line_data": [], "seed.quickbooks_source_integration_tests.payment_line_data": [], "seed.quickbooks_source_integration_tests.vendor_data": [], "seed.quickbooks_source_integration_tests.address_data": [], "seed.quickbooks_source_integration_tests.purchase_order_linked_txn_data": [], "seed.quickbooks_source_integration_tests.invoice_line_bundle_data": [], "seed.quickbooks_source_integration_tests.invoice_data": [], "seed.quickbooks_source_integration_tests.payment_data": [], "seed.quickbooks_source_integration_tests.invoice_line_data": [], "seed.quickbooks_source_integration_tests.deposit_line_data": [], "seed.quickbooks_source_integration_tests.estimate_line_data": [], "seed.quickbooks_source_integration_tests.purchase_data": [], "seed.quickbooks_source_integration_tests.refund_receipt_line_data": [], "seed.quickbooks_source_integration_tests.credit_memo_line_data": [], "seed.quickbooks_source_integration_tests.bill_data": [], "seed.quickbooks_source_integration_tests.bill_linked_txn_data": [], "seed.quickbooks_source_integration_tests.vendor_credit_data": [], "seed.quickbooks_source_integration_tests.customer_data": [], "seed.quickbooks_source_integration_tests.estimate_data": [], "seed.quickbooks_source_integration_tests.purchase_line_data": [], "seed.quickbooks_source_integration_tests.journal_entry_line_data": [], "seed.quickbooks_source_integration_tests.journal_entry_data": [], "seed.quickbooks_source_integration_tests.bill_line_data": [], "seed.quickbooks_source_integration_tests.bundle_item_data": [], "seed.quickbooks_source_integration_tests.invoice_linked_txn_data": [], "seed.quickbooks_source_integration_tests.account_data": [], "seed.quickbooks_source_integration_tests.purchase_order_line_data": [], "seed.quickbooks_source_integration_tests.transfer_data": [], "seed.quickbooks_source_integration_tests.purchase_order_data": [], "seed.quickbooks_source_integration_tests.sales_receipt_line_data": [], "seed.quickbooks_source_integration_tests.vendor_credit_line_data": [], "seed.quickbooks_source_integration_tests.credit_card_payment_txn_data": [], "seed.quickbooks_source_integration_tests.credit_memo_data": [], "seed.quickbooks_source_integration_tests.department_data": [], "seed.quickbooks_source_integration_tests.item_data": [], "seed.quickbooks_source_integration_tests.sales_receipt_data": [], "seed.quickbooks_source_integration_tests.deposit_data": [], "seed.quickbooks_source_integration_tests.refund_receipt_data": [], "model.quickbooks_source.stg_quickbooks__journal_entry_line": ["model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp"], "model.quickbooks_source.stg_quickbooks__transfer": ["model.quickbooks_source.stg_quickbooks__transfer_tmp"], "model.quickbooks_source.stg_quickbooks__bill_payment_line": ["model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp"], "model.quickbooks_source.stg_quickbooks__payment_line": ["model.quickbooks_source.stg_quickbooks__payment_line_tmp"], "model.quickbooks_source.stg_quickbooks__vendor": ["model.quickbooks_source.stg_quickbooks__vendor_tmp"], "model.quickbooks_source.stg_quickbooks__invoice_line": ["model.quickbooks_source.stg_quickbooks__invoice_line_tmp"], "model.quickbooks_source.stg_quickbooks__estimate": ["model.quickbooks_source.stg_quickbooks__estimate_tmp"], "model.quickbooks_source.stg_quickbooks__credit_memo_line": ["model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp"], "model.quickbooks_source.stg_quickbooks__bundle": ["model.quickbooks_source.stg_quickbooks__bundle_tmp"], "model.quickbooks_source.stg_quickbooks__department": ["model.quickbooks_source.stg_quickbooks__department_tmp"], "model.quickbooks_source.stg_quickbooks__credit_card_payment_txn": ["model.quickbooks_source.stg_quickbooks__credit_card_payment_txn_tmp"], "model.quickbooks_source.stg_quickbooks__purchase_line": ["model.quickbooks_source.stg_quickbooks__purchase_line_tmp"], "model.quickbooks_source.stg_quickbooks__purchase": ["model.quickbooks_source.stg_quickbooks__purchase_tmp"], "model.quickbooks_source.stg_quickbooks__refund_receipt_line": ["model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp"], "model.quickbooks_source.stg_quickbooks__bundle_item": ["model.quickbooks_source.stg_quickbooks__bundle_item_tmp"], "model.quickbooks_source.stg_quickbooks__credit_memo": ["model.quickbooks_source.stg_quickbooks__credit_memo_tmp"], "model.quickbooks_source.stg_quickbooks__purchase_order": ["model.quickbooks_source.stg_quickbooks__purchase_order_tmp"], "model.quickbooks_source.stg_quickbooks__sales_receipt_line": ["model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp"], "model.quickbooks_source.stg_quickbooks__sales_receipt": ["model.quickbooks_source.stg_quickbooks__sales_receipt_tmp"], "model.quickbooks_source.stg_quickbooks__purchase_order_line": ["model.quickbooks_source.stg_quickbooks__purchase_order_line_tmp"], "model.quickbooks_source.stg_quickbooks__invoice_linked_txn": ["model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp"], "model.quickbooks_source.stg_quickbooks__invoice": ["model.quickbooks_source.stg_quickbooks__invoice_tmp"], "model.quickbooks_source.stg_quickbooks__bill_payment": ["model.quickbooks_source.stg_quickbooks__bill_payment_tmp"], "model.quickbooks_source.stg_quickbooks__invoice_line_bundle": ["model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp"], "model.quickbooks_source.stg_quickbooks__account": ["model.quickbooks_source.stg_quickbooks__account_tmp"], "model.quickbooks_source.stg_quickbooks__payment": ["model.quickbooks_source.stg_quickbooks__payment_tmp"], "model.quickbooks_source.stg_quickbooks__estimate_line": ["model.quickbooks_source.stg_quickbooks__estimate_line_tmp"], "model.quickbooks_source.stg_quickbooks__bill_linked_txn": ["model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp"], "model.quickbooks_source.stg_quickbooks__address": ["model.quickbooks_source.stg_quickbooks__address_tmp"], "model.quickbooks_source.stg_quickbooks__bill": ["model.quickbooks_source.stg_quickbooks__bill_tmp"], "model.quickbooks_source.stg_quickbooks__bill_line": ["model.quickbooks_source.stg_quickbooks__bill_line_tmp"], "model.quickbooks_source.stg_quickbooks__journal_entry": ["model.quickbooks_source.stg_quickbooks__journal_entry_tmp"], "model.quickbooks_source.stg_quickbooks__refund_receipt": ["model.quickbooks_source.stg_quickbooks__refund_receipt_tmp"], "model.quickbooks_source.stg_quickbooks__deposit_line": ["model.quickbooks_source.stg_quickbooks__deposit_line_tmp"], "model.quickbooks_source.stg_quickbooks__vendor_credit": ["model.quickbooks_source.stg_quickbooks__vendor_credit_tmp"], "model.quickbooks_source.stg_quickbooks__vendor_credit_line": ["model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp"], "model.quickbooks_source.stg_quickbooks__deposit": ["model.quickbooks_source.stg_quickbooks__deposit_tmp"], "model.quickbooks_source.stg_quickbooks__item": ["model.quickbooks_source.stg_quickbooks__item_tmp"], "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn": ["model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn_tmp"], "model.quickbooks_source.stg_quickbooks__customer": ["model.quickbooks_source.stg_quickbooks__customer_tmp"], "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp": ["source.quickbooks_source.quickbooks.vendor_credit"], "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp": ["source.quickbooks_source.quickbooks.refund_receipt_line"], "model.quickbooks_source.stg_quickbooks__estimate_line_tmp": ["source.quickbooks_source.quickbooks.estimate_line"], "model.quickbooks_source.stg_quickbooks__purchase_order_line_tmp": ["source.quickbooks_source.quickbooks.purchase_order_line"], "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp": ["source.quickbooks_source.quickbooks.credit_memo_line"], "model.quickbooks_source.stg_quickbooks__journal_entry_tmp": ["source.quickbooks_source.quickbooks.journal_entry"], "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp": ["source.quickbooks_source.quickbooks.invoice_line_bundle"], "model.quickbooks_source.stg_quickbooks__payment_tmp": ["source.quickbooks_source.quickbooks.payment"], "model.quickbooks_source.stg_quickbooks__invoice_line_tmp": ["source.quickbooks_source.quickbooks.invoice_line"], "model.quickbooks_source.stg_quickbooks__deposit_line_tmp": ["source.quickbooks_source.quickbooks.deposit_line"], "model.quickbooks_source.stg_quickbooks__customer_tmp": ["source.quickbooks_source.quickbooks.customer"], "model.quickbooks_source.stg_quickbooks__bill_line_tmp": ["source.quickbooks_source.quickbooks.bill_line"], "model.quickbooks_source.stg_quickbooks__item_tmp": ["source.quickbooks_source.quickbooks.item"], "model.quickbooks_source.stg_quickbooks__account_tmp": ["source.quickbooks_source.quickbooks.account"], "model.quickbooks_source.stg_quickbooks__credit_card_payment_txn_tmp": ["source.quickbooks_source.quickbooks.credit_card_payment_txn"], "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp": ["source.quickbooks_source.quickbooks.vendor_credit_line"], "model.quickbooks_source.stg_quickbooks__department_tmp": ["source.quickbooks_source.quickbooks.department"], "model.quickbooks_source.stg_quickbooks__bundle_tmp": ["source.quickbooks_source.quickbooks.bundle"], "model.quickbooks_source.stg_quickbooks__bundle_item_tmp": ["source.quickbooks_source.quickbooks.bundle_item"], "model.quickbooks_source.stg_quickbooks__purchase_order_tmp": ["source.quickbooks_source.quickbooks.purchase_order"], "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp": ["source.quickbooks_source.quickbooks.bill_payment_line"], "model.quickbooks_source.stg_quickbooks__estimate_tmp": ["source.quickbooks_source.quickbooks.estimate"], "model.quickbooks_source.stg_quickbooks__purchase_tmp": ["source.quickbooks_source.quickbooks.purchase"], "model.quickbooks_source.stg_quickbooks__credit_memo_tmp": ["source.quickbooks_source.quickbooks.credit_memo"], "model.quickbooks_source.stg_quickbooks__bill_tmp": ["source.quickbooks_source.quickbooks.bill"], "model.quickbooks_source.stg_quickbooks__transfer_tmp": ["source.quickbooks_source.quickbooks.transfer"], "model.quickbooks_source.stg_quickbooks__vendor_tmp": ["source.quickbooks_source.quickbooks.vendor"], "model.quickbooks_source.stg_quickbooks__purchase_line_tmp": ["source.quickbooks_source.quickbooks.purchase_line"], "model.quickbooks_source.stg_quickbooks__address_tmp": ["source.quickbooks_source.quickbooks.address"], "model.quickbooks_source.stg_quickbooks__payment_line_tmp": ["source.quickbooks_source.quickbooks.payment_line"], "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp": ["source.quickbooks_source.quickbooks.refund_receipt"], "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp": ["source.quickbooks_source.quickbooks.sales_receipt"], "model.quickbooks_source.stg_quickbooks__bill_payment_tmp": ["source.quickbooks_source.quickbooks.bill_payment"], "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp": ["source.quickbooks_source.quickbooks.journal_entry_line"], "model.quickbooks_source.stg_quickbooks__deposit_tmp": ["source.quickbooks_source.quickbooks.deposit"], "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp": ["source.quickbooks_source.quickbooks.bill_linked_txn"], "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp": ["source.quickbooks_source.quickbooks.invoice_linked_txn"], "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp": ["source.quickbooks_source.quickbooks.sales_receipt_line"], "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn_tmp": ["source.quickbooks_source.quickbooks.purchase_order_linked_txn"], "model.quickbooks_source.stg_quickbooks__invoice_tmp": ["source.quickbooks_source.quickbooks.invoice"], "test.quickbooks_source.not_null_stg_quickbooks__account_account_id.9944488b9d": ["model.quickbooks_source.stg_quickbooks__account"], "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue.127506f73f": ["model.quickbooks_source.stg_quickbooks__account"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation.864a4b056a": ["model.quickbooks_source.stg_quickbooks__account"], "test.quickbooks_source.not_null_stg_quickbooks__address_address_id.4f100ae50c": ["model.quickbooks_source.stg_quickbooks__address"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation.5bc813a014": ["model.quickbooks_source.stg_quickbooks__address"], "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id.25c5ea7348": ["model.quickbooks_source.stg_quickbooks__bill_line"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation.73722b1062": ["model.quickbooks_source.stg_quickbooks__bill_line"], "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id.35f96199bd": ["model.quickbooks_source.stg_quickbooks__bill_linked_txn"], "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id.1dbb366150": ["model.quickbooks_source.stg_quickbooks__bill_payment_line"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation.0a7e17967c": ["model.quickbooks_source.stg_quickbooks__bill_payment_line"], "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id.908899ccfb": ["model.quickbooks_source.stg_quickbooks__bill_payment"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation.4b7aafd630": ["model.quickbooks_source.stg_quickbooks__bill_payment"], "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id.ca717958c8": ["model.quickbooks_source.stg_quickbooks__bill"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation.8c08249abf": ["model.quickbooks_source.stg_quickbooks__bill"], "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id.6d547b8c07": ["model.quickbooks_source.stg_quickbooks__bundle_item"], "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id.382e1dad60": ["model.quickbooks_source.stg_quickbooks__bundle"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation.e241a21ebc": ["model.quickbooks_source.stg_quickbooks__bundle"], "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id.58953be02b": ["model.quickbooks_source.stg_quickbooks__credit_memo_line"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation.7a43f0e186": ["model.quickbooks_source.stg_quickbooks__credit_memo_line"], "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id.d921d2b152": ["model.quickbooks_source.stg_quickbooks__credit_memo"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation.917f24c5ca": ["model.quickbooks_source.stg_quickbooks__credit_memo"], "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id.98232a9723": ["model.quickbooks_source.stg_quickbooks__customer"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation.61cc22a568": ["model.quickbooks_source.stg_quickbooks__customer"], "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id.d615f463e1": ["model.quickbooks_source.stg_quickbooks__deposit_line"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation.443de63985": ["model.quickbooks_source.stg_quickbooks__deposit_line"], "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id.880b8c37b1": ["model.quickbooks_source.stg_quickbooks__deposit"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation.5574d8e908": ["model.quickbooks_source.stg_quickbooks__deposit"], "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id.0331d3c310": ["model.quickbooks_source.stg_quickbooks__estimate"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation.412260b882": ["model.quickbooks_source.stg_quickbooks__estimate"], "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id.c060f99b4c": ["model.quickbooks_source.stg_quickbooks__estimate_line"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation.cc61ab0953": ["model.quickbooks_source.stg_quickbooks__estimate_line"], "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id.c9b9c8f8f4": ["model.quickbooks_source.stg_quickbooks__invoice_linked_txn"], "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id.0424087a8f": ["model.quickbooks_source.stg_quickbooks__invoice_line"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation.99b74bc327": ["model.quickbooks_source.stg_quickbooks__invoice_line"], "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id.cfd59b83a9": ["model.quickbooks_source.stg_quickbooks__invoice_line_bundle"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation.5370e9fcd0": ["model.quickbooks_source.stg_quickbooks__invoice_line_bundle"], "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id.b6d8e1ad7d": ["model.quickbooks_source.stg_quickbooks__invoice"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation.ef51800044": ["model.quickbooks_source.stg_quickbooks__invoice"], "test.quickbooks_source.not_null_stg_quickbooks__item_item_id.da906d8fb9": ["model.quickbooks_source.stg_quickbooks__item"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation.169465a2a6": ["model.quickbooks_source.stg_quickbooks__item"], "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id.bd89a6f784": ["model.quickbooks_source.stg_quickbooks__journal_entry_line"], "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.ab661907c3": ["model.quickbooks_source.stg_quickbooks__journal_entry_line"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation.0cd1d9f232": ["model.quickbooks_source.stg_quickbooks__journal_entry_line"], "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id.39198c4ff2": ["model.quickbooks_source.stg_quickbooks__journal_entry"], "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id.6351e3fe26": ["model.quickbooks_source.stg_quickbooks__payment_line"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation.25be3cf2e5": ["model.quickbooks_source.stg_quickbooks__payment_line"], "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id.ca2c1ef54f": ["model.quickbooks_source.stg_quickbooks__payment"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation.1998a8282e": ["model.quickbooks_source.stg_quickbooks__payment"], "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id.5406fca79c": ["model.quickbooks_source.stg_quickbooks__purchase_line"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation.a23c661eb5": ["model.quickbooks_source.stg_quickbooks__purchase_line"], "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id.fc2090959b": ["model.quickbooks_source.stg_quickbooks__purchase"], "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard.7de7edf458": ["model.quickbooks_source.stg_quickbooks__purchase"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation.172340b49e": ["model.quickbooks_source.stg_quickbooks__purchase"], "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_line_purchase_order_id.210718c1c7": ["model.quickbooks_source.stg_quickbooks__purchase_order_line"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_line_purchase_order_id__index__source_relation.e47fe7ae13": ["model.quickbooks_source.stg_quickbooks__purchase_order_line"], "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id.d9f0186f4e": ["model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn"], "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_purchase_order_id.4158032222": ["model.quickbooks_source.stg_quickbooks__purchase_order"], "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_order_status__Open__Closed.a86f736065": ["model.quickbooks_source.stg_quickbooks__purchase_order"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_purchase_order_id__source_relation.1ade9ebad8": ["model.quickbooks_source.stg_quickbooks__purchase_order"], "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id.57df809b80": ["model.quickbooks_source.stg_quickbooks__refund_receipt_line"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation.614411eb40": ["model.quickbooks_source.stg_quickbooks__refund_receipt_line"], "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id.29e8a8216e": ["model.quickbooks_source.stg_quickbooks__refund_receipt"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation.60f976841d": ["model.quickbooks_source.stg_quickbooks__refund_receipt"], "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.9be0667fc3": ["model.quickbooks_source.stg_quickbooks__sales_receipt_line"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation.20e80dcbd5": ["model.quickbooks_source.stg_quickbooks__sales_receipt_line"], "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id.b97c1a238a": ["model.quickbooks_source.stg_quickbooks__sales_receipt"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation.36bdbcffde": ["model.quickbooks_source.stg_quickbooks__sales_receipt"], "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id.c1c80a253c": ["model.quickbooks_source.stg_quickbooks__transfer"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation.bfa4c7345e": ["model.quickbooks_source.stg_quickbooks__transfer"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation.094b35ac4d": ["model.quickbooks_source.stg_quickbooks__vendor_credit_line"], "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id.1275a5ab5a": ["model.quickbooks_source.stg_quickbooks__vendor_credit"], "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id.f509a77195": ["model.quickbooks_source.stg_quickbooks__vendor"], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation.4960d9d21a": ["model.quickbooks_source.stg_quickbooks__vendor"], "source.quickbooks_source.quickbooks.account": [], "source.quickbooks_source.quickbooks.address": [], "source.quickbooks_source.quickbooks.bill_line": [], "source.quickbooks_source.quickbooks.bill_linked_txn": [], "source.quickbooks_source.quickbooks.bill_payment_line": [], "source.quickbooks_source.quickbooks.bill_payment": [], "source.quickbooks_source.quickbooks.bill": [], "source.quickbooks_source.quickbooks.bundle_item": [], "source.quickbooks_source.quickbooks.bundle": [], "source.quickbooks_source.quickbooks.credit_card_payment_txn": [], "source.quickbooks_source.quickbooks.credit_memo_line": [], "source.quickbooks_source.quickbooks.credit_memo": [], "source.quickbooks_source.quickbooks.customer": [], "source.quickbooks_source.quickbooks.department": [], "source.quickbooks_source.quickbooks.deposit_line": [], "source.quickbooks_source.quickbooks.deposit": [], "source.quickbooks_source.quickbooks.estimate": [], "source.quickbooks_source.quickbooks.estimate_line": [], "source.quickbooks_source.quickbooks.invoice_linked_txn": [], "source.quickbooks_source.quickbooks.invoice_line": [], "source.quickbooks_source.quickbooks.invoice_line_bundle": [], "source.quickbooks_source.quickbooks.invoice": [], "source.quickbooks_source.quickbooks.item": [], "source.quickbooks_source.quickbooks.journal_entry_line": [], "source.quickbooks_source.quickbooks.journal_entry": [], "source.quickbooks_source.quickbooks.payment_line": [], "source.quickbooks_source.quickbooks.payment": [], "source.quickbooks_source.quickbooks.purchase_line": [], "source.quickbooks_source.quickbooks.purchase": [], "source.quickbooks_source.quickbooks.purchase_order_line": [], "source.quickbooks_source.quickbooks.purchase_order_linked_txn": [], "source.quickbooks_source.quickbooks.purchase_order": [], "source.quickbooks_source.quickbooks.refund_receipt_line": [], "source.quickbooks_source.quickbooks.refund_receipt": [], "source.quickbooks_source.quickbooks.sales_receipt_line": [], "source.quickbooks_source.quickbooks.sales_receipt": [], "source.quickbooks_source.quickbooks.transfer": [], "source.quickbooks_source.quickbooks.vendor_credit_line": [], "source.quickbooks_source.quickbooks.vendor_credit": [], "source.quickbooks_source.quickbooks.vendor": []}, "child_map": {"seed.quickbooks_source_integration_tests.bill_payment_data": [], "seed.quickbooks_source_integration_tests.bundle_data": [], "seed.quickbooks_source_integration_tests.bill_payment_line_data": [], "seed.quickbooks_source_integration_tests.payment_line_data": [], "seed.quickbooks_source_integration_tests.vendor_data": [], "seed.quickbooks_source_integration_tests.address_data": [], "seed.quickbooks_source_integration_tests.purchase_order_linked_txn_data": [], "seed.quickbooks_source_integration_tests.invoice_line_bundle_data": [], "seed.quickbooks_source_integration_tests.invoice_data": [], "seed.quickbooks_source_integration_tests.payment_data": [], "seed.quickbooks_source_integration_tests.invoice_line_data": [], "seed.quickbooks_source_integration_tests.deposit_line_data": [], "seed.quickbooks_source_integration_tests.estimate_line_data": [], "seed.quickbooks_source_integration_tests.purchase_data": [], "seed.quickbooks_source_integration_tests.refund_receipt_line_data": [], "seed.quickbooks_source_integration_tests.credit_memo_line_data": [], "seed.quickbooks_source_integration_tests.bill_data": [], "seed.quickbooks_source_integration_tests.bill_linked_txn_data": [], "seed.quickbooks_source_integration_tests.vendor_credit_data": [], "seed.quickbooks_source_integration_tests.customer_data": [], "seed.quickbooks_source_integration_tests.estimate_data": [], "seed.quickbooks_source_integration_tests.purchase_line_data": [], "seed.quickbooks_source_integration_tests.journal_entry_line_data": [], "seed.quickbooks_source_integration_tests.journal_entry_data": [], "seed.quickbooks_source_integration_tests.bill_line_data": [], "seed.quickbooks_source_integration_tests.bundle_item_data": [], "seed.quickbooks_source_integration_tests.invoice_linked_txn_data": [], "seed.quickbooks_source_integration_tests.account_data": [], "seed.quickbooks_source_integration_tests.purchase_order_line_data": [], "seed.quickbooks_source_integration_tests.transfer_data": [], "seed.quickbooks_source_integration_tests.purchase_order_data": [], "seed.quickbooks_source_integration_tests.sales_receipt_line_data": [], "seed.quickbooks_source_integration_tests.vendor_credit_line_data": [], "seed.quickbooks_source_integration_tests.credit_card_payment_txn_data": [], "seed.quickbooks_source_integration_tests.credit_memo_data": [], "seed.quickbooks_source_integration_tests.department_data": [], "seed.quickbooks_source_integration_tests.item_data": [], "seed.quickbooks_source_integration_tests.sales_receipt_data": [], "seed.quickbooks_source_integration_tests.deposit_data": [], "seed.quickbooks_source_integration_tests.refund_receipt_data": [], "model.quickbooks_source.stg_quickbooks__journal_entry_line": ["test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.ab661907c3", "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation.0cd1d9f232", "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id.bd89a6f784"], "model.quickbooks_source.stg_quickbooks__transfer": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation.bfa4c7345e", "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id.c1c80a253c"], "model.quickbooks_source.stg_quickbooks__bill_payment_line": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation.0a7e17967c", "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id.1dbb366150"], "model.quickbooks_source.stg_quickbooks__payment_line": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation.25be3cf2e5", "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id.6351e3fe26"], "model.quickbooks_source.stg_quickbooks__vendor": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation.4960d9d21a", "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id.f509a77195"], "model.quickbooks_source.stg_quickbooks__invoice_line": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation.99b74bc327", "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id.0424087a8f"], "model.quickbooks_source.stg_quickbooks__estimate": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation.412260b882", "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id.0331d3c310"], "model.quickbooks_source.stg_quickbooks__credit_memo_line": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation.7a43f0e186", "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id.58953be02b"], "model.quickbooks_source.stg_quickbooks__bundle": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation.e241a21ebc", "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id.382e1dad60"], "model.quickbooks_source.stg_quickbooks__department": [], "model.quickbooks_source.stg_quickbooks__credit_card_payment_txn": [], "model.quickbooks_source.stg_quickbooks__purchase_line": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation.a23c661eb5", "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id.5406fca79c"], "model.quickbooks_source.stg_quickbooks__purchase": ["test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard.7de7edf458", "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation.172340b49e", "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id.fc2090959b"], "model.quickbooks_source.stg_quickbooks__refund_receipt_line": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation.614411eb40", "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id.57df809b80"], "model.quickbooks_source.stg_quickbooks__bundle_item": ["test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id.6d547b8c07"], "model.quickbooks_source.stg_quickbooks__credit_memo": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation.917f24c5ca", "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id.d921d2b152"], "model.quickbooks_source.stg_quickbooks__purchase_order": ["test.quickbooks_source.accepted_values_stg_quickbooks__purchase_order_status__Open__Closed.a86f736065", "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_purchase_order_id__source_relation.1ade9ebad8", "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_purchase_order_id.4158032222"], "model.quickbooks_source.stg_quickbooks__sales_receipt_line": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation.20e80dcbd5", "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.9be0667fc3"], "model.quickbooks_source.stg_quickbooks__sales_receipt": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation.36bdbcffde", "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id.b97c1a238a"], "model.quickbooks_source.stg_quickbooks__purchase_order_line": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_line_purchase_order_id__index__source_relation.e47fe7ae13", "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_line_purchase_order_id.210718c1c7"], "model.quickbooks_source.stg_quickbooks__invoice_linked_txn": ["test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id.c9b9c8f8f4"], "model.quickbooks_source.stg_quickbooks__invoice": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation.ef51800044", "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id.b6d8e1ad7d"], "model.quickbooks_source.stg_quickbooks__bill_payment": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation.4b7aafd630", "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id.908899ccfb"], "model.quickbooks_source.stg_quickbooks__invoice_line_bundle": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation.5370e9fcd0", "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id.cfd59b83a9"], "model.quickbooks_source.stg_quickbooks__account": ["test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue.127506f73f", "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation.864a4b056a", "test.quickbooks_source.not_null_stg_quickbooks__account_account_id.9944488b9d"], "model.quickbooks_source.stg_quickbooks__payment": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation.1998a8282e", "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id.ca2c1ef54f"], "model.quickbooks_source.stg_quickbooks__estimate_line": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation.cc61ab0953", "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id.c060f99b4c"], "model.quickbooks_source.stg_quickbooks__bill_linked_txn": ["test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id.35f96199bd"], "model.quickbooks_source.stg_quickbooks__address": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation.5bc813a014", "test.quickbooks_source.not_null_stg_quickbooks__address_address_id.4f100ae50c"], "model.quickbooks_source.stg_quickbooks__bill": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation.8c08249abf", "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id.ca717958c8"], "model.quickbooks_source.stg_quickbooks__bill_line": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation.73722b1062", "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id.25c5ea7348"], "model.quickbooks_source.stg_quickbooks__journal_entry": ["test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id.39198c4ff2"], "model.quickbooks_source.stg_quickbooks__refund_receipt": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation.60f976841d", "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id.29e8a8216e"], "model.quickbooks_source.stg_quickbooks__deposit_line": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation.443de63985", "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id.d615f463e1"], "model.quickbooks_source.stg_quickbooks__vendor_credit": ["test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id.1275a5ab5a"], "model.quickbooks_source.stg_quickbooks__vendor_credit_line": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation.094b35ac4d"], "model.quickbooks_source.stg_quickbooks__deposit": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation.5574d8e908", "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id.880b8c37b1"], "model.quickbooks_source.stg_quickbooks__item": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation.169465a2a6", "test.quickbooks_source.not_null_stg_quickbooks__item_item_id.da906d8fb9"], "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn": ["test.quickbooks_source.not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id.d9f0186f4e"], "model.quickbooks_source.stg_quickbooks__customer": ["test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation.61cc22a568", "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id.98232a9723"], "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp": ["model.quickbooks_source.stg_quickbooks__vendor_credit"], "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp": ["model.quickbooks_source.stg_quickbooks__refund_receipt_line"], "model.quickbooks_source.stg_quickbooks__estimate_line_tmp": ["model.quickbooks_source.stg_quickbooks__estimate_line"], "model.quickbooks_source.stg_quickbooks__purchase_order_line_tmp": ["model.quickbooks_source.stg_quickbooks__purchase_order_line"], "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp": ["model.quickbooks_source.stg_quickbooks__credit_memo_line"], "model.quickbooks_source.stg_quickbooks__journal_entry_tmp": ["model.quickbooks_source.stg_quickbooks__journal_entry"], "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp": ["model.quickbooks_source.stg_quickbooks__invoice_line_bundle"], "model.quickbooks_source.stg_quickbooks__payment_tmp": ["model.quickbooks_source.stg_quickbooks__payment"], "model.quickbooks_source.stg_quickbooks__invoice_line_tmp": ["model.quickbooks_source.stg_quickbooks__invoice_line"], "model.quickbooks_source.stg_quickbooks__deposit_line_tmp": ["model.quickbooks_source.stg_quickbooks__deposit_line"], "model.quickbooks_source.stg_quickbooks__customer_tmp": ["model.quickbooks_source.stg_quickbooks__customer"], "model.quickbooks_source.stg_quickbooks__bill_line_tmp": ["model.quickbooks_source.stg_quickbooks__bill_line"], "model.quickbooks_source.stg_quickbooks__item_tmp": ["model.quickbooks_source.stg_quickbooks__item"], "model.quickbooks_source.stg_quickbooks__account_tmp": ["model.quickbooks_source.stg_quickbooks__account"], "model.quickbooks_source.stg_quickbooks__credit_card_payment_txn_tmp": ["model.quickbooks_source.stg_quickbooks__credit_card_payment_txn"], "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp": ["model.quickbooks_source.stg_quickbooks__vendor_credit_line"], "model.quickbooks_source.stg_quickbooks__department_tmp": ["model.quickbooks_source.stg_quickbooks__department"], "model.quickbooks_source.stg_quickbooks__bundle_tmp": ["model.quickbooks_source.stg_quickbooks__bundle"], "model.quickbooks_source.stg_quickbooks__bundle_item_tmp": ["model.quickbooks_source.stg_quickbooks__bundle_item"], "model.quickbooks_source.stg_quickbooks__purchase_order_tmp": ["model.quickbooks_source.stg_quickbooks__purchase_order"], "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp": ["model.quickbooks_source.stg_quickbooks__bill_payment_line"], "model.quickbooks_source.stg_quickbooks__estimate_tmp": ["model.quickbooks_source.stg_quickbooks__estimate"], "model.quickbooks_source.stg_quickbooks__purchase_tmp": ["model.quickbooks_source.stg_quickbooks__purchase"], "model.quickbooks_source.stg_quickbooks__credit_memo_tmp": ["model.quickbooks_source.stg_quickbooks__credit_memo"], "model.quickbooks_source.stg_quickbooks__bill_tmp": ["model.quickbooks_source.stg_quickbooks__bill"], "model.quickbooks_source.stg_quickbooks__transfer_tmp": ["model.quickbooks_source.stg_quickbooks__transfer"], "model.quickbooks_source.stg_quickbooks__vendor_tmp": ["model.quickbooks_source.stg_quickbooks__vendor"], "model.quickbooks_source.stg_quickbooks__purchase_line_tmp": ["model.quickbooks_source.stg_quickbooks__purchase_line"], "model.quickbooks_source.stg_quickbooks__address_tmp": ["model.quickbooks_source.stg_quickbooks__address"], "model.quickbooks_source.stg_quickbooks__payment_line_tmp": ["model.quickbooks_source.stg_quickbooks__payment_line"], "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp": ["model.quickbooks_source.stg_quickbooks__refund_receipt"], "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp": ["model.quickbooks_source.stg_quickbooks__sales_receipt"], "model.quickbooks_source.stg_quickbooks__bill_payment_tmp": ["model.quickbooks_source.stg_quickbooks__bill_payment"], "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp": ["model.quickbooks_source.stg_quickbooks__journal_entry_line"], "model.quickbooks_source.stg_quickbooks__deposit_tmp": ["model.quickbooks_source.stg_quickbooks__deposit"], "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp": ["model.quickbooks_source.stg_quickbooks__bill_linked_txn"], "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp": ["model.quickbooks_source.stg_quickbooks__invoice_linked_txn"], "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp": ["model.quickbooks_source.stg_quickbooks__sales_receipt_line"], "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn_tmp": ["model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn"], "model.quickbooks_source.stg_quickbooks__invoice_tmp": ["model.quickbooks_source.stg_quickbooks__invoice"], "test.quickbooks_source.not_null_stg_quickbooks__account_account_id.9944488b9d": [], "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue.127506f73f": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation.864a4b056a": [], "test.quickbooks_source.not_null_stg_quickbooks__address_address_id.4f100ae50c": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation.5bc813a014": [], "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id.25c5ea7348": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation.73722b1062": [], "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id.35f96199bd": [], "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id.1dbb366150": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation.0a7e17967c": [], "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id.908899ccfb": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation.4b7aafd630": [], "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id.ca717958c8": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation.8c08249abf": [], "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id.6d547b8c07": [], "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id.382e1dad60": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation.e241a21ebc": [], "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id.58953be02b": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation.7a43f0e186": [], "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id.d921d2b152": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation.917f24c5ca": [], "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id.98232a9723": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation.61cc22a568": [], "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id.d615f463e1": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation.443de63985": [], "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id.880b8c37b1": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation.5574d8e908": [], "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id.0331d3c310": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation.412260b882": [], "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id.c060f99b4c": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation.cc61ab0953": [], "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id.c9b9c8f8f4": [], "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id.0424087a8f": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation.99b74bc327": [], "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id.cfd59b83a9": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation.5370e9fcd0": [], "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id.b6d8e1ad7d": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation.ef51800044": [], "test.quickbooks_source.not_null_stg_quickbooks__item_item_id.da906d8fb9": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation.169465a2a6": [], "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id.bd89a6f784": [], "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.ab661907c3": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation.0cd1d9f232": [], "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id.39198c4ff2": [], "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id.6351e3fe26": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation.25be3cf2e5": [], "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id.ca2c1ef54f": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation.1998a8282e": [], "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id.5406fca79c": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation.a23c661eb5": [], "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id.fc2090959b": [], "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard.7de7edf458": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation.172340b49e": [], "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_line_purchase_order_id.210718c1c7": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_line_purchase_order_id__index__source_relation.e47fe7ae13": [], "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id.d9f0186f4e": [], "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_purchase_order_id.4158032222": [], "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_order_status__Open__Closed.a86f736065": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_purchase_order_id__source_relation.1ade9ebad8": [], "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id.57df809b80": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation.614411eb40": [], "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id.29e8a8216e": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation.60f976841d": [], "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.9be0667fc3": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation.20e80dcbd5": [], "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id.b97c1a238a": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation.36bdbcffde": [], "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id.c1c80a253c": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation.bfa4c7345e": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation.094b35ac4d": [], "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id.1275a5ab5a": [], "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id.f509a77195": [], "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation.4960d9d21a": [], "source.quickbooks_source.quickbooks.account": ["model.quickbooks_source.stg_quickbooks__account_tmp"], "source.quickbooks_source.quickbooks.address": ["model.quickbooks_source.stg_quickbooks__address_tmp"], "source.quickbooks_source.quickbooks.bill_line": ["model.quickbooks_source.stg_quickbooks__bill_line_tmp"], "source.quickbooks_source.quickbooks.bill_linked_txn": ["model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp"], "source.quickbooks_source.quickbooks.bill_payment_line": ["model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp"], "source.quickbooks_source.quickbooks.bill_payment": ["model.quickbooks_source.stg_quickbooks__bill_payment_tmp"], "source.quickbooks_source.quickbooks.bill": ["model.quickbooks_source.stg_quickbooks__bill_tmp"], "source.quickbooks_source.quickbooks.bundle_item": ["model.quickbooks_source.stg_quickbooks__bundle_item_tmp"], "source.quickbooks_source.quickbooks.bundle": ["model.quickbooks_source.stg_quickbooks__bundle_tmp"], "source.quickbooks_source.quickbooks.credit_card_payment_txn": ["model.quickbooks_source.stg_quickbooks__credit_card_payment_txn_tmp"], "source.quickbooks_source.quickbooks.credit_memo_line": ["model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp"], "source.quickbooks_source.quickbooks.credit_memo": ["model.quickbooks_source.stg_quickbooks__credit_memo_tmp"], "source.quickbooks_source.quickbooks.customer": ["model.quickbooks_source.stg_quickbooks__customer_tmp"], "source.quickbooks_source.quickbooks.department": ["model.quickbooks_source.stg_quickbooks__department_tmp"], "source.quickbooks_source.quickbooks.deposit_line": ["model.quickbooks_source.stg_quickbooks__deposit_line_tmp"], "source.quickbooks_source.quickbooks.deposit": ["model.quickbooks_source.stg_quickbooks__deposit_tmp"], "source.quickbooks_source.quickbooks.estimate": ["model.quickbooks_source.stg_quickbooks__estimate_tmp"], "source.quickbooks_source.quickbooks.estimate_line": ["model.quickbooks_source.stg_quickbooks__estimate_line_tmp"], "source.quickbooks_source.quickbooks.invoice_linked_txn": ["model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp"], "source.quickbooks_source.quickbooks.invoice_line": ["model.quickbooks_source.stg_quickbooks__invoice_line_tmp"], "source.quickbooks_source.quickbooks.invoice_line_bundle": ["model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp"], "source.quickbooks_source.quickbooks.invoice": ["model.quickbooks_source.stg_quickbooks__invoice_tmp"], "source.quickbooks_source.quickbooks.item": ["model.quickbooks_source.stg_quickbooks__item_tmp"], "source.quickbooks_source.quickbooks.journal_entry_line": ["model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp"], "source.quickbooks_source.quickbooks.journal_entry": ["model.quickbooks_source.stg_quickbooks__journal_entry_tmp"], "source.quickbooks_source.quickbooks.payment_line": ["model.quickbooks_source.stg_quickbooks__payment_line_tmp"], "source.quickbooks_source.quickbooks.payment": ["model.quickbooks_source.stg_quickbooks__payment_tmp"], "source.quickbooks_source.quickbooks.purchase_line": ["model.quickbooks_source.stg_quickbooks__purchase_line_tmp"], "source.quickbooks_source.quickbooks.purchase": ["model.quickbooks_source.stg_quickbooks__purchase_tmp"], "source.quickbooks_source.quickbooks.purchase_order_line": ["model.quickbooks_source.stg_quickbooks__purchase_order_line_tmp"], "source.quickbooks_source.quickbooks.purchase_order_linked_txn": ["model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn_tmp"], "source.quickbooks_source.quickbooks.purchase_order": ["model.quickbooks_source.stg_quickbooks__purchase_order_tmp"], "source.quickbooks_source.quickbooks.refund_receipt_line": ["model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp"], "source.quickbooks_source.quickbooks.refund_receipt": ["model.quickbooks_source.stg_quickbooks__refund_receipt_tmp"], "source.quickbooks_source.quickbooks.sales_receipt_line": ["model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp"], "source.quickbooks_source.quickbooks.sales_receipt": ["model.quickbooks_source.stg_quickbooks__sales_receipt_tmp"], "source.quickbooks_source.quickbooks.transfer": ["model.quickbooks_source.stg_quickbooks__transfer_tmp"], "source.quickbooks_source.quickbooks.vendor_credit_line": ["model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp"], "source.quickbooks_source.quickbooks.vendor_credit": ["model.quickbooks_source.stg_quickbooks__vendor_credit_tmp"], "source.quickbooks_source.quickbooks.vendor": ["model.quickbooks_source.stg_quickbooks__vendor_tmp"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}