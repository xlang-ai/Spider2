{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.16", "generated_at": "2024-07-17T22:39:51.869179Z", "invocation_id": "0488b465-58f3-4156-b397-f86f039c8970", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.182742Z", "completed_at": "2024-07-17T22:39:37.216138Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.218581Z", "completed_at": "2024-07-17T22:39:37.218624Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06614303588867188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"address_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.158004Z", "completed_at": "2024-07-17T22:39:37.216589Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.218887Z", "completed_at": "2024-07-17T22:39:37.218890Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06768918037414551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"account_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.212213Z", "completed_at": "2024-07-17T22:39:37.216972Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.219160Z", "completed_at": "2024-07-17T22:39:37.219165Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06535506248474121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_linked_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.208502Z", "completed_at": "2024-07-17T22:39:37.217227Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.219559Z", "completed_at": "2024-07-17T22:39:37.219564Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06691789627075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.227900Z", "completed_at": "2024-07-17T22:39:37.247294Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.249821Z", "completed_at": "2024-07-17T22:39:37.249830Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02722001075744629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_payment_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.231826Z", "completed_at": "2024-07-17T22:39:37.247587Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.250188Z", "completed_at": "2024-07-17T22:39:37.250192Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027272939682006836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_payment_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.239711Z", "completed_at": "2024-07-17T22:39:37.248004Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.250469Z", "completed_at": "2024-07-17T22:39:37.250473Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02701592445373535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bundle_item_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.235557Z", "completed_at": "2024-07-17T22:39:37.248366Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.250735Z", "completed_at": "2024-07-17T22:39:37.250738Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02788400650024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bill_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.264622Z", "completed_at": "2024-07-17T22:39:37.270620Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.272424Z", "completed_at": "2024-07-17T22:39:37.272430Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017372846603393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"credit_memo_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.258181Z", "completed_at": "2024-07-17T22:39:37.270942Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.272903Z", "completed_at": "2024-07-17T22:39:37.272905Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019154071807861328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"bundle_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.261741Z", "completed_at": "2024-07-17T22:39:37.271633Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.273898Z", "completed_at": "2024-07-17T22:39:37.273902Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019726037979125977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_card_payment_txn_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_card_payment_txn variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"credit_card_payment_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_card_payment_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.267214Z", "completed_at": "2024-07-17T22:39:37.272126Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.274699Z", "completed_at": "2024-07-17T22:39:37.274718Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01958608627319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"credit_memo_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.279622Z", "completed_at": "2024-07-17T22:39:37.294466Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.296446Z", "completed_at": "2024-07-17T22:39:37.296453Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021914243698120117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"customer_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.283140Z", "completed_at": "2024-07-17T22:39:37.295012Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.297048Z", "completed_at": "2024-07-17T22:39:37.297056Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023707151412963867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"department_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__department_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.291180Z", "completed_at": "2024-07-17T22:39:37.295664Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.298854Z", "completed_at": "2024-07-17T22:39:37.298860Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023395061492919922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"deposit_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.287711Z", "completed_at": "2024-07-17T22:39:37.296164Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.301659Z", "completed_at": "2024-07-17T22:39:37.301676Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02497410774230957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"deposit_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.307179Z", "completed_at": "2024-07-17T22:39:37.320590Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.322502Z", "completed_at": "2024-07-17T22:39:37.322508Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01974797248840332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"estimate_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.310614Z", "completed_at": "2024-07-17T22:39:37.321121Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.322760Z", "completed_at": "2024-07-17T22:39:37.322763Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019421100616455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"estimate_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.314029Z", "completed_at": "2024-07-17T22:39:37.321973Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.324434Z", "completed_at": "2024-07-17T22:39:37.324440Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019752025604248047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_line_bundle_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.317898Z", "completed_at": "2024-07-17T22:39:37.322233Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.324679Z", "completed_at": "2024-07-17T22:39:37.324682Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01942610740661621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.328738Z", "completed_at": "2024-07-17T22:39:37.341647Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.343325Z", "completed_at": "2024-07-17T22:39:37.343330Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018011093139648438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_linked_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.331833Z", "completed_at": "2024-07-17T22:39:37.342107Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.343583Z", "completed_at": "2024-07-17T22:39:37.343586Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01812577247619629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"invoice_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.335251Z", "completed_at": "2024-07-17T22:39:37.342840Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.345237Z", "completed_at": "2024-07-17T22:39:37.345240Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018413066864013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"item_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.337747Z", "completed_at": "2024-07-17T22:39:37.343089Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.345478Z", "completed_at": "2024-07-17T22:39:37.345481Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018557071685791016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"journal_entry_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.352430Z", "completed_at": "2024-07-17T22:39:37.361477Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.362903Z", "completed_at": "2024-07-17T22:39:37.362907Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016332149505615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"payment_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.349631Z", "completed_at": "2024-07-17T22:39:37.361730Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.363563Z", "completed_at": "2024-07-17T22:39:37.363566Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017628908157348633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"journal_entry_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.355401Z", "completed_at": "2024-07-17T22:39:37.362230Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.364300Z", "completed_at": "2024-07-17T22:39:37.364303Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016860008239746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"payment_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.358543Z", "completed_at": "2024-07-17T22:39:37.362441Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.364542Z", "completed_at": "2024-07-17T22:39:37.364545Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017075061798095703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.369431Z", "completed_at": "2024-07-17T22:39:37.382163Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.382766Z", "completed_at": "2024-07-17T22:39:37.382771Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016124248504638672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.376911Z", "completed_at": "2024-07-17T22:39:37.384415Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.389101Z", "completed_at": "2024-07-17T22:39:37.389107Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021304845809936523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.379507Z", "completed_at": "2024-07-17T22:39:37.388746Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.390550Z", "completed_at": "2024-07-17T22:39:37.390555Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02293086051940918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.373051Z", "completed_at": "2024-07-17T22:39:37.390239Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.392722Z", "completed_at": "2024-07-17T22:39:37.392725Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.025851964950561523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"purchase_order_linked_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.385780Z", "completed_at": "2024-07-17T22:39:37.391138Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.393463Z", "completed_at": "2024-07-17T22:39:37.393466Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013647079467773438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"refund_receipt_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.394522Z", "completed_at": "2024-07-17T22:39:37.403409Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.407988Z", "completed_at": "2024-07-17T22:39:37.407994Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019364118576049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"refund_receipt_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.399389Z", "completed_at": "2024-07-17T22:39:37.407628Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.411861Z", "completed_at": "2024-07-17T22:39:37.411865Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018914222717285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"sales_receipt_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.404746Z", "completed_at": "2024-07-17T22:39:37.412131Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.414375Z", "completed_at": "2024-07-17T22:39:37.414379Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016697168350219727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"sales_receipt_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.408243Z", "completed_at": "2024-07-17T22:39:37.412648Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.414862Z", "completed_at": "2024-07-17T22:39:37.414865Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015424013137817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"transfer_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.416011Z", "completed_at": "2024-07-17T22:39:37.423230Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.425289Z", "completed_at": "2024-07-17T22:39:37.425297Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01774120330810547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_credit_line_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.420525Z", "completed_at": "2024-07-17T22:39:37.425577Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.432692Z", "completed_at": "2024-07-17T22:39:37.432696Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018857955932617188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_credit_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.429626Z", "completed_at": "2024-07-17T22:39:37.430755Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.433206Z", "completed_at": "2024-07-17T22:39:37.433209Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010652780532836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.425825Z", "completed_at": "2024-07-17T22:39:37.432949Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.435598Z", "completed_at": "2024-07-17T22:39:37.435603Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01450800895690918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_source_integrations_tests\".\"vendor_data\"", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.436146Z", "completed_at": "2024-07-17T22:39:37.437247Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.439729Z", "completed_at": "2024-07-17T22:39:37.439733Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01004481315612793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.439979Z", "completed_at": "2024-07-17T22:39:37.441045Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.444946Z", "completed_at": "2024-07-17T22:39:37.444950Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010113954544067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.bill_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.441868Z", "completed_at": "2024-07-17T22:39:37.442960Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.446639Z", "completed_at": "2024-07-17T22:39:37.446648Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010095834732055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.bill_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.445244Z", "completed_at": "2024-07-17T22:39:37.446351Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.449512Z", "completed_at": "2024-07-17T22:39:37.449520Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012021303176879883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.bill_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.450180Z", "completed_at": "2024-07-17T22:39:37.452325Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.455254Z", "completed_at": "2024-07-17T22:39:37.455261Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08303689956665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.bill_payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.455584Z", "completed_at": "2024-07-17T22:39:37.527315Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.532675Z", "completed_at": "2024-07-17T22:39:37.532686Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0841672420501709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.bill_payment_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.528518Z", "completed_at": "2024-07-17T22:39:37.529564Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.536046Z", "completed_at": "2024-07-17T22:39:37.536052Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08376479148864746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.bundle_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.533066Z", "completed_at": "2024-07-17T22:39:37.534119Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.538279Z", "completed_at": "2024-07-17T22:39:37.538282Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01322031021118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.bundle_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.539240Z", "completed_at": "2024-07-17T22:39:37.540285Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.543218Z", "completed_at": "2024-07-17T22:39:37.543223Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011183738708496094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.credit_card_payment_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.543492Z", "completed_at": "2024-07-17T22:39:37.544607Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.548796Z", "completed_at": "2024-07-17T22:39:37.548800Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010355949401855469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.credit_memo_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.545299Z", "completed_at": "2024-07-17T22:39:37.547040Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.550239Z", "completed_at": "2024-07-17T22:39:37.550242Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009942054748535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.credit_memo_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.549051Z", "completed_at": "2024-07-17T22:39:37.549982Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.552241Z", "completed_at": "2024-07-17T22:39:37.552248Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009738922119140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.552854Z", "completed_at": "2024-07-17T22:39:37.553875Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.556234Z", "completed_at": "2024-07-17T22:39:37.556238Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008929014205932617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.department_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.556486Z", "completed_at": "2024-07-17T22:39:37.557471Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.560738Z", "completed_at": "2024-07-17T22:39:37.560744Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009606122970581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.deposit_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.558129Z", "completed_at": "2024-07-17T22:39:37.558992Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.562919Z", "completed_at": "2024-07-17T22:39:37.562924Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009500980377197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.deposit_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.561186Z", "completed_at": "2024-07-17T22:39:37.562539Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.565135Z", "completed_at": "2024-07-17T22:39:37.565138Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010756969451904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.estimate_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.565609Z", "completed_at": "2024-07-17T22:39:37.567677Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.570035Z", "completed_at": "2024-07-17T22:39:37.570039Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010153055191040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.estimate_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.570296Z", "completed_at": "2024-07-17T22:39:37.571318Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.574558Z", "completed_at": "2024-07-17T22:39:37.574564Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008960962295532227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.invoice_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.571967Z", "completed_at": "2024-07-17T22:39:37.572860Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.576159Z", "completed_at": "2024-07-17T22:39:37.576166Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008845090866088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.invoice_line_bundle_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.574891Z", "completed_at": "2024-07-17T22:39:37.575892Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.578316Z", "completed_at": "2024-07-17T22:39:37.578319Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008844852447509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.invoice_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.578777Z", "completed_at": "2024-07-17T22:39:37.579695Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.581966Z", "completed_at": "2024-07-17T22:39:37.581970Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009505033493041992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.invoice_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.582187Z", "completed_at": "2024-07-17T22:39:37.583164Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.587248Z", "completed_at": "2024-07-17T22:39:37.587253Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009602069854736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.584651Z", "completed_at": "2024-07-17T22:39:37.585478Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.588817Z", "completed_at": "2024-07-17T22:39:37.588820Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00945425033569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.journal_entry_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.587523Z", "completed_at": "2024-07-17T22:39:37.588554Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.590841Z", "completed_at": "2024-07-17T22:39:37.590844Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009791135787963867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.journal_entry_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.591365Z", "completed_at": "2024-07-17T22:39:37.592369Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.594745Z", "completed_at": "2024-07-17T22:39:37.594748Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009087800979614258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.595005Z", "completed_at": "2024-07-17T22:39:37.596045Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.599190Z", "completed_at": "2024-07-17T22:39:37.599192Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009842872619628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.payment_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.596665Z", "completed_at": "2024-07-17T22:39:37.597698Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.601725Z", "completed_at": "2024-07-17T22:39:37.601729Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009674072265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.purchase_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.599458Z", "completed_at": "2024-07-17T22:39:37.601410Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.603859Z", "completed_at": "2024-07-17T22:39:37.603862Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009852886199951172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.purchase_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.604325Z", "completed_at": "2024-07-17T22:39:37.605380Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.607518Z", "completed_at": "2024-07-17T22:39:37.607521Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008382081985473633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.purchase_order_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.607734Z", "completed_at": "2024-07-17T22:39:37.608625Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.611389Z", "completed_at": "2024-07-17T22:39:37.611391Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008363962173461914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.purchase_order_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.609165Z", "completed_at": "2024-07-17T22:39:37.609992Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.613131Z", "completed_at": "2024-07-17T22:39:37.613137Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008313179016113281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.purchase_order_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.611674Z", "completed_at": "2024-07-17T22:39:37.612781Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.615577Z", "completed_at": "2024-07-17T22:39:37.615580Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009048938751220703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.refund_receipt_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.616059Z", "completed_at": "2024-07-17T22:39:37.617051Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.619790Z", "completed_at": "2024-07-17T22:39:37.619794Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010917186737060547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.refund_receipt_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.620138Z", "completed_at": "2024-07-17T22:39:37.622119Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.625785Z", "completed_at": "2024-07-17T22:39:37.625790Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010920047760009766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.sales_receipt_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.622936Z", "completed_at": "2024-07-17T22:39:37.623885Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.627339Z", "completed_at": "2024-07-17T22:39:37.627342Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010707855224609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.sales_receipt_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.626032Z", "completed_at": "2024-07-17T22:39:37.627090Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.629912Z", "completed_at": "2024-07-17T22:39:37.629917Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00968313217163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.transfer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.630390Z", "completed_at": "2024-07-17T22:39:37.631401Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.633546Z", "completed_at": "2024-07-17T22:39:37.633549Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009296894073486328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.vendor_credit_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.633762Z", "completed_at": "2024-07-17T22:39:37.634689Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.638003Z", "completed_at": "2024-07-17T22:39:37.638006Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014345169067382812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.vendor_credit_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.635449Z", "completed_at": "2024-07-17T22:39:37.636472Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:37.644591Z", "completed_at": "2024-07-17T22:39:37.644595Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014059782028198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_source_integration_tests.vendor_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.638251Z", "completed_at": "2024-07-17T22:39:38.982977Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:38.984824Z", "completed_at": "2024-07-17T22:39:38.984827Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4492998123168945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_sub_division_code\n    \n as \n    \n    country_sub_division_code\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    line_1\n    \n as \n    \n    line_1\n    \n, \n    \n    \n    line_2\n    \n as \n    \n    line_2\n    \n, \n    \n    \n    line_3\n    \n as \n    \n    line_3\n    \n, \n    \n    \n    line_4\n    \n as \n    \n    line_4\n    \n, \n    \n    \n    line_5\n    \n as \n    \n    line_5\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    postal_code\n    \n as \n    \n    postal_code\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as address_id,\n        city,\n        country,\n        line_1 as address_1,\n        line_2 as address_2,\n        postal_code,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.653823Z", "completed_at": "2024-07-17T22:39:38.983566Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:38.985493Z", "completed_at": "2024-07-17T22:39:38.985496Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.432755947113037, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.647849Z", "completed_at": "2024-07-17T22:39:38.982426Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:38.984332Z", "completed_at": "2024-07-17T22:39:38.984338Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4399619102478027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account", "compiled": true, "compiled_code": "with base as (\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account_tmp\"\n\n),\n\naccount as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    account_sub_type\n    \n as \n    \n    account_sub_type\n    \n, \n    \n    \n    account_type\n    \n as \n    \n    account_type\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_sub_accounts\n    \n as \n    \n    balance_with_sub_accounts\n    \n, \n    \n    \n    classification\n    \n as \n    \n    classification\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    sub_account\n    \n as \n    \n    sub_account\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as account_id,\n        cast(account_number as TEXT) as account_number,\n        sub_account as is_sub_account,\n        cast(parent_account_id as TEXT) as parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        classification,\n        balance,\n        balance_with_sub_accounts,\n        active as is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n    from account\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:37.658449Z", "completed_at": "2024-07-17T22:39:38.984067Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:38.985946Z", "completed_at": "2024-07-17T22:39:38.985949Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4522459506988525, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        item_expense_billable_status,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:39.089601Z", "completed_at": "2024-07-17T22:39:40.340055Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:40.340671Z", "completed_at": "2024-07-17T22:39:40.340677Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3813130855560303, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_credit_card_id\n    \n as \n    \n    bill_payment_credit_card_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    linked_bill_payment_id\n    \n as \n    \n    linked_bill_payment_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        index,\n        amount,\n        cast(bill_id as TEXT) as bill_id,\n        deposit_id,\n        expense_id,\n        journal_entry_id,\n        linked_bill_payment_id,\n        vendor_credit_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:39.107346Z", "completed_at": "2024-07-17T22:39:40.340939Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:40.342174Z", "completed_at": "2024-07-17T22:39:40.342177Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3734369277954102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n \nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date_at, \n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        exchange_rate,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        total_amount,\n        cast(vendor_id as TEXT) as vendor_id,\n        private_note,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:39.094381Z", "completed_at": "2024-07-17T22:39:40.341936Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:40.342821Z", "completed_at": "2024-07-17T22:39:40.342824Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3945059776306152, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    check_bank_account_id\n    \n as \n    \n    check_bank_account_id\n    \n, \n    \n    \n    check_print_status\n    \n as \n    \n    check_print_status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_account_id\n    \n as \n    \n    credit_card_account_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    pay_type\n    \n as \n    \n    pay_type\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_bill_payment\n    \n as \n    \n    process_bill_payment\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_payment_id,\n        cast(check_bank_account_id as TEXT) as check_bank_account_id,\n        check_print_status,\n        cast(credit_card_account_id as TEXT) as credit_card_account_id,\n        exchange_rate,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        pay_type,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:39.099257Z", "completed_at": "2024-07-17T22:39:40.492635Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:40.543633Z", "completed_at": "2024-07-17T22:39:40.543641Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.600870132446289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    item_quantity\n    \n as \n    \n    item_quantity\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bundle_id as TEXT) as bundle_id,\n        cast(item_id as TEXT) as item_id,\n        item_quantity,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:40.543956Z", "completed_at": "2024-07-17T22:39:41.736136Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:41.736911Z", "completed_at": "2024-07-17T22:39:41.736921Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.372648000717163, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_card_payment_txn", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice_bundle variable within your dbt_project.yml file to True.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_card_payment_txn_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_account_id\n    \n as \n    \n    credit_card_account_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as credit_card_payment_id,\n        amount,\n        bank_account_id,\n        credit_card_account_id,\n        created_at,\n        updated_at,\n        currency_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        row_number() over (partition by id, updated_at, source_relation order by source_relation, updated_at desc) = 1 as is_most_recent_record,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_card_payment_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:40.493586Z", "completed_at": "2024-07-17T22:39:41.736640Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:41.737616Z", "completed_at": "2024-07-17T22:39:41.737619Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3781282901763916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(credit_memo_id as TEXT) as credit_memo_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:40.499991Z", "completed_at": "2024-07-17T22:39:41.902689Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:41.903395Z", "completed_at": "2024-07-17T22:39:41.903400Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.542353868484497, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    print_grouped_items\n    \n as \n    \n    print_grouped_items\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bundle_id,\n        created_at,\n        active as is_active,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n\n    from fields\n)\n\nselect * from final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:40.692560Z", "completed_at": "2024-07-17T22:39:42.036011Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:42.041563Z", "completed_at": "2024-07-17T22:39:42.041569Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4762921333312988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remaining_credit\n    \n as \n    \n    remaining_credit\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as credit_memo_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(class_id as TEXT) as class_id,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:41.886797Z", "completed_at": "2024-07-17T22:39:42.950164Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:42.950723Z", "completed_at": "2024-07-17T22:39:42.950737Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2048170566558838, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__department_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_department_id\n    \n as \n    \n    parent_department_id\n    \n, \n    \n    \n    sub_department\n    \n as \n    \n    sub_department\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as department_id,\n        active as is_active,\n        created_at,\n        updated_at,\n        fully_qualified_name,\n        name,\n        sub_department as is_sub_department,\n        parent_department_id,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__department\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:41.877223Z", "completed_at": "2024-07-17T22:39:43.130555Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:43.131051Z", "completed_at": "2024-07-17T22:39:43.131061Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3876290321350098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone_number\n    \n as \n    \n    alternate_phone_number\n    \n, \n    \n    \n    ar_account_id\n    \n as \n    \n    ar_account_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_jobs\n    \n as \n    \n    balance_with_jobs\n    \n, \n    \n    \n    bill_address_id\n    \n as \n    \n    bill_address_id\n    \n, \n    \n    \n    bill_with_parent\n    \n as \n    \n    bill_with_parent\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    default_tax_code_id\n    \n as \n    \n    default_tax_code_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    job\n    \n as \n    \n    job\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_number\n    \n as \n    \n    mobile_number\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    open_balance_date\n    \n as \n    \n    open_balance_date\n    \n, \n    \n    \n    parent_customer_id\n    \n as \n    \n    parent_customer_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    preferred_delivery_method\n    \n as \n    \n    preferred_delivery_method\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    resale_number\n    \n as \n    \n    resale_number\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_exemption_reason_id\n    \n as \n    \n    tax_exemption_reason_id\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    website\n    \n as \n    \n    website\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as customer_id,\n        active as is_active,\n        balance,\n        balance_with_jobs,\n        bill_with_parent,\n        company_name,\n        fully_qualified_name,\n        currency_id,\n        display_name,\n        website,\n        taxable,\n        source_relation\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:42.176886Z", "completed_at": "2024-07-17T22:39:43.315434Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:43.315945Z", "completed_at": "2024-07-17T22:39:43.315951Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.262281894683838, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    deposit_account_id\n    \n as \n    \n    deposit_account_id\n    \n, \n    \n    \n    deposit_check_number\n    \n as \n    \n    deposit_check_number\n    \n, \n    \n    \n    deposit_class_id\n    \n as \n    \n    deposit_class_id\n    \n, \n    \n    \n    deposit_customer_id\n    \n as \n    \n    deposit_customer_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    deposit_payment_method_id\n    \n as \n    \n    deposit_payment_method_id\n    \n, \n    \n    \n    deposit_tax_applicable_on\n    \n as \n    \n    deposit_tax_applicable_on\n    \n, \n    \n    \n    deposit_tax_code_id\n    \n as \n    \n    deposit_tax_code_id\n    \n, \n    \n    \n    deposit_transaction_type\n    \n as \n    \n    deposit_transaction_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n, \n    \n    \n    refund_receipt_id\n    \n as \n    \n    refund_receipt_id\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(deposit_id as TEXT) as deposit_id,\n        index,\n        amount,\n        description,\n        cast(deposit_account_id as TEXT) as deposit_account_id,\n        cast(deposit_class_id as TEXT) as deposit_class_id,\n        cast(deposit_customer_id as TEXT) as deposit_customer_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:42.036686Z", "completed_at": "2024-07-17T22:39:43.316395Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:43.316853Z", "completed_at": "2024-07-17T22:39:43.316856Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4186701774597168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    cash_back_account_id\n    \n as \n    \n    cash_back_account_id\n    \n, \n    \n    \n    cash_back_amount\n    \n as \n    \n    cash_back_amount\n    \n, \n    \n    \n    cash_back_memo\n    \n as \n    \n    cash_back_memo\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as deposit_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        total_amount,\n        home_total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:43.087667Z", "completed_at": "2024-07-17T22:39:44.372285Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:44.372831Z", "completed_at": "2024-07-17T22:39:44.372837Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4313240051269531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        description,\n        discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_item_id,\n        sales_item_quantity,\n        item_id,\n        quantity,\n        account_id,\n        amount,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:43.268970Z", "completed_at": "2024-07-17T22:39:44.405960Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:44.406432Z", "completed_at": "2024-07-17T22:39:44.406436Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2737979888916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_tmp\"\n\n),\n \nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepted_by\n    \n as \n    \n    accepted_by\n    \n, \n    \n    \n    accepted_date\n    \n as \n    \n    accepted_date\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    expiration_date\n    \n as \n    \n    expiration_date\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as estimate_id,\n        cast(class_id as TEXT) as class_id,\n        created_at,\n        currency_id,\n        customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        exchange_rate,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:43.440727Z", "completed_at": "2024-07-17T22:39:44.597400Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:44.597871Z", "completed_at": "2024-07-17T22:39:44.597876Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2506029605865479, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_amount\n    \n as \n    \n    discount_amount\n    \n, \n    \n    \n    discount_rate\n    \n as \n    \n    discount_rate\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_line_index\n    \n as \n    \n    invoice_line_index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    line_num\n    \n as \n    \n    line_num\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    service_date\n    \n as \n    \n    service_date\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        cast(class_id as TEXT) as class_id,\n        description,\n        amount,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(item_id as TEXT) as item_id,\n        quantity,\n        sales_item_quantity,\n        cast(account_id as TEXT) as account_id,\n        unit_price,\n        invoice_line_index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:43.456259Z", "completed_at": "2024-07-17T22:39:44.653727Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:44.654193Z", "completed_at": "2024-07-17T22:39:44.654197Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.321357011795044, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_tmp\"\n\n),\n\nfields as ( \n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        detail_type,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        quantity,\n        bundle_quantity,\n        cast(bundle_id as TEXT) as bundle_id,\n        cast(account_id as TEXT) as account_id,\n        cast(item_id as TEXT) as item_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:44.525453Z", "completed_at": "2024-07-17T22:39:45.851227Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:45.852069Z", "completed_at": "2024-07-17T22:39:45.852078Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4620709419250488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    charge_credit_id\n    \n as \n    \n    charge_credit_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    reimburse_charge_id\n    \n as \n    \n    reimburse_charge_id\n    \n, \n    \n    \n    statement_charge_id\n    \n as \n    \n    statement_charge_id\n    \n, \n    \n    \n    time_activity_id\n    \n as \n    \n    time_activity_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        cast(payment_id as TEXT) as payment_id,\n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:44.541202Z", "completed_at": "2024-07-17T22:39:45.852561Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:45.853122Z", "completed_at": "2024-07-17T22:39:45.853125Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4448158740997314, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allow_ipnpayment\n    \n as \n    \n    allow_ipnpayment\n    \n, \n    \n    \n    allow_online_achpayment\n    \n as \n    \n    allow_online_achpayment\n    \n, \n    \n    \n    allow_online_credit_card_payment\n    \n as \n    \n    allow_online_credit_card_payment\n    \n, \n    \n    \n    allow_online_payment\n    \n as \n    \n    allow_online_payment\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    billing_bcc_email\n    \n as \n    \n    billing_bcc_email\n    \n, \n    \n    \n    billing_cc_email\n    \n as \n    \n    billing_cc_email\n    \n, \n    \n    \n    billing_email\n    \n as \n    \n    billing_email\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    custom_sales_rep\n    \n as \n    \n    custom_sales_rep\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit\n    \n as \n    \n    deposit\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as invoice_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        shipping_address_id,\n        delivery_type,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        cast(class_id as TEXT) as class_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:44.690932Z", "completed_at": "2024-07-17T22:39:46.021361Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:46.021835Z", "completed_at": "2024-07-17T22:39:46.021840Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4424841403961182, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    asset_account_id\n    \n as \n    \n    asset_account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    \n    \n    inventory_start_date\n    \n as \n    \n    inventory_start_date\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_item_id\n    \n as \n    \n    parent_item_id\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    purchase_description\n    \n as \n    \n    purchase_description\n    \n, \n    \n    \n    purchase_tax_code_id\n    \n as \n    \n    purchase_tax_code_id\n    \n, \n    \n    \n    purchase_tax_included\n    \n as \n    \n    purchase_tax_included\n    \n, \n    \n    \n    quantity_on_hand\n    \n as \n    \n    quantity_on_hand\n    \n, \n    \n    \n    sales_tax_code_id\n    \n as \n    \n    sales_tax_code_id\n    \n, \n    \n    \n    sales_tax_included\n    \n as \n    \n    sales_tax_included\n    \n, \n    \n    \n    stock_keeping_unit\n    \n as \n    \n    stock_keeping_unit\n    \n, \n    \n    \n    sub_item\n    \n as \n    \n    sub_item\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    track_quantity_on_hand\n    \n as \n    \n    track_quantity_on_hand\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as item_id,\n        active as is_active,\n        created_at,\n        cast(income_account_id as TEXT) as income_account_id,\n        cast(asset_account_id as TEXT) as asset_account_id,\n        cast(expense_account_id as TEXT) as expense_account_id,\n        name,\n        purchase_cost,\n        taxable,\n        type,\n        unit_price,\n        inventory_start_date,\n        cast(parent_item_id as TEXT) as parent_item_id,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:44.784081Z", "completed_at": "2024-07-17T22:39:46.098683Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:46.099287Z", "completed_at": "2024-07-17T22:39:46.099294Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4317359924316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    billable_status\n    \n as \n    \n    billable_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    posting_type\n    \n as \n    \n    posting_type\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_applicable_on\n    \n as \n    \n    tax_applicable_on\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(journal_entry_id as TEXT) as journal_entry_id,\n        index,\n        cast(account_id as TEXT) as account_id,\n        amount,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        description,\n        billable_status,\n        posting_type,\n        cast(vendor_id as TEXT) as vendor_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:45.991336Z", "completed_at": "2024-07-17T22:39:47.066652Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:47.067170Z", "completed_at": "2024-07-17T22:39:47.067176Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.203930139541626, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(payment_id as TEXT) as payment_id,\n        index,\n        amount,\n        journal_entry_id,\n        deposit_id,\n        cast(invoice_id as TEXT) as invoice_id,\n        credit_memo_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:45.995942Z", "completed_at": "2024-07-17T22:39:47.209253Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:47.209705Z", "completed_at": "2024-07-17T22:39:47.209710Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3269920349121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    adjustment\n    \n as \n    \n    adjustment\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as journal_entry_id,\n        adjustment as is_adjustment,\n        created_at,\n        currency_id,\n        cast(doc_number as TEXT) as doc_number,\n        exchange_rate,\n        private_note,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:46.133875Z", "completed_at": "2024-07-17T22:39:47.298127Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:47.298603Z", "completed_at": "2024-07-17T22:39:47.298608Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.294029951095581, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_payment\n    \n as \n    \n    process_payment\n    \n, \n    \n    \n    receivable_account_id\n    \n as \n    \n    receivable_account_id\n    \n, \n    \n    \n    reference_number\n    \n as \n    \n    reference_number\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    unapplied_amount\n    \n as \n    \n    unapplied_amount\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as payment_id,\n        unapplied_amount,\n        total_amount,\n        currency_id,\n        cast(receivable_account_id as TEXT) as receivable_account_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:46.259499Z", "completed_at": "2024-07-17T22:39:47.334630Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:47.335101Z", "completed_at": "2024-07-17T22:39:47.335105Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.229551076889038, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_id as TEXT) as purchase_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id, \n        account_expense_billable_status,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_billable_status,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:47.203832Z", "completed_at": "2024-07-17T22:39:48.321483Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:48.322033Z", "completed_at": "2024-07-17T22:39:48.322039Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.23183012008667, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_line", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    purchase_order_id\n    \n as \n    \n    purchase_order_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_order_id as TEXT) as purchase_order_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        account_expense_class_id,\n        account_expense_billable_status,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_billable_status,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:47.318628Z", "completed_at": "2024-07-17T22:39:48.441649Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:48.442098Z", "completed_at": "2024-07-17T22:39:48.442102Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2412922382354736, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_customer_type\n    \n as \n    \n    custom_customer_type\n    \n, \n    cast(null as TEXT) as \n    \n    custom_po_number\n    \n , \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_address_id\n    \n as \n    \n    vendor_address_id\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as purchase_order_id,\n        created_at,\n        custom_po_number,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        exchange_rate,\n        total_amount,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        cast(vendor_id as TEXT) as vendor_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        status,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:47.434470Z", "completed_at": "2024-07-17T22:39:48.520085Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:48.521026Z", "completed_at": "2024-07-17T22:39:48.521032Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.233220100402832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remit_to_address_id\n    \n as \n    \n    remit_to_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n     \n    select \n        cast(id as TEXT) as purchase_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        exchange_rate,\n        credit,\n        total_amount,\n        payment_type,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        cast(vendor_id as TEXT) as vendor_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:47.446975Z", "completed_at": "2024-07-17T22:39:48.520371Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:48.521262Z", "completed_at": "2024-07-17T22:39:48.521265Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2236549854278564, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n, \n    \n    \n    purchase_order_id\n    \n as \n    \n    purchase_order_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_order_id as TEXT) as purchase_order_id,\n        cast(bill_id as TEXT) as bill_id,\n        cast(purchase_id as TEXT) as purchase_id,\n        cast(vendor_credit_id as TEXT) as vendor_credit_id,\n        index,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:48.677752Z", "completed_at": "2024-07-17T22:39:50.025592Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:50.026184Z", "completed_at": "2024-07-17T22:39:50.026190Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4867126941680908, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(sales_receipt_id as TEXT) as sales_receipt_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_tax_code_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:48.436208Z", "completed_at": "2024-07-17T22:39:50.027270Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:50.028707Z", "completed_at": "2024-07-17T22:39:50.028710Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7318201065063477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(refund_id as TEXT) as refund_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id, \n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        sales_item_tax_code_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:48.560445Z", "completed_at": "2024-07-17T22:39:50.026849Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:50.028471Z", "completed_at": "2024-07-17T22:39:50.028475Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6090607643127441, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    check_payment_account_number\n    \n as \n    \n    check_payment_account_number\n    \n, \n    \n    \n    check_payment_bank_name\n    \n as \n    \n    check_payment_bank_name\n    \n, \n    \n    \n    check_payment_check_number\n    \n as \n    \n    check_payment_check_number\n    \n, \n    \n    \n    check_payment_name_on_account\n    \n as \n    \n    check_payment_name_on_account\n    \n, \n    \n    \n    check_payment_status\n    \n as \n    \n    check_payment_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as refund_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(class_id as TEXT) as class_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:48.690420Z", "completed_at": "2024-07-17T22:39:50.027534Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:50.028953Z", "completed_at": "2024-07-17T22:39:50.028956Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.504417896270752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as sales_receipt_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:50.170536Z", "completed_at": "2024-07-17T22:39:51.316887Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.318551Z", "completed_at": "2024-07-17T22:39:51.318565Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2700319290161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(vendor_credit_id as TEXT) as vendor_credit_id,\n        index,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_quantity,\n        item_expense_unit_price,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        item_expense_billable_status,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.440488Z", "completed_at": "2024-07-17T22:39:51.448481Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.448964Z", "completed_at": "2024-07-17T22:39:51.448969Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009469747543334961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation.5bc813a014", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address\"\n    group by address_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.450481Z", "completed_at": "2024-07-17T22:39:51.472874Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.473555Z", "completed_at": "2024-07-17T22:39:51.473566Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02431201934814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__address_address_id.4f100ae50c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__address\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.476383Z", "completed_at": "2024-07-17T22:39:51.480010Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.480475Z", "completed_at": "2024-07-17T22:39:51.480479Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0054209232330322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id.35f96199bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_linked_txn\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.482046Z", "completed_at": "2024-07-17T22:39:51.488142Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.488626Z", "completed_at": "2024-07-17T22:39:51.488630Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0076160430908203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue.127506f73f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        classification as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account\"\n    group by classification\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Asset','Equity','Expense','Liability','Revenue'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.490164Z", "completed_at": "2024-07-17T22:39:51.493179Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.493642Z", "completed_at": "2024-07-17T22:39:51.493646Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004393815994262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation.864a4b056a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account\"\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.495057Z", "completed_at": "2024-07-17T22:39:51.497620Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.498057Z", "completed_at": "2024-07-17T22:39:51.498061Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0038950443267822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__account_account_id.9944488b9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__account\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.499496Z", "completed_at": "2024-07-17T22:39:51.502799Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.503263Z", "completed_at": "2024-07-17T22:39:51.503266Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004683971405029297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation.73722b1062", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line\"\n    group by bill_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.504671Z", "completed_at": "2024-07-17T22:39:51.507884Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.508313Z", "completed_at": "2024-07-17T22:39:51.508317Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0045392513275146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id.25c5ea7348", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_line\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:50.175356Z", "completed_at": "2024-07-17T22:39:51.415321Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.416512Z", "completed_at": "2024-07-17T22:39:51.416519Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.377403974533081, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_credit_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        exchange_rate,\n        created_at,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        cast(department_id as TEXT) as department_id,\n        private_note,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:50.162271Z", "completed_at": "2024-07-17T22:39:51.436167Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.436629Z", "completed_at": "2024-07-17T22:39:51.436632Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3915529251098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    from_account_id\n    \n as \n    \n    from_account_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    to_account_id\n    \n as \n    \n    to_account_id\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as transfer_id,\n        amount,\n        cast(from_account_id as TEXT) as from_account_id,\n        cast(to_account_id as TEXT) as to_account_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.548664Z", "completed_at": "2024-07-17T22:39:51.551551Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.552693Z", "completed_at": "2024-07-17T22:39:51.552697Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00545501708984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id.1dbb366150", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line\"\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.509729Z", "completed_at": "2024-07-17T22:39:51.552442Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.554195Z", "completed_at": "2024-07-17T22:39:51.554198Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0457918643951416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation.0a7e17967c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment_line\"\n    group by bill_payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.555603Z", "completed_at": "2024-07-17T22:39:51.561822Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.564891Z", "completed_at": "2024-07-17T22:39:51.564896Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012022972106933594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation.8c08249abf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill\"\n    group by bill_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.559139Z", "completed_at": "2024-07-17T22:39:51.565140Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.566907Z", "completed_at": "2024-07-17T22:39:51.566910Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012624979019165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id.ca717958c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.562089Z", "completed_at": "2024-07-17T22:39:51.565443Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.567141Z", "completed_at": "2024-07-17T22:39:51.567144Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009567022323608398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation.4b7aafd630", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment\"\n    group by bill_payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:50.182234Z", "completed_at": "2024-07-17T22:39:51.473789Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.475198Z", "completed_at": "2024-07-17T22:39:51.475202Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3990321159362793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone\n    \n as \n    \n    alternate_phone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_phone\n    \n as \n    \n    mobile_phone\n    \n, \n    \n    \n    other_contacts\n    \n as \n    \n    other_contacts\n    \n, \n    \n    \n    primary_phone\n    \n as \n    \n    primary_phone\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_identifier\n    \n as \n    \n    tax_identifier\n    \n, \n    \n    \n    term_id\n    \n as \n    \n    term_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_1099\n    \n as \n    \n    vendor_1099\n    \n, \n    \n    \n    web_url\n    \n as \n    \n    web_url\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_id,\n        account_number,\n        active as is_active,\n        balance,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        company_name,\n        created_at,\n        currency_id,\n        display_name,\n        web_url,\n        vendor_1099 as is_vendor_1099,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.569362Z", "completed_at": "2024-07-17T22:39:51.574313Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.581181Z", "completed_at": "2024-07-17T22:39:51.581185Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015063047409057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id.908899ccfb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bill_payment\"\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.574667Z", "completed_at": "2024-07-17T22:39:51.581768Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.584333Z", "completed_at": "2024-07-17T22:39:51.584340Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015401840209960938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id.6d547b8c07", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle_item\"\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.577112Z", "completed_at": "2024-07-17T22:39:51.581998Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.584661Z", "completed_at": "2024-07-17T22:39:51.584665Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015512943267822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation.7a43f0e186", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line\"\n    group by credit_memo_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.585359Z", "completed_at": "2024-07-17T22:39:51.590028Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.594965Z", "completed_at": "2024-07-17T22:39:51.594970Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01895594596862793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id.58953be02b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo_line\"\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.590288Z", "completed_at": "2024-07-17T22:39:51.595187Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.602786Z", "completed_at": "2024-07-17T22:39:51.602789Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01906299591064453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation.e241a21ebc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bundle_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle\"\n    group by bundle_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.599006Z", "completed_at": "2024-07-17T22:39:51.603032Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.605148Z", "completed_at": "2024-07-17T22:39:51.605150Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014722585678100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation.917f24c5ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo\"\n    group by credit_memo_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.595409Z", "completed_at": "2024-07-17T22:39:51.603259Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.605393Z", "completed_at": "2024-07-17T22:39:51.605395Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015560150146484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id.382e1dad60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__bundle\"\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.605629Z", "completed_at": "2024-07-17T22:39:51.610173Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.614864Z", "completed_at": "2024-07-17T22:39:51.614869Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01813673973083496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id.d921d2b152", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__credit_memo\"\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.610409Z", "completed_at": "2024-07-17T22:39:51.615105Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.622544Z", "completed_at": "2024-07-17T22:39:51.622547Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0160219669342041, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation.61cc22a568", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.615336Z", "completed_at": "2024-07-17T22:39:51.622786Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.625301Z", "completed_at": "2024-07-17T22:39:51.625304Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016120195388793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id.98232a9723", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__customer\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.617903Z", "completed_at": "2024-07-17T22:39:51.622990Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.626199Z", "completed_at": "2024-07-17T22:39:51.626202Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0161893367767334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation.443de63985", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line\"\n    group by deposit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.626439Z", "completed_at": "2024-07-17T22:39:51.631051Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.635427Z", "completed_at": "2024-07-17T22:39:51.635431Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017567157745361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id.d615f463e1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit_line\"\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.631282Z", "completed_at": "2024-07-17T22:39:51.635650Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.642244Z", "completed_at": "2024-07-17T22:39:51.642247Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014360904693603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation.5574d8e908", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit\"\n    group by deposit_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.638350Z", "completed_at": "2024-07-17T22:39:51.642479Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.644551Z", "completed_at": "2024-07-17T22:39:51.644553Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014802932739257812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation.cc61ab0953", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line\"\n    group by estimate_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.635891Z", "completed_at": "2024-07-17T22:39:51.642705Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.644786Z", "completed_at": "2024-07-17T22:39:51.644789Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015580892562866211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id.880b8c37b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__deposit\"\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.645011Z", "completed_at": "2024-07-17T22:39:51.650701Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.655455Z", "completed_at": "2024-07-17T22:39:51.655462Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019543170928955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id.c060f99b4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate_line\"\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.650949Z", "completed_at": "2024-07-17T22:39:51.655735Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.663580Z", "completed_at": "2024-07-17T22:39:51.663584Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016385793685913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation.412260b882", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate\"\n    group by estimate_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.655990Z", "completed_at": "2024-07-17T22:39:51.663821Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.665963Z", "completed_at": "2024-07-17T22:39:51.665965Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015808820724487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id.0331d3c310", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__estimate\"\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.658642Z", "completed_at": "2024-07-17T22:39:51.664037Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.666197Z", "completed_at": "2024-07-17T22:39:51.666201Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015895843505859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation.5370e9fcd0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, invoice_line_index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle\"\n    group by invoice_id, index, invoice_line_index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.666460Z", "completed_at": "2024-07-17T22:39:51.671228Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.676472Z", "completed_at": "2024-07-17T22:39:51.676476Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017683029174804688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id.cfd59b83a9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line_bundle\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.671468Z", "completed_at": "2024-07-17T22:39:51.676706Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.683072Z", "completed_at": "2024-07-17T22:39:51.683076Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015110969543457031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation.99b74bc327", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line\"\n    group by invoice_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.679422Z", "completed_at": "2024-07-17T22:39:51.683317Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.685413Z", "completed_at": "2024-07-17T22:39:51.685416Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01347804069519043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id.c9b9c8f8f4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_linked_txn\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.676934Z", "completed_at": "2024-07-17T22:39:51.683531Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.685657Z", "completed_at": "2024-07-17T22:39:51.685660Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014271020889282227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id.0424087a8f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice_line\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.685891Z", "completed_at": "2024-07-17T22:39:51.690398Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.694518Z", "completed_at": "2024-07-17T22:39:51.694522Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0173492431640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation.ef51800044", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice\"\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.690654Z", "completed_at": "2024-07-17T22:39:51.694744Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.701999Z", "completed_at": "2024-07-17T22:39:51.702003Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014701128005981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id.b6d8e1ad7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__invoice\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.694965Z", "completed_at": "2024-07-17T22:39:51.702235Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.704288Z", "completed_at": "2024-07-17T22:39:51.704291Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015228986740112305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation.169465a2a6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        item_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item\"\n    group by item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.698657Z", "completed_at": "2024-07-17T22:39:51.702461Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.704518Z", "completed_at": "2024-07-17T22:39:51.704521Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015297651290893555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__item_item_id.da906d8fb9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__item\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.704742Z", "completed_at": "2024-07-17T22:39:51.709848Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.714377Z", "completed_at": "2024-07-17T22:39:51.714382Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0175628662109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.ab661907c3", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        posting_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"\n    group by posting_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Credit','Debit'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.710095Z", "completed_at": "2024-07-17T22:39:51.714609Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.721241Z", "completed_at": "2024-07-17T22:39:51.721245Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014798641204833984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation.0cd1d9f232", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        journal_entry_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"\n    group by journal_entry_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.714839Z", "completed_at": "2024-07-17T22:39:51.722011Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.727589Z", "completed_at": "2024-07-17T22:39:51.727594Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015652179718017578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id.bd89a6f784", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry_line\"\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.717319Z", "completed_at": "2024-07-17T22:39:51.722257Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.727848Z", "completed_at": "2024-07-17T22:39:51.727852Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015897035598754883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation.25be3cf2e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line\"\n    group by payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.723881Z", "completed_at": "2024-07-17T22:39:51.729584Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.734523Z", "completed_at": "2024-07-17T22:39:51.734529Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013997077941894531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id.6351e3fe26", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment_line\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.730903Z", "completed_at": "2024-07-17T22:39:51.735884Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.742613Z", "completed_at": "2024-07-17T22:39:51.742617Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015629053115844727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id.39198c4ff2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__journal_entry\"\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.736122Z", "completed_at": "2024-07-17T22:39:51.742839Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.747654Z", "completed_at": "2024-07-17T22:39:51.747658Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01509404182434082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation.1998a8282e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment\"\n    group by payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.739073Z", "completed_at": "2024-07-17T22:39:51.743052Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.747911Z", "completed_at": "2024-07-17T22:39:51.747914Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015061140060424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id.ca2c1ef54f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__payment\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.744441Z", "completed_at": "2024-07-17T22:39:51.749665Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.754958Z", "completed_at": "2024-07-17T22:39:51.754962Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013838052749633789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation.a23c661eb5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line\"\n    group by purchase_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.750411Z", "completed_at": "2024-07-17T22:39:51.755641Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.762277Z", "completed_at": "2024-07-17T22:39:51.762281Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015369892120361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id.5406fca79c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_line\"\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.756331Z", "completed_at": "2024-07-17T22:39:51.762927Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.767827Z", "completed_at": "2024-07-17T22:39:51.767831Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014693975448608398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_line_purchase_order_id__index__source_relation.e47fe7ae13", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_order_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line\"\n    group by purchase_order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.759315Z", "completed_at": "2024-07-17T22:39:51.763154Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.768089Z", "completed_at": "2024-07-17T22:39:51.768093Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014792919158935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_line_purchase_order_id.210718c1c7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_order_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_line\"\nwhere purchase_order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.764705Z", "completed_at": "2024-07-17T22:39:51.769846Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.774224Z", "completed_at": "2024-07-17T22:39:51.774228Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012694120407104492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_order_status__Open__Closed.a86f736065", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Open','Closed'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.770563Z", "completed_at": "2024-07-17T22:39:51.774689Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.782684Z", "completed_at": "2024-07-17T22:39:51.782688Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015438079833984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_order_purchase_order_id__source_relation.1ade9ebad8", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_order_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order\"\n    group by purchase_order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.775565Z", "completed_at": "2024-07-17T22:39:51.783365Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.787838Z", "completed_at": "2024-07-17T22:39:51.787842Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015440940856933594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_purchase_order_id.4158032222", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_order_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order\"\nwhere purchase_order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.779129Z", "completed_at": "2024-07-17T22:39:51.784406Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.788478Z", "completed_at": "2024-07-17T22:39:51.788481Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01595902442932129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard.7de7edf458", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase\"\n    group by payment_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Cash','Check','CreditCard'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.785101Z", "completed_at": "2024-07-17T22:39:51.789398Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.793650Z", "completed_at": "2024-07-17T22:39:51.793654Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011826038360595703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation.172340b49e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase\"\n    group by purchase_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.790356Z", "completed_at": "2024-07-17T22:39:51.794238Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.802187Z", "completed_at": "2024-07-17T22:39:51.802191Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014967918395996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id.fc2090959b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase\"\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.795524Z", "completed_at": "2024-07-17T22:39:51.803342Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.807486Z", "completed_at": "2024-07-17T22:39:51.807489Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015333175659179688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id.d9f0186f4e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_order_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__purchase_order_linked_txn\"\nwhere purchase_order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.798510Z", "completed_at": "2024-07-17T22:39:51.803760Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.807767Z", "completed_at": "2024-07-17T22:39:51.807769Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015106201171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation.20e80dcbd5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line\"\n    group by sales_receipt_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.804448Z", "completed_at": "2024-07-17T22:39:51.808211Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.813042Z", "completed_at": "2024-07-17T22:39:51.813045Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011770009994506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.9be0667fc3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt_line\"\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.809300Z", "completed_at": "2024-07-17T22:39:51.814575Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.821293Z", "completed_at": "2024-07-17T22:39:51.821298Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014926910400390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation.614411eb40", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line\"\n    group by refund_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.818445Z", "completed_at": "2024-07-17T22:39:51.825697Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.827304Z", "completed_at": "2024-07-17T22:39:51.827308Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014833927154541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation.60f976841d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt\"\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.815793Z", "completed_at": "2024-07-17T22:39:51.825925Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.827779Z", "completed_at": "2024-07-17T22:39:51.827781Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015825986862182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id.57df809b80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt_line\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.822368Z", "completed_at": "2024-07-17T22:39:51.827536Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.832274Z", "completed_at": "2024-07-17T22:39:51.832278Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01238870620727539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id.29e8a8216e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__refund_receipt\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.829426Z", "completed_at": "2024-07-17T22:39:51.834166Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.840936Z", "completed_at": "2024-07-17T22:39:51.840943Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014719963073730469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation.36bdbcffde", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt\"\n    group by sales_receipt_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.834852Z", "completed_at": "2024-07-17T22:39:51.841956Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.846025Z", "completed_at": "2024-07-17T22:39:51.846029Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014294147491455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id.b97c1a238a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__sales_receipt\"\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.837909Z", "completed_at": "2024-07-17T22:39:51.844640Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.846480Z", "completed_at": "2024-07-17T22:39:51.846483Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014095783233642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation.094b35ac4d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_credit_id, index, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit_line\"\n    group by vendor_credit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.842220Z", "completed_at": "2024-07-17T22:39:51.846252Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.852105Z", "completed_at": "2024-07-17T22:39:51.852109Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015642881393432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id.1275a5ab5a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_credit_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor_credit\"\nwhere vendor_credit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.848041Z", "completed_at": "2024-07-17T22:39:51.854053Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.860741Z", "completed_at": "2024-07-17T22:39:51.860746Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015993118286132812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation.bfa4c7345e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer\"\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.854738Z", "completed_at": "2024-07-17T22:39:51.861207Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.864979Z", "completed_at": "2024-07-17T22:39:51.864983Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012975215911865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id.c1c80a253c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transfer_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__transfer\"\nwhere transfer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.857820Z", "completed_at": "2024-07-17T22:39:51.864627Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.865941Z", "completed_at": "2024-07-17T22:39:51.865944Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013079643249511719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation.4960d9d21a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_id, source_relation\n    from \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor\"\n    group by vendor_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T22:39:51.861939Z", "completed_at": "2024-07-17T22:39:51.866165Z"}, {"name": "execute", "started_at": "2024-07-17T22:39:51.867137Z", "completed_at": "2024-07-17T22:39:51.867140Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010042905807495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id.f509a77195", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"quickbooks_source_integrations_tests_quickbooks_staging\".\"stg_quickbooks__vendor\"\nwhere vendor_id is null\n\n\n", "relation_name": null}], "elapsed_time": 18.59971308708191, "args": {"indirect_selection": "eager", "exclude": [], "introspect": true, "static": false, "strict_mode": false, "vars": {}, "version_check": true, "warn_error_options": {"include": [], "exclude": []}, "invocation_command": "dbt docs generate -t postgres", "which": "generate", "use_colors_file": true, "send_anonymous_usage_stats": true, "enable_legacy_logger": false, "partial_parse_file_diff": true, "profiles_dir": "/Users/avinash.kunnath/.dbt", "write_json": true, "print": true, "log_file_max_bytes": 10485760, "empty_catalog": false, "defer": false, "use_colors": true, "log_level": "info", "populate_cache": true, "target": "postgres", "macro_debugging": false, "log_format_file": "debug", "cache_selected_only": false, "show_resource_report": false, "log_level_file": "debug", "select": [], "favor_state": false, "log_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests/logs", "partial_parse": true, "quiet": false, "printer_width": 80, "require_explicit_package_overrides_for_builtin_materializations": false, "compile": true, "project_dir": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks_source/integration_tests", "log_format": "default", "static_parser": true}}