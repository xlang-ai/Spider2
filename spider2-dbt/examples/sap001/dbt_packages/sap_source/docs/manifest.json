{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v9.json", "dbt_version": "1.5.2", "generated_at": "2023-07-11T21:37:51.801850Z", "invocation_id": "3b1a7080-c5c8-4de9-88d7-fde7217bdac0", "env": {}, "project_id": "7ac0dbbba70e60e6e5a98dad80cb2b00", "user_id": "81581f81-d5af-4143-8fbf-c2f0001e4f56", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"seed.sap_source_integration_tests.sap_pa0031_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_pa0031_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_pa0031_data.csv", "original_file_path": "seeds/sap_pa0031_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_pa0031_data", "fqn": ["sap_source_integration_tests", "sap_pa0031_data"], "alias": "sap_pa0031_data", "checksum": {"name": "sha256", "checksum": "73a1b5bc4625aaaf4816ff1c3ed01f824cd9b86803c27158eef6fee427185ca5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "aedtm": "varchar", "begda": "varchar", "endda": "varchar", "flag1": "varchar", "flag2": "varchar", "flag3": "varchar", "flag4": "varchar", "grpvl": "varchar", "histo": "varchar", "itbld": "varchar", "itxex": "varchar", "mandt": "varchar", "objps": "varchar", "ordex": "varchar", "pernr": "varchar", "preas": "varchar", "refex": "varchar", "rese1": "varchar", "rese2": "varchar", "rfp01": "varchar", "rfp02": "varchar", "rfp03": "varchar", "rfp04": "varchar", "rfp05": "varchar", "rfp06": "varchar", "rfp07": "varchar", "rfp08": "varchar", "rfp09": "varchar", "rfp10": "varchar", "rfp11": "varchar", "rfp12": "varchar", "rfp13": "varchar", "rfp14": "varchar", "rfp15": "varchar", "rfp16": "varchar", "rfp17": "varchar", "rfp18": "varchar", "rfp19": "varchar", "rfp20": "varchar", "seqnr": "varchar", "sprps": "varchar", "subty": "varchar", "uname": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"aedtm": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "begda": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "endda": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag1": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag2": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag3": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag4": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "grpvl": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "histo": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "itbld": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "itxex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mandt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "objps": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ordex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "pernr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "preas": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "refex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rese1": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rese2": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp01": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp02": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp03": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp04": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp05": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp06": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp07": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp08": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp09": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp10": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp11": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp12": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp13": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp14": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp15": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp16": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp17": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp18": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp19": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfp20": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "seqnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "sprps": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "subty": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "uname": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}"}}, "created_at": 1689111436.123313, "relation_name": "EC_DB.sap_source_integration_tests.sap_pa0031_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_mara_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_mara_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_mara_data.csv", "original_file_path": "seeds/sap_mara_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_mara_data", "fqn": ["sap_source_integration_tests", "sap_mara_data"], "alias": "sap_mara_data", "checksum": {"name": "sha256", "checksum": "1caf8894967de02b551992ab0749c40b3a27ec1b450c6913df0de286e41e0b75"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "blanz": "varchar", "compl": "varchar", "cuobf": "varchar", "datab": "varchar", "ersda": "varchar", "fuelg": "varchar", "laeda": "varchar", "liqdt": "varchar", "mandt": "varchar", "matnr": "varchar", "mhdhb": "varchar", "mhdlp": "varchar", "mhdrz": "varchar", "mstde": "varchar", "mstdv": "varchar", "stfak": "varchar", "vpreh": "varchar", "breit": "numeric", "brgew": "numeric", "ergew": "numeric", "ervol": "numeric", "gewto": "numeric", "hoehe": "numeric", "inhal": "numeric", "inhbr": "numeric", "laeng": "numeric", "ntgew": "numeric", "volto": "numeric", "volum": "numeric", "wesch": "numeric"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"blanz": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "compl": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "cuobf": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "datab": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ersda": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "fuelg": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "laeda": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "liqdt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mandt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "matnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mhdhb": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mhdlp": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mhdrz": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mstde": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mstdv": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "stfak": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "vpreh": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "breit": "numeric", "brgew": "numeric", "ergew": "numeric", "ervol": "numeric", "gewto": "numeric", "hoehe": "numeric", "inhal": "numeric", "inhbr": "numeric", "laeng": "numeric", "ntgew": "numeric", "volto": "numeric", "volum": "numeric", "wesch": "numeric"}}, "created_at": 1689111436.129716, "relation_name": "EC_DB.sap_source_integration_tests.sap_mara_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_bseg_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_bseg_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_bseg_data.csv", "original_file_path": "seeds/sap_bseg_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_bseg_data", "fqn": ["sap_source_integration_tests", "sap_bseg_data"], "alias": "sap_bseg_data", "checksum": {"name": "sha256", "checksum": "5424191c315b809471a20ad94aa4046bbc9cada26f73c168136d3dcca25d66cf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "abper": "varchar", "absbt": "numeric", "agzei": "varchar", "altkt": "varchar", "anfae": "varchar", "anfbj": "varchar", "aplzl": "varchar", "aufpl": "varchar", "augcp": "varchar", "augdt": "varchar", "auggj": "varchar", "bdiff": "numeric", "bdif2": "numeric", "bdif3": "numeric", "belnr": "varchar", "blnbt": "numeric", "blnpz": "numeric", "bonfb": "numeric", "bpmng": "numeric", "bschl": "varchar", "bualt": "numeric", "bukrs": "varchar", "buzei": "varchar", "bzdat": "varchar", "dabrz": "varchar", "disbj": "varchar", "disbz": "varchar", "dmbe2": "numeric", "dmb21": "numeric", "dmb22": "numeric", "dmb23": "numeric", "dmbe3": "numeric", "dmb31": "numeric", "dmb32": "numeric", "dmb33": "numeric", "dmbt1": "numeric", "dmbt2": "numeric", "dmbt3": "numeric", "dmbtr": "numeric", "dtws1": "varchar", "dtws2": "varchar", "dtws3": "varchar", "dtws4": "varchar", "ebelp": "varchar", "erfmg": "numeric", "eten2": "varchar", "fdtag": "varchar", "fdwbt": "numeric", "fipos": "varchar", "fkber": "varchar", "fkber_long": "varchar", "fkont": "varchar", "fmxdocln": "varchar", "fmxyear": "varchar", "fwbas": "numeric", "fwzuz": "numeric", "gbetr": "numeric", "gjahr": "varchar", "gsber": "varchar", "hkont": "varchar", "hwbas": "numeric", "hwzus": "numeric", "hwzuz": "numeric", "kblpos": "varchar", "klibt": "numeric", "kokrs": "varchar", "kostl": "varchar", "kzbtr": "numeric", "kursr": "numeric", "linfv": "varchar", "lnran": "varchar", "lokkt": "varchar", "madat": "varchar", "mandt": "varchar", "manst": "varchar", "menge": "numeric", "mwst2": "numeric", "mwst3": "numeric", "mwsts": "numeric", "navfw": "numeric", "navhw": "numeric", "navh2": "numeric", "navh3": "numeric", "nebtr": "numeric", "nprei": "numeric", "obzei": "varchar", "paobjnr": "varchar", "pasubnr": "varchar", "penfc": "numeric", "penlc1": "numeric", "penlc2": "numeric", "penlc3": "numeric", "peinh": "varchar", "pernr": "varchar", "perop_beg": "varchar", "perop_end": "varchar", "posn2": "varchar", "popts": "numeric", "ppdiff": "numeric", "ppdif2": "numeric", "ppdif3": "numeric", "prctr": "varchar", "prodper": "varchar", "projk": "varchar", "pswbt": "numeric", "pyamt": "numeric", "qbshb": "numeric", "qsfbt": "numeric", "qsshb": "numeric", "rebzj": "varchar", "rebzz": "varchar", "rdiff": "numeric", "rdif2": "numeric", "rdif3": "numeric", "rewrt": "numeric", "rewwr": "numeric", "rfzei": "varchar", "rpacq": "varchar", "samnr": "varchar", "sctax": "numeric", "skfbt": "numeric", "sknto": "numeric", "sknt2": "numeric", "sknt3": "numeric", "sttax": "numeric", "taxps": "varchar", "txbfw": "numeric", "txbhw": "numeric", "txbh2": "numeric", "txbh3": "numeric", "txdat": "varchar", "txgrp": "varchar", "valut": "varchar", "vrsdt": "varchar", "wmwst": "numeric", "wrbt1": "numeric", "wrbt2": "numeric", "wrbt3": "numeric", "wrbtr": "numeric", "wskto": "numeric", "zbd1p": "numeric", "zbd1t": "varchar", "zbd2p": "numeric", "zbd2t": "varchar", "zbd3t": "varchar", "zekkn": "varchar", "zfbdt": "varchar", "zolld": "varchar", "zuonr": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"abper": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "absbt": "numeric", "agzei": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "altkt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "anfae": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "anfbj": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "aplzl": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "aufpl": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "augcp": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "augdt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "auggj": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "bdiff": "numeric", "bdif2": "numeric", "bdif3": "numeric", "belnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "blnbt": "numeric", "blnpz": "numeric", "bonfb": "numeric", "bpmng": "numeric", "bschl": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "bualt": "numeric", "bukrs": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "buzei": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "bzdat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "dabrz": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "disbj": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "disbz": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "dmbe2": "numeric", "dmb21": "numeric", "dmb22": "numeric", "dmb23": "numeric", "dmbe3": "numeric", "dmb31": "numeric", "dmb32": "numeric", "dmb33": "numeric", "dmbt1": "numeric", "dmbt2": "numeric", "dmbt3": "numeric", "dmbtr": "numeric", "dtws1": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "dtws2": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "dtws3": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "dtws4": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ebelp": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "erfmg": "numeric", "eten2": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "fdtag": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "fdwbt": "numeric", "fipos": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "fkber": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "fkber_long": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "fkont": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "fmxdocln": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "fmxyear": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "fwbas": "numeric", "fwzuz": "numeric", "gbetr": "numeric", "gjahr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "gsber": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "hkont": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "hwbas": "numeric", "hwzus": "numeric", "hwzuz": "numeric", "kblpos": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "klibt": "numeric", "kokrs": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "kostl": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "kzbtr": "numeric", "kursr": "numeric", "linfv": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lnran": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lokkt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "madat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mandt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "manst": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "menge": "numeric", "mwst2": "numeric", "mwst3": "numeric", "mwsts": "numeric", "navfw": "numeric", "navhw": "numeric", "navh2": "numeric", "navh3": "numeric", "nebtr": "numeric", "nprei": "numeric", "obzei": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "paobjnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "pasubnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "penfc": "numeric", "penlc1": "numeric", "penlc2": "numeric", "penlc3": "numeric", "peinh": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "pernr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "perop_beg": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "perop_end": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "posn2": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "popts": "numeric", "ppdiff": "numeric", "ppdif2": "numeric", "ppdif3": "numeric", "prctr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "prodper": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "projk": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "pswbt": "numeric", "pyamt": "numeric", "qbshb": "numeric", "qsfbt": "numeric", "qsshb": "numeric", "rebzj": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rebzz": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rdiff": "numeric", "rdif2": "numeric", "rdif3": "numeric", "rewrt": "numeric", "rewwr": "numeric", "rfzei": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rpacq": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "samnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "sctax": "numeric", "skfbt": "numeric", "sknto": "numeric", "sknt2": "numeric", "sknt3": "numeric", "sttax": "numeric", "taxps": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "txbfw": "numeric", "txbhw": "numeric", "txbh2": "numeric", "txbh3": "numeric", "txdat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "txgrp": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "valut": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "vrsdt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "wmwst": "numeric", "wrbt1": "numeric", "wrbt2": "numeric", "wrbt3": "numeric", "wrbtr": "numeric", "wskto": "numeric", "zbd1p": "numeric", "zbd1t": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "zbd2p": "numeric", "zbd2t": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "zbd3t": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "zekkn": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "zfbdt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "zolld": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "zuonr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}"}}, "created_at": 1689111436.131392, "relation_name": "EC_DB.sap_source_integration_tests.sap_bseg_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_t880_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_t880_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_t880_data.csv", "original_file_path": "seeds/sap_t880_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_t880_data", "fqn": ["sap_source_integration_tests", "sap_t880_data"], "alias": "sap_t880_data", "checksum": {"name": "sha256", "checksum": "1da32a4dc759affa0e54d134218c9d157721212c0e504e9c4648a4c8e9b49981"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "mandt": "varchar", "rcomp": "varchar", "name1": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"mandt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rcomp": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "name1": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}"}}, "created_at": 1689111436.133291, "relation_name": "EC_DB.sap_source_integration_tests.sap_t880_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_ska1_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_ska1_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_ska1_data.csv", "original_file_path": "seeds/sap_ska1_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_ska1_data", "fqn": ["sap_source_integration_tests", "sap_ska1_data"], "alias": "sap_ska1_data", "checksum": {"name": "sha256", "checksum": "2b26882648bc47d996535eafa3adab5e6faf640365f8a374eb77410765862d76"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "erdat": "varchar", "mandt": "varchar", "sakan": "varchar", "saknr": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"erdat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mandt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "sakan": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "saknr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}"}}, "created_at": 1689111436.134769, "relation_name": "EC_DB.sap_source_integration_tests.sap_ska1_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_lfa1_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_lfa1_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_lfa1_data.csv", "original_file_path": "seeds/sap_lfa1_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_lfa1_data", "fqn": ["sap_source_integration_tests", "sap_lfa1_data"], "alias": "sap_lfa1_data", "checksum": {"name": "sha256", "checksum": "289116299883f9e410c096dabb4afe5732cbf99b14fe1d07b358c0a7e25cc05e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "adrnr": "varchar", "bbbnr": "varchar", "bbsnr": "varchar", "bubkz": "varchar", "erdat": "varchar", "gbdat": "varchar", "legalnat": "varchar", "lifnr": "varchar", "mandt": "varchar", "pstlz": "varchar", "qssysdat": "varchar", "revdb": "varchar", "rgdate": "varchar", "ric": "varchar", "rnedate": "varchar", "taxbs": "varchar", "txjcd": "varchar", "updat": "varchar", "uptim": "varchar", "j_sc_capital": "numeric", "staging_time": "numeric"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"adrnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "bbbnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "bbsnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "bubkz": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "erdat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "gbdat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "legalnat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lifnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mandt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "pstlz": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "qssysdat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "revdb": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rgdate": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ric": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rnedate": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "taxbs": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "txjcd": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "updat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "uptim": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "j_sc_capital": "numeric", "staging_time": "numeric"}}, "created_at": 1689111436.136298, "relation_name": "EC_DB.sap_source_integration_tests.sap_lfa1_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_pa0008_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_pa0008_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_pa0008_data.csv", "original_file_path": "seeds/sap_pa0008_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_pa0008_data", "fqn": ["sap_source_integration_tests", "sap_pa0008_data"], "alias": "sap_pa0008_data", "checksum": {"name": "sha256", "checksum": "717a80d2b6ab5883426f45c6cc50cdbcea95fd3572f6ed086ba830aa310cb8b9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "aedtm": "varchar", "ancur": "varchar", "ansal": "numeric", "anz01": "numeric", "anz02": "numeric", "anz03": "numeric", "anz04": "numeric", "anz05": "numeric", "anz06": "numeric", "anz07": "numeric", "anz08": "numeric", "anz09": "numeric", "anz10": "numeric", "anz11": "numeric", "anz12": "numeric", "anz13": "numeric", "anz14": "numeric", "anz15": "numeric", "anz16": "numeric", "anz17": "numeric", "anz18": "numeric", "anz19": "numeric", "anz20": "numeric", "anz21": "numeric", "anz22": "numeric", "anz23": "numeric", "anz24": "numeric", "anz25": "numeric", "anz26": "numeric", "anz27": "numeric", "anz28": "numeric", "anz29": "numeric", "anz30": "numeric", "anz31": "numeric", "anz32": "numeric", "anz33": "numeric", "anz34": "numeric", "anz35": "numeric", "anz36": "numeric", "anz37": "numeric", "anz38": "numeric", "anz39": "numeric", "anz40": "numeric", "begda": "varchar", "bet01": "numeric", "bet02": "numeric", "bet03": "numeric", "bet04": "numeric", "bet05": "numeric", "bet06": "numeric", "bet07": "numeric", "bet08": "numeric", "bet09": "numeric", "bet10": "numeric", "bet11": "numeric", "bet12": "numeric", "bet13": "numeric", "bet14": "numeric", "bet15": "numeric", "bet16": "numeric", "bet17": "numeric", "bet18": "numeric", "bet19": "numeric", "bet20": "numeric", "bet21": "numeric", "bet22": "numeric", "bet23": "numeric", "bet24": "numeric", "bet25": "numeric", "bet26": "numeric", "bet27": "numeric", "bet28": "numeric", "bet29": "numeric", "bet30": "numeric", "bet31": "numeric", "bet32": "numeric", "bet33": "numeric", "bet34": "numeric", "bet35": "numeric", "bet36": "numeric", "bet37": "numeric", "bet38": "numeric", "bet39": "numeric", "bet40": "numeric", "bsgrd": "numeric", "cpind": "varchar", "divgv": "numeric", "ein01": "varchar", "ein02": "varchar", "ein03": "varchar", "ein04": "varchar", "ein05": "varchar", "ein06": "varchar", "ein07": "varchar", "ein08": "varchar", "ein09": "varchar", "ein10": "varchar", "ein11": "varchar", "ein12": "varchar", "ein13": "varchar", "ein14": "varchar", "ein15": "varchar", "ein16": "varchar", "ein17": "varchar", "ein18": "varchar", "ein19": "varchar", "ein20": "varchar", "ein21": "varchar", "ein22": "varchar", "ein23": "varchar", "ein24": "varchar", "ein25": "varchar", "ein26": "varchar", "ein27": "varchar", "ein28": "varchar", "ein29": "varchar", "ein30": "varchar", "ein31": "varchar", "ein32": "varchar", "ein33": "varchar", "ein34": "varchar", "ein35": "varchar", "ein36": "varchar", "ein37": "varchar", "ein38": "varchar", "ein39": "varchar", "ein40": "varchar", "endda": "varchar", "falgk": "varchar", "falgr": "varchar", "flag1": "varchar", "flag2": "varchar", "flag3": "varchar", "flag4": "varchar", "flaga": "varchar", "grpvl": "varchar", "histo": "varchar", "ind01": "varchar", "ind02": "varchar", "ind03": "varchar", "ind04": "varchar", "ind05": "varchar", "ind06": "varchar", "ind07": "varchar", "ind08": "varchar", "ind09": "varchar", "ind10": "varchar", "ind11": "varchar", "ind12": "varchar", "ind13": "varchar", "ind14": "varchar", "ind15": "varchar", "ind16": "varchar", "ind17": "varchar", "ind18": "varchar", "ind19": "varchar", "ind20": "varchar", "ind21": "varchar", "ind22": "varchar", "ind23": "varchar", "ind24": "varchar", "ind25": "varchar", "ind26": "varchar", "ind27": "varchar", "ind28": "varchar", "ind29": "varchar", "ind30": "varchar", "ind31": "varchar", "ind32": "varchar", "ind33": "varchar", "ind34": "varchar", "ind35": "varchar", "ind36": "varchar", "ind37": "varchar", "ind38": "varchar", "ind39": "varchar", "ind40": "varchar", "itbld": "varchar", "itxex": "varchar", "lga01": "varchar", "lga02": "varchar", "lga03": "varchar", "lga04": "varchar", "lga05": "varchar", "lga06": "varchar", "lga07": "varchar", "lga08": "varchar", "lga09": "varchar", "lga10": "varchar", "lga11": "varchar", "lga12": "varchar", "lga13": "varchar", "lga14": "varchar", "lga15": "varchar", "lga16": "varchar", "lga17": "varchar", "lga18": "varchar", "lga19": "varchar", "lga20": "varchar", "lga21": "varchar", "lga22": "varchar", "lga23": "varchar", "lga24": "varchar", "lga25": "varchar", "lga26": "varchar", "lga27": "varchar", "lga28": "varchar", "lga29": "varchar", "lga30": "varchar", "lga31": "varchar", "lga32": "varchar", "lga33": "varchar", "lga34": "varchar", "lga35": "varchar", "lga36": "varchar", "lga37": "varchar", "lga38": "varchar", "lga39": "varchar", "lga40": "varchar", "mandt": "varchar", "objps": "varchar", "opk01": "varchar", "opk02": "varchar", "opk03": "varchar", "opk04": "varchar", "opk05": "varchar", "opk06": "varchar", "opk07": "varchar", "opk08": "varchar", "opk09": "varchar", "opk10": "varchar", "opk11": "varchar", "opk12": "varchar", "opk13": "varchar", "opk14": "varchar", "opk15": "varchar", "opk16": "varchar", "opk17": "varchar", "opk18": "varchar", "opk19": "varchar", "opk20": "varchar", "opk21": "varchar", "opk22": "varchar", "opk23": "varchar", "opk24": "varchar", "opk25": "varchar", "opk26": "varchar", "opk27": "varchar", "opk28": "varchar", "opk29": "varchar", "opk30": "varchar", "opk31": "varchar", "opk32": "varchar", "opk33": "varchar", "opk34": "varchar", "opk35": "varchar", "opk36": "varchar", "opk37": "varchar", "opk38": "varchar", "opk39": "varchar", "opk40": "varchar", "ordex": "varchar", "orzst": "varchar", "partn": "varchar", "pernr": "varchar", "preas": "varchar", "refex": "varchar", "rese1": "varchar", "rese2": "varchar", "seqnr": "varchar", "sprps": "varchar", "stvor": "varchar", "subty": "varchar", "trfar": "varchar", "trfgb": "varchar", "trfgr": "varchar", "trfst": "varchar", "uname": "varchar", "vglgb": "varchar", "vglgr": "varchar", "vglst": "varchar", "vglsv": "varchar", "vglta": "varchar", "waers": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"aedtm": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ancur": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ansal": "numeric", "anz01": "numeric", "anz02": "numeric", "anz03": "numeric", "anz04": "numeric", "anz05": "numeric", "anz06": "numeric", "anz07": "numeric", "anz08": "numeric", "anz09": "numeric", "anz10": "numeric", "anz11": "numeric", "anz12": "numeric", "anz13": "numeric", "anz14": "numeric", "anz15": "numeric", "anz16": "numeric", "anz17": "numeric", "anz18": "numeric", "anz19": "numeric", "anz20": "numeric", "anz21": "numeric", "anz22": "numeric", "anz23": "numeric", "anz24": "numeric", "anz25": "numeric", "anz26": "numeric", "anz27": "numeric", "anz28": "numeric", "anz29": "numeric", "anz30": "numeric", "anz31": "numeric", "anz32": "numeric", "anz33": "numeric", "anz34": "numeric", "anz35": "numeric", "anz36": "numeric", "anz37": "numeric", "anz38": "numeric", "anz39": "numeric", "anz40": "numeric", "begda": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "bet01": "numeric", "bet02": "numeric", "bet03": "numeric", "bet04": "numeric", "bet05": "numeric", "bet06": "numeric", "bet07": "numeric", "bet08": "numeric", "bet09": "numeric", "bet10": "numeric", "bet11": "numeric", "bet12": "numeric", "bet13": "numeric", "bet14": "numeric", "bet15": "numeric", "bet16": "numeric", "bet17": "numeric", "bet18": "numeric", "bet19": "numeric", "bet20": "numeric", "bet21": "numeric", "bet22": "numeric", "bet23": "numeric", "bet24": "numeric", "bet25": "numeric", "bet26": "numeric", "bet27": "numeric", "bet28": "numeric", "bet29": "numeric", "bet30": "numeric", "bet31": "numeric", "bet32": "numeric", "bet33": "numeric", "bet34": "numeric", "bet35": "numeric", "bet36": "numeric", "bet37": "numeric", "bet38": "numeric", "bet39": "numeric", "bet40": "numeric", "bsgrd": "numeric", "cpind": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "divgv": "numeric", "ein01": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein02": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein03": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein04": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein05": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein06": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein07": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein08": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein09": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein10": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein11": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein12": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein13": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein14": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein15": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein16": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein17": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein18": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein19": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein20": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein21": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein22": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein23": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein24": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein25": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein26": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein27": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein28": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein29": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein30": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein31": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein32": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein33": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein34": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein35": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein36": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein37": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein38": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein39": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ein40": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "endda": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "falgk": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "falgr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag1": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag2": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag3": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag4": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flaga": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "grpvl": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "histo": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind01": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind02": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind03": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind04": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind05": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind06": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind07": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind08": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind09": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind10": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind11": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind12": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind13": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind14": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind15": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind16": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind17": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind18": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind19": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind20": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind21": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind22": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind23": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind24": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind25": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind26": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind27": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind28": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind29": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind30": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind31": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind32": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind33": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind34": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind35": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind36": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind37": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind38": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind39": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ind40": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "itbld": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "itxex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga01": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga02": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga03": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga04": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga05": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga06": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga07": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga08": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga09": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga10": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga11": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga12": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga13": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga14": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga15": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga16": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga17": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga18": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga19": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga20": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga21": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga22": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga23": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga24": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga25": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga26": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga27": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga28": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga29": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga30": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga31": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga32": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga33": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga34": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga35": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga36": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga37": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga38": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga39": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "lga40": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mandt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "objps": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk01": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk02": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk03": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk04": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk05": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk06": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk07": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk08": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk09": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk10": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk11": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk12": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk13": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk14": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk15": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk16": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk17": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk18": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk19": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk20": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk21": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk22": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk23": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk24": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk25": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk26": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk27": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk28": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk29": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk30": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk31": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk32": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk33": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk34": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk35": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk36": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk37": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk38": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk39": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opk40": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ordex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "orzst": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "partn": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "pernr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "preas": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "refex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rese1": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rese2": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "seqnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "sprps": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "stvor": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "subty": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "trfar": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "trfgb": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "trfgr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "trfst": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "uname": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "vglgb": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "vglgr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "vglst": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "vglsv": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "vglta": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "waers": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}"}}, "created_at": 1689111436.138137, "relation_name": "EC_DB.sap_source_integration_tests.sap_pa0008_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_t503_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_t503_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_t503_data.csv", "original_file_path": "seeds/sap_t503_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_t503_data", "fqn": ["sap_source_integration_tests", "sap_t503_data"], "alias": "sap_t503_data", "checksum": {"name": "sha256", "checksum": "152e16811ced7f188f7c99617031786274518837e0a6ed3a7917499ee7eb5ddb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "abart": "varchar", "abtyp": "varchar", "aksta": "varchar", "ansta": "varchar", "antyp": "varchar", "austa": "varchar", "burkz": "varchar", "inwid": "varchar", "konty": "varchar", "mandt": "varchar", "molga": "varchar", "persg": "varchar", "persk": "varchar", "trfkz": "varchar", "typsz": "varchar", "zeity": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"abart": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "abtyp": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "aksta": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ansta": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "antyp": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "austa": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "burkz": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "inwid": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "konty": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mandt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "molga": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "persg": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "persk": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "trfkz": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "typsz": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "zeity": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}"}}, "created_at": 1689111436.139968, "relation_name": "EC_DB.sap_source_integration_tests.sap_t503_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_pa0007_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_pa0007_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_pa0007_data.csv", "original_file_path": "seeds/sap_pa0007_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_pa0007_data", "fqn": ["sap_source_integration_tests", "sap_pa0007_data"], "alias": "sap_pa0007_data", "checksum": {"name": "sha256", "checksum": "b91e6c680d78d717f8c36623dd0d0d4106704efb04c286719a7ed13232373b6e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "aedtm": "varchar", "arbst": "numeric", "awtyp": "varchar", "begda": "varchar", "dysch": "varchar", "empct": "numeric", "endda": "varchar", "flag1": "varchar", "flag2": "varchar", "flag3": "varchar", "flag4": "varchar", "grpvl": "varchar", "histo": "varchar", "itbld": "varchar", "itxex": "varchar", "jrstd": "numeric", "kztim": "varchar", "mandt": "varchar", "maxja": "numeric", "maxmo": "numeric", "maxta": "numeric", "maxwo": "numeric", "minja": "numeric", "minmo": "numeric", "minta": "numeric", "minwo": "numeric", "mostd": "numeric", "objps": "varchar", "ordex": "varchar", "pernr": "varchar", "preas": "varchar", "refex": "varchar", "rese1": "varchar", "rese2": "varchar", "schkz": "varchar", "seqnr": "varchar", "sprps": "varchar", "subty": "varchar", "teilk": "varchar", "uname": "varchar", "wkwdy": "numeric", "wostd": "numeric", "wweek": "varchar", "zterf": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"aedtm": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "arbst": "numeric", "awtyp": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "begda": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "dysch": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "empct": "numeric", "endda": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag1": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag2": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag3": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag4": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "grpvl": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "histo": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "itbld": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "itxex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "jrstd": "numeric", "kztim": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mandt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "maxja": "numeric", "maxmo": "numeric", "maxta": "numeric", "maxwo": "numeric", "minja": "numeric", "minmo": "numeric", "minta": "numeric", "minwo": "numeric", "mostd": "numeric", "objps": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ordex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "pernr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "preas": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "refex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rese1": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rese2": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "schkz": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "seqnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "sprps": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "subty": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "teilk": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "uname": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "wkwdy": "numeric", "wostd": "numeric", "wweek": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "zterf": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}"}}, "created_at": 1689111436.141549, "relation_name": "EC_DB.sap_source_integration_tests.sap_pa0007_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_faglflexa_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_faglflexa_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_faglflexa_data.csv", "original_file_path": "seeds/sap_faglflexa_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_faglflexa_data", "fqn": ["sap_source_integration_tests", "sap_faglflexa_data"], "alias": "sap_faglflexa_data", "checksum": {"name": "sha256", "checksum": "298fcd2becba8039f045ca111a63652cb0322a2a3e7927a0e3205eccc7b52693"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "belnr": "varchar", "bschl": "varchar", "budat": "varchar", "buzei": "varchar", "docln": "varchar", "docnr": "varchar", "gjahr": "varchar", "hsl": "numeric", "kokrs": "varchar", "ksl": "numeric", "msl": "numeric", "osl": "numeric", "poper": "varchar", "racct": "varchar", "rbukrs": "varchar", "rcnlt": "varchar", "rrcty": "varchar", "rvers": "varchar", "ryear": "varchar", "timestamp": "numeric", "tsl": "numeric", "wsl": "numeric"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"belnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "bschl": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "budat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "buzei": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "docln": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "docnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "gjahr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "hsl": "numeric", "kokrs": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ksl": "numeric", "msl": "numeric", "osl": "numeric", "poper": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "racct": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rbukrs": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rcnlt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rrcty": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rvers": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ryear": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "timestamp": "numeric", "tsl": "numeric", "wsl": "numeric"}}, "created_at": 1689111436.14309, "relation_name": "EC_DB.sap_source_integration_tests.sap_faglflexa_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_pa0001_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_pa0001_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_pa0001_data.csv", "original_file_path": "seeds/sap_pa0001_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_pa0001_data", "fqn": ["sap_source_integration_tests", "sap_pa0001_data"], "alias": "sap_pa0001_data", "checksum": {"name": "sha256", "checksum": "79a84adb1d0a1d5a5e13e51dcfe17dc22c904dbbec8ab1190eabc057fe3188dd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "abkrs": "varchar", "aedtm": "varchar", "ansvh": "varchar", "begda": "varchar", "btrtl": "varchar", "budget_pd": "varchar", "bukrs": "varchar", "ename": "varchar", "endda": "varchar", "fistl": "varchar", "fkber": "varchar", "flag1": "varchar", "flag2": "varchar", "flag3": "varchar", "flag4": "varchar", "geber": "varchar", "grant_nbr": "varchar", "grpvl": "varchar", "gsber": "varchar", "histo": "varchar", "itbld": "varchar", "itxex": "varchar", "juper": "varchar", "kokrs": "varchar", "kostl": "varchar", "mandt": "varchar", "mstbr": "varchar", "objps": "varchar", "ordex": "varchar", "orgeh": "varchar", "otype": "varchar", "pernr": "varchar", "persg": "varchar", "persk": "varchar", "plans": "varchar", "preas": "varchar", "refex": "varchar", "rese1": "varchar", "rese2": "varchar", "sacha": "varchar", "sachp": "varchar", "sachz": "varchar", "sbmod": "varchar", "seqnr": "varchar", "sgmnt": "varchar", "sname": "varchar", "sprps": "varchar", "stell": "varchar", "subty": "varchar", "uname": "varchar", "vdsk1": "varchar", "werks": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"abkrs": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "aedtm": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ansvh": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "begda": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "btrtl": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "budget_pd": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "bukrs": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ename": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "endda": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "fistl": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "fkber": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag1": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag2": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag3": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag4": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "geber": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "grant_nbr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "grpvl": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "gsber": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "histo": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "itbld": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "itxex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "juper": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "kokrs": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "kostl": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mandt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mstbr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "objps": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ordex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "orgeh": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "otype": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "pernr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "persg": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "persk": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "plans": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "preas": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "refex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rese1": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rese2": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "sacha": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "sachp": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "sachz": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "sbmod": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "seqnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "sgmnt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "sname": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "sprps": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "stell": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "subty": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "uname": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "vdsk1": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "werks": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}"}}, "created_at": 1689111436.1446998, "relation_name": "EC_DB.sap_source_integration_tests.sap_pa0001_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_pa0000_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_pa0000_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_pa0000_data.csv", "original_file_path": "seeds/sap_pa0000_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_pa0000_data", "fqn": ["sap_source_integration_tests", "sap_pa0000_data"], "alias": "sap_pa0000_data", "checksum": {"name": "sha256", "checksum": "bef6716fa78d64c04235c49a61812fbfc1f0f9df20813aef3f87fd642cea9ea8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "aedtm": "varchar", "begda": "varchar", "endda": "varchar", "flag1": "varchar", "flag2": "varchar", "flag3": "varchar", "flag4": "varchar", "grpvl": "varchar", "histo": "varchar", "itbld": "varchar", "itxex": "varchar", "mandt": "varchar", "massg": "varchar", "massn": "varchar", "objps": "varchar", "ordex": "varchar", "pernr": "varchar", "preas": "varchar", "refex": "varchar", "rese1": "varchar", "rese2": "varchar", "seqnr": "varchar", "sprps": "varchar", "stat1": "varchar", "stat2": "varchar", "stat3": "varchar", "subty": "varchar", "uname": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"aedtm": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "begda": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "endda": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag1": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag2": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag3": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "flag4": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "grpvl": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "histo": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "itbld": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "itxex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mandt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "massg": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "massn": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "objps": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ordex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "pernr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "preas": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "refex": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rese1": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rese2": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "seqnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "sprps": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "stat1": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "stat2": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "stat3": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "subty": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "uname": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}"}}, "created_at": 1689111436.1462588, "relation_name": "EC_DB.sap_source_integration_tests.sap_pa0000_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_bkpf_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_bkpf_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_bkpf_data.csv", "original_file_path": "seeds/sap_bkpf_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_bkpf_data", "fqn": ["sap_source_integration_tests", "sap_bkpf_data"], "alias": "sap_bkpf_data", "checksum": {"name": "sha256", "checksum": "88a24bb87efa849842b5cc96b386849e3977fde2dc8f839ff9603f3c3ffb5f06"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "aedat": "varchar", "awkey": "varchar", "belnr": "varchar", "bldat": "varchar", "budat": "varchar", "cpudt": "varchar", "cputm": "varchar", "ctxkrs": "numeric", "frath": "numeric", "kursf": "numeric", "kurs2": "numeric", "kurs3": "numeric", "kursx": "numeric", "kur2x": "numeric", "kur3x": "numeric", "kzkrs": "numeric", "reindat": "varchar", "stodt": "varchar", "txkrs": "numeric", "upddt": "varchar", "wwert": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"aedat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "awkey": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "belnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "bldat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "budat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "cpudt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "cputm": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ctxkrs": "numeric", "frath": "numeric", "kursf": "numeric", "kurs2": "numeric", "kurs3": "numeric", "kursx": "numeric", "kur2x": "numeric", "kur3x": "numeric", "kzkrs": "numeric", "reindat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "stodt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "txkrs": "numeric", "upddt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "wwert": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}"}}, "created_at": 1689111436.1478488, "relation_name": "EC_DB.sap_source_integration_tests.sap_bkpf_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_kna1_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_kna1_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_kna1_data.csv", "original_file_path": "seeds/sap_kna1_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_kna1_data", "fqn": ["sap_source_integration_tests", "sap_kna1_data"], "alias": "sap_kna1_data", "checksum": {"name": "sha256", "checksum": "e2191e3ba1f9b6e9fd75f7985721adae8164a3b58e4319c227ad69d94638f8c5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "adrnr": "varchar", "bbbnr": "varchar", "bbsnr": "varchar", "erdat": "varchar", "hzuor": "varchar", "jmjah": "varchar", "jmzah": "varchar", "legalnat": "varchar", "mandt": "varchar", "pestle": "varchar", "regio": "varchar", "rgdate": "varchar", "rnedate": "varchar", "ric": "varchar", "umjah": "varchar", "updat": "varchar", "uptim": "varchar", "_vso_r_i_no_lyr": "varchar", "_vso_r_uld_side": "varchar", "_vso_r_load_pref": "varchar", "_vso_r_palhgt": "numeric", "umsa1": "numeric", "umsat": "numeric"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"adrnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "bbbnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "bbsnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "erdat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "hzuor": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "jmjah": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "jmzah": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "legalnat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mandt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "pestle": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "regio": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rgdate": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rnedate": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ric": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "umjah": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "updat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "uptim": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "_vso_r_i_no_lyr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "_vso_r_uld_side": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "_vso_r_load_pref": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "_vso_r_palhgt": "numeric", "umsa1": "numeric", "umsat": "numeric"}}, "created_at": 1689111436.1495, "relation_name": "EC_DB.sap_source_integration_tests.sap_kna1_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_faglflext_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_faglflext_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_faglflext_data.csv", "original_file_path": "seeds/sap_faglflext_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_faglflext_data", "fqn": ["sap_source_integration_tests", "sap_faglflext_data"], "alias": "sap_faglflext_data", "checksum": {"name": "sha256", "checksum": "2fbadd42f498da956317fe5ba7a06d9990d2994efad813859343755a2640ad9c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "numeric", "_fivetran_synced": "timestamp", "belnr": "varchar", "budat": "varchar", "docln": "varchar", "docnr": "varchar", "hslvt": "numeric", "hsl01": "numeric", "hsl02": "numeric", "hsl03": "numeric", "hsl04": "numeric", "hsl05": "numeric", "hsl06": "numeric", "hsl07": "numeric", "hsl08": "numeric", "hsl09": "numeric", "hsl10": "numeric", "hsl11": "numeric", "hsl12": "numeric", "hsl13": "numeric", "hsl14": "numeric", "hsl15": "numeric", "hsl16": "numeric", "kokrs": "varchar", "kslvt": "numeric", "ksl01": "numeric", "ksl02": "numeric", "ksl03": "numeric", "ksl04": "numeric", "ksl05": "numeric", "ksl06": "numeric", "ksl07": "numeric", "ksl08": "numeric", "ksl09": "numeric", "ksl10": "numeric", "ksl11": "numeric", "ksl12": "numeric", "ksl13": "numeric", "ksl14": "numeric", "ksl15": "numeric", "ksl16": "numeric", "mslvt": "numeric", "msl01": "numeric", "msl02": "numeric", "msl03": "numeric", "msl04": "numeric", "msl05": "numeric", "msl06": "numeric", "msl07": "numeric", "msl08": "numeric", "msl09": "numeric", "msl10": "numeric", "msl11": "numeric", "msl12": "numeric", "msl13": "numeric", "msl14": "numeric", "msl15": "numeric", "msl16": "numeric", "objnr00": "varchar", "objnr01": "varchar", "objnr02": "varchar", "objnr03": "varchar", "objnr04": "varchar", "objnr05": "varchar", "objnr06": "varchar", "objnr07": "varchar", "objnr08": "varchar", "oslvt": "numeric", "osl01": "numeric", "osl02": "numeric", "osl03": "numeric", "osl04": "numeric", "osl05": "numeric", "osl06": "numeric", "osl07": "numeric", "osl08": "numeric", "osl09": "numeric", "osl10": "numeric", "osl11": "numeric", "osl12": "numeric", "osl13": "numeric", "osl14": "numeric", "osl15": "numeric", "osl16": "numeric", "prctr": "varchar", "racct": "varchar", "rbukrs": "varchar", "rbusa": "varchar", "rfarea": "varchar", "rclnt": "varchar", "rcntr": "varchar", "rpmax": "varchar", "rrcty": "varchar", "rvers": "varchar", "ryear": "varchar", "tslvt": "numeric", "tsl01": "numeric", "tsl02": "numeric", "tsl03": "numeric", "tsl04": "numeric", "tsl05": "numeric", "tsl06": "numeric", "tsl07": "numeric", "tsl08": "numeric", "tsl09": "numeric", "tsl10": "numeric", "tsl11": "numeric", "tsl12": "numeric", "tsl13": "numeric", "tsl14": "numeric", "tsl15": "numeric", "tsl16": "numeric", "timestamp": "numeric"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"belnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "budat": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "docln": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "docnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "hslvt": "numeric", "hsl01": "numeric", "hsl02": "numeric", "hsl03": "numeric", "hsl04": "numeric", "hsl05": "numeric", "hsl06": "numeric", "hsl07": "numeric", "hsl08": "numeric", "hsl09": "numeric", "hsl10": "numeric", "hsl11": "numeric", "hsl12": "numeric", "hsl13": "numeric", "hsl14": "numeric", "hsl15": "numeric", "hsl16": "numeric", "kokrs": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "kslvt": "numeric", "ksl01": "numeric", "ksl02": "numeric", "ksl03": "numeric", "ksl04": "numeric", "ksl05": "numeric", "ksl06": "numeric", "ksl07": "numeric", "ksl08": "numeric", "ksl09": "numeric", "ksl10": "numeric", "ksl11": "numeric", "ksl12": "numeric", "ksl13": "numeric", "ksl14": "numeric", "ksl15": "numeric", "ksl16": "numeric", "mslvt": "numeric", "msl01": "numeric", "msl02": "numeric", "msl03": "numeric", "msl04": "numeric", "msl05": "numeric", "msl06": "numeric", "msl07": "numeric", "msl08": "numeric", "msl09": "numeric", "msl10": "numeric", "msl11": "numeric", "msl12": "numeric", "msl13": "numeric", "msl14": "numeric", "msl15": "numeric", "msl16": "numeric", "objnr00": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "objnr01": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "objnr02": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "objnr03": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "objnr04": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "objnr05": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "objnr06": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "objnr07": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "objnr08": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "oslvt": "numeric", "osl01": "numeric", "osl02": "numeric", "osl03": "numeric", "osl04": "numeric", "osl05": "numeric", "osl06": "numeric", "osl07": "numeric", "osl08": "numeric", "osl09": "numeric", "osl10": "numeric", "osl11": "numeric", "osl12": "numeric", "osl13": "numeric", "osl14": "numeric", "osl15": "numeric", "osl16": "numeric", "prctr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "racct": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rbukrs": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rbusa": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rfarea": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rclnt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rcntr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rpmax": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rrcty": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rvers": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "ryear": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "tslvt": "numeric", "tsl01": "numeric", "tsl02": "numeric", "tsl03": "numeric", "tsl04": "numeric", "tsl05": "numeric", "tsl06": "numeric", "tsl07": "numeric", "tsl08": "numeric", "tsl09": "numeric", "tsl10": "numeric", "tsl11": "numeric", "tsl12": "numeric", "tsl13": "numeric", "tsl14": "numeric", "tsl15": "numeric", "tsl16": "numeric", "timestamp": "numeric", "_fivetran_rowid": "numeric"}}, "created_at": 1689111436.1513522, "relation_name": "EC_DB.sap_source_integration_tests.sap_faglflext_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "seed.sap_source_integration_tests.sap_t001_data": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "sap_t001_data", "resource_type": "seed", "package_name": "sap_source_integration_tests", "path": "sap_t001_data.csv", "original_file_path": "seeds/sap_t001_data.csv", "unique_id": "seed.sap_source_integration_tests.sap_t001_data", "fqn": ["sap_source_integration_tests", "sap_t001_data"], "alias": "sap_t001_data", "checksum": {"name": "sha256", "checksum": "c8f3bd26aaff46d96b928e80d9bb917fc21629609ffae3ab44195eec1d3c9872"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_rowid": "varchar", "_fivetran_synced": "timestamp", "adrnr": "varchar", "bukrs": "varchar", "buvar": "varchar", "fikrs": "varchar", "fmhrdate": "varchar", "fstva": "varchar", "impda": "varchar", "kkber": "varchar", "kokfi": "varchar", "mandt": "varchar", "offsacct": "varchar", "opvar": "varchar", "rcomp": "varchar", "umkrs": "varchar", "waabw": "varchar", "wfvar": "varchar", "xcos": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"adrnr": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "bukrs": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "buvar": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "fikrs": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "fmhrdate": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "fstva": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "impda": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "kkber": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "kokfi": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "mandt": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "offsacct": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "opvar": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "rcomp": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "umkrs": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "waabw": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "wfvar": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}", "xcos": "{{ 'string' if target.name in ['bigquery','spark','databricks'] else 'varchar' }}"}}, "created_at": 1689111436.1529732, "relation_name": "EC_DB.sap_source_integration_tests.sap_t001_data", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/sap/dbt_sap_source/integration_tests", "depends_on": {"macros": []}}, "model.sap_source.stg_sap__lfa1": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__lfa1", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__lfa1.sql", "original_file_path": "models/stg_sap__lfa1.sql", "unique_id": "model.sap_source.stg_sap__lfa1", "fqn": ["sap_source", "stg_sap__lfa1"], "alias": "stg_sap__lfa1", "checksum": {"name": "sha256", "checksum": "8802a5f34f7c6cf230d85ad246f210ef6df57cc18b47d951857342416e6afb7e"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Vendor master (General section)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lifnr": {"name": "lifnr", "description": "Account number of vendor or creditor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brsch": {"name": "brsch", "description": "Industry key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ktokk": {"name": "ktokk", "description": "Vendor account group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "land1": {"name": "land1", "description": "Country key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loevm": {"name": "loevm", "description": "Central deletion flag for master record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name1": {"name": "name1", "description": "Name 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name2": {"name": "name2", "description": "Name 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name3": {"name": "name3", "description": "Name 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ort01": {"name": "ort01", "description": "City", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ort02": {"name": "ort02", "description": "District", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pfach": {"name": "pfach", "description": "PO Box", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pstl2": {"name": "pstl2", "description": "P.O. Box postal code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pstlz": {"name": "pstlz", "description": "Postal code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "regio": {"name": "regio", "description": "Region (State, province, county)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sortl": {"name": "sortl", "description": "Sort field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "spras": {"name": "spras", "description": "Language key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stcd1": {"name": "stcd1", "description": "Tax number 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stcd2": {"name": "stcd2", "description": "Tax number 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stcd3": {"name": "stcd3", "description": "Tax number 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stras": {"name": "stras", "description": "Street and house number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "telf1": {"name": "telf1", "description": "First telephone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "telfx": {"name": "telfx", "description": "Fax number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xcpdk": {"name": "xcpdk", "description": "Indicator (is the account a one-time account?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vbund": {"name": "vbund", "description": "Company id of trading partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kraus": {"name": "kraus", "description": "Credit information number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pfort": {"name": "pfort", "description": "PO box city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "werks": {"name": "werks", "description": "Plant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111437.013489, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__lfa1", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__lfa1_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__lfa1_tmp')),\n                staging_columns=get_lfa1_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        mandt,\n        lifnr,\n        brsch,\n        ktokk,\n        land1,\n        loevm,\n        name1,\n        name2,\n        name3,\n        ort01,\n        ort02,\n        pfach,\n        pstl2,\n        pstlz,\n        regio,\n        sortl,\n        spras,\n        stcd1,\n        stcd2,\n        stcd3,\n        stras,\n        telf1,\n        telfx,\n        xcpdk,\n        vbund,\n        kraus,\n        pfort,\n        werks\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_sap__lfa1_tmp", "package": null, "version": null}, {"name": "stg_sap__lfa1_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_lfa1_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.sap_source.stg_sap__lfa1_tmp", "model.sap_source.stg_sap__lfa1_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__lfa1.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__lfa1_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    actss\n    \n as \n    \n    actss\n    \n, \n    \n    \n    adrnr\n    \n as \n    \n    adrnr\n    \n, \n    \n    \n    alc\n    \n as \n    \n    alc\n    \n, \n    \n    \n    anred\n    \n as \n    \n    anred\n    \n, \n    \n    \n    bahns\n    \n as \n    \n    bahns\n    \n, \n    \n    \n    bbbnr\n    \n as \n    \n    bbbnr\n    \n, \n    \n    \n    bbsnr\n    \n as \n    \n    bbsnr\n    \n, \n    \n    \n    begru\n    \n as \n    \n    begru\n    \n, \n    \n    \n    brsch\n    \n as \n    \n    brsch\n    \n, \n    \n    \n    bubkz\n    \n as \n    \n    bubkz\n    \n, \n    \n    \n    carrier_conf\n    \n as \n    \n    carrier_conf\n    \n, \n    \n    \n    cnae\n    \n as \n    \n    cnae\n    \n, \n    \n    \n    comsize\n    \n as \n    \n    comsize\n    \n, \n    \n    \n    confs\n    \n as \n    \n    confs\n    \n, \n    \n    \n    crc_num\n    \n as \n    \n    crc_num\n    \n, \n    \n    \n    crtn\n    \n as \n    \n    crtn\n    \n, \n    \n    \n    cvp_xblck\n    \n as \n    \n    cvp_xblck\n    \n, \n    \n    \n    datlt\n    \n as \n    \n    datlt\n    \n, \n    \n    \n    decregpc\n    \n as \n    \n    decregpc\n    \n, \n    \n    \n    dlgrp\n    \n as \n    \n    dlgrp\n    \n, \n    \n    \n    dtams\n    \n as \n    \n    dtams\n    \n, \n    \n    \n    dtaws\n    \n as \n    \n    dtaws\n    \n, \n    \n    \n    duefl\n    \n as \n    \n    duefl\n    \n, \n    \n    \n    emnfr\n    \n as \n    \n    emnfr\n    \n, \n    \n    \n    erdat\n    \n as \n    \n    erdat\n    \n, \n    \n    \n    ernam\n    \n as \n    \n    ernam\n    \n, \n    \n    \n    esrnr\n    \n as \n    \n    esrnr\n    \n, \n    \n    \n    exp\n    \n as \n    \n    exp\n    \n, \n    \n    \n    fiskn\n    \n as \n    \n    fiskn\n    \n, \n    \n    \n    fisku\n    \n as \n    \n    fisku\n    \n, \n    \n    \n    fityp\n    \n as \n    \n    fityp\n    \n, \n    \n    \n    gbdat\n    \n as \n    \n    gbdat\n    \n, \n    \n    \n    gbort\n    \n as \n    \n    gbort\n    \n, \n    \n    \n    icmstaxpay\n    \n as \n    \n    icmstaxpay\n    \n, \n    \n    \n    indtyp\n    \n as \n    \n    indtyp\n    \n, \n    \n    \n    ipisp\n    \n as \n    \n    ipisp\n    \n, \n    \n    \n    j_1kfrepre\n    \n as \n    \n    j_1kfrepre\n    \n, \n    \n    \n    j_1kftbus\n    \n as \n    \n    j_1kftbus\n    \n, \n    \n    \n    j_1kftind\n    \n as \n    \n    j_1kftind\n    \n, \n    \n    \n    j_sc_capital\n    \n as \n    \n    j_sc_capital\n    \n, \n    \n    \n    j_sc_currency\n    \n as \n    \n    j_sc_currency\n    \n, \n    \n    \n    konzs\n    \n as \n    \n    konzs\n    \n, \n    \n    \n    kraus\n    \n as \n    \n    kraus\n    \n, \n    \n    \n    ktock\n    \n as \n    \n    ktock\n    \n, \n    \n    \n    ktokk\n    \n as \n    \n    ktokk\n    \n, \n    \n    \n    kunnr\n    \n as \n    \n    kunnr\n    \n, \n    \n    \n    land1\n    \n as \n    \n    land1\n    \n, \n    \n    \n    legalnat\n    \n as \n    \n    legalnat\n    \n, \n    \n    \n    lfurl\n    \n as \n    \n    lfurl\n    \n, \n    \n    \n    lifnr\n    \n as \n    \n    lifnr\n    \n, \n    \n    \n    lnrza\n    \n as \n    \n    lnrza\n    \n, \n    \n    \n    loevm\n    \n as \n    \n    loevm\n    \n, \n    \n    \n    ltsna\n    \n as \n    \n    ltsna\n    \n, \n    \n    \n    lzone\n    \n as \n    \n    lzone\n    \n, \n    \n    \n    mandt\n    \n as \n    \n    mandt\n    \n, \n    \n    \n    mcod1\n    \n as \n    \n    mcod1\n    \n, \n    \n    \n    mcod2\n    \n as \n    \n    mcod2\n    \n, \n    \n    \n    mcod3\n    \n as \n    \n    mcod3\n    \n, \n    \n    \n    min_comp\n    \n as \n    \n    min_comp\n    \n, \n    \n    \n    name1\n    \n as \n    \n    name1\n    \n, \n    \n    \n    name2\n    \n as \n    \n    name2\n    \n, \n    \n    \n    name3\n    \n as \n    \n    name3\n    \n, \n    \n    \n    name4\n    \n as \n    \n    name4\n    \n, \n    \n    \n    nodel\n    \n as \n    \n    nodel\n    \n, \n    \n    \n    ort01\n    \n as \n    \n    ort01\n    \n, \n    \n    \n    ort02\n    \n as \n    \n    ort02\n    \n, \n    \n    \n    pfach\n    \n as \n    \n    pfach\n    \n, \n    \n    \n    pfort\n    \n as \n    \n    pfort\n    \n, \n    \n    \n    plkal\n    \n as \n    \n    plkal\n    \n, \n    \n    \n    pmt_office\n    \n as \n    \n    pmt_office\n    \n, \n    \n    \n    podkzb\n    \n as \n    \n    podkzb\n    \n, \n    \n    \n    ppa_relevant\n    \n as \n    \n    ppa_relevant\n    \n, \n    \n    \n    profs\n    \n as \n    \n    profs\n    \n, \n    \n    \n    psofg\n    \n as \n    \n    psofg\n    \n, \n    \n    \n    psohs\n    \n as \n    \n    psohs\n    \n, \n    \n    \n    psois\n    \n as \n    \n    psois\n    \n, \n    \n    \n    pson1\n    \n as \n    \n    pson1\n    \n, \n    \n    \n    pson2\n    \n as \n    \n    pson2\n    \n, \n    \n    \n    pson3\n    \n as \n    \n    pson3\n    \n, \n    \n    \n    psost\n    \n as \n    \n    psost\n    \n, \n    \n    \n    psotl\n    \n as \n    \n    psotl\n    \n, \n    \n    \n    psovn\n    \n as \n    \n    psovn\n    \n, \n    \n    \n    pstl2\n    \n as \n    \n    pstl2\n    \n, \n    \n    \n    pstlz\n    \n as \n    \n    pstlz\n    \n, \n    \n    \n    qssys\n    \n as \n    \n    qssys\n    \n, \n    \n    \n    qssysdat\n    \n as \n    \n    qssysdat\n    \n, \n    \n    \n    regio\n    \n as \n    \n    regio\n    \n, \n    \n    \n    regss\n    \n as \n    \n    regss\n    \n, \n    \n    \n    revdb\n    \n as \n    \n    revdb\n    \n, \n    \n    \n    rg\n    \n as \n    \n    rg\n    \n, \n    \n    \n    rgdate\n    \n as \n    \n    rgdate\n    \n, \n    \n    \n    ric\n    \n as \n    \n    ric\n    \n, \n    \n    \n    rne\n    \n as \n    \n    rne\n    \n, \n    \n    \n    rnedate\n    \n as \n    \n    rnedate\n    \n, \n    \n    \n    scacd\n    \n as \n    \n    scacd\n    \n, \n    \n    \n    scheduling_type\n    \n as \n    \n    scheduling_type\n    \n, \n    \n    \n    sexkz\n    \n as \n    \n    sexkz\n    \n, \n    \n    \n    sfrgr\n    \n as \n    \n    sfrgr\n    \n, \n    \n    \n    sortl\n    \n as \n    \n    sortl\n    \n, \n    \n    \n    sperm\n    \n as \n    \n    sperm\n    \n, \n    \n    \n    sperq\n    \n as \n    \n    sperq\n    \n, \n    \n    \n    sperr\n    \n as \n    \n    sperr\n    \n, \n    \n    \n    sperz\n    \n as \n    \n    sperz\n    \n, \n    \n    \n    spras\n    \n as \n    \n    spras\n    \n, \n    \n    \n    staging_time\n    \n as \n    \n    staging_time\n    \n, \n    \n    \n    stcd1\n    \n as \n    \n    stcd1\n    \n, \n    \n    \n    stcd2\n    \n as \n    \n    stcd2\n    \n, \n    \n    \n    stcd3\n    \n as \n    \n    stcd3\n    \n, \n    \n    \n    stcd4\n    \n as \n    \n    stcd4\n    \n, \n    \n    \n    stcd5\n    \n as \n    \n    stcd5\n    \n, \n    \n    \n    stcdt\n    \n as \n    \n    stcdt\n    \n, \n    \n    \n    stceg\n    \n as \n    \n    stceg\n    \n, \n    \n    \n    stenr\n    \n as \n    \n    stenr\n    \n, \n    \n    \n    stgdl\n    \n as \n    \n    stgdl\n    \n, \n    \n    \n    stkza\n    \n as \n    \n    stkza\n    \n, \n    \n    \n    stkzn\n    \n as \n    \n    stkzn\n    \n, \n    \n    \n    stkzu\n    \n as \n    \n    stkzu\n    \n, \n    \n    \n    stras\n    \n as \n    \n    stras\n    \n, \n    \n    \n    submi_relevant\n    \n as \n    \n    submi_relevant\n    \n, \n    \n    \n    taxbs\n    \n as \n    \n    taxbs\n    \n, \n    \n    \n    tdt\n    \n as \n    \n    tdt\n    \n, \n    \n    \n    telbx\n    \n as \n    \n    telbx\n    \n, \n    \n    \n    telf1\n    \n as \n    \n    telf1\n    \n, \n    \n    \n    telf2\n    \n as \n    \n    telf2\n    \n, \n    \n    \n    telfx\n    \n as \n    \n    telfx\n    \n, \n    \n    \n    teltx\n    \n as \n    \n    teltx\n    \n, \n    \n    \n    telx1\n    \n as \n    \n    telx1\n    \n, \n    \n    \n    term_li\n    \n as \n    \n    term_li\n    \n, \n    \n    \n    transport_chain\n    \n as \n    \n    transport_chain\n    \n, \n    \n    \n    txjcd\n    \n as \n    \n    txjcd\n    \n, \n    \n    \n    uf\n    \n as \n    \n    uf\n    \n, \n    \n    \n    updat\n    \n as \n    \n    updat\n    \n, \n    \n    \n    uptim\n    \n as \n    \n    uptim\n    \n, \n    \n    \n    vbund\n    \n as \n    \n    vbund\n    \n, \n    \n    \n    werkr\n    \n as \n    \n    werkr\n    \n, \n    \n    \n    werks\n    \n as \n    \n    werks\n    \n, \n    \n    \n    xcpdk\n    \n as \n    \n    xcpdk\n    \n, \n    \n    \n    xlfza\n    \n as \n    \n    xlfza\n    \n, \n    \n    \n    xzemp\n    \n as \n    \n    xzemp\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        mandt,\n        lifnr,\n        brsch,\n        ktokk,\n        land1,\n        loevm,\n        name1,\n        name2,\n        name3,\n        ort01,\n        ort02,\n        pfach,\n        pstl2,\n        pstlz,\n        regio,\n        sortl,\n        spras,\n        stcd1,\n        stcd2,\n        stcd3,\n        stras,\n        telf1,\n        telfx,\n        xcpdk,\n        vbund,\n        kraus,\n        pfort,\n        werks\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__bkpf": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__bkpf", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__bkpf.sql", "original_file_path": "models/stg_sap__bkpf.sql", "unique_id": "model.sap_source.stg_sap__bkpf", "fqn": ["sap_source", "stg_sap__bkpf"], "alias": "stg_sap__bkpf", "checksum": {"name": "sha256", "checksum": "af06ac149b2043f9d6755d56fb75bd57379a6540afd41c65cb2de17c16cb5943"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Accounting document header", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gjahr": {"name": "gjahr", "description": "Fiscal year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bukrs": {"name": "bukrs", "description": "Company code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "belnr": {"name": "belnr", "description": "Accounting document number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blart": {"name": "blart", "description": "Document type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bldat": {"name": "bldat", "description": "Document date in document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "monat": {"name": "monat", "description": "Fiscal period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cpudt": {"name": "cpudt", "description": "Day on which accounting document was entered", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xblnr": {"name": "xblnr", "description": "Reference document number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "waers": {"name": "waers", "description": "Currency key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "glvor": {"name": "glvor", "description": "Business transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "awkey": {"name": "awkey", "description": "Reference key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fikrs": {"name": "fikrs", "description": "Financial management area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hwaer": {"name": "hwaer", "description": "Local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hwae2": {"name": "hwae2", "description": "Currency key of second local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hwae3": {"name": "hwae3", "description": "Currency key of third local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "awsys": {"name": "awsys", "description": "Logical system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ldgrp": {"name": "ldgrp", "description": "Ledger group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kursf": {"name": "kursf", "description": "Exchange rate", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xreorg": {"name": "xreorg", "description": "Doc. contains open item that was transferred during reorg.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.963722, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__bkpf", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__bkpf_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__bkpf_tmp')),\n                staging_columns=get_bkpf_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select \n        cast(mandt as {{ dbt.type_string() }}) as mandt,\n        cast(bukrs as {{ dbt.type_string() }}) as bukrs,\n        cast(belnr as {{ dbt.type_string() }}) as belnr,\n        cast(gjahr as {{ dbt.type_string() }}) as gjahr,\n        blart,\n        bldat,\n        monat,\n        cpudt,\n        xblnr,\n        waers,\n        glvor,\n        awkey,\n        fikrs,\n        hwaer,\n        hwae2,\n        hwae3,\n        awsys,\n        ldgrp,\n        kursf,\n        xreorg\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_sap__bkpf_tmp", "package": null, "version": null}, {"name": "stg_sap__bkpf_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_bkpf_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_string"], "nodes": ["model.sap_source.stg_sap__bkpf_tmp", "model.sap_source.stg_sap__bkpf_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__bkpf.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__bkpf_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _sapf15_status\n    \n as \n    \n    _sapf15_status\n    \n, \n    \n    \n    adisc\n    \n as \n    \n    adisc\n    \n, \n    \n    \n    aedat\n    \n as \n    \n    aedat\n    \n, \n    \n    \n    arcid\n    \n as \n    \n    arcid\n    \n, \n    \n    \n    ausbk\n    \n as \n    \n    ausbk\n    \n, \n    \n    \n    awkey\n    \n as \n    \n    awkey\n    \n, \n    \n    \n    awsys\n    \n as \n    \n    awsys\n    \n, \n    \n    \n    awtyp\n    \n as \n    \n    awtyp\n    \n, \n    \n    \n    basw2\n    \n as \n    \n    basw2\n    \n, \n    \n    \n    basw3\n    \n as \n    \n    basw3\n    \n, \n    \n    \n    batch\n    \n as \n    \n    batch\n    \n, \n    \n    \n    belnr\n    \n as \n    \n    belnr\n    \n, \n    \n    \n    bktxt\n    \n as \n    \n    bktxt\n    \n, \n    \n    \n    blart\n    \n as \n    \n    blart\n    \n, \n    \n    \n    bldat\n    \n as \n    \n    bldat\n    \n, \n    \n    \n    blind\n    \n as \n    \n    blind\n    \n, \n    \n    \n    brnch\n    \n as \n    \n    brnch\n    \n, \n    \n    \n    bstat\n    \n as \n    \n    bstat\n    \n, \n    \n    \n    budat\n    \n as \n    \n    budat\n    \n, \n    \n    \n    bukrs\n    \n as \n    \n    bukrs\n    \n, \n    \n    \n    bvorg\n    \n as \n    \n    bvorg\n    \n, \n    \n    \n    cash_alloc\n    \n as \n    \n    cash_alloc\n    \n, \n    \n    \n    ccins\n    \n as \n    \n    ccins\n    \n, \n    \n    \n    ccnum\n    \n as \n    \n    ccnum\n    \n, \n    \n    \n    cpudt\n    \n as \n    \n    cpudt\n    \n, \n    \n    \n    cputm\n    \n as \n    \n    cputm\n    \n, \n    \n    \n    ctxkrs\n    \n as \n    \n    ctxkrs\n    \n, \n    \n    \n    curt2\n    \n as \n    \n    curt2\n    \n, \n    \n    \n    curt3\n    \n as \n    \n    curt3\n    \n, \n    \n    \n    dbblg\n    \n as \n    \n    dbblg\n    \n, \n    \n    \n    doccat\n    \n as \n    \n    doccat\n    \n, \n    \n    \n    dokid\n    \n as \n    \n    dokid\n    \n, \n    \n    \n    duefl\n    \n as \n    \n    duefl\n    \n, \n    \n    \n    exclude_flag\n    \n as \n    \n    exclude_flag\n    \n, \n    \n    \n    fikrs\n    \n as \n    \n    fikrs\n    \n, \n    \n    \n    fm_umart\n    \n as \n    \n    fm_umart\n    \n, \n    \n    \n    follow_on\n    \n as \n    \n    follow_on\n    \n, \n    \n    \n    frath\n    \n as \n    \n    frath\n    \n, \n    \n    \n    gjahr\n    \n as \n    \n    gjahr\n    \n, \n    \n    \n    glvor\n    \n as \n    \n    glvor\n    \n, \n    \n    \n    grpid\n    \n as \n    \n    grpid\n    \n, \n    \n    \n    hwae2\n    \n as \n    \n    hwae2\n    \n, \n    \n    \n    hwae3\n    \n as \n    \n    hwae3\n    \n, \n    \n    \n    hwaer\n    \n as \n    \n    hwaer\n    \n, \n    \n    \n    iblar\n    \n as \n    \n    iblar\n    \n, \n    \n    \n    intdate\n    \n as \n    \n    intdate\n    \n, \n    \n    \n    intform\n    \n as \n    \n    intform\n    \n, \n    \n    \n    knumv\n    \n as \n    \n    knumv\n    \n, \n    \n    \n    kur2x\n    \n as \n    \n    kur2x\n    \n, \n    \n    \n    kur3x\n    \n as \n    \n    kur3x\n    \n, \n    \n    \n    kurs2\n    \n as \n    \n    kurs2\n    \n, \n    \n    \n    kurs3\n    \n as \n    \n    kurs3\n    \n, \n    \n    \n    kursf\n    \n as \n    \n    kursf\n    \n, \n    \n    \n    kurst\n    \n as \n    \n    kurst\n    \n, \n    \n    \n    kursx\n    \n as \n    \n    kursx\n    \n, \n    \n    \n    kuty2\n    \n as \n    \n    kuty2\n    \n, \n    \n    \n    kuty3\n    \n as \n    \n    kuty3\n    \n, \n    \n    \n    kzkrs\n    \n as \n    \n    kzkrs\n    \n, \n    \n    \n    kzwrs\n    \n as \n    \n    kzwrs\n    \n, \n    \n    \n    ldgrp\n    \n as \n    \n    ldgrp\n    \n, \n    \n    \n    lotkz\n    \n as \n    \n    lotkz\n    \n, \n    \n    \n    mandt\n    \n as \n    \n    mandt\n    \n, \n    \n    \n    monat\n    \n as \n    \n    monat\n    \n, \n    \n    \n    numpg\n    \n as \n    \n    numpg\n    \n, \n    \n    \n    offset_refer_dat\n    \n as \n    \n    offset_refer_dat\n    \n, \n    \n    \n    offset_status\n    \n as \n    \n    offset_status\n    \n, \n    \n    \n    penrc\n    \n as \n    \n    penrc\n    \n, \n    \n    \n    ppnam\n    \n as \n    \n    ppnam\n    \n, \n    \n    \n    propmano\n    \n as \n    \n    propmano\n    \n, \n    \n    \n    psoak\n    \n as \n    \n    psoak\n    \n, \n    \n    \n    psobt\n    \n as \n    \n    psobt\n    \n, \n    \n    \n    psodt\n    \n as \n    \n    psodt\n    \n, \n    \n    \n    psofn\n    \n as \n    \n    psofn\n    \n, \n    \n    \n    psoks\n    \n as \n    \n    psoks\n    \n, \n    \n    \n    psosg\n    \n as \n    \n    psosg\n    \n, \n    \n    \n    psotm\n    \n as \n    \n    psotm\n    \n, \n    \n    \n    psoty\n    \n as \n    \n    psoty\n    \n, \n    \n    \n    psozl\n    \n as \n    \n    psozl\n    \n, \n    \n    \n    reindat\n    \n as \n    \n    reindat\n    \n, \n    \n    \n    resubmission\n    \n as \n    \n    resubmission\n    \n, \n    \n    \n    rldnr\n    \n as \n    \n    rldnr\n    \n, \n    \n    \n    sampled\n    \n as \n    \n    sampled\n    \n, \n    \n    \n    sname\n    \n as \n    \n    sname\n    \n, \n    \n    \n    ssblk\n    \n as \n    \n    ssblk\n    \n, \n    \n    \n    stblg\n    \n as \n    \n    stblg\n    \n, \n    \n    \n    stgrd\n    \n as \n    \n    stgrd\n    \n, \n    \n    \n    stjah\n    \n as \n    \n    stjah\n    \n, \n    \n    \n    stodt\n    \n as \n    \n    stodt\n    \n, \n    \n    \n    subset\n    \n as \n    \n    subset\n    \n, \n    \n    \n    tcode\n    \n as \n    \n    tcode\n    \n, \n    \n    \n    txkrs\n    \n as \n    \n    txkrs\n    \n, \n    \n    \n    umrd2\n    \n as \n    \n    umrd2\n    \n, \n    \n    \n    umrd3\n    \n as \n    \n    umrd3\n    \n, \n    \n    \n    upddt\n    \n as \n    \n    upddt\n    \n, \n    \n    \n    usnam\n    \n as \n    \n    usnam\n    \n, \n    \n    \n    vatdate\n    \n as \n    \n    vatdate\n    \n, \n    \n    \n    waers\n    \n as \n    \n    waers\n    \n, \n    \n    \n    wwert\n    \n as \n    \n    wwert\n    \n, \n    \n    \n    xblnr\n    \n as \n    \n    xblnr\n    \n, \n    \n    \n    xblnr_alt\n    \n as \n    \n    xblnr_alt\n    \n, \n    \n    \n    xmca\n    \n as \n    \n    xmca\n    \n, \n    \n    \n    xmwst\n    \n as \n    \n    xmwst\n    \n, \n    \n    \n    xnetb\n    \n as \n    \n    xnetb\n    \n, \n    \n    \n    xref1_hd\n    \n as \n    \n    xref1_hd\n    \n, \n    \n    \n    xref2_hd\n    \n as \n    \n    xref2_hd\n    \n, \n    \n    \n    xreorg\n    \n as \n    \n    xreorg\n    \n, \n    \n    \n    xreversal\n    \n as \n    \n    xreversal\n    \n, \n    \n    \n    xrueb\n    \n as \n    \n    xrueb\n    \n, \n    \n    \n    xsnet\n    \n as \n    \n    xsnet\n    \n, \n    \n    \n    xsplit\n    \n as \n    \n    xsplit\n    \n, \n    \n    \n    xstov\n    \n as \n    \n    xstov\n    \n, \n    \n    \n    xusvr\n    \n as \n    \n    xusvr\n    \n, \n    \n    \n    xwvof\n    \n as \n    \n    xwvof\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select \n        cast(mandt as TEXT) as mandt,\n        cast(bukrs as TEXT) as bukrs,\n        cast(belnr as TEXT) as belnr,\n        cast(gjahr as TEXT) as gjahr,\n        blart,\n        bldat,\n        monat,\n        cpudt,\n        xblnr,\n        waers,\n        glvor,\n        awkey,\n        fikrs,\n        hwaer,\n        hwae2,\n        hwae3,\n        awsys,\n        ldgrp,\n        kursf,\n        xreorg\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__kna1": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__kna1", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__kna1.sql", "original_file_path": "models/stg_sap__kna1.sql", "unique_id": "model.sap_source.stg_sap__kna1", "fqn": ["sap_source", "stg_sap__kna1"], "alias": "stg_sap__kna1", "checksum": {"name": "sha256", "checksum": "590587eb35c3e0c5e96ee72884b63678425d7f1f527c898f5a86809bf4b06517"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "General Data in Customer Master", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kunnr": {"name": "kunnr", "description": "Customer number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brsch": {"name": "brsch", "description": "Industry key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ktokd": {"name": "ktokd", "description": "Customer account group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kukla": {"name": "kukla", "description": "Customer classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "land1": {"name": "land1", "description": "Country key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lifnr": {"name": "lifnr", "description": "Account number of vendor or creditor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loevm": {"name": "loevm", "description": "Central deletion flag for master record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name1": {"name": "name1", "description": "Name 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name2": {"name": "name2", "description": "Name 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name3": {"name": "name3", "description": "Name 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "niels": {"name": "niels", "description": "Nielsen ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ort01": {"name": "ort01", "description": "City", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ort02": {"name": "ort02", "description": "District", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "periv": {"name": "periv", "description": "Fiscal year variant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pfach": {"name": "pfach", "description": "PO Box", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pfort": {"name": "pfort", "description": "PO Box city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pstl2": {"name": "pstl2", "description": "PO Box postal code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pstlz": {"name": "pstlz", "description": "Postal code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "regio": {"name": "regio", "description": "Regional market", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "counc": {"name": "counc", "description": "County code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sortl": {"name": "sortl", "description": "Sort field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "spras": {"name": "spras", "description": "Language key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stcd1": {"name": "stcd1", "description": "Tax number 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stcd2": {"name": "stcd2", "description": "Tax number 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stcd3": {"name": "stcd3", "description": "Tax number 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stras": {"name": "stras", "description": "House number and street", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "telf1": {"name": "telf1", "description": "First telephone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "telfx": {"name": "telfx", "description": "Fax number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xcpdk": {"name": "xcpdk", "description": "Indictoar (Is the account a one-time account?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vbund": {"name": "vbund", "description": "Company id of trading partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dear6": {"name": "dear6", "description": "Indicator (Consumer)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bran1": {"name": "bran1", "description": "Industry code 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bran2": {"name": "bran2", "description": "Industry code 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bran3": {"name": "bran3", "description": "Industry code 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bran4": {"name": "bran4", "description": "Industry code 4", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bran5": {"name": "bran5", "description": "Industry code 5", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "abrvw": {"name": "abrvw", "description": "Usage indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "werks": {"name": "werks", "description": "Plant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111437.009075, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__kna1", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__kna1_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__kna1_tmp')),\n                staging_columns=get_kna1_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        mandt,\n        kunnr,\n        brsch,\n        ktokd,\n        kukla,\n        land1,\n        lifnr,\n        loevm,\n        name1,\n        name2,\n        name3,\n        niels,\n        ort01,\n        ort02,\n        periv,\n        pfach,\n        pfort,\n        pstl2,\n        pstlz,\n        regio,\n        counc,\n        sortl,\n        spras,\n        stcd1,\n        stcd2,\n        stcd3,\n        stras,\n        telf1,\n        telfx,\n        xcpdk,\n        vbund,\n        dear6,\n        bran1,\n        bran2,\n        bran3,\n        bran4,\n        bran5,\n        abrvw,\n        werks\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_sap__kna1_tmp", "package": null, "version": null}, {"name": "stg_sap__kna1_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_kna1_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.sap_source.stg_sap__kna1_tmp", "model.sap_source.stg_sap__kna1_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__kna1.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__kna1_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _vso_r_dpoint\n    \n as \n    \n    _vso_r_dpoint\n    \n, \n    \n    \n    _vso_r_i_no_lyr\n    \n as \n    \n    _vso_r_i_no_lyr\n    \n, \n    \n    \n    _vso_r_load_pref\n    \n as \n    \n    _vso_r_load_pref\n    \n, \n    \n    \n    _vso_r_matpal\n    \n as \n    \n    _vso_r_matpal\n    \n, \n    \n    \n    _vso_r_one_mat\n    \n as \n    \n    _vso_r_one_mat\n    \n, \n    \n    \n    _vso_r_one_sort\n    \n as \n    \n    _vso_r_one_sort\n    \n, \n    \n    \n    _vso_r_pal_ul\n    \n as \n    \n    _vso_r_pal_ul\n    \n, \n    \n    \n    _vso_r_palhgt\n    \n as \n    \n    _vso_r_palhgt\n    \n, \n    \n    \n    _vso_r_pk_mat\n    \n as \n    \n    _vso_r_pk_mat\n    \n, \n    \n    \n    _vso_r_uld_side\n    \n as \n    \n    _vso_r_uld_side\n    \n, \n    \n    \n    _xlso_client\n    \n as \n    \n    _xlso_client\n    \n, \n    \n    \n    _xlso_customer\n    \n as \n    \n    _xlso_customer\n    \n, \n    \n    \n    _xlso_partner\n    \n as \n    \n    _xlso_partner\n    \n, \n    \n    \n    _xlso_pref_pay\n    \n as \n    \n    _xlso_pref_pay\n    \n, \n    \n    \n    _xlso_sysid\n    \n as \n    \n    _xlso_sysid\n    \n, \n    \n    \n    abrvw\n    \n as \n    \n    abrvw\n    \n, \n    \n    \n    adrnr\n    \n as \n    \n    adrnr\n    \n, \n    \n    \n    alc\n    \n as \n    \n    alc\n    \n, \n    \n    \n    anred\n    \n as \n    \n    anred\n    \n, \n    \n    \n    aufsd\n    \n as \n    \n    aufsd\n    \n, \n    \n    \n    bahne\n    \n as \n    \n    bahne\n    \n, \n    \n    \n    bahns\n    \n as \n    \n    bahns\n    \n, \n    \n    \n    bbbnr\n    \n as \n    \n    bbbnr\n    \n, \n    \n    \n    bbsnr\n    \n as \n    \n    bbsnr\n    \n, \n    \n    \n    begru\n    \n as \n    \n    begru\n    \n, \n    \n    \n    bran1\n    \n as \n    \n    bran1\n    \n, \n    \n    \n    bran2\n    \n as \n    \n    bran2\n    \n, \n    \n    \n    bran3\n    \n as \n    \n    bran3\n    \n, \n    \n    \n    bran4\n    \n as \n    \n    bran4\n    \n, \n    \n    \n    bran5\n    \n as \n    \n    bran5\n    \n, \n    \n    \n    brsch\n    \n as \n    \n    brsch\n    \n, \n    \n    \n    bubkz\n    \n as \n    \n    bubkz\n    \n, \n    \n    \n    cassd\n    \n as \n    \n    cassd\n    \n, \n    \n    \n    ccc01\n    \n as \n    \n    ccc01\n    \n, \n    \n    \n    ccc02\n    \n as \n    \n    ccc02\n    \n, \n    \n    \n    ccc03\n    \n as \n    \n    ccc03\n    \n, \n    \n    \n    ccc04\n    \n as \n    \n    ccc04\n    \n, \n    \n    \n    cfopc\n    \n as \n    \n    cfopc\n    \n, \n    \n    \n    cityc\n    \n as \n    \n    cityc\n    \n, \n    \n    \n    civve\n    \n as \n    \n    civve\n    \n, \n    \n    \n    cnae\n    \n as \n    \n    cnae\n    \n, \n    \n    \n    comsize\n    \n as \n    \n    comsize\n    \n, \n    \n    \n    confs\n    \n as \n    \n    confs\n    \n, \n    \n    \n    counc\n    \n as \n    \n    counc\n    \n, \n    \n    \n    crtn\n    \n as \n    \n    crtn\n    \n, \n    \n    \n    cvp_xblck\n    \n as \n    \n    cvp_xblck\n    \n, \n    \n    \n    datlt\n    \n as \n    \n    datlt\n    \n, \n    \n    \n    dear1\n    \n as \n    \n    dear1\n    \n, \n    \n    \n    dear2\n    \n as \n    \n    dear2\n    \n, \n    \n    \n    dear3\n    \n as \n    \n    dear3\n    \n, \n    \n    \n    dear4\n    \n as \n    \n    dear4\n    \n, \n    \n    \n    dear5\n    \n as \n    \n    dear5\n    \n, \n    \n    \n    dear6\n    \n as \n    \n    dear6\n    \n, \n    \n    \n    decregpc\n    \n as \n    \n    decregpc\n    \n, \n    \n    \n    dtams\n    \n as \n    \n    dtams\n    \n, \n    \n    \n    dtaws\n    \n as \n    \n    dtaws\n    \n, \n    \n    \n    duefl\n    \n as \n    \n    duefl\n    \n, \n    \n    \n    duns\n    \n as \n    \n    duns\n    \n, \n    \n    \n    duns4\n    \n as \n    \n    duns4\n    \n, \n    \n    \n    ekont\n    \n as \n    \n    ekont\n    \n, \n    \n    \n    erdat\n    \n as \n    \n    erdat\n    \n, \n    \n    \n    ernam\n    \n as \n    \n    ernam\n    \n, \n    \n    \n    etikg\n    \n as \n    \n    etikg\n    \n, \n    \n    \n    exabl\n    \n as \n    \n    exabl\n    \n, \n    \n    \n    exp\n    \n as \n    \n    exp\n    \n, \n    \n    \n    faksd\n    \n as \n    \n    faksd\n    \n, \n    \n    \n    fee_schedule\n    \n as \n    \n    fee_schedule\n    \n, \n    \n    \n    fiskn\n    \n as \n    \n    fiskn\n    \n, \n    \n    \n    fityp\n    \n as \n    \n    fityp\n    \n, \n    \n    \n    gform\n    \n as \n    \n    gform\n    \n, \n    \n    \n    hzuor\n    \n as \n    \n    hzuor\n    \n, \n    \n    \n    icmstaxpay\n    \n as \n    \n    icmstaxpay\n    \n, \n    \n    \n    indtyp\n    \n as \n    \n    indtyp\n    \n, \n    \n    \n    inspatdebi\n    \n as \n    \n    inspatdebi\n    \n, \n    \n    \n    inspbydebi\n    \n as \n    \n    inspbydebi\n    \n, \n    \n    \n    j_1kfrepre\n    \n as \n    \n    j_1kfrepre\n    \n, \n    \n    \n    j_1kftbus\n    \n as \n    \n    j_1kftbus\n    \n, \n    \n    \n    j_1kftind\n    \n as \n    \n    j_1kftind\n    \n, \n    \n    \n    jmjah\n    \n as \n    \n    jmjah\n    \n, \n    \n    \n    jmzah\n    \n as \n    \n    jmzah\n    \n, \n    \n    \n    katr1\n    \n as \n    \n    katr1\n    \n, \n    \n    \n    katr10\n    \n as \n    \n    katr10\n    \n, \n    \n    \n    katr2\n    \n as \n    \n    katr2\n    \n, \n    \n    \n    katr3\n    \n as \n    \n    katr3\n    \n, \n    \n    \n    katr4\n    \n as \n    \n    katr4\n    \n, \n    \n    \n    katr5\n    \n as \n    \n    katr5\n    \n, \n    \n    \n    katr6\n    \n as \n    \n    katr6\n    \n, \n    \n    \n    katr7\n    \n as \n    \n    katr7\n    \n, \n    \n    \n    katr8\n    \n as \n    \n    katr8\n    \n, \n    \n    \n    katr9\n    \n as \n    \n    katr9\n    \n, \n    \n    \n    kdkg1\n    \n as \n    \n    kdkg1\n    \n, \n    \n    \n    kdkg2\n    \n as \n    \n    kdkg2\n    \n, \n    \n    \n    kdkg3\n    \n as \n    \n    kdkg3\n    \n, \n    \n    \n    kdkg4\n    \n as \n    \n    kdkg4\n    \n, \n    \n    \n    kdkg5\n    \n as \n    \n    kdkg5\n    \n, \n    \n    \n    knazk\n    \n as \n    \n    knazk\n    \n, \n    \n    \n    knrza\n    \n as \n    \n    knrza\n    \n, \n    \n    \n    knurl\n    \n as \n    \n    knurl\n    \n, \n    \n    \n    konzs\n    \n as \n    \n    konzs\n    \n, \n    \n    \n    ktocd\n    \n as \n    \n    ktocd\n    \n, \n    \n    \n    ktokd\n    \n as \n    \n    ktokd\n    \n, \n    \n    \n    kukla\n    \n as \n    \n    kukla\n    \n, \n    \n    \n    kunnr\n    \n as \n    \n    kunnr\n    \n, \n    \n    \n    land1\n    \n as \n    \n    land1\n    \n, \n    \n    \n    legalnat\n    \n as \n    \n    legalnat\n    \n, \n    \n    \n    lifnr\n    \n as \n    \n    lifnr\n    \n, \n    \n    \n    lifsd\n    \n as \n    \n    lifsd\n    \n, \n    \n    \n    locco\n    \n as \n    \n    locco\n    \n, \n    \n    \n    loevm\n    \n as \n    \n    loevm\n    \n, \n    \n    \n    lzone\n    \n as \n    \n    lzone\n    \n, \n    \n    \n    mandt\n    \n as \n    \n    mandt\n    \n, \n    \n    \n    mcod1\n    \n as \n    \n    mcod1\n    \n, \n    \n    \n    mcod2\n    \n as \n    \n    mcod2\n    \n, \n    \n    \n    mcod3\n    \n as \n    \n    mcod3\n    \n, \n    \n    \n    milve\n    \n as \n    \n    milve\n    \n, \n    \n    \n    name1\n    \n as \n    \n    name1\n    \n, \n    \n    \n    name2\n    \n as \n    \n    name2\n    \n, \n    \n    \n    name3\n    \n as \n    \n    name3\n    \n, \n    \n    \n    name4\n    \n as \n    \n    name4\n    \n, \n    \n    \n    niels\n    \n as \n    \n    niels\n    \n, \n    \n    \n    nodel\n    \n as \n    \n    nodel\n    \n, \n    \n    \n    oid_poreqd\n    \n as \n    \n    oid_poreqd\n    \n, \n    \n    \n    oidrc\n    \n as \n    \n    oidrc\n    \n, \n    \n    \n    oipbl\n    \n as \n    \n    oipbl\n    \n, \n    \n    \n    ort01\n    \n as \n    \n    ort01\n    \n, \n    \n    \n    ort02\n    \n as \n    \n    ort02\n    \n, \n    \n    \n    periv\n    \n as \n    \n    periv\n    \n, \n    \n    \n    pfach\n    \n as \n    \n    pfach\n    \n, \n    \n    \n    pfort\n    \n as \n    \n    pfort\n    \n, \n    \n    \n    pmt_office\n    \n as \n    \n    pmt_office\n    \n, \n    \n    \n    psofg\n    \n as \n    \n    psofg\n    \n, \n    \n    \n    psohs\n    \n as \n    \n    psohs\n    \n, \n    \n    \n    psois\n    \n as \n    \n    psois\n    \n, \n    \n    \n    pson1\n    \n as \n    \n    pson1\n    \n, \n    \n    \n    pson2\n    \n as \n    \n    pson2\n    \n, \n    \n    \n    pson3\n    \n as \n    \n    pson3\n    \n, \n    \n    \n    psoo1\n    \n as \n    \n    psoo1\n    \n, \n    \n    \n    psoo2\n    \n as \n    \n    psoo2\n    \n, \n    \n    \n    psoo3\n    \n as \n    \n    psoo3\n    \n, \n    \n    \n    psoo4\n    \n as \n    \n    psoo4\n    \n, \n    \n    \n    psoo5\n    \n as \n    \n    psoo5\n    \n, \n    \n    \n    psost\n    \n as \n    \n    psost\n    \n, \n    \n    \n    psotl\n    \n as \n    \n    psotl\n    \n, \n    \n    \n    psovn\n    \n as \n    \n    psovn\n    \n, \n    \n    \n    pstl2\n    \n as \n    \n    pstl2\n    \n, \n    \n    \n    pstlz\n    \n as \n    \n    pstlz\n    \n, \n    \n    \n    regio\n    \n as \n    \n    regio\n    \n, \n    \n    \n    rg\n    \n as \n    \n    rg\n    \n, \n    \n    \n    rgdate\n    \n as \n    \n    rgdate\n    \n, \n    \n    \n    ric\n    \n as \n    \n    ric\n    \n, \n    \n    \n    rne\n    \n as \n    \n    rne\n    \n, \n    \n    \n    rnedate\n    \n as \n    \n    rnedate\n    \n, \n    \n    \n    rpmkr\n    \n as \n    \n    rpmkr\n    \n, \n    \n    \n    sortl\n    \n as \n    \n    sortl\n    \n, \n    \n    \n    sperr\n    \n as \n    \n    sperr\n    \n, \n    \n    \n    sperz\n    \n as \n    \n    sperz\n    \n, \n    \n    \n    spras\n    \n as \n    \n    spras\n    \n, \n    \n    \n    stcd1\n    \n as \n    \n    stcd1\n    \n, \n    \n    \n    stcd2\n    \n as \n    \n    stcd2\n    \n, \n    \n    \n    stcd3\n    \n as \n    \n    stcd3\n    \n, \n    \n    \n    stcd4\n    \n as \n    \n    stcd4\n    \n, \n    \n    \n    stcd5\n    \n as \n    \n    stcd5\n    \n, \n    \n    \n    stcdt\n    \n as \n    \n    stcdt\n    \n, \n    \n    \n    stceg\n    \n as \n    \n    stceg\n    \n, \n    \n    \n    stkza\n    \n as \n    \n    stkza\n    \n, \n    \n    \n    stkzn\n    \n as \n    \n    stkzn\n    \n, \n    \n    \n    stkzu\n    \n as \n    \n    stkzu\n    \n, \n    \n    \n    stras\n    \n as \n    \n    stras\n    \n, \n    \n    \n    suframa\n    \n as \n    \n    suframa\n    \n, \n    \n    \n    tdt\n    \n as \n    \n    tdt\n    \n, \n    \n    \n    telbx\n    \n as \n    \n    telbx\n    \n, \n    \n    \n    telf1\n    \n as \n    \n    telf1\n    \n, \n    \n    \n    telf2\n    \n as \n    \n    telf2\n    \n, \n    \n    \n    telfx\n    \n as \n    \n    telfx\n    \n, \n    \n    \n    teltx\n    \n as \n    \n    teltx\n    \n, \n    \n    \n    telx1\n    \n as \n    \n    telx1\n    \n, \n    \n    \n    txjcd\n    \n as \n    \n    txjcd\n    \n, \n    \n    \n    txlw1\n    \n as \n    \n    txlw1\n    \n, \n    \n    \n    txlw2\n    \n as \n    \n    txlw2\n    \n, \n    \n    \n    uf\n    \n as \n    \n    uf\n    \n, \n    \n    \n    umjah\n    \n as \n    \n    umjah\n    \n, \n    \n    \n    umsa1\n    \n as \n    \n    umsa1\n    \n, \n    \n    \n    umsat\n    \n as \n    \n    umsat\n    \n, \n    \n    \n    updat\n    \n as \n    \n    updat\n    \n, \n    \n    \n    uptim\n    \n as \n    \n    uptim\n    \n, \n    \n    \n    uwaer\n    \n as \n    \n    uwaer\n    \n, \n    \n    \n    vbund\n    \n as \n    \n    vbund\n    \n, \n    \n    \n    werks\n    \n as \n    \n    werks\n    \n, \n    \n    \n    xcpdk\n    \n as \n    \n    xcpdk\n    \n, \n    \n    \n    xicms\n    \n as \n    \n    xicms\n    \n, \n    \n    \n    xknza\n    \n as \n    \n    xknza\n    \n, \n    \n    \n    xsubt\n    \n as \n    \n    xsubt\n    \n, \n    \n    \n    xxipi\n    \n as \n    \n    xxipi\n    \n, \n    \n    \n    xzemp\n    \n as \n    \n    xzemp\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        mandt,\n        kunnr,\n        brsch,\n        ktokd,\n        kukla,\n        land1,\n        lifnr,\n        loevm,\n        name1,\n        name2,\n        name3,\n        niels,\n        ort01,\n        ort02,\n        periv,\n        pfach,\n        pfort,\n        pstl2,\n        pstlz,\n        regio,\n        counc,\n        sortl,\n        spras,\n        stcd1,\n        stcd2,\n        stcd3,\n        stras,\n        telf1,\n        telfx,\n        xcpdk,\n        vbund,\n        dear6,\n        bran1,\n        bran2,\n        bran3,\n        bran4,\n        bran5,\n        abrvw,\n        werks\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__pa0001": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__pa0001", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__pa0001.sql", "original_file_path": "models/stg_sap__pa0001.sql", "unique_id": "model.sap_source.stg_sap__pa0001", "fqn": ["sap_source", "stg_sap__pa0001"], "alias": "stg_sap__pa0001", "checksum": {"name": "sha256", "checksum": "77be1186353760f09623592dba2cd096114a4cd80282ffa2ac9bdcba82aba874"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "HR master record--infotype 0001 (org. assignment)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pernr": {"name": "pernr", "description": "Personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subty": {"name": "subty", "description": "Subtype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objps": {"name": "objps", "description": "Object identification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sprps": {"name": "sprps", "description": "Lock indicator for HR master data record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "begda": {"name": "begda", "description": "Start date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "endda": {"name": "endda", "description": "End date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seqnr": {"name": "seqnr", "description": "Number of infotype record with same key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "abkrs": {"name": "abkrs", "description": "Payroll area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aedtm": {"name": "aedtm", "description": "Changed on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ansvh": {"name": "ansvh", "description": "Work contract", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "btrtl": {"name": "btrtl", "description": "Personnel subarea", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "budget_pd": {"name": "budget_pd", "description": "FM--Budget period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bukrs": {"name": "bukrs", "description": "Company code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ename": {"name": "ename", "description": "Formatted name of employee or applicant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fistl": {"name": "fistl", "description": "Funds center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fkber": {"name": "fkber", "description": "Functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag1": {"name": "flag1", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag2": {"name": "flag2", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag3": {"name": "flag3", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag4": {"name": "flag4", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geber": {"name": "geber", "description": "Fund", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grant_nbr": {"name": "grant_nbr", "description": "Grant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grpvl": {"name": "grpvl", "description": "Grouping value for personnel assignments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gsber": {"name": "gsber", "description": "Business area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "histo": {"name": "histo", "description": "Historical record flag", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itbld": {"name": "itbld", "description": "Infotype screen control", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itxex": {"name": "itxex", "description": "Text exists for infotype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "juper": {"name": "juper", "description": "Legal person", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kokrs": {"name": "kokrs", "description": "Controlling area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kostl": {"name": "kostl", "description": "Cost center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mstbr": {"name": "mstbr", "description": "Supervisor area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ordex": {"name": "ordex", "description": "Confirmation fields exist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "orgeh": {"name": "orgeh", "description": "Organizational unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "otype": {"name": "otype", "description": "Object type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "persg": {"name": "persg", "description": "Employee group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "persk": {"name": "persk", "description": "Employee subgroup", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plans": {"name": "plans", "description": "Position", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preas": {"name": "preas", "description": "Reason for changing master data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refex": {"name": "refex", "description": "Reference fields exist (primary/secondary costs)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese1": {"name": "rese1", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese2": {"name": "rese2", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sacha": {"name": "sacha", "description": "Payroll administrator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sachp": {"name": "sachp", "description": "Administrator for HR master data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sachz": {"name": "sachz", "description": "Administrator for time recording", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sbmod": {"name": "sbmod", "description": "Administrator group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sgmnt": {"name": "sgmnt", "description": "Segment for segmental reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sname": {"name": "sname", "description": "Employee's name (Sortable by LAST NAME FIRST NAME)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stell": {"name": "stell", "description": "Job", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uname": {"name": "uname", "description": "Name of person who changed object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vdsk1": {"name": "vdsk1", "description": "Organizational key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "werks": {"name": "werks", "description": "Personnel area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111437.077822, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0001", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__pa0001_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__pa0001_tmp')),\n                staging_columns=get_pa0001_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        mandt,\n        pernr,\n        subty,\n        objps,\n        sprps,\n        endda,\n        begda,\n        seqnr,\n        abkrs,\n        aedtm,\n        ansvh,\n        btrtl,\n        budget_pd,\n        bukrs,\n        ename,\n        fistl,\n        fkber,\n        flag1,\n        flag2,\n        flag3,\n        flag4,\n        geber,\n        grant_nbr,\n        grpvl,\n        gsber,\n        histo,\n        itbld,\n        itxex,\n        juper,\n        kokrs,\n        kostl,\n        mstbr,\n        ordex,\n        orgeh,\n        otype,\n        persg,\n        persk,\n        plans,\n        preas,\n        refex,\n        rese1,\n        rese2,\n        sacha,\n        sachp,\n        sachz,\n        sbmod,\n        sgmnt,\n        sname,\n        stell,\n        uname,\n        vdsk1,\n        werks\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_sap__pa0001_tmp", "package": null, "version": null}, {"name": "stg_sap__pa0001_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_pa0001_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.sap_source.stg_sap__pa0001_tmp", "model.sap_source.stg_sap__pa0001_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__pa0001.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0001_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    abkrs\n    \n as \n    \n    abkrs\n    \n, \n    \n    \n    aedtm\n    \n as \n    \n    aedtm\n    \n, \n    \n    \n    ansvh\n    \n as \n    \n    ansvh\n    \n, \n    \n    \n    begda\n    \n as \n    \n    begda\n    \n, \n    \n    \n    btrtl\n    \n as \n    \n    btrtl\n    \n, \n    \n    \n    budget_pd\n    \n as \n    \n    budget_pd\n    \n, \n    \n    \n    bukrs\n    \n as \n    \n    bukrs\n    \n, \n    \n    \n    ename\n    \n as \n    \n    ename\n    \n, \n    \n    \n    endda\n    \n as \n    \n    endda\n    \n, \n    \n    \n    fistl\n    \n as \n    \n    fistl\n    \n, \n    \n    \n    fkber\n    \n as \n    \n    fkber\n    \n, \n    \n    \n    flag1\n    \n as \n    \n    flag1\n    \n, \n    \n    \n    flag2\n    \n as \n    \n    flag2\n    \n, \n    \n    \n    flag3\n    \n as \n    \n    flag3\n    \n, \n    \n    \n    flag4\n    \n as \n    \n    flag4\n    \n, \n    \n    \n    geber\n    \n as \n    \n    geber\n    \n, \n    \n    \n    grant_nbr\n    \n as \n    \n    grant_nbr\n    \n, \n    \n    \n    grpvl\n    \n as \n    \n    grpvl\n    \n, \n    \n    \n    gsber\n    \n as \n    \n    gsber\n    \n, \n    \n    \n    histo\n    \n as \n    \n    histo\n    \n, \n    \n    \n    itbld\n    \n as \n    \n    itbld\n    \n, \n    \n    \n    itxex\n    \n as \n    \n    itxex\n    \n, \n    \n    \n    juper\n    \n as \n    \n    juper\n    \n, \n    \n    \n    kokrs\n    \n as \n    \n    kokrs\n    \n, \n    \n    \n    kostl\n    \n as \n    \n    kostl\n    \n, \n    \n    \n    mandt\n    \n as \n    \n    mandt\n    \n, \n    \n    \n    mstbr\n    \n as \n    \n    mstbr\n    \n, \n    \n    \n    objps\n    \n as \n    \n    objps\n    \n, \n    \n    \n    ordex\n    \n as \n    \n    ordex\n    \n, \n    \n    \n    orgeh\n    \n as \n    \n    orgeh\n    \n, \n    \n    \n    otype\n    \n as \n    \n    otype\n    \n, \n    \n    \n    pernr\n    \n as \n    \n    pernr\n    \n, \n    \n    \n    persg\n    \n as \n    \n    persg\n    \n, \n    \n    \n    persk\n    \n as \n    \n    persk\n    \n, \n    \n    \n    plans\n    \n as \n    \n    plans\n    \n, \n    \n    \n    preas\n    \n as \n    \n    preas\n    \n, \n    \n    \n    refex\n    \n as \n    \n    refex\n    \n, \n    \n    \n    rese1\n    \n as \n    \n    rese1\n    \n, \n    \n    \n    rese2\n    \n as \n    \n    rese2\n    \n, \n    \n    \n    sacha\n    \n as \n    \n    sacha\n    \n, \n    \n    \n    sachp\n    \n as \n    \n    sachp\n    \n, \n    \n    \n    sachz\n    \n as \n    \n    sachz\n    \n, \n    \n    \n    sbmod\n    \n as \n    \n    sbmod\n    \n, \n    \n    \n    seqnr\n    \n as \n    \n    seqnr\n    \n, \n    \n    \n    sgmnt\n    \n as \n    \n    sgmnt\n    \n, \n    \n    \n    sname\n    \n as \n    \n    sname\n    \n, \n    \n    \n    sprps\n    \n as \n    \n    sprps\n    \n, \n    \n    \n    stell\n    \n as \n    \n    stell\n    \n, \n    \n    \n    subty\n    \n as \n    \n    subty\n    \n, \n    \n    \n    uname\n    \n as \n    \n    uname\n    \n, \n    \n    \n    vdsk1\n    \n as \n    \n    vdsk1\n    \n, \n    \n    \n    werks\n    \n as \n    \n    werks\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        mandt,\n        pernr,\n        subty,\n        objps,\n        sprps,\n        endda,\n        begda,\n        seqnr,\n        abkrs,\n        aedtm,\n        ansvh,\n        btrtl,\n        budget_pd,\n        bukrs,\n        ename,\n        fistl,\n        fkber,\n        flag1,\n        flag2,\n        flag3,\n        flag4,\n        geber,\n        grant_nbr,\n        grpvl,\n        gsber,\n        histo,\n        itbld,\n        itxex,\n        juper,\n        kokrs,\n        kostl,\n        mstbr,\n        ordex,\n        orgeh,\n        otype,\n        persg,\n        persk,\n        plans,\n        preas,\n        refex,\n        rese1,\n        rese2,\n        sacha,\n        sachp,\n        sachz,\n        sbmod,\n        sgmnt,\n        sname,\n        stell,\n        uname,\n        vdsk1,\n        werks\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__ska1": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__ska1", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__ska1.sql", "original_file_path": "models/stg_sap__ska1.sql", "unique_id": "model.sap_source.stg_sap__ska1", "fqn": ["sap_source", "stg_sap__ska1"], "alias": "stg_sap__ska1", "checksum": {"name": "sha256", "checksum": "ec67969ca405cb8cc9bcf26fc8851fd9d99b0230229462054c0cddc86b17a466"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "G/L Account Master (Chart of Accounts)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ktopl": {"name": "ktopl", "description": "Chart of accounts", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saknr": {"name": "saknr", "description": "G/L account number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bilkt": {"name": "bilkt", "description": "Group account number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gvtyp": {"name": "gvtyp", "description": "P&L statement account type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vbund": {"name": "vbund", "description": "Company id of tradiing partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xbilk": {"name": "xbilk", "description": "Indicator (account is a balance sheet account?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sakan": {"name": "sakan", "description": "G/L account number, significant length", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "erdat": {"name": "erdat", "description": "Date on which the record was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ernam": {"name": "ernam", "description": "Name of person who created the object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ktoks": {"name": "ktoks", "description": "G/L account group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xloev": {"name": "xloev", "description": "Indicator (account marked for deletion?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xspea": {"name": "xspea", "description": "Indicator (account is blocked for creation?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xspeb": {"name": "xspeb", "description": "Indicator (Is account blocked for posting?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xspep": {"name": "xspep", "description": "Indicator (Account blocked for planning?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "func_area": {"name": "func_area", "description": "Functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mustr": {"name": "mustr", "description": "Number of the sample account", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111437.132576, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__ska1", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__ska1_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__ska1_tmp')),\n                staging_columns=get_ska1_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        mandt,\n        ktopl,\n        saknr,\n        bilkt,\n        gvtyp,\n        vbund,\n        xbilk,\n        sakan,\n        erdat,\n        ernam,\n        ktoks,\n        xloev,\n        xspea,\n        xspeb,\n        xspep,\n        func_area,\n        mustr,\t\n        _fivetran_rowid,\n        _fivetran_deleted,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_sap__ska1_tmp", "package": null, "version": null}, {"name": "stg_sap__ska1_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_ska1_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.sap_source.stg_sap__ska1_tmp", "model.sap_source.stg_sap__ska1_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__ska1.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__ska1_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bilkt\n    \n as \n    \n    bilkt\n    \n, \n    \n    \n    erdat\n    \n as \n    \n    erdat\n    \n, \n    \n    \n    ernam\n    \n as \n    \n    ernam\n    \n, \n    \n    \n    func_area\n    \n as \n    \n    func_area\n    \n, \n    \n    \n    gvtyp\n    \n as \n    \n    gvtyp\n    \n, \n    \n    \n    ktoks\n    \n as \n    \n    ktoks\n    \n, \n    \n    \n    ktopl\n    \n as \n    \n    ktopl\n    \n, \n    \n    \n    mandt\n    \n as \n    \n    mandt\n    \n, \n    cast(null as TEXT) as \n    \n    mcod1\n    \n , \n    \n    \n    mustr\n    \n as \n    \n    mustr\n    \n, \n    \n    \n    sakan\n    \n as \n    \n    sakan\n    \n, \n    \n    \n    saknr\n    \n as \n    \n    saknr\n    \n, \n    \n    \n    vbund\n    \n as \n    \n    vbund\n    \n, \n    \n    \n    xbilk\n    \n as \n    \n    xbilk\n    \n, \n    \n    \n    xloev\n    \n as \n    \n    xloev\n    \n, \n    \n    \n    xspea\n    \n as \n    \n    xspea\n    \n, \n    \n    \n    xspeb\n    \n as \n    \n    xspeb\n    \n, \n    \n    \n    xspep\n    \n as \n    \n    xspep\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        mandt,\n        ktopl,\n        saknr,\n        bilkt,\n        gvtyp,\n        vbund,\n        xbilk,\n        sakan,\n        erdat,\n        ernam,\n        ktoks,\n        xloev,\n        xspea,\n        xspeb,\n        xspep,\n        func_area,\n        mustr,\t\n        _fivetran_rowid,\n        _fivetran_deleted,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__pa0000": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__pa0000", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__pa0000.sql", "original_file_path": "models/stg_sap__pa0000.sql", "unique_id": "model.sap_source.stg_sap__pa0000", "fqn": ["sap_source", "stg_sap__pa0000"], "alias": "stg_sap__pa0000", "checksum": {"name": "sha256", "checksum": "3562f38da3a2f33ad3bde792f40a94cf4f3982d1f25061a4e8aaf9a6a6d4d6d6"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "HR master record--infotype 0000 (Actions)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pernr": {"name": "pernr", "description": "Personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subty": {"name": "subty", "description": "Subtype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objps": {"name": "objps", "description": "Object identification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sprps": {"name": "sprps", "description": "Lock indicator for HR master data record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "begda": {"name": "begda", "description": "Start date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "endda": {"name": "endda", "description": "End date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seqnr": {"name": "seqnr", "description": "Number of infotype record with same key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aedtm": {"name": "aedtm", "description": "Last changed on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag1": {"name": "flag1", "description": "Reserved field/Unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag2": {"name": "flag2", "description": "Reserved field/Unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag3": {"name": "flag3", "description": "Reserved field/Unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag4": {"name": "flag4", "description": "Reserved field/Unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grpvl": {"name": "grpvl", "description": "Grouping value for personnel assignments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "histo": {"name": "histo", "description": "Historical record flag", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itbld": {"name": "itbld", "description": "Infotype screen control", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itxex": {"name": "itxex", "description": "Text exists for infotype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "massg": {"name": "massg", "description": "Reason for action", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "massn": {"name": "massn", "description": "Action type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ordex": {"name": "ordex", "description": "Confirmation fields exist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preas": {"name": "preas", "description": "Reason for changing master data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refex": {"name": "refex", "description": "Reference fields exist (primary/secondary costs)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese1": {"name": "rese1", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese2": {"name": "rese2", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stat1": {"name": "stat1", "description": "Customer-specific status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stat2": {"name": "stat2", "description": "Employment status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stat3": {"name": "stat3", "description": "Special payment status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uname": {"name": "uname", "description": "Name of person who changed object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111437.070435, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0000", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__pa0000_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__pa0000_tmp')),\n                staging_columns=get_pa0000_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        mandt,\n        pernr,\n        subty,\n        objps,\n        sprps,\n        endda,\n        begda,\n        seqnr,\n        aedtm,\n        flag1,\n        flag2,\n        flag3,\n        flag4,\n        grpvl,\n        histo,\n        itbld,\n        itxex,\n        massg,\n        massn,\n        ordex,\n        preas,\n        refex,\n        rese1,\n        rese2,\n        stat1,\n        stat2,\n        stat3,\n        uname\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_sap__pa0000_tmp", "package": null, "version": null}, {"name": "stg_sap__pa0000_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_pa0000_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.sap_source.stg_sap__pa0000_tmp", "model.sap_source.stg_sap__pa0000_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__pa0000.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0000_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    aedtm\n    \n as \n    \n    aedtm\n    \n, \n    \n    \n    begda\n    \n as \n    \n    begda\n    \n, \n    \n    \n    endda\n    \n as \n    \n    endda\n    \n, \n    \n    \n    flag1\n    \n as \n    \n    flag1\n    \n, \n    \n    \n    flag2\n    \n as \n    \n    flag2\n    \n, \n    \n    \n    flag3\n    \n as \n    \n    flag3\n    \n, \n    \n    \n    flag4\n    \n as \n    \n    flag4\n    \n, \n    \n    \n    grpvl\n    \n as \n    \n    grpvl\n    \n, \n    \n    \n    histo\n    \n as \n    \n    histo\n    \n, \n    \n    \n    itbld\n    \n as \n    \n    itbld\n    \n, \n    \n    \n    itxex\n    \n as \n    \n    itxex\n    \n, \n    \n    \n    mandt\n    \n as \n    \n    mandt\n    \n, \n    \n    \n    massg\n    \n as \n    \n    massg\n    \n, \n    \n    \n    massn\n    \n as \n    \n    massn\n    \n, \n    \n    \n    objps\n    \n as \n    \n    objps\n    \n, \n    \n    \n    ordex\n    \n as \n    \n    ordex\n    \n, \n    \n    \n    pernr\n    \n as \n    \n    pernr\n    \n, \n    \n    \n    preas\n    \n as \n    \n    preas\n    \n, \n    \n    \n    refex\n    \n as \n    \n    refex\n    \n, \n    \n    \n    rese1\n    \n as \n    \n    rese1\n    \n, \n    \n    \n    rese2\n    \n as \n    \n    rese2\n    \n, \n    \n    \n    seqnr\n    \n as \n    \n    seqnr\n    \n, \n    \n    \n    sprps\n    \n as \n    \n    sprps\n    \n, \n    \n    \n    stat1\n    \n as \n    \n    stat1\n    \n, \n    \n    \n    stat2\n    \n as \n    \n    stat2\n    \n, \n    \n    \n    stat3\n    \n as \n    \n    stat3\n    \n, \n    \n    \n    subty\n    \n as \n    \n    subty\n    \n, \n    \n    \n    uname\n    \n as \n    \n    uname\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        mandt,\n        pernr,\n        subty,\n        objps,\n        sprps,\n        endda,\n        begda,\n        seqnr,\n        aedtm,\n        flag1,\n        flag2,\n        flag3,\n        flag4,\n        grpvl,\n        histo,\n        itbld,\n        itxex,\n        massg,\n        massn,\n        ordex,\n        preas,\n        refex,\n        rese1,\n        rese2,\n        stat1,\n        stat2,\n        stat3,\n        uname\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__faglflexa": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__faglflexa", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__faglflexa.sql", "original_file_path": "models/stg_sap__faglflexa.sql", "unique_id": "model.sap_source.stg_sap__faglflexa", "fqn": ["sap_source", "stg_sap__faglflexa"], "alias": "stg_sap__faglflexa", "checksum": {"name": "sha256", "checksum": "78b5a66c08b9a19e832e7f747fdf7a12a1b680e4e08fae82bb5ba7b38f7d4e8c"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "General ledger (Actual line items)", "columns": {"ryear": {"name": "ryear", "description": "Fiscal year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "docnr": {"name": "docnr", "description": "Accounting document number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rldnr": {"name": "rldnr", "description": "Ledger in genral ledger accounting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rbukrs": {"name": "rbukrs", "description": "Company code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "docln": {"name": "docln", "description": "Six-character posting item for ledger", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activ": {"name": "activ", "description": "FI-SL business transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rmvct": {"name": "rmvct", "description": "Transaction type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rtcur": {"name": "rtcur", "description": "Currency key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "runit": {"name": "runit", "description": "Base unit of measure", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "awtyp": {"name": "awtyp", "description": "Reference transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rrcty": {"name": "rrcty", "description": "Record type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rvers": {"name": "rvers", "description": "Version", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "logsys": {"name": "logsys", "description": "Logical system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "racct": {"name": "racct", "description": "Account number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_elem": {"name": "cost_elem", "description": "Cost element", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rclnt": {"name": "rclnt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rcntr": {"name": "rcntr", "description": "Cost center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prctr": {"name": "prctr", "description": "Profit center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfarea": {"name": "rfarea", "description": "Functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rbusa": {"name": "rbusa", "description": "Business area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kokrs": {"name": "kokrs", "description": "Controlling area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "segment": {"name": "segment", "description": "Segment for segmental reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scntr": {"name": "scntr", "description": "Sender cost center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pprctr": {"name": "pprctr", "description": "Partner profit center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sfarea": {"name": "sfarea", "description": "Partner functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sbusa": {"name": "sbusa", "description": "Trading partner's business area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rassc": {"name": "rassc", "description": "Company id of trading partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "psegment": {"name": "psegment", "description": "Partner segment for segmental reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl": {"name": "tsl", "description": "Value in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl": {"name": "hsl", "description": "Value in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl": {"name": "ksl", "description": "Value in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl": {"name": "osl", "description": "Value in another currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "msl": {"name": "msl", "description": "Quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wsl": {"name": "wsl", "description": "Value in original transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drcrk": {"name": "drcrk", "description": "Debt/credit indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "poper": {"name": "poper", "description": "Posting period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rwcur": {"name": "rwcur", "description": "Currency key of the original transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gjahr": {"name": "gjahr", "description": "Fiscal year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "budat": {"name": "budat", "description": "Posting date in the document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "belnr": {"name": "belnr", "description": "Accounting document number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buzei": {"name": "buzei", "description": "Number of line item within accounting document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bschl": {"name": "bschl", "description": "Posting key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bstat": {"name": "bstat", "description": "Document status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "faglflexa_timestamp": {"name": "faglflexa_timestamp", "description": "UTC Timestamp in short form (YYYYMMDDhhmmss)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.9880881, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__faglflexa", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__faglflexa_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__faglflexa_tmp')),\n                staging_columns=get_faglflexa_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (   \n\n    select\n        cast(rclnt as {{ dbt.type_string() }}) as rclnt,\n        ryear,\n        docnr,\n        cast(rldnr as {{ dbt.type_string() }}) as rldnr,\n        cast(rbukrs as {{ dbt.type_string() }}) as rbukrs,\n        docln,\n        activ,\n        rmvct,\n        rtcur,\n        runit,\n        awtyp,\n        rrcty,\n        rvers,\n        logsys,\n        racct,\n        cost_elem,\n        rcntr,\n        prctr,\n        rfarea,\n        rbusa,\n        kokrs,\n        segment,\n        scntr,\n        pprctr,\n        sfarea,\n        sbusa,\n        rassc,\n        psegment,\n        tsl,\n        hsl,\n        ksl,\n        osl,\n        msl,\n        wsl,\n        drcrk,\n        poper,\n        rwcur,\n        cast(gjahr as {{ dbt.type_string() }}) as gjahr,\n        budat,\n        cast(belnr as {{ dbt.type_string() }}) as belnr,\n        cast(buzei as {{ dbt.type_string() }}) as buzei,\n        bschl,\n        bstat,\n        faglflexa_timestamp,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_sap__faglflexa_tmp", "package": null, "version": null}, {"name": "stg_sap__faglflexa_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_faglflexa_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_string"], "nodes": ["model.sap_source.stg_sap__faglflexa_tmp", "model.sap_source.stg_sap__faglflexa_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__faglflexa.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__faglflexa_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    activ\n    \n as \n    \n    activ\n    \n, \n    \n    \n    awtyp\n    \n as \n    \n    awtyp\n    \n, \n    \n    \n    belnr\n    \n as \n    \n    belnr\n    \n, \n    \n    \n    bschl\n    \n as \n    \n    bschl\n    \n, \n    \n    \n    bstat\n    \n as \n    \n    bstat\n    \n, \n    \n    \n    budat\n    \n as \n    \n    budat\n    \n, \n    \n    \n    buzei\n    \n as \n    \n    buzei\n    \n, \n    \n    \n    cost_elem\n    \n as \n    \n    cost_elem\n    \n, \n    \n    \n    docln\n    \n as \n    \n    docln\n    \n, \n    \n    \n    docnr\n    \n as \n    \n    docnr\n    \n, \n    \n    \n    drcrk\n    \n as \n    \n    drcrk\n    \n, \n    \n    \n    gjahr\n    \n as \n    \n    gjahr\n    \n, \n    \n    \n    hsl\n    \n as \n    \n    hsl\n    \n, \n    \n    \n    kokrs\n    \n as \n    \n    kokrs\n    \n, \n    \n    \n    ksl\n    \n as \n    \n    ksl\n    \n, \n    \n    \n    linetype\n    \n as \n    \n    linetype\n    \n, \n    \n    \n    logsys\n    \n as \n    \n    logsys\n    \n, \n    \n    \n    msl\n    \n as \n    \n    msl\n    \n, \n    \n    \n    osl\n    \n as \n    \n    osl\n    \n, \n    \n    \n    poper\n    \n as \n    \n    poper\n    \n, \n    \n    \n    pprctr\n    \n as \n    \n    pprctr\n    \n, \n    \n    \n    prctr\n    \n as \n    \n    prctr\n    \n, \n    \n    \n    psegment\n    \n as \n    \n    psegment\n    \n, \n    \n    \n    racct\n    \n as \n    \n    racct\n    \n, \n    \n    \n    rassc\n    \n as \n    \n    rassc\n    \n, \n    \n    \n    rbukrs\n    \n as \n    \n    rbukrs\n    \n, \n    \n    \n    rbusa\n    \n as \n    \n    rbusa\n    \n, \n    \n    \n    rclnt\n    \n as \n    \n    rclnt\n    \n, \n    \n    \n    rcntr\n    \n as \n    \n    rcntr\n    \n, \n    \n    \n    rfarea\n    \n as \n    \n    rfarea\n    \n, \n    \n    \n    rldnr\n    \n as \n    \n    rldnr\n    \n, \n    \n    \n    rmvct\n    \n as \n    \n    rmvct\n    \n, \n    \n    \n    rrcty\n    \n as \n    \n    rrcty\n    \n, \n    \n    \n    rtcur\n    \n as \n    \n    rtcur\n    \n, \n    \n    \n    runit\n    \n as \n    \n    runit\n    \n, \n    \n    \n    rvers\n    \n as \n    \n    rvers\n    \n, \n    \n    \n    rwcur\n    \n as \n    \n    rwcur\n    \n, \n    \n    \n    ryear\n    \n as \n    \n    ryear\n    \n, \n    \n    \n    sbusa\n    \n as \n    \n    sbusa\n    \n, \n    \n    \n    scntr\n    \n as \n    \n    scntr\n    \n, \n    \n    \n    segment\n    \n as \n    \n    segment\n    \n, \n    \n    \n    sfarea\n    \n as \n    \n    sfarea\n    \n, \n    \n    \n    timestamp\n    \n as faglflexa_timestamp , \n    \n    \n    tsl\n    \n as \n    \n    tsl\n    \n, \n    \n    \n    usnam\n    \n as \n    \n    usnam\n    \n, \n    \n    \n    wsl\n    \n as \n    \n    wsl\n    \n, \n    \n    \n    xsplitmod\n    \n as \n    \n    xsplitmod\n    \n, \n    \n    \n    zzspreg\n    \n as \n    \n    zzspreg\n    \n\n\n\n    from base\n),\n\nfinal as (   \n\n    select\n        cast(rclnt as TEXT) as rclnt,\n        ryear,\n        docnr,\n        cast(rldnr as TEXT) as rldnr,\n        cast(rbukrs as TEXT) as rbukrs,\n        docln,\n        activ,\n        rmvct,\n        rtcur,\n        runit,\n        awtyp,\n        rrcty,\n        rvers,\n        logsys,\n        racct,\n        cost_elem,\n        rcntr,\n        prctr,\n        rfarea,\n        rbusa,\n        kokrs,\n        segment,\n        scntr,\n        pprctr,\n        sfarea,\n        sbusa,\n        rassc,\n        psegment,\n        tsl,\n        hsl,\n        ksl,\n        osl,\n        msl,\n        wsl,\n        drcrk,\n        poper,\n        rwcur,\n        cast(gjahr as TEXT) as gjahr,\n        budat,\n        cast(belnr as TEXT) as belnr,\n        cast(buzei as TEXT) as buzei,\n        bschl,\n        bstat,\n        faglflexa_timestamp,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__faglflext": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__faglflext", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__faglflext.sql", "original_file_path": "models/stg_sap__faglflext.sql", "unique_id": "model.sap_source.stg_sap__faglflext", "fqn": ["sap_source", "stg_sap__faglflext"], "alias": "stg_sap__faglflext", "checksum": {"name": "sha256", "checksum": "af3d18a784efda066f20546c0975d95f83fedad39a26acf76b8d683565b3fbec"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "General ledger (Totals)", "columns": {"drcrk": {"name": "drcrk", "description": "Debit/credit indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr00": {"name": "objnr00", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr01": {"name": "objnr01", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr02": {"name": "objnr02", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr03": {"name": "objnr03", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr04": {"name": "objnr04", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr05": {"name": "objnr05", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr06": {"name": "objnr06", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr07": {"name": "objnr07", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr08": {"name": "objnr08", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rclnt": {"name": "rclnt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rpmax": {"name": "rpmax", "description": "Period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ryear": {"name": "ryear", "description": "Fiscal year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activ": {"name": "activ", "description": "FI-SL business transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rmvct": {"name": "rmvct", "description": "Transaction type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rtcur": {"name": "rtcur", "description": "Currency key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "runit": {"name": "runit", "description": "Base unit of measure", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "awtyp": {"name": "awtyp", "description": "Reference transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rldnr": {"name": "rldnr", "description": "Ledger in general ledger accounting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rrcty": {"name": "rrcty", "description": "Record type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rvers": {"name": "rvers", "description": "Version", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "logsys": {"name": "logsys", "description": "Logical system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "racct": {"name": "racct", "description": "Account number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_elem": {"name": "cost_elem", "description": "Cost element", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rbukrs": {"name": "rbukrs", "description": "Company code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rcntr": {"name": "rcntr", "description": "Cost center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prctr": {"name": "prctr", "description": "Profit center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfarea": {"name": "rfarea", "description": "Functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rbusa": {"name": "rbusa", "description": "Business area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kokrs": {"name": "kokrs", "description": "Controlling area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "segment": {"name": "segment", "description": "Segment for segmental reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzspreg": {"name": "zzspreg", "description": "Special region", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scntr": {"name": "scntr", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "dsecription": "Sender cost center"}, "pprctr": {"name": "pprctr", "description": "Partner profit center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sfarea": {"name": "sfarea", "description": "Partner functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sbusa": {"name": "sbusa", "description": "Trading partner's business area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rassc": {"name": "rassc", "description": "Company id of trading partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "psegment": {"name": "psegment", "description": "Partner segment for segmental reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hslvt": {"name": "hslvt", "description": "Balance carried forward in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl01": {"name": "hsl01", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl02": {"name": "hsl02", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl03": {"name": "hsl03", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl04": {"name": "hsl04", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl05": {"name": "hsl05", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl06": {"name": "hsl06", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl07": {"name": "hsl07", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl08": {"name": "hsl08", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl09": {"name": "hsl09", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl10": {"name": "hsl10", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl11": {"name": "hsl11", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl12": {"name": "hsl12", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl13": {"name": "hsl13", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl14": {"name": "hsl14", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl15": {"name": "hsl15", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl16": {"name": "hsl16", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tslvt": {"name": "tslvt", "description": "Balance carried forward in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl01": {"name": "tsl01", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl02": {"name": "tsl02", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl03": {"name": "tsl03", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl04": {"name": "tsl04", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl05": {"name": "tsl05", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl06": {"name": "tsl06", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl07": {"name": "tsl07", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl08": {"name": "tsl08", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl09": {"name": "tsl09", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl10": {"name": "tsl10", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl11": {"name": "tsl11", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl12": {"name": "tsl12", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl13": {"name": "tsl13", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl14": {"name": "tsl14", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl15": {"name": "tsl15", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl16": {"name": "tsl16", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kslvt": {"name": "kslvt", "description": "Balance carried forward in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl01": {"name": "ksl01", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl02": {"name": "ksl02", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl03": {"name": "ksl03", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl04": {"name": "ksl04", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl05": {"name": "ksl05", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl06": {"name": "ksl06", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl07": {"name": "ksl07", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl08": {"name": "ksl08", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl09": {"name": "ksl09", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl10": {"name": "ksl10", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl11": {"name": "ksl11", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl12": {"name": "ksl12", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl13": {"name": "ksl13", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl14": {"name": "ksl14", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl15": {"name": "ksl15", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl16": {"name": "ksl16", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "oslvt": {"name": "oslvt", "description": "Balance carried forward in fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl01": {"name": "osl01", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl02": {"name": "osl02", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl03": {"name": "osl03", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl04": {"name": "osl04", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl05": {"name": "osl05", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl06": {"name": "osl06", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl07": {"name": "osl07", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl08": {"name": "osl08", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl09": {"name": "osl09", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl10": {"name": "osl10", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl11": {"name": "osl11", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl12": {"name": "osl12", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl13": {"name": "osl13", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl14": {"name": "osl14", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl15": {"name": "osl15", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl16": {"name": "osl16", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "faglflext_timestamp": {"name": "faglflext_timestamp", "description": "UTC timestamp in short form (YYYYMMDDhhmmss)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111437.0033112, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__faglflext", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__faglflext_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__faglflext_tmp')),\n                staging_columns=get_faglflext_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        cast(rclnt as {{ dbt.type_string() }}) as rclnt,\n        ryear,\n        objnr00,\n        objnr01,\n        objnr02,\n        objnr03,\n        objnr04,\n        objnr05,\n        objnr06,\n        objnr07,\n        objnr08,\n        drcrk,\n        rpmax,\n        activ,\n        rmvct,\n        rtcur,\n        runit,\n        awtyp,\n        cast(rldnr as {{ dbt.type_string() }}) as rldnr,\n        rrcty,\n        rvers,\n        logsys,\n        racct,\n        cost_elem, \n        cast(rbukrs as {{ dbt.type_string() }}) as rbukrs,\n        rcntr,\n        prctr,\n        rfarea,\n        rbusa,\n        kokrs,\n        segment,\n        zzspreg,\n        scntr,\n        pprctr,\n        sfarea,\n        sbusa,\n        rassc,\n        psegment,\n        hslvt,\n        hsl01,\n        hsl02,\n        hsl03,\n        hsl04,\n        hsl05,\n        hsl06,\n        hsl07,\n        hsl08,\n        hsl09,\n        hsl10,\n        hsl11,\n        hsl12,\n        hsl13,\n        hsl14,\n        hsl15,\n        hsl16,\n        tslvt,\n        tsl01,\n        tsl02,\n        tsl03,\n        tsl04,\n        tsl05,\n        tsl06,\n        tsl07,\n        tsl08,\n        tsl09,\n        tsl10,\n        tsl11,\n        tsl12,\n        tsl13,\n        tsl14,\n        tsl15,\n        tsl16,\n        kslvt,\n        ksl01,\n        ksl02,\n        ksl03,\n        ksl04,\n        ksl05,\n        ksl06,\n        ksl07,\n        ksl08,\n        ksl09,\n        ksl10,\n        ksl11,\n        ksl12,\n        ksl13,\n        ksl14,\n        ksl15,\n        ksl16,\n        oslvt,\n        osl01,\n        osl02,\n        osl03,\n        osl04,\n        osl05,\n        osl06,\n        osl07,\n        osl08,\n        osl09,\n        osl10,\n        osl11,\n        osl12,\n        osl13,\n        osl14,\n        osl15,\n        osl16,\n        faglflext_timestamp,\n        _fivetran_rowid,\n        _fivetran_deleted,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_sap__faglflext_tmp", "package": null, "version": null}, {"name": "stg_sap__faglflext_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_faglflext_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_string"], "nodes": ["model.sap_source.stg_sap__faglflext_tmp", "model.sap_source.stg_sap__faglflext_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__faglflext.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__faglflext_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    activ\n    \n as \n    \n    activ\n    \n, \n    \n    \n    awtyp\n    \n as \n    \n    awtyp\n    \n, \n    \n    \n    cost_elem\n    \n as \n    \n    cost_elem\n    \n, \n    \n    \n    drcrk\n    \n as \n    \n    drcrk\n    \n, \n    \n    \n    hsl01\n    \n as \n    \n    hsl01\n    \n, \n    \n    \n    hsl02\n    \n as \n    \n    hsl02\n    \n, \n    \n    \n    hsl03\n    \n as \n    \n    hsl03\n    \n, \n    \n    \n    hsl04\n    \n as \n    \n    hsl04\n    \n, \n    \n    \n    hsl05\n    \n as \n    \n    hsl05\n    \n, \n    \n    \n    hsl06\n    \n as \n    \n    hsl06\n    \n, \n    \n    \n    hsl07\n    \n as \n    \n    hsl07\n    \n, \n    \n    \n    hsl08\n    \n as \n    \n    hsl08\n    \n, \n    \n    \n    hsl09\n    \n as \n    \n    hsl09\n    \n, \n    \n    \n    hsl10\n    \n as \n    \n    hsl10\n    \n, \n    \n    \n    hsl11\n    \n as \n    \n    hsl11\n    \n, \n    \n    \n    hsl12\n    \n as \n    \n    hsl12\n    \n, \n    \n    \n    hsl13\n    \n as \n    \n    hsl13\n    \n, \n    \n    \n    hsl14\n    \n as \n    \n    hsl14\n    \n, \n    \n    \n    hsl15\n    \n as \n    \n    hsl15\n    \n, \n    \n    \n    hsl16\n    \n as \n    \n    hsl16\n    \n, \n    \n    \n    hslvt\n    \n as \n    \n    hslvt\n    \n, \n    \n    \n    kokrs\n    \n as \n    \n    kokrs\n    \n, \n    \n    \n    ksl01\n    \n as \n    \n    ksl01\n    \n, \n    \n    \n    ksl02\n    \n as \n    \n    ksl02\n    \n, \n    \n    \n    ksl03\n    \n as \n    \n    ksl03\n    \n, \n    \n    \n    ksl04\n    \n as \n    \n    ksl04\n    \n, \n    \n    \n    ksl05\n    \n as \n    \n    ksl05\n    \n, \n    \n    \n    ksl06\n    \n as \n    \n    ksl06\n    \n, \n    \n    \n    ksl07\n    \n as \n    \n    ksl07\n    \n, \n    \n    \n    ksl08\n    \n as \n    \n    ksl08\n    \n, \n    \n    \n    ksl09\n    \n as \n    \n    ksl09\n    \n, \n    \n    \n    ksl10\n    \n as \n    \n    ksl10\n    \n, \n    \n    \n    ksl11\n    \n as \n    \n    ksl11\n    \n, \n    \n    \n    ksl12\n    \n as \n    \n    ksl12\n    \n, \n    \n    \n    ksl13\n    \n as \n    \n    ksl13\n    \n, \n    \n    \n    ksl14\n    \n as \n    \n    ksl14\n    \n, \n    \n    \n    ksl15\n    \n as \n    \n    ksl15\n    \n, \n    \n    \n    ksl16\n    \n as \n    \n    ksl16\n    \n, \n    \n    \n    kslvt\n    \n as \n    \n    kslvt\n    \n, \n    \n    \n    logsys\n    \n as \n    \n    logsys\n    \n, \n    \n    \n    msl01\n    \n as \n    \n    msl01\n    \n, \n    \n    \n    msl02\n    \n as \n    \n    msl02\n    \n, \n    \n    \n    msl03\n    \n as \n    \n    msl03\n    \n, \n    \n    \n    msl04\n    \n as \n    \n    msl04\n    \n, \n    \n    \n    msl05\n    \n as \n    \n    msl05\n    \n, \n    \n    \n    msl06\n    \n as \n    \n    msl06\n    \n, \n    \n    \n    msl07\n    \n as \n    \n    msl07\n    \n, \n    \n    \n    msl08\n    \n as \n    \n    msl08\n    \n, \n    \n    \n    msl09\n    \n as \n    \n    msl09\n    \n, \n    \n    \n    msl10\n    \n as \n    \n    msl10\n    \n, \n    \n    \n    msl11\n    \n as \n    \n    msl11\n    \n, \n    \n    \n    msl12\n    \n as \n    \n    msl12\n    \n, \n    \n    \n    msl13\n    \n as \n    \n    msl13\n    \n, \n    \n    \n    msl14\n    \n as \n    \n    msl14\n    \n, \n    \n    \n    msl15\n    \n as \n    \n    msl15\n    \n, \n    \n    \n    msl16\n    \n as \n    \n    msl16\n    \n, \n    \n    \n    mslvt\n    \n as \n    \n    mslvt\n    \n, \n    \n    \n    objnr00\n    \n as \n    \n    objnr00\n    \n, \n    \n    \n    objnr01\n    \n as \n    \n    objnr01\n    \n, \n    \n    \n    objnr02\n    \n as \n    \n    objnr02\n    \n, \n    \n    \n    objnr03\n    \n as \n    \n    objnr03\n    \n, \n    \n    \n    objnr04\n    \n as \n    \n    objnr04\n    \n, \n    \n    \n    objnr05\n    \n as \n    \n    objnr05\n    \n, \n    \n    \n    objnr06\n    \n as \n    \n    objnr06\n    \n, \n    \n    \n    objnr07\n    \n as \n    \n    objnr07\n    \n, \n    \n    \n    objnr08\n    \n as \n    \n    objnr08\n    \n, \n    \n    \n    osl01\n    \n as \n    \n    osl01\n    \n, \n    \n    \n    osl02\n    \n as \n    \n    osl02\n    \n, \n    \n    \n    osl03\n    \n as \n    \n    osl03\n    \n, \n    \n    \n    osl04\n    \n as \n    \n    osl04\n    \n, \n    \n    \n    osl05\n    \n as \n    \n    osl05\n    \n, \n    \n    \n    osl06\n    \n as \n    \n    osl06\n    \n, \n    \n    \n    osl07\n    \n as \n    \n    osl07\n    \n, \n    \n    \n    osl08\n    \n as \n    \n    osl08\n    \n, \n    \n    \n    osl09\n    \n as \n    \n    osl09\n    \n, \n    \n    \n    osl10\n    \n as \n    \n    osl10\n    \n, \n    \n    \n    osl11\n    \n as \n    \n    osl11\n    \n, \n    \n    \n    osl12\n    \n as \n    \n    osl12\n    \n, \n    \n    \n    osl13\n    \n as \n    \n    osl13\n    \n, \n    \n    \n    osl14\n    \n as \n    \n    osl14\n    \n, \n    \n    \n    osl15\n    \n as \n    \n    osl15\n    \n, \n    \n    \n    osl16\n    \n as \n    \n    osl16\n    \n, \n    \n    \n    oslvt\n    \n as \n    \n    oslvt\n    \n, \n    \n    \n    pprctr\n    \n as \n    \n    pprctr\n    \n, \n    \n    \n    prctr\n    \n as \n    \n    prctr\n    \n, \n    \n    \n    psegment\n    \n as \n    \n    psegment\n    \n, \n    \n    \n    racct\n    \n as \n    \n    racct\n    \n, \n    \n    \n    rassc\n    \n as \n    \n    rassc\n    \n, \n    \n    \n    rbukrs\n    \n as \n    \n    rbukrs\n    \n, \n    \n    \n    rbusa\n    \n as \n    \n    rbusa\n    \n, \n    \n    \n    rclnt\n    \n as \n    \n    rclnt\n    \n, \n    \n    \n    rcntr\n    \n as \n    \n    rcntr\n    \n, \n    \n    \n    rfarea\n    \n as \n    \n    rfarea\n    \n, \n    \n    \n    rldnr\n    \n as \n    \n    rldnr\n    \n, \n    \n    \n    rmvct\n    \n as \n    \n    rmvct\n    \n, \n    \n    \n    rpmax\n    \n as \n    \n    rpmax\n    \n, \n    \n    \n    rrcty\n    \n as \n    \n    rrcty\n    \n, \n    \n    \n    rtcur\n    \n as \n    \n    rtcur\n    \n, \n    \n    \n    runit\n    \n as \n    \n    runit\n    \n, \n    \n    \n    rvers\n    \n as \n    \n    rvers\n    \n, \n    \n    \n    ryear\n    \n as \n    \n    ryear\n    \n, \n    \n    \n    sbusa\n    \n as \n    \n    sbusa\n    \n, \n    \n    \n    scntr\n    \n as \n    \n    scntr\n    \n, \n    \n    \n    segment\n    \n as \n    \n    segment\n    \n, \n    \n    \n    sfarea\n    \n as \n    \n    sfarea\n    \n, \n    \n    \n    timestamp\n    \n as faglflext_timestamp , \n    \n    \n    tsl01\n    \n as \n    \n    tsl01\n    \n, \n    \n    \n    tsl02\n    \n as \n    \n    tsl02\n    \n, \n    \n    \n    tsl03\n    \n as \n    \n    tsl03\n    \n, \n    \n    \n    tsl04\n    \n as \n    \n    tsl04\n    \n, \n    \n    \n    tsl05\n    \n as \n    \n    tsl05\n    \n, \n    \n    \n    tsl06\n    \n as \n    \n    tsl06\n    \n, \n    \n    \n    tsl07\n    \n as \n    \n    tsl07\n    \n, \n    \n    \n    tsl08\n    \n as \n    \n    tsl08\n    \n, \n    \n    \n    tsl09\n    \n as \n    \n    tsl09\n    \n, \n    \n    \n    tsl10\n    \n as \n    \n    tsl10\n    \n, \n    \n    \n    tsl11\n    \n as \n    \n    tsl11\n    \n, \n    \n    \n    tsl12\n    \n as \n    \n    tsl12\n    \n, \n    \n    \n    tsl13\n    \n as \n    \n    tsl13\n    \n, \n    \n    \n    tsl14\n    \n as \n    \n    tsl14\n    \n, \n    \n    \n    tsl15\n    \n as \n    \n    tsl15\n    \n, \n    \n    \n    tsl16\n    \n as \n    \n    tsl16\n    \n, \n    \n    \n    tslvt\n    \n as \n    \n    tslvt\n    \n, \n    \n    \n    zzspreg\n    \n as \n    \n    zzspreg\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(rclnt as TEXT) as rclnt,\n        ryear,\n        objnr00,\n        objnr01,\n        objnr02,\n        objnr03,\n        objnr04,\n        objnr05,\n        objnr06,\n        objnr07,\n        objnr08,\n        drcrk,\n        rpmax,\n        activ,\n        rmvct,\n        rtcur,\n        runit,\n        awtyp,\n        cast(rldnr as TEXT) as rldnr,\n        rrcty,\n        rvers,\n        logsys,\n        racct,\n        cost_elem, \n        cast(rbukrs as TEXT) as rbukrs,\n        rcntr,\n        prctr,\n        rfarea,\n        rbusa,\n        kokrs,\n        segment,\n        zzspreg,\n        scntr,\n        pprctr,\n        sfarea,\n        sbusa,\n        rassc,\n        psegment,\n        hslvt,\n        hsl01,\n        hsl02,\n        hsl03,\n        hsl04,\n        hsl05,\n        hsl06,\n        hsl07,\n        hsl08,\n        hsl09,\n        hsl10,\n        hsl11,\n        hsl12,\n        hsl13,\n        hsl14,\n        hsl15,\n        hsl16,\n        tslvt,\n        tsl01,\n        tsl02,\n        tsl03,\n        tsl04,\n        tsl05,\n        tsl06,\n        tsl07,\n        tsl08,\n        tsl09,\n        tsl10,\n        tsl11,\n        tsl12,\n        tsl13,\n        tsl14,\n        tsl15,\n        tsl16,\n        kslvt,\n        ksl01,\n        ksl02,\n        ksl03,\n        ksl04,\n        ksl05,\n        ksl06,\n        ksl07,\n        ksl08,\n        ksl09,\n        ksl10,\n        ksl11,\n        ksl12,\n        ksl13,\n        ksl14,\n        ksl15,\n        ksl16,\n        oslvt,\n        osl01,\n        osl02,\n        osl03,\n        osl04,\n        osl05,\n        osl06,\n        osl07,\n        osl08,\n        osl09,\n        osl10,\n        osl11,\n        osl12,\n        osl13,\n        osl14,\n        osl15,\n        osl16,\n        faglflext_timestamp,\n        _fivetran_rowid,\n        _fivetran_deleted,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__pa0007": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__pa0007", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__pa0007.sql", "original_file_path": "models/stg_sap__pa0007.sql", "unique_id": "model.sap_source.stg_sap__pa0007", "fqn": ["sap_source", "stg_sap__pa0007"], "alias": "stg_sap__pa0007", "checksum": {"name": "sha256", "checksum": "8660bec1750ed181fb921fe4d66d44fc504fba0ccbbcc87340b0f6d5505db74c"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "HR master record--infotype 0007 (planned working time)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pernr": {"name": "pernr", "description": "Personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subty": {"name": "subty", "description": "Subtype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objps": {"name": "objps", "description": "Object identification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sprps": {"name": "sprps", "description": "Lock indicator for HR master data record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "begda": {"name": "begda", "description": "Start date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "endda": {"name": "endda", "description": "End date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seqnr": {"name": "seqnr", "description": "Number of infotype record with same key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aedtm": {"name": "aedtm", "description": "Changed on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "arbst": {"name": "arbst", "description": "Daily working hours", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "awtyp": {"name": "awtyp", "description": "Reference transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dysch": {"name": "dysch", "description": "Create daily work schedule dynamically", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "empct": {"name": "empct", "description": "Employment percentage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag1": {"name": "flag1", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag2": {"name": "flag2", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag3": {"name": "flag3", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag4": {"name": "flag4", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grpvl": {"name": "grpvl", "description": "Grouping value for personnel assignments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "histo": {"name": "histo", "description": "Historical record flag", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itbld": {"name": "itbld", "description": "Infotype screen control", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itxex": {"name": "itxex", "description": "Text exists for infotype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "jrstd": {"name": "jrstd", "description": "Annual working hours", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kztim": {"name": "kztim", "description": "Additional indicator for time management", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maxja": {"name": "maxja", "description": "Maximum number of working hours per year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maxmo": {"name": "maxmo", "description": "Maximum number of work hours per month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maxta": {"name": "maxta", "description": "Maximum number of work hours per day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maxwo": {"name": "maxwo", "description": "Maximum number of work hours per week", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minja": {"name": "minja", "description": "Minimum annual working hours", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minmo": {"name": "minmo", "description": "Minimum number of work hours per month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minta": {"name": "minta", "description": "Minimum number of work hours per day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minwo": {"name": "minwo", "description": "Minimum weekly working hours", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mostd": {"name": "mostd", "description": "Monthly hours", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ordex": {"name": "ordex", "description": "Confirmation fields exist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preas": {"name": "preas", "description": "Reason for changing master data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refex": {"name": "refex", "description": "Reference fields exist (primary/secondary costs)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese1": {"name": "rese1", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese2": {"name": "rese2", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schkz": {"name": "schkz", "description": "Work schedule rule", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "teilk": {"name": "teilk", "description": "Indicator part-time employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uname": {"name": "uname", "description": "Name of person who changed objects", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wkwdy": {"name": "wkwdy", "description": "Weekly workdays", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wostd": {"name": "wostd", "description": "Hours per week", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wweek": {"name": "wweek", "description": "Working week", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zterf": {"name": "zterf", "description": "Employee time management status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111437.084353, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0007", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__pa0007_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__pa0007_tmp')),\n                staging_columns=get_pa0007_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        mandt,\n        pernr,\n        subty,\n        objps,\n        sprps,\n        endda,\n        begda,\n        seqnr,\n        aedtm,\n        arbst,\n        awtyp,\n        dysch,\n        empct,\n        flag1,\n        flag2,\n        flag3,\n        flag4,\n        grpvl,\n        histo,\n        itbld,\n        itxex,\n        jrstd,\n        kztim,\n        maxja,\n        maxmo,\n        maxta,\n        maxwo,\n        minja,\n        minmo,\n        minta,\n        minwo,\n        mostd,\n        ordex,\n        preas,\n        refex,\n        rese1,\n        rese2,\n        schkz,\n        teilk,\n        uname,\n        wkwdy,\n        wostd,\n        wweek,\n        zterf\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_sap__pa0007_tmp", "package": null, "version": null}, {"name": "stg_sap__pa0007_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_pa0007_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.sap_source.stg_sap__pa0007_tmp", "model.sap_source.stg_sap__pa0007_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__pa0007.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0007_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    aedtm\n    \n as \n    \n    aedtm\n    \n, \n    \n    \n    arbst\n    \n as \n    \n    arbst\n    \n, \n    \n    \n    awtyp\n    \n as \n    \n    awtyp\n    \n, \n    \n    \n    begda\n    \n as \n    \n    begda\n    \n, \n    \n    \n    dysch\n    \n as \n    \n    dysch\n    \n, \n    \n    \n    empct\n    \n as \n    \n    empct\n    \n, \n    \n    \n    endda\n    \n as \n    \n    endda\n    \n, \n    \n    \n    flag1\n    \n as \n    \n    flag1\n    \n, \n    \n    \n    flag2\n    \n as \n    \n    flag2\n    \n, \n    \n    \n    flag3\n    \n as \n    \n    flag3\n    \n, \n    \n    \n    flag4\n    \n as \n    \n    flag4\n    \n, \n    \n    \n    grpvl\n    \n as \n    \n    grpvl\n    \n, \n    \n    \n    histo\n    \n as \n    \n    histo\n    \n, \n    \n    \n    itbld\n    \n as \n    \n    itbld\n    \n, \n    \n    \n    itxex\n    \n as \n    \n    itxex\n    \n, \n    \n    \n    jrstd\n    \n as \n    \n    jrstd\n    \n, \n    \n    \n    kztim\n    \n as \n    \n    kztim\n    \n, \n    \n    \n    mandt\n    \n as \n    \n    mandt\n    \n, \n    \n    \n    maxja\n    \n as \n    \n    maxja\n    \n, \n    \n    \n    maxmo\n    \n as \n    \n    maxmo\n    \n, \n    \n    \n    maxta\n    \n as \n    \n    maxta\n    \n, \n    \n    \n    maxwo\n    \n as \n    \n    maxwo\n    \n, \n    \n    \n    minja\n    \n as \n    \n    minja\n    \n, \n    \n    \n    minmo\n    \n as \n    \n    minmo\n    \n, \n    \n    \n    minta\n    \n as \n    \n    minta\n    \n, \n    \n    \n    minwo\n    \n as \n    \n    minwo\n    \n, \n    \n    \n    mostd\n    \n as \n    \n    mostd\n    \n, \n    \n    \n    objps\n    \n as \n    \n    objps\n    \n, \n    \n    \n    ordex\n    \n as \n    \n    ordex\n    \n, \n    \n    \n    pernr\n    \n as \n    \n    pernr\n    \n, \n    \n    \n    preas\n    \n as \n    \n    preas\n    \n, \n    \n    \n    refex\n    \n as \n    \n    refex\n    \n, \n    \n    \n    rese1\n    \n as \n    \n    rese1\n    \n, \n    \n    \n    rese2\n    \n as \n    \n    rese2\n    \n, \n    \n    \n    schkz\n    \n as \n    \n    schkz\n    \n, \n    \n    \n    seqnr\n    \n as \n    \n    seqnr\n    \n, \n    \n    \n    sprps\n    \n as \n    \n    sprps\n    \n, \n    \n    \n    subty\n    \n as \n    \n    subty\n    \n, \n    \n    \n    teilk\n    \n as \n    \n    teilk\n    \n, \n    \n    \n    uname\n    \n as \n    \n    uname\n    \n, \n    \n    \n    wkwdy\n    \n as \n    \n    wkwdy\n    \n, \n    \n    \n    wostd\n    \n as \n    \n    wostd\n    \n, \n    \n    \n    wweek\n    \n as \n    \n    wweek\n    \n, \n    \n    \n    zterf\n    \n as \n    \n    zterf\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        mandt,\n        pernr,\n        subty,\n        objps,\n        sprps,\n        endda,\n        begda,\n        seqnr,\n        aedtm,\n        arbst,\n        awtyp,\n        dysch,\n        empct,\n        flag1,\n        flag2,\n        flag3,\n        flag4,\n        grpvl,\n        histo,\n        itbld,\n        itxex,\n        jrstd,\n        kztim,\n        maxja,\n        maxmo,\n        maxta,\n        maxwo,\n        minja,\n        minmo,\n        minta,\n        minwo,\n        mostd,\n        ordex,\n        preas,\n        refex,\n        rese1,\n        rese2,\n        schkz,\n        teilk,\n        uname,\n        wkwdy,\n        wostd,\n        wweek,\n        zterf\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__bseg": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__bseg", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__bseg.sql", "original_file_path": "models/stg_sap__bseg.sql", "unique_id": "model.sap_source.stg_sap__bseg", "fqn": ["sap_source", "stg_sap__bseg"], "alias": "stg_sap__bseg", "checksum": {"name": "sha256", "checksum": "ab591569afaa8c6cb8a4b5602e4a6ab6e2f8c9e35e9ecc00a0318e93a15c809b"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Accounting document segment", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bukrs": {"name": "bukrs", "description": "Company code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "belnr": {"name": "belnr", "description": "Accounting document number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gjahr": {"name": "gjahr", "description": "Fiscal year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buzei": {"name": "buzei", "description": "Number of line item within accounting document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anln1": {"name": "anln1", "description": "Main asset number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anln2": {"name": "anln2", "description": "Asset subnumber", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aufnr": {"name": "aufnr", "description": "Order number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "augbl": {"name": "augbl", "description": "Document number of the clearing document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "augdt": {"name": "augdt", "description": "Clearing date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ebeln": {"name": "ebeln", "description": "Purchasing document number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ebelp": {"name": "ebelp", "description": "Item number of purchasing document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "eten2": {"name": "eten2", "description": "Delivery schedule line number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "filkd": {"name": "filkd", "description": "Account number of the branch", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gsber": {"name": "gsber", "description": "Business area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "koart": {"name": "koart", "description": "Account type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kostl": {"name": "kostl", "description": "Cost center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maber": {"name": "maber", "description": "Dunning Area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "madat": {"name": "madat", "description": "Last dunned on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mansp": {"name": "mansp", "description": "Dunning block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manst": {"name": "manst", "description": "Dunning level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mschl": {"name": "mschl", "description": "Dunning key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mwskz": {"name": "mwskz", "description": "Tax on sales/purchases code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "posn2": {"name": "posn2", "description": "Sales document item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "qbshb": {"name": "qbshb", "description": "Withholding tax amount (in document currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "qsfbt": {"name": "qsfbt", "description": "Withholding tax-exempt amount (in document currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "qsshb": {"name": "qsshb", "description": "Withholding tax base amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rebzg": {"name": "rebzg", "description": "Number of the invoice the transaction belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "samnr": {"name": "samnr", "description": "Invoice list number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sgtxt": {"name": "sgtxt", "description": "Item text", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shkzg": {"name": "shkzg", "description": "Debit/credit indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "skfbt": {"name": "skfbt", "description": "Amount eligible for cash discount in document currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wskto": {"name": "wskto", "description": "Cash discount amount in document currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sknto": {"name": "sknto", "description": "Cash discount amount in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umsks": {"name": "umsks", "description": "Special G/L transaction type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umskz": {"name": "umskz", "description": "Special G/L indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uzawe": {"name": "uzawe", "description": "Payment method supplement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "valut": {"name": "valut", "description": "Value date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vbel2": {"name": "vbel2", "description": "Sales document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vbeln": {"name": "vbeln", "description": "Billing document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vbewa": {"name": "vbewa", "description": "Flow type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vbund": {"name": "vbund", "description": "Company id of trading partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vertn": {"name": "vertn", "description": "Contract number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vertt": {"name": "vertt", "description": "Contract type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "werks": {"name": "werks", "description": "Plant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wverw": {"name": "wverw", "description": "Bill of exchange usage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xzahl": {"name": "xzahl", "description": "Indicator (Is the posting key used in a payment transaction?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zbd1p": {"name": "zbd1p", "description": "Cash discount percentage 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zbd1t": {"name": "zbd1t", "description": "Cash discount days 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zbd2p": {"name": "zbd2p", "description": "Cash discount percentage 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zbd2t": {"name": "zbd2t", "description": "Cash discount days 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zbd3t": {"name": "zbd3t", "description": "Net payment terms period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zfbdt": {"name": "zfbdt", "description": "Baseline date for due date calculation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zlsch": {"name": "zlsch", "description": "Payment method", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zlspr": {"name": "zlspr", "description": "Payment block key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zterm": {"name": "zterm", "description": "Terms of payment key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zuonr": {"name": "zuonr", "description": "Assignment number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xref1": {"name": "xref1", "description": "Business partner reference key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xref2": {"name": "xref2", "description": "Business partner reference key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rstgr": {"name": "rstgr", "description": "Reason code for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rebzt": {"name": "rebzt", "description": "Follow-on document type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pswsl": {"name": "pswsl", "description": "Update currency for general ledger transaction figures", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pswbt": {"name": "pswbt", "description": "Amount for updating in general ledger", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hkont": {"name": "hkont", "description": "General ledger account", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xnegp": {"name": "xnegp", "description": "Indicator (Negative posting)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zbfix": {"name": "zbfix", "description": "Fixed payment terms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfzei": {"name": "rfzei", "description": "Payment card item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccbtc": {"name": "ccbtc", "description": "Payment cards (Settlement run)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kkber": {"name": "kkber", "description": "Credit control area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xref3": {"name": "xref3", "description": "Reference key for line item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dtws1": {"name": "dtws1", "description": "Instruction key 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dtws2": {"name": "dtws2", "description": "Instruction key 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dtws3": {"name": "dtws3", "description": "Instruction key 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dtws4": {"name": "dtws4", "description": "Instruction key 4", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "absbt": {"name": "absbt", "description": "Credit management (Hedged amount)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "projk": {"name": "projk", "description": "Work Breakdown Structure Element (WBS Element)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xpypr": {"name": "xpypr", "description": "Indicator (Items from payment program blocked)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kidno": {"name": "kidno", "description": "Payment reference", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bupla": {"name": "bupla", "description": "Business place", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "secco": {"name": "secco", "description": "Section code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pycur": {"name": "pycur", "description": "Currency for automatic payment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pyamt": {"name": "pyamt", "description": "Amount in payment currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xragl": {"name": "xragl", "description": "Indicator (Clearing was reversed)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cession_kz": {"name": "cession_kz", "description": "Accounts receivable pledging indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buzid": {"name": "buzid", "description": "Identification of the line item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auggj": {"name": "auggj", "description": "Fiscal year of clearing document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "agzei": {"name": "agzei", "description": "Clearing item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bdiff": {"name": "bdiff", "description": "Valuation difference", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bdif2": {"name": "bdif2", "description": "Valuation difference for the second local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bdif3": {"name": "bdif3", "description": "Valuation difference for the third local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bewar": {"name": "bewar", "description": "Transaction type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dabrz": {"name": "dabrz", "description": "Reference date for settlement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dmbtr": {"name": "dmbtr", "description": "Amount in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fkber": {"name": "fkber", "description": "Functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fkber_long": {"name": "fkber_long", "description": "Functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "imkey": {"name": "imkey", "description": "Internal key for real estate object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kstar": {"name": "kstar", "description": "Cost element", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kunnr": {"name": "kunnr", "description": "Customer numbers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lifnr": {"name": "lifnr", "description": "Account number of vendor or creditor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meins": {"name": "meins", "description": "Base unit of measure", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "menge": {"name": "menge", "description": "Quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pargb": {"name": "pargb", "description": "Trading partner's business area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pfkber": {"name": "pfkber", "description": "Partner functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pprct": {"name": "pprct", "description": "Partner profit center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saknr": {"name": "saknr", "description": "G/L account number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wrbtr": {"name": "wrbtr", "description": "Amount in document currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xopvw": {"name": "xopvw", "description": "Indicator (Open item management?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xlgclr": {"name": "xlgclr", "description": "Clearing specific to ledger groups", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzspreg": {"name": "zzspreg", "description": "Special region", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzbuspartn": {"name": "zzbuspartn", "description": "Business partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzproduct": {"name": "zzproduct", "description": "Product group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzloca": {"name": "zzloca", "description": "City", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzchan": {"name": "zzchan", "description": "Distribution channel", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzlob": {"name": "zzlob", "description": "Business line", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzuserfld1": {"name": "zzuserfld1", "description": "Territory", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzuserfld2": {"name": "zzuserfld2", "description": "Owner/Cont.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzuserfld3": {"name": "zzuserfld3", "description": "Vein", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzregion": {"name": "zzregion", "description": "User defined regions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzstate": {"name": "zzstate", "description": "State/province code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.981079, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__bseg", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__bseg_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__bseg_tmp')),\n                staging_columns=get_bseg_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        cast(mandt as {{ dbt.type_string() }}) as mandt,\n        cast(bukrs as {{ dbt.type_string() }}) as bukrs,\n        cast(belnr as {{ dbt.type_string() }}) as belnr,\n        cast(gjahr as {{ dbt.type_string() }}) as gjahr,\n        cast(buzei as {{ dbt.type_string() }}) as buzei,\n        anln1,\n        anln2,\n        aufnr,\n        augbl,\n        augdt,\n        ebeln,\n        ebelp,\n        eten2, \n        filkd,\n        gsber, \n        koart, \n        kostl,\n        maber,\n        madat,\n\n        mansp,\n        manst,\n        mschl,\n        mwskz,\n        posn2,\n        qbshb,\n        qsfbt,\n        qsshb,\n        rebzg,\n        samnr,\n        sgtxt,\n        shkzg,\n        skfbt,\n        wskto,\n        sknto, \n        umsks,\n        umskz,\n        uzawe,\n        valut,\n        vbel2,\n        vbeln,\n        vbewa,\n        vbund,\n        vertn,\n        vertt, \n        werks, \n        wverw, \n        xzahl, \n        zbd1p,\n        zbd1t,\n        zbd2p,\n        zbd2t,\n        zbd3t,\n        zfbdt, \n        zlsch,\n        zlspr,\n        zterm,\n        zuonr,\n        xref1,\n        xref2, \n        rstgr,  \n        rebzt,\n        pswsl,\n        pswbt,\n        hkont,\n        xnegp,\n        zbfix,\n        rfzei,\n        ccbtc,\n        kkber,\n        xref3,\n        dtws1,\n        dtws2,\n        dtws3,\n        dtws4,\n        absbt, \n        projk,\n        xpypr,\n        kidno, \n        bupla,\n        secco, \n        pycur,\n        pyamt, \n        xragl,\n        cession_kz,\n        buzid,\n        auggj,\n        agzei, \n        bdiff,\n        bdif2,\n        bdif3,\n        bewar,\n        dabrz,\n        dmbtr,\n        fkber,\n        fkber_long,\n        imkey,\n        kstar,\n        kunnr,\n        lifnr,\n        meins,\n        menge,\n        pargb, \n        pfkber, \n        pprct, \n        saknr,\n        wrbtr,\n        xopvw,\n        xlgclr,\n        zzspreg,\n        zzbuspartn,\n        zzproduct,\n        zzloca,\n        zzchan,\n        zzlob, \n        zzuserfld1,\n        zzuserfld2,\n        zzuserfld3,\n        zzregion,\n        zzstate\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_sap__bseg_tmp", "package": null, "version": null}, {"name": "stg_sap__bseg_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_bseg_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_string"], "nodes": ["model.sap_source.stg_sap__bseg_tmp", "model.sap_source.stg_sap__bseg_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__bseg.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__bseg_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    abper\n    \n as \n    \n    abper\n    \n, \n    \n    \n    absbt\n    \n as \n    \n    absbt\n    \n, \n    \n    \n    agzei\n    \n as \n    \n    agzei\n    \n, \n    \n    \n    altkt\n    \n as \n    \n    altkt\n    \n, \n    \n    \n    anbwa\n    \n as \n    \n    anbwa\n    \n, \n    \n    \n    anfae\n    \n as \n    \n    anfae\n    \n, \n    \n    \n    anfbj\n    \n as \n    \n    anfbj\n    \n, \n    \n    \n    anfbn\n    \n as \n    \n    anfbn\n    \n, \n    \n    \n    anfbu\n    \n as \n    \n    anfbu\n    \n, \n    \n    \n    anln1\n    \n as \n    \n    anln1\n    \n, \n    \n    \n    anln2\n    \n as \n    \n    anln2\n    \n, \n    \n    \n    aplzl\n    \n as \n    \n    aplzl\n    \n, \n    \n    \n    aufnr\n    \n as \n    \n    aufnr\n    \n, \n    \n    \n    aufpl\n    \n as \n    \n    aufpl\n    \n, \n    \n    \n    augbl\n    \n as \n    \n    augbl\n    \n, \n    \n    \n    augcp\n    \n as \n    \n    augcp\n    \n, \n    \n    \n    augdt\n    \n as \n    \n    augdt\n    \n, \n    \n    \n    auggj\n    \n as \n    \n    auggj\n    \n, \n    \n    \n    bdif2\n    \n as \n    \n    bdif2\n    \n, \n    \n    \n    bdif3\n    \n as \n    \n    bdif3\n    \n, \n    \n    \n    bdiff\n    \n as \n    \n    bdiff\n    \n, \n    \n    \n    belnr\n    \n as \n    \n    belnr\n    \n, \n    \n    \n    bewar\n    \n as \n    \n    bewar\n    \n, \n    \n    \n    blnbt\n    \n as \n    \n    blnbt\n    \n, \n    \n    \n    blnkz\n    \n as \n    \n    blnkz\n    \n, \n    \n    \n    blnpz\n    \n as \n    \n    blnpz\n    \n, \n    \n    \n    bonfb\n    \n as \n    \n    bonfb\n    \n, \n    \n    \n    bpmng\n    \n as \n    \n    bpmng\n    \n, \n    \n    \n    bprme\n    \n as \n    \n    bprme\n    \n, \n    \n    \n    bschl\n    \n as \n    \n    bschl\n    \n, \n    \n    \n    btype\n    \n as \n    \n    btype\n    \n, \n    \n    \n    bualt\n    \n as \n    \n    bualt\n    \n, \n    \n    \n    budget_pd\n    \n as \n    \n    budget_pd\n    \n, \n    \n    \n    bukrs\n    \n as \n    \n    bukrs\n    \n, \n    \n    \n    bupla\n    \n as \n    \n    bupla\n    \n, \n    \n    \n    bustw\n    \n as \n    \n    bustw\n    \n, \n    \n    \n    buzei\n    \n as \n    \n    buzei\n    \n, \n    \n    \n    buzid\n    \n as \n    \n    buzid\n    \n, \n    \n    \n    bvtyp\n    \n as \n    \n    bvtyp\n    \n, \n    \n    \n    bwkey\n    \n as \n    \n    bwkey\n    \n, \n    \n    \n    bwtar\n    \n as \n    \n    bwtar\n    \n, \n    \n    \n    bzdat\n    \n as \n    \n    bzdat\n    \n, \n    \n    \n    ccbtc\n    \n as \n    \n    ccbtc\n    \n, \n    \n    \n    cession_kz\n    \n as \n    \n    cession_kz\n    \n, \n    \n    \n    dabrz\n    \n as \n    \n    dabrz\n    \n, \n    \n    \n    depot\n    \n as \n    \n    depot\n    \n, \n    \n    \n    diekz\n    \n as \n    \n    diekz\n    \n, \n    \n    \n    disbj\n    \n as \n    \n    disbj\n    \n, \n    \n    \n    disbn\n    \n as \n    \n    disbn\n    \n, \n    \n    \n    disbz\n    \n as \n    \n    disbz\n    \n, \n    \n    \n    dmb21\n    \n as \n    \n    dmb21\n    \n, \n    \n    \n    dmb22\n    \n as \n    \n    dmb22\n    \n, \n    \n    \n    dmb23\n    \n as \n    \n    dmb23\n    \n, \n    \n    \n    dmb31\n    \n as \n    \n    dmb31\n    \n, \n    \n    \n    dmb32\n    \n as \n    \n    dmb32\n    \n, \n    \n    \n    dmb33\n    \n as \n    \n    dmb33\n    \n, \n    \n    \n    dmbe2\n    \n as \n    \n    dmbe2\n    \n, \n    \n    \n    dmbe3\n    \n as \n    \n    dmbe3\n    \n, \n    \n    \n    dmbt1\n    \n as \n    \n    dmbt1\n    \n, \n    \n    \n    dmbt2\n    \n as \n    \n    dmbt2\n    \n, \n    \n    \n    dmbt3\n    \n as \n    \n    dmbt3\n    \n, \n    \n    \n    dmbtr\n    \n as \n    \n    dmbtr\n    \n, \n    \n    \n    docln\n    \n as \n    \n    docln\n    \n, \n    \n    \n    dtws1\n    \n as \n    \n    dtws1\n    \n, \n    \n    \n    dtws2\n    \n as \n    \n    dtws2\n    \n, \n    \n    \n    dtws3\n    \n as \n    \n    dtws3\n    \n, \n    \n    \n    dtws4\n    \n as \n    \n    dtws4\n    \n, \n    \n    \n    ebeln\n    \n as \n    \n    ebeln\n    \n, \n    \n    \n    ebelp\n    \n as \n    \n    ebelp\n    \n, \n    \n    \n    egbld\n    \n as \n    \n    egbld\n    \n, \n    \n    \n    eglld\n    \n as \n    \n    eglld\n    \n, \n    \n    \n    egrup\n    \n as \n    \n    egrup\n    \n, \n    \n    \n    elikz\n    \n as \n    \n    elikz\n    \n, \n    \n    \n    empfb\n    \n as \n    \n    empfb\n    \n, \n    \n    \n    erfme\n    \n as \n    \n    erfme\n    \n, \n    \n    \n    erfmg\n    \n as \n    \n    erfmg\n    \n, \n    \n    \n    esrnr\n    \n as \n    \n    esrnr\n    \n, \n    \n    \n    esrpz\n    \n as \n    \n    esrpz\n    \n, \n    \n    \n    esrre\n    \n as \n    \n    esrre\n    \n, \n    \n    \n    eten2\n    \n as \n    \n    eten2\n    \n, \n    \n    \n    etype\n    \n as \n    \n    etype\n    \n, \n    \n    \n    fastpay\n    \n as \n    \n    fastpay\n    \n, \n    \n    \n    fdgrp\n    \n as \n    \n    fdgrp\n    \n, \n    \n    \n    fdlev\n    \n as \n    \n    fdlev\n    \n, \n    \n    \n    fdtag\n    \n as \n    \n    fdtag\n    \n, \n    \n    \n    fdwbt\n    \n as \n    \n    fdwbt\n    \n, \n    \n    \n    filkd\n    \n as \n    \n    filkd\n    \n, \n    \n    \n    fipos\n    \n as \n    \n    fipos\n    \n, \n    \n    \n    fistl\n    \n as \n    \n    fistl\n    \n, \n    \n    \n    fkber\n    \n as \n    \n    fkber\n    \n, \n    \n    \n    fkber_long\n    \n as \n    \n    fkber_long\n    \n, \n    \n    \n    fkont\n    \n as \n    \n    fkont\n    \n, \n    \n    \n    fmfgus_key\n    \n as \n    \n    fmfgus_key\n    \n, \n    \n    \n    fmxdocln\n    \n as \n    \n    fmxdocln\n    \n, \n    \n    \n    fmxdocnr\n    \n as \n    \n    fmxdocnr\n    \n, \n    \n    \n    fmxyear\n    \n as \n    \n    fmxyear\n    \n, \n    \n    \n    fmxzekkn\n    \n as \n    \n    fmxzekkn\n    \n, \n    \n    \n    fwbas\n    \n as \n    \n    fwbas\n    \n, \n    \n    \n    fwzuz\n    \n as \n    \n    fwzuz\n    \n, \n    \n    \n    gbetr\n    \n as \n    \n    gbetr\n    \n, \n    \n    \n    geber\n    \n as \n    \n    geber\n    \n, \n    \n    \n    gityp\n    \n as \n    \n    gityp\n    \n, \n    \n    \n    gjahr\n    \n as \n    \n    gjahr\n    \n, \n    \n    \n    glupm\n    \n as \n    \n    glupm\n    \n, \n    \n    \n    gmvkz\n    \n as \n    \n    gmvkz\n    \n, \n    \n    \n    grant_nbr\n    \n as \n    \n    grant_nbr\n    \n, \n    \n    \n    gricd\n    \n as \n    \n    gricd\n    \n, \n    \n    \n    grirg\n    \n as \n    \n    grirg\n    \n, \n    \n    \n    gsber\n    \n as \n    \n    gsber\n    \n, \n    \n    \n    gvtyp\n    \n as \n    \n    gvtyp\n    \n, \n    \n    \n    hbkid\n    \n as \n    \n    hbkid\n    \n, \n    \n    \n    hkont\n    \n as \n    \n    hkont\n    \n, \n    \n    \n    hktid\n    \n as \n    \n    hktid\n    \n, \n    \n    \n    hrkft\n    \n as \n    \n    hrkft\n    \n, \n    \n    \n    hwbas\n    \n as \n    \n    hwbas\n    \n, \n    \n    \n    hwmet\n    \n as \n    \n    hwmet\n    \n, \n    \n    \n    hwzuz\n    \n as \n    \n    hwzuz\n    \n, \n    \n    \n    hzuon\n    \n as \n    \n    hzuon\n    \n, \n    \n    \n    idxsp\n    \n as \n    \n    idxsp\n    \n, \n    \n    \n    ignr_ivref\n    \n as \n    \n    ignr_ivref\n    \n, \n    \n    \n    imkey\n    \n as \n    \n    imkey\n    \n, \n    \n    \n    intreno\n    \n as \n    \n    intreno\n    \n, \n    \n    \n    j_1tpbupl\n    \n as \n    \n    j_1tpbupl\n    \n, \n    \n    \n    kblnr\n    \n as \n    \n    kblnr\n    \n, \n    \n    \n    kblpos\n    \n as \n    \n    kblpos\n    \n, \n    \n    \n    kidno\n    \n as \n    \n    kidno\n    \n, \n    \n    \n    kkber\n    \n as \n    \n    kkber\n    \n, \n    \n    \n    klibt\n    \n as \n    \n    klibt\n    \n, \n    \n    \n    koart\n    \n as \n    \n    koart\n    \n, \n    \n    \n    kokrs\n    \n as \n    \n    kokrs\n    \n, \n    \n    \n    kontl\n    \n as \n    \n    kontl\n    \n, \n    \n    \n    kontt\n    \n as \n    \n    kontt\n    \n, \n    \n    \n    kostl\n    \n as \n    \n    kostl\n    \n, \n    \n    \n    kstar\n    \n as \n    \n    kstar\n    \n, \n    \n    \n    kstrg\n    \n as \n    \n    kstrg\n    \n, \n    \n    \n    ktosl\n    \n as \n    \n    ktosl\n    \n, \n    \n    \n    kunnr\n    \n as \n    \n    kunnr\n    \n, \n    \n    \n    kursr\n    \n as \n    \n    kursr\n    \n, \n    \n    \n    kzbtr\n    \n as \n    \n    kzbtr\n    \n, \n    \n    \n    landl\n    \n as \n    \n    landl\n    \n, \n    \n    \n    lifnr\n    \n as \n    \n    lifnr\n    \n, \n    \n    \n    linfv\n    \n as \n    \n    linfv\n    \n, \n    \n    \n    lnran\n    \n as \n    \n    lnran\n    \n, \n    \n    \n    lokkt\n    \n as \n    \n    lokkt\n    \n, \n    \n    \n    lstar\n    \n as \n    \n    lstar\n    \n, \n    \n    \n    lzbkz\n    \n as \n    \n    lzbkz\n    \n, \n    \n    \n    maber\n    \n as \n    \n    maber\n    \n, \n    \n    \n    madat\n    \n as \n    \n    madat\n    \n, \n    \n    \n    mandt\n    \n as \n    \n    mandt\n    \n, \n    \n    \n    mansp\n    \n as \n    \n    mansp\n    \n, \n    \n    \n    manst\n    \n as \n    \n    manst\n    \n, \n    \n    \n    matnr\n    \n as \n    \n    matnr\n    \n, \n    \n    \n    measure\n    \n as \n    \n    measure\n    \n, \n    \n    \n    meins\n    \n as \n    \n    meins\n    \n, \n    \n    \n    menge\n    \n as \n    \n    menge\n    \n, \n    \n    \n    mndid\n    \n as \n    \n    mndid\n    \n, \n    \n    \n    mschl\n    \n as \n    \n    mschl\n    \n, \n    \n    \n    mwart\n    \n as \n    \n    mwart\n    \n, \n    \n    \n    mwsk1\n    \n as \n    \n    mwsk1\n    \n, \n    \n    \n    mwsk2\n    \n as \n    \n    mwsk2\n    \n, \n    \n    \n    mwsk3\n    \n as \n    \n    mwsk3\n    \n, \n    \n    \n    mwskz\n    \n as \n    \n    mwskz\n    \n, \n    \n    \n    mwst2\n    \n as \n    \n    mwst2\n    \n, \n    \n    \n    mwst3\n    \n as \n    \n    mwst3\n    \n, \n    \n    \n    mwsts\n    \n as \n    \n    mwsts\n    \n, \n    \n    \n    navfw\n    \n as \n    \n    navfw\n    \n, \n    \n    \n    navh2\n    \n as \n    \n    navh2\n    \n, \n    \n    \n    navh3\n    \n as \n    \n    navh3\n    \n, \n    \n    \n    navhw\n    \n as \n    \n    navhw\n    \n, \n    \n    \n    nebtr\n    \n as \n    \n    nebtr\n    \n, \n    \n    \n    nplnr\n    \n as \n    \n    nplnr\n    \n, \n    \n    \n    nprei\n    \n as \n    \n    nprei\n    \n, \n    \n    \n    obzei\n    \n as \n    \n    obzei\n    \n, \n    \n    \n    paobjnr\n    \n as \n    \n    paobjnr\n    \n, \n    \n    \n    pargb\n    \n as \n    \n    pargb\n    \n, \n    \n    \n    pasubnr\n    \n as \n    \n    pasubnr\n    \n, \n    \n    \n    pays_prov\n    \n as \n    \n    pays_prov\n    \n, \n    \n    \n    pays_tran\n    \n as \n    \n    pays_tran\n    \n, \n    \n    \n    pbudget_pd\n    \n as \n    \n    pbudget_pd\n    \n, \n    \n    \n    peinh\n    \n as \n    \n    peinh\n    \n, \n    \n    \n    pendays\n    \n as \n    \n    pendays\n    \n, \n    \n    \n    penfc\n    \n as \n    \n    penfc\n    \n, \n    \n    \n    penlc1\n    \n as \n    \n    penlc1\n    \n, \n    \n    \n    penlc2\n    \n as \n    \n    penlc2\n    \n, \n    \n    \n    penlc3\n    \n as \n    \n    penlc3\n    \n, \n    \n    \n    penrc\n    \n as \n    \n    penrc\n    \n, \n    \n    \n    pernr\n    \n as \n    \n    pernr\n    \n, \n    \n    \n    perop_beg\n    \n as \n    \n    perop_beg\n    \n, \n    \n    \n    perop_end\n    \n as \n    \n    perop_end\n    \n, \n    \n    \n    pfkber\n    \n as \n    \n    pfkber\n    \n, \n    \n    \n    pgeber\n    \n as \n    \n    pgeber\n    \n, \n    \n    \n    pgrant_nbr\n    \n as \n    \n    pgrant_nbr\n    \n, \n    \n    \n    popts\n    \n as \n    \n    popts\n    \n, \n    \n    \n    posn2\n    \n as \n    \n    posn2\n    \n, \n    \n    \n    ppa_ex_ind\n    \n as \n    \n    ppa_ex_ind\n    \n, \n    \n    \n    ppdif2\n    \n as \n    \n    ppdif2\n    \n, \n    \n    \n    ppdif3\n    \n as \n    \n    ppdif3\n    \n, \n    \n    \n    ppdiff\n    \n as \n    \n    ppdiff\n    \n, \n    \n    \n    pprct\n    \n as \n    \n    pprct\n    \n, \n    \n    \n    prctr\n    \n as \n    \n    prctr\n    \n, \n    \n    \n    prodper\n    \n as \n    \n    prodper\n    \n, \n    \n    \n    projk\n    \n as \n    \n    projk\n    \n, \n    \n    \n    projn\n    \n as \n    \n    projn\n    \n, \n    \n    \n    prznr\n    \n as \n    \n    prznr\n    \n, \n    \n    \n    psalt\n    \n as \n    \n    psalt\n    \n, \n    \n    \n    psegment\n    \n as \n    \n    psegment\n    \n, \n    \n    \n    pswbt\n    \n as \n    \n    pswbt\n    \n, \n    \n    \n    pswsl\n    \n as \n    \n    pswsl\n    \n, \n    \n    \n    pyamt\n    \n as \n    \n    pyamt\n    \n, \n    \n    \n    pycur\n    \n as \n    \n    pycur\n    \n, \n    \n    \n    qbshb\n    \n as \n    \n    qbshb\n    \n, \n    \n    \n    qsfbt\n    \n as \n    \n    qsfbt\n    \n, \n    \n    \n    qsshb\n    \n as \n    \n    qsshb\n    \n, \n    \n    \n    qsskz\n    \n as \n    \n    qsskz\n    \n, \n    \n    \n    qsznr\n    \n as \n    \n    qsznr\n    \n, \n    \n    \n    rdif2\n    \n as \n    \n    rdif2\n    \n, \n    \n    \n    rdif3\n    \n as \n    \n    rdif3\n    \n, \n    \n    \n    rdiff\n    \n as \n    \n    rdiff\n    \n, \n    \n    \n    re_account\n    \n as \n    \n    re_account\n    \n, \n    \n    \n    re_bukrs\n    \n as \n    \n    re_bukrs\n    \n, \n    \n    \n    rebzg\n    \n as \n    \n    rebzg\n    \n, \n    \n    \n    rebzj\n    \n as \n    \n    rebzj\n    \n, \n    \n    \n    rebzt\n    \n as \n    \n    rebzt\n    \n, \n    \n    \n    rebzz\n    \n as \n    \n    rebzz\n    \n, \n    \n    \n    recid\n    \n as \n    \n    recid\n    \n, \n    \n    \n    recrf\n    \n as \n    \n    recrf\n    \n, \n    \n    \n    rewrt\n    \n as \n    \n    rewrt\n    \n, \n    \n    \n    rewwr\n    \n as \n    \n    rewwr\n    \n, \n    \n    \n    rfzei\n    \n as \n    \n    rfzei\n    \n, \n    \n    \n    rpacq\n    \n as \n    \n    rpacq\n    \n, \n    \n    \n    rstgr\n    \n as \n    \n    rstgr\n    \n, \n    \n    \n    ryacq\n    \n as \n    \n    ryacq\n    \n, \n    \n    \n    saknr\n    \n as \n    \n    saknr\n    \n, \n    \n    \n    samnr\n    \n as \n    \n    samnr\n    \n, \n    \n    \n    sctax\n    \n as \n    \n    sctax\n    \n, \n    \n    \n    secco\n    \n as \n    \n    secco\n    \n, \n    \n    \n    segment\n    \n as \n    \n    segment\n    \n, \n    \n    \n    sgtxt\n    \n as \n    \n    sgtxt\n    \n, \n    \n    \n    shkzg\n    \n as \n    \n    shkzg\n    \n, \n    \n    \n    shzuz\n    \n as \n    \n    shzuz\n    \n, \n    \n    \n    skfbt\n    \n as \n    \n    skfbt\n    \n, \n    \n    \n    sknt2\n    \n as \n    \n    sknt2\n    \n, \n    \n    \n    sknt3\n    \n as \n    \n    sknt3\n    \n, \n    \n    \n    sknto\n    \n as \n    \n    sknto\n    \n, \n    \n    \n    spgrc\n    \n as \n    \n    spgrc\n    \n, \n    \n    \n    spgrg\n    \n as \n    \n    spgrg\n    \n, \n    \n    \n    spgrm\n    \n as \n    \n    spgrm\n    \n, \n    \n    \n    spgrp\n    \n as \n    \n    spgrp\n    \n, \n    \n    \n    spgrq\n    \n as \n    \n    spgrq\n    \n, \n    \n    \n    spgrs\n    \n as \n    \n    spgrs\n    \n, \n    \n    \n    spgrt\n    \n as \n    \n    spgrt\n    \n, \n    \n    \n    spgrv\n    \n as \n    \n    spgrv\n    \n, \n    \n    \n    squan\n    \n as \n    \n    squan\n    \n, \n    \n    \n    srtype\n    \n as \n    \n    srtype\n    \n, \n    \n    \n    stbuk\n    \n as \n    \n    stbuk\n    \n, \n    \n    \n    stceg\n    \n as \n    \n    stceg\n    \n, \n    \n    \n    stekz\n    \n as \n    \n    stekz\n    \n, \n    \n    \n    sttax\n    \n as \n    \n    sttax\n    \n, \n    \n    \n    taxps\n    \n as \n    \n    taxps\n    \n, \n    \n    \n    tbtkz\n    \n as \n    \n    tbtkz\n    \n, \n    \n    \n    txbfw\n    \n as \n    \n    txbfw\n    \n, \n    \n    \n    txbh2\n    \n as \n    \n    txbh2\n    \n, \n    \n    \n    txbh3\n    \n as \n    \n    txbh3\n    \n, \n    \n    \n    txbhw\n    \n as \n    \n    txbhw\n    \n, \n    \n    \n    txdat\n    \n as \n    \n    txdat\n    \n, \n    \n    \n    txgrp\n    \n as \n    \n    txgrp\n    \n, \n    \n    \n    txjcd\n    \n as \n    \n    txjcd\n    \n, \n    \n    \n    umsks\n    \n as \n    \n    umsks\n    \n, \n    \n    \n    umskz\n    \n as \n    \n    umskz\n    \n, \n    \n    \n    uzawe\n    \n as \n    \n    uzawe\n    \n, \n    \n    \n    valut\n    \n as \n    \n    valut\n    \n, \n    \n    \n    vbel2\n    \n as \n    \n    vbel2\n    \n, \n    \n    \n    vbeln\n    \n as \n    \n    vbeln\n    \n, \n    \n    \n    vbewa\n    \n as \n    \n    vbewa\n    \n, \n    \n    \n    vbund\n    \n as \n    \n    vbund\n    \n, \n    \n    \n    vertn\n    \n as \n    \n    vertn\n    \n, \n    \n    \n    vertt\n    \n as \n    \n    vertt\n    \n, \n    \n    \n    vname\n    \n as \n    \n    vname\n    \n, \n    \n    \n    vorgn\n    \n as \n    \n    vorgn\n    \n, \n    \n    \n    vprsv\n    \n as \n    \n    vprsv\n    \n, \n    \n    \n    vptnr\n    \n as \n    \n    vptnr\n    \n, \n    \n    \n    vrsdt\n    \n as \n    \n    vrsdt\n    \n, \n    \n    \n    vrskz\n    \n as \n    \n    vrskz\n    \n, \n    \n    \n    werks\n    \n as \n    \n    werks\n    \n, \n    \n    \n    wmwst\n    \n as \n    \n    wmwst\n    \n, \n    \n    \n    wrbt1\n    \n as \n    \n    wrbt1\n    \n, \n    \n    \n    wrbt2\n    \n as \n    \n    wrbt2\n    \n, \n    \n    \n    wrbt3\n    \n as \n    \n    wrbt3\n    \n, \n    \n    \n    wrbtr\n    \n as \n    \n    wrbtr\n    \n, \n    \n    \n    wskto\n    \n as \n    \n    wskto\n    \n, \n    \n    \n    wverw\n    \n as \n    \n    wverw\n    \n, \n    \n    \n    xanet\n    \n as \n    \n    xanet\n    \n, \n    \n    \n    xauto\n    \n as \n    \n    xauto\n    \n, \n    \n    \n    xbilk\n    \n as \n    \n    xbilk\n    \n, \n    \n    \n    xcpdd\n    \n as \n    \n    xcpdd\n    \n, \n    \n    \n    xegdr\n    \n as \n    \n    xegdr\n    \n, \n    \n    \n    xfakt\n    \n as \n    \n    xfakt\n    \n, \n    \n    \n    xfrge_bseg\n    \n as \n    \n    xfrge_bseg\n    \n, \n    \n    \n    xhkom\n    \n as \n    \n    xhkom\n    \n, \n    \n    \n    xhres\n    \n as \n    \n    xhres\n    \n, \n    \n    \n    xinve\n    \n as \n    \n    xinve\n    \n, \n    \n    \n    xkres\n    \n as \n    \n    xkres\n    \n, \n    \n    \n    xlgclr\n    \n as \n    \n    xlgclr\n    \n, \n    \n    \n    xncop\n    \n as \n    \n    xncop\n    \n, \n    \n    \n    xnegp\n    \n as \n    \n    xnegp\n    \n, \n    \n    \n    xopvw\n    \n as \n    \n    xopvw\n    \n, \n    \n    \n    xpanz\n    \n as \n    \n    xpanz\n    \n, \n    \n    \n    xpypr\n    \n as \n    \n    xpypr\n    \n, \n    \n    \n    xragl\n    \n as \n    \n    xragl\n    \n, \n    \n    \n    xref1\n    \n as \n    \n    xref1\n    \n, \n    \n    \n    xref2\n    \n as \n    \n    xref2\n    \n, \n    \n    \n    xref3\n    \n as \n    \n    xref3\n    \n, \n    \n    \n    xsauf\n    \n as \n    \n    xsauf\n    \n, \n    \n    \n    xserg\n    \n as \n    \n    xserg\n    \n, \n    \n    \n    xskrl\n    \n as \n    \n    xskrl\n    \n, \n    \n    \n    xskst\n    \n as \n    \n    xskst\n    \n, \n    \n    \n    xspro\n    \n as \n    \n    xspro\n    \n, \n    \n    \n    xuman\n    \n as \n    \n    xuman\n    \n, \n    \n    \n    xumsw\n    \n as \n    \n    xumsw\n    \n, \n    \n    \n    xzahl\n    \n as \n    \n    xzahl\n    \n, \n    \n    \n    zbd1p\n    \n as \n    \n    zbd1p\n    \n, \n    \n    \n    zbd1t\n    \n as \n    \n    zbd1t\n    \n, \n    \n    \n    zbd2p\n    \n as \n    \n    zbd2p\n    \n, \n    \n    \n    zbd2t\n    \n as \n    \n    zbd2t\n    \n, \n    \n    \n    zbd3t\n    \n as \n    \n    zbd3t\n    \n, \n    \n    \n    zbfix\n    \n as \n    \n    zbfix\n    \n, \n    \n    \n    zekkn\n    \n as \n    \n    zekkn\n    \n, \n    \n    \n    zfbdt\n    \n as \n    \n    zfbdt\n    \n, \n    \n    \n    zinkz\n    \n as \n    \n    zinkz\n    \n, \n    \n    \n    zlsch\n    \n as \n    \n    zlsch\n    \n, \n    \n    \n    zlspr\n    \n as \n    \n    zlspr\n    \n, \n    \n    \n    zolld\n    \n as \n    \n    zolld\n    \n, \n    \n    \n    zollt\n    \n as \n    \n    zollt\n    \n, \n    \n    \n    zterm\n    \n as \n    \n    zterm\n    \n, \n    \n    \n    zumsk\n    \n as \n    \n    zumsk\n    \n, \n    \n    \n    zuonr\n    \n as \n    \n    zuonr\n    \n, \n    \n    \n    zzbuspartn\n    \n as \n    \n    zzbuspartn\n    \n, \n    \n    \n    zzchan\n    \n as \n    \n    zzchan\n    \n, \n    \n    \n    zzlob\n    \n as \n    \n    zzlob\n    \n, \n    \n    \n    zzloca\n    \n as \n    \n    zzloca\n    \n, \n    \n    \n    zzproduct\n    \n as \n    \n    zzproduct\n    \n, \n    \n    \n    zzregion\n    \n as \n    \n    zzregion\n    \n, \n    \n    \n    zzspreg\n    \n as \n    \n    zzspreg\n    \n, \n    \n    \n    zzstate\n    \n as \n    \n    zzstate\n    \n, \n    \n    \n    zzuserfld1\n    \n as \n    \n    zzuserfld1\n    \n, \n    \n    \n    zzuserfld2\n    \n as \n    \n    zzuserfld2\n    \n, \n    \n    \n    zzuserfld3\n    \n as \n    \n    zzuserfld3\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(mandt as TEXT) as mandt,\n        cast(bukrs as TEXT) as bukrs,\n        cast(belnr as TEXT) as belnr,\n        cast(gjahr as TEXT) as gjahr,\n        cast(buzei as TEXT) as buzei,\n        anln1,\n        anln2,\n        aufnr,\n        augbl,\n        augdt,\n        ebeln,\n        ebelp,\n        eten2, \n        filkd,\n        gsber, \n        koart, \n        kostl,\n        maber,\n        madat,\n\n        mansp,\n        manst,\n        mschl,\n        mwskz,\n        posn2,\n        qbshb,\n        qsfbt,\n        qsshb,\n        rebzg,\n        samnr,\n        sgtxt,\n        shkzg,\n        skfbt,\n        wskto,\n        sknto, \n        umsks,\n        umskz,\n        uzawe,\n        valut,\n        vbel2,\n        vbeln,\n        vbewa,\n        vbund,\n        vertn,\n        vertt, \n        werks, \n        wverw, \n        xzahl, \n        zbd1p,\n        zbd1t,\n        zbd2p,\n        zbd2t,\n        zbd3t,\n        zfbdt, \n        zlsch,\n        zlspr,\n        zterm,\n        zuonr,\n        xref1,\n        xref2, \n        rstgr,  \n        rebzt,\n        pswsl,\n        pswbt,\n        hkont,\n        xnegp,\n        zbfix,\n        rfzei,\n        ccbtc,\n        kkber,\n        xref3,\n        dtws1,\n        dtws2,\n        dtws3,\n        dtws4,\n        absbt, \n        projk,\n        xpypr,\n        kidno, \n        bupla,\n        secco, \n        pycur,\n        pyamt, \n        xragl,\n        cession_kz,\n        buzid,\n        auggj,\n        agzei, \n        bdiff,\n        bdif2,\n        bdif3,\n        bewar,\n        dabrz,\n        dmbtr,\n        fkber,\n        fkber_long,\n        imkey,\n        kstar,\n        kunnr,\n        lifnr,\n        meins,\n        menge,\n        pargb, \n        pfkber, \n        pprct, \n        saknr,\n        wrbtr,\n        xopvw,\n        xlgclr,\n        zzspreg,\n        zzbuspartn,\n        zzproduct,\n        zzloca,\n        zzchan,\n        zzlob, \n        zzuserfld1,\n        zzuserfld2,\n        zzuserfld3,\n        zzregion,\n        zzstate\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__pa0008": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__pa0008", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__pa0008.sql", "original_file_path": "models/stg_sap__pa0008.sql", "unique_id": "model.sap_source.stg_sap__pa0008", "fqn": ["sap_source", "stg_sap__pa0008"], "alias": "stg_sap__pa0008", "checksum": {"name": "sha256", "checksum": "86989a82010a3147a7eb362e82c00168b5f94dbe2569dd01b612f466a59141d4"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "HR master record--infotype 0008 (basic pay)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pernr": {"name": "pernr", "description": "Personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subty": {"name": "subty", "description": "Subtype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objps": {"name": "objps", "description": "Object identification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sprps": {"name": "sprps", "description": "Lock indicator for HR master data record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "begda": {"name": "begda", "description": "Start date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "endda": {"name": "endda", "description": "End date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seqnr": {"name": "seqnr", "description": "Number of infotype record with same key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aedtm": {"name": "aedtm", "description": "Changed on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ancur": {"name": "ancur", "description": "Currency key for annual salary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ansal": {"name": "ansal", "description": "Annual salary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz01": {"name": "anz01", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz02": {"name": "anz02", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz03": {"name": "anz03", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz04": {"name": "anz04", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz05": {"name": "anz05", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz06": {"name": "anz06", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz07": {"name": "anz07", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz08": {"name": "anz08", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz09": {"name": "anz09", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz10": {"name": "anz10", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz11": {"name": "anz11", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz12": {"name": "anz12", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz13": {"name": "anz13", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz14": {"name": "anz14", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz15": {"name": "anz15", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz16": {"name": "anz16", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz17": {"name": "anz17", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz18": {"name": "anz18", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz19": {"name": "anz19", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz20": {"name": "anz20", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz21": {"name": "anz21", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz22": {"name": "anz22", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz23": {"name": "anz23", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz24": {"name": "anz24", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz25": {"name": "anz25", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz26": {"name": "anz26", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz27": {"name": "anz27", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz28": {"name": "anz28", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz29": {"name": "anz29", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz30": {"name": "anz30", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz31": {"name": "anz31", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz32": {"name": "anz32", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz33": {"name": "anz33", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz34": {"name": "anz34", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz35": {"name": "anz35", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz36": {"name": "anz36", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz37": {"name": "anz37", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz38": {"name": "anz38", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz39": {"name": "anz39", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz40": {"name": "anz40", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet01": {"name": "bet01", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet02": {"name": "bet02", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet03": {"name": "bet03", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet04": {"name": "bet04", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet05": {"name": "bet05", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet06": {"name": "bet06", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet07": {"name": "bet07", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet08": {"name": "bet08", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet09": {"name": "bet09", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet10": {"name": "bet10", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet11": {"name": "bet11", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet12": {"name": "bet12", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet13": {"name": "bet13", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet14": {"name": "bet14", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet15": {"name": "bet15", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet16": {"name": "bet16", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet17": {"name": "bet17", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet18": {"name": "bet18", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet19": {"name": "bet19", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet20": {"name": "bet20", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet21": {"name": "bet21", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet22": {"name": "bet22", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet23": {"name": "bet23", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet24": {"name": "bet24", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet25": {"name": "bet25", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet26": {"name": "bet26", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet27": {"name": "bet27", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet28": {"name": "bet28", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet29": {"name": "bet29", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet30": {"name": "bet30", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet31": {"name": "bet31", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet32": {"name": "bet32", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet33": {"name": "bet33", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet34": {"name": "bet34", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet35": {"name": "bet35", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet36": {"name": "bet36", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet37": {"name": "bet37", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet38": {"name": "bet38", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet39": {"name": "bet39", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet40": {"name": "bet40", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bsgrd": {"name": "bsgrd", "description": "Capacity utilization level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cpind": {"name": "cpind", "description": "Planned compensation type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "divgv": {"name": "divgv", "description": "Working hours per payroll period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein01": {"name": "ein01", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein02": {"name": "ein02", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein03": {"name": "ein03", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein04": {"name": "ein04", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein05": {"name": "ein05", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein06": {"name": "ein06", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein07": {"name": "ein07", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein08": {"name": "ein08", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein09": {"name": "ein09", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein10": {"name": "ein10", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein11": {"name": "ein11", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein12": {"name": "ein12", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein13": {"name": "ein13", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein14": {"name": "ein14", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein15": {"name": "ein15", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein16": {"name": "ein16", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein17": {"name": "ein17", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein18": {"name": "ein18", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein19": {"name": "ein19", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein20": {"name": "ein20", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein21": {"name": "ein21", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein22": {"name": "ein22", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein23": {"name": "ein23", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein24": {"name": "ein24", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein25": {"name": "ein25", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein26": {"name": "ein26", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein27": {"name": "ein27", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein28": {"name": "ein28", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein29": {"name": "ein29", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein30": {"name": "ein30", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein31": {"name": "ein31", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein32": {"name": "ein32", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein33": {"name": "ein33", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein34": {"name": "ein34", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein35": {"name": "ein35", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein36": {"name": "ein36", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein37": {"name": "ein37", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein38": {"name": "ein38", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein39": {"name": "ein39", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein40": {"name": "ein40", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "falgk": {"name": "falgk", "description": "Case group catalog", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "falgr": {"name": "falgr", "description": "Case group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag1": {"name": "flag1", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag2": {"name": "flag2", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag3": {"name": "flag3", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag4": {"name": "flag4", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flaga": {"name": "flaga", "description": "General flag", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grpvl": {"name": "grpvl", "description": "Grouping value for personnel assignments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "histo": {"name": "histo", "description": "Historical record flag", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind01": {"name": "ind01", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind02": {"name": "ind02", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind03": {"name": "ind03", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind04": {"name": "ind04", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind05": {"name": "ind05", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind06": {"name": "ind06", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind07": {"name": "ind07", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind08": {"name": "ind08", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind09": {"name": "ind09", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind10": {"name": "ind10", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind11": {"name": "ind11", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind12": {"name": "ind12", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind13": {"name": "ind13", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind14": {"name": "ind14", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind15": {"name": "ind15", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind16": {"name": "ind16", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind17": {"name": "ind17", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind18": {"name": "ind18", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind19": {"name": "ind19", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind20": {"name": "ind20", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind21": {"name": "ind21", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind22": {"name": "ind22", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind23": {"name": "ind23", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind24": {"name": "ind24", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind25": {"name": "ind25", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind26": {"name": "ind26", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind27": {"name": "ind27", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind28": {"name": "ind28", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind29": {"name": "ind29", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind30": {"name": "ind30", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind31": {"name": "ind31", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind32": {"name": "ind32", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind33": {"name": "ind33", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind34": {"name": "ind34", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind35": {"name": "ind35", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind36": {"name": "ind36", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind37": {"name": "ind37", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind38": {"name": "ind38", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind39": {"name": "ind39", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind40": {"name": "ind40", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itbld": {"name": "itbld", "description": "Infotype screen control", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itxex": {"name": "itxex", "description": "Text exists for infotype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga01": {"name": "lga01", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga02": {"name": "lga02", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga03": {"name": "lga03", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga04": {"name": "lga04", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga05": {"name": "lga05", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga06": {"name": "lga06", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga07": {"name": "lga07", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga08": {"name": "lga08", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga09": {"name": "lga09", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga10": {"name": "lga10", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga11": {"name": "lga11", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga12": {"name": "lga12", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga13": {"name": "lga13", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga14": {"name": "lga14", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga15": {"name": "lga15", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga16": {"name": "lga16", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga17": {"name": "lga17", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga18": {"name": "lga18", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga19": {"name": "lga19", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga20": {"name": "lga20", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga21": {"name": "lga21", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga22": {"name": "lga22", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga23": {"name": "lga23", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga24": {"name": "lga24", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga25": {"name": "lga25", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga26": {"name": "lga26", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga27": {"name": "lga27", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga28": {"name": "lga28", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga29": {"name": "lga29", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga30": {"name": "lga30", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga31": {"name": "lga31", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga32": {"name": "lga32", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga33": {"name": "lga33", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga34": {"name": "lga34", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga35": {"name": "lga35", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga36": {"name": "lga36", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga37": {"name": "lga37", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga38": {"name": "lga38", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga39": {"name": "lga39", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga40": {"name": "lga40", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk01": {"name": "opk01", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk02": {"name": "opk02", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk03": {"name": "opk03", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk04": {"name": "opk04", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk05": {"name": "opk05", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk06": {"name": "opk06", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk07": {"name": "opk07", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk08": {"name": "opk08", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk09": {"name": "opk09", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk10": {"name": "opk10", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk11": {"name": "opk11", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk12": {"name": "opk12", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk13": {"name": "opk13", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk14": {"name": "opk14", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk15": {"name": "opk15", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk16": {"name": "opk16", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk17": {"name": "opk17", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk18": {"name": "opk18", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk19": {"name": "opk19", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk20": {"name": "opk20", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk21": {"name": "opk21", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk22": {"name": "opk22", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk23": {"name": "opk23", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk24": {"name": "opk24", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk25": {"name": "opk25", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk26": {"name": "opk26", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk27": {"name": "opk27", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk28": {"name": "opk28", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk29": {"name": "opk29", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk30": {"name": "opk30", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk31": {"name": "opk31", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk32": {"name": "opk32", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk33": {"name": "opk33", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk34": {"name": "opk34", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk35": {"name": "opk35", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk36": {"name": "opk36", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk37": {"name": "opk37", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk38": {"name": "opk38", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk39": {"name": "opk39", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk40": {"name": "opk40", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ordex": {"name": "ordex", "description": "Confirmation fields exist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "orzst": {"name": "orzst", "description": "Cost of living allowance level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "partn": {"name": "partn", "description": "Partnership", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preas": {"name": "preas", "description": "Reason for changing master data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refex": {"name": "refex", "description": "Reference fields exist (primary/secondary costs)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese1": {"name": "rese1", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese2": {"name": "rese2", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stvor": {"name": "stvor", "description": "Date of next increase", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trfar": {"name": "trfar", "description": "Pay scale type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trfgb": {"name": "trfgb", "description": "Pay scale area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trfgr": {"name": "trfgr", "description": "Pay scale group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trfst": {"name": "trfst", "description": "Pay scale level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uname": {"name": "uname", "description": "Name of person who changed object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vglgb": {"name": "vglgb", "description": "Comparison pay scale area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vglgr": {"name": "vglgr", "description": "Comparison pay scale group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vglst": {"name": "vglst", "description": "Comparison pay scale level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vglsv": {"name": "vglsv", "description": "Date of next increase", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vglta": {"name": "vglta", "description": "Comparison pay scale type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "waers": {"name": "waers", "description": "Currency key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111437.1227908, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0008", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__pa0008_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__pa0008_tmp')),\n                staging_columns=get_pa0008_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        mandt,\n        pernr,  \n        subty,\n        objps,\n        sprps,\n        endda,\n        begda,\n        seqnr,\n        aedtm,\n        ancur,\n        ansal,\n        anz01,\n        anz02,\n        anz03,\n        anz04,\n        anz05,\n        anz06,\n        anz07,\n        anz08,\n        anz09,\n        anz10,\n        anz11,\n        anz12,\n        anz13,\n        anz14,\n        anz15,\n        anz16,\n        anz17,\n        anz18,\n        anz19,\n        anz20,\n        anz21,\n        anz22,\n        anz23,\n        anz24,\n        anz25,\n        anz26,\n        anz27,\n        anz28,\n        anz29,\n        anz30,\n        anz31,\n        anz32,\n        anz33,\n        anz34,\n        anz35,\n        anz36,\n        anz37,\n        anz38,\n        anz39,\n        anz40,\n        bet01,\n        bet02,\n        bet03,\n        bet04,\n        bet05,\n        bet06,\n        bet07,\n        bet08,\n        bet09,\n        bet10,\n        bet11,\n        bet12,\n        bet13,\n        bet14,\n        bet15,\n        bet16,\n        bet17,\n        bet18,\n        bet19,\n        bet20,\n        bet21,\n        bet22,\n        bet23,\n        bet24,\n        bet25,\n        bet26,\n        bet27,\n        bet28,\n        bet29,\n        bet30,\n        bet31,\n        bet32,\n        bet33,\n        bet34,\n        bet35,\n        bet36,\n        bet37,\n        bet38,\n        bet39,\n        bet40,\n        bsgrd,\n        cpind,\n        divgv,\n        ein01,\n        ein02,\n        ein03,\n        ein04,\n        ein05,\n        ein06,\n        ein07,\n        ein08,\n        ein09,\n        ein10,\n        ein11,\n        ein12,\n        ein13,\n        ein14,\n        ein15,\n        ein16,\n        ein17,\n        ein18,\n        ein19,\n        ein20,\n        ein21,\n        ein22,\n        ein23,\n        ein24,\n        ein25,\n        ein26,\n        ein27,\n        ein28,\n        ein29,\n        ein30,\n        ein31,\n        ein32,\n        ein33,\n        ein34,\n        ein35,\n        ein36,\n        ein37,\n        ein38,\n        ein39,\n        ein40,\n        falgk,\n        falgr,\n        flag1,\n        flag2,\n        flag3,\n        flag4,\n        flaga,\n        grpvl,\n        histo,\n        ind01,\n        ind02,\n        ind03,\n        ind04,\n        ind05,\n        ind06,\n        ind07,\n        ind08,\n        ind09,\n        ind10,\n        ind11,\n        ind12,\n        ind13,\n        ind14,\n        ind15,\n        ind16,\n        ind17,\n        ind18,\n        ind19,\n        ind20,\n        ind21,\n        ind22,\n        ind23,\n        ind24,\n        ind25,\n        ind26,\n        ind27,\n        ind28,\n        ind29,\n        ind30,\n        ind31,\n        ind32,\n        ind33,\n        ind34,\n        ind35,\n        ind36,\n        ind37,\n        ind38,\n        ind39,\n        ind40,\n        itbld,\n        itxex,\n        lga01,\n        lga02,\n        lga03,\n        lga04,\n        lga05,\n        lga06,\n        lga07,\n        lga08,\n        lga09,\n        lga10,\n        lga11,\n        lga12,\n        lga13,\n        lga14,\n        lga15,\n        lga16,\n        lga17,\n        lga18,\n        lga19,\n        lga20,\n        lga21,\n        lga22,\n        lga23,\n        lga24,\n        lga25,\n        lga26,\n        lga27,\n        lga28,\n        lga29,\n        lga30,\n        lga31,\n        lga32,\n        lga33,\n        lga34,\n        lga35,\n        lga36,\n        lga37,\n        lga38,\n        lga39,\n        lga40,\n        opk01,\n        opk02,\n        opk03,\n        opk04,\n        opk05,\n        opk06,\n        opk07,\n        opk08,\n        opk09,\n        opk10,\n        opk11,\n        opk12,\n        opk13,\n        opk14,\n        opk15,\n        opk16,\n        opk17,\n        opk18,\n        opk19,\n        opk20,\n        opk21,\n        opk22,\n        opk23,\n        opk24,\n        opk25,\n        opk26,\n        opk27,\n        opk28,\n        opk29,\n        opk30,\n        opk31,\n        opk32,\n        opk33,\n        opk34,\n        opk35,\n        opk36,\n        opk37,\n        opk38,\n        opk39,\n        opk40,\n        ordex,\n        orzst,\n        partn,\n        preas,\n        refex,\n        rese1,\n        rese2,\n        stvor,\n        trfar,\n        trfgb,\n        trfgr,\n        trfst,\n        uname,\n        vglgb,\n        vglgr,\n        vglst,\n        vglsv,\n        vglta,\n        waers\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_sap__pa0008_tmp", "package": null, "version": null}, {"name": "stg_sap__pa0008_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_pa0008_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.sap_source.stg_sap__pa0008_tmp", "model.sap_source.stg_sap__pa0008_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__pa0008.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0008_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    aedtm\n    \n as \n    \n    aedtm\n    \n, \n    \n    \n    ancur\n    \n as \n    \n    ancur\n    \n, \n    \n    \n    ansal\n    \n as \n    \n    ansal\n    \n, \n    \n    \n    anz01\n    \n as \n    \n    anz01\n    \n, \n    \n    \n    anz02\n    \n as \n    \n    anz02\n    \n, \n    \n    \n    anz03\n    \n as \n    \n    anz03\n    \n, \n    \n    \n    anz04\n    \n as \n    \n    anz04\n    \n, \n    \n    \n    anz05\n    \n as \n    \n    anz05\n    \n, \n    \n    \n    anz06\n    \n as \n    \n    anz06\n    \n, \n    \n    \n    anz07\n    \n as \n    \n    anz07\n    \n, \n    \n    \n    anz08\n    \n as \n    \n    anz08\n    \n, \n    \n    \n    anz09\n    \n as \n    \n    anz09\n    \n, \n    \n    \n    anz10\n    \n as \n    \n    anz10\n    \n, \n    \n    \n    anz11\n    \n as \n    \n    anz11\n    \n, \n    \n    \n    anz12\n    \n as \n    \n    anz12\n    \n, \n    \n    \n    anz13\n    \n as \n    \n    anz13\n    \n, \n    \n    \n    anz14\n    \n as \n    \n    anz14\n    \n, \n    \n    \n    anz15\n    \n as \n    \n    anz15\n    \n, \n    \n    \n    anz16\n    \n as \n    \n    anz16\n    \n, \n    \n    \n    anz17\n    \n as \n    \n    anz17\n    \n, \n    \n    \n    anz18\n    \n as \n    \n    anz18\n    \n, \n    \n    \n    anz19\n    \n as \n    \n    anz19\n    \n, \n    \n    \n    anz20\n    \n as \n    \n    anz20\n    \n, \n    \n    \n    anz21\n    \n as \n    \n    anz21\n    \n, \n    \n    \n    anz22\n    \n as \n    \n    anz22\n    \n, \n    \n    \n    anz23\n    \n as \n    \n    anz23\n    \n, \n    \n    \n    anz24\n    \n as \n    \n    anz24\n    \n, \n    \n    \n    anz25\n    \n as \n    \n    anz25\n    \n, \n    \n    \n    anz26\n    \n as \n    \n    anz26\n    \n, \n    \n    \n    anz27\n    \n as \n    \n    anz27\n    \n, \n    \n    \n    anz28\n    \n as \n    \n    anz28\n    \n, \n    \n    \n    anz29\n    \n as \n    \n    anz29\n    \n, \n    \n    \n    anz30\n    \n as \n    \n    anz30\n    \n, \n    \n    \n    anz31\n    \n as \n    \n    anz31\n    \n, \n    \n    \n    anz32\n    \n as \n    \n    anz32\n    \n, \n    \n    \n    anz33\n    \n as \n    \n    anz33\n    \n, \n    \n    \n    anz34\n    \n as \n    \n    anz34\n    \n, \n    \n    \n    anz35\n    \n as \n    \n    anz35\n    \n, \n    \n    \n    anz36\n    \n as \n    \n    anz36\n    \n, \n    \n    \n    anz37\n    \n as \n    \n    anz37\n    \n, \n    \n    \n    anz38\n    \n as \n    \n    anz38\n    \n, \n    \n    \n    anz39\n    \n as \n    \n    anz39\n    \n, \n    \n    \n    anz40\n    \n as \n    \n    anz40\n    \n, \n    \n    \n    begda\n    \n as \n    \n    begda\n    \n, \n    \n    \n    bet01\n    \n as \n    \n    bet01\n    \n, \n    \n    \n    bet02\n    \n as \n    \n    bet02\n    \n, \n    \n    \n    bet03\n    \n as \n    \n    bet03\n    \n, \n    \n    \n    bet04\n    \n as \n    \n    bet04\n    \n, \n    \n    \n    bet05\n    \n as \n    \n    bet05\n    \n, \n    \n    \n    bet06\n    \n as \n    \n    bet06\n    \n, \n    \n    \n    bet07\n    \n as \n    \n    bet07\n    \n, \n    \n    \n    bet08\n    \n as \n    \n    bet08\n    \n, \n    \n    \n    bet09\n    \n as \n    \n    bet09\n    \n, \n    \n    \n    bet10\n    \n as \n    \n    bet10\n    \n, \n    \n    \n    bet11\n    \n as \n    \n    bet11\n    \n, \n    \n    \n    bet12\n    \n as \n    \n    bet12\n    \n, \n    \n    \n    bet13\n    \n as \n    \n    bet13\n    \n, \n    \n    \n    bet14\n    \n as \n    \n    bet14\n    \n, \n    \n    \n    bet15\n    \n as \n    \n    bet15\n    \n, \n    \n    \n    bet16\n    \n as \n    \n    bet16\n    \n, \n    \n    \n    bet17\n    \n as \n    \n    bet17\n    \n, \n    \n    \n    bet18\n    \n as \n    \n    bet18\n    \n, \n    \n    \n    bet19\n    \n as \n    \n    bet19\n    \n, \n    \n    \n    bet20\n    \n as \n    \n    bet20\n    \n, \n    \n    \n    bet21\n    \n as \n    \n    bet21\n    \n, \n    \n    \n    bet22\n    \n as \n    \n    bet22\n    \n, \n    \n    \n    bet23\n    \n as \n    \n    bet23\n    \n, \n    \n    \n    bet24\n    \n as \n    \n    bet24\n    \n, \n    \n    \n    bet25\n    \n as \n    \n    bet25\n    \n, \n    \n    \n    bet26\n    \n as \n    \n    bet26\n    \n, \n    \n    \n    bet27\n    \n as \n    \n    bet27\n    \n, \n    \n    \n    bet28\n    \n as \n    \n    bet28\n    \n, \n    \n    \n    bet29\n    \n as \n    \n    bet29\n    \n, \n    \n    \n    bet30\n    \n as \n    \n    bet30\n    \n, \n    \n    \n    bet31\n    \n as \n    \n    bet31\n    \n, \n    \n    \n    bet32\n    \n as \n    \n    bet32\n    \n, \n    \n    \n    bet33\n    \n as \n    \n    bet33\n    \n, \n    \n    \n    bet34\n    \n as \n    \n    bet34\n    \n, \n    \n    \n    bet35\n    \n as \n    \n    bet35\n    \n, \n    \n    \n    bet36\n    \n as \n    \n    bet36\n    \n, \n    \n    \n    bet37\n    \n as \n    \n    bet37\n    \n, \n    \n    \n    bet38\n    \n as \n    \n    bet38\n    \n, \n    \n    \n    bet39\n    \n as \n    \n    bet39\n    \n, \n    \n    \n    bet40\n    \n as \n    \n    bet40\n    \n, \n    \n    \n    bsgrd\n    \n as \n    \n    bsgrd\n    \n, \n    \n    \n    cpind\n    \n as \n    \n    cpind\n    \n, \n    \n    \n    divgv\n    \n as \n    \n    divgv\n    \n, \n    \n    \n    ein01\n    \n as \n    \n    ein01\n    \n, \n    \n    \n    ein02\n    \n as \n    \n    ein02\n    \n, \n    \n    \n    ein03\n    \n as \n    \n    ein03\n    \n, \n    \n    \n    ein04\n    \n as \n    \n    ein04\n    \n, \n    \n    \n    ein05\n    \n as \n    \n    ein05\n    \n, \n    \n    \n    ein06\n    \n as \n    \n    ein06\n    \n, \n    \n    \n    ein07\n    \n as \n    \n    ein07\n    \n, \n    \n    \n    ein08\n    \n as \n    \n    ein08\n    \n, \n    \n    \n    ein09\n    \n as \n    \n    ein09\n    \n, \n    \n    \n    ein10\n    \n as \n    \n    ein10\n    \n, \n    \n    \n    ein11\n    \n as \n    \n    ein11\n    \n, \n    \n    \n    ein12\n    \n as \n    \n    ein12\n    \n, \n    \n    \n    ein13\n    \n as \n    \n    ein13\n    \n, \n    \n    \n    ein14\n    \n as \n    \n    ein14\n    \n, \n    \n    \n    ein15\n    \n as \n    \n    ein15\n    \n, \n    \n    \n    ein16\n    \n as \n    \n    ein16\n    \n, \n    \n    \n    ein17\n    \n as \n    \n    ein17\n    \n, \n    \n    \n    ein18\n    \n as \n    \n    ein18\n    \n, \n    \n    \n    ein19\n    \n as \n    \n    ein19\n    \n, \n    \n    \n    ein20\n    \n as \n    \n    ein20\n    \n, \n    \n    \n    ein21\n    \n as \n    \n    ein21\n    \n, \n    \n    \n    ein22\n    \n as \n    \n    ein22\n    \n, \n    \n    \n    ein23\n    \n as \n    \n    ein23\n    \n, \n    \n    \n    ein24\n    \n as \n    \n    ein24\n    \n, \n    \n    \n    ein25\n    \n as \n    \n    ein25\n    \n, \n    \n    \n    ein26\n    \n as \n    \n    ein26\n    \n, \n    \n    \n    ein27\n    \n as \n    \n    ein27\n    \n, \n    \n    \n    ein28\n    \n as \n    \n    ein28\n    \n, \n    \n    \n    ein29\n    \n as \n    \n    ein29\n    \n, \n    \n    \n    ein30\n    \n as \n    \n    ein30\n    \n, \n    \n    \n    ein31\n    \n as \n    \n    ein31\n    \n, \n    \n    \n    ein32\n    \n as \n    \n    ein32\n    \n, \n    \n    \n    ein33\n    \n as \n    \n    ein33\n    \n, \n    \n    \n    ein34\n    \n as \n    \n    ein34\n    \n, \n    \n    \n    ein35\n    \n as \n    \n    ein35\n    \n, \n    \n    \n    ein36\n    \n as \n    \n    ein36\n    \n, \n    \n    \n    ein37\n    \n as \n    \n    ein37\n    \n, \n    \n    \n    ein38\n    \n as \n    \n    ein38\n    \n, \n    \n    \n    ein39\n    \n as \n    \n    ein39\n    \n, \n    \n    \n    ein40\n    \n as \n    \n    ein40\n    \n, \n    \n    \n    endda\n    \n as \n    \n    endda\n    \n, \n    \n    \n    falgk\n    \n as \n    \n    falgk\n    \n, \n    \n    \n    falgr\n    \n as \n    \n    falgr\n    \n, \n    \n    \n    flag1\n    \n as \n    \n    flag1\n    \n, \n    \n    \n    flag2\n    \n as \n    \n    flag2\n    \n, \n    \n    \n    flag3\n    \n as \n    \n    flag3\n    \n, \n    \n    \n    flag4\n    \n as \n    \n    flag4\n    \n, \n    \n    \n    flaga\n    \n as \n    \n    flaga\n    \n, \n    \n    \n    grpvl\n    \n as \n    \n    grpvl\n    \n, \n    \n    \n    histo\n    \n as \n    \n    histo\n    \n, \n    \n    \n    ind01\n    \n as \n    \n    ind01\n    \n, \n    \n    \n    ind02\n    \n as \n    \n    ind02\n    \n, \n    \n    \n    ind03\n    \n as \n    \n    ind03\n    \n, \n    \n    \n    ind04\n    \n as \n    \n    ind04\n    \n, \n    \n    \n    ind05\n    \n as \n    \n    ind05\n    \n, \n    \n    \n    ind06\n    \n as \n    \n    ind06\n    \n, \n    \n    \n    ind07\n    \n as \n    \n    ind07\n    \n, \n    \n    \n    ind08\n    \n as \n    \n    ind08\n    \n, \n    \n    \n    ind09\n    \n as \n    \n    ind09\n    \n, \n    \n    \n    ind10\n    \n as \n    \n    ind10\n    \n, \n    \n    \n    ind11\n    \n as \n    \n    ind11\n    \n, \n    \n    \n    ind12\n    \n as \n    \n    ind12\n    \n, \n    \n    \n    ind13\n    \n as \n    \n    ind13\n    \n, \n    \n    \n    ind14\n    \n as \n    \n    ind14\n    \n, \n    \n    \n    ind15\n    \n as \n    \n    ind15\n    \n, \n    \n    \n    ind16\n    \n as \n    \n    ind16\n    \n, \n    \n    \n    ind17\n    \n as \n    \n    ind17\n    \n, \n    \n    \n    ind18\n    \n as \n    \n    ind18\n    \n, \n    \n    \n    ind19\n    \n as \n    \n    ind19\n    \n, \n    \n    \n    ind20\n    \n as \n    \n    ind20\n    \n, \n    \n    \n    ind21\n    \n as \n    \n    ind21\n    \n, \n    \n    \n    ind22\n    \n as \n    \n    ind22\n    \n, \n    \n    \n    ind23\n    \n as \n    \n    ind23\n    \n, \n    \n    \n    ind24\n    \n as \n    \n    ind24\n    \n, \n    \n    \n    ind25\n    \n as \n    \n    ind25\n    \n, \n    \n    \n    ind26\n    \n as \n    \n    ind26\n    \n, \n    \n    \n    ind27\n    \n as \n    \n    ind27\n    \n, \n    \n    \n    ind28\n    \n as \n    \n    ind28\n    \n, \n    \n    \n    ind29\n    \n as \n    \n    ind29\n    \n, \n    \n    \n    ind30\n    \n as \n    \n    ind30\n    \n, \n    \n    \n    ind31\n    \n as \n    \n    ind31\n    \n, \n    \n    \n    ind32\n    \n as \n    \n    ind32\n    \n, \n    \n    \n    ind33\n    \n as \n    \n    ind33\n    \n, \n    \n    \n    ind34\n    \n as \n    \n    ind34\n    \n, \n    \n    \n    ind35\n    \n as \n    \n    ind35\n    \n, \n    \n    \n    ind36\n    \n as \n    \n    ind36\n    \n, \n    \n    \n    ind37\n    \n as \n    \n    ind37\n    \n, \n    \n    \n    ind38\n    \n as \n    \n    ind38\n    \n, \n    \n    \n    ind39\n    \n as \n    \n    ind39\n    \n, \n    \n    \n    ind40\n    \n as \n    \n    ind40\n    \n, \n    \n    \n    itbld\n    \n as \n    \n    itbld\n    \n, \n    \n    \n    itxex\n    \n as \n    \n    itxex\n    \n, \n    \n    \n    lga01\n    \n as \n    \n    lga01\n    \n, \n    \n    \n    lga02\n    \n as \n    \n    lga02\n    \n, \n    \n    \n    lga03\n    \n as \n    \n    lga03\n    \n, \n    \n    \n    lga04\n    \n as \n    \n    lga04\n    \n, \n    \n    \n    lga05\n    \n as \n    \n    lga05\n    \n, \n    \n    \n    lga06\n    \n as \n    \n    lga06\n    \n, \n    \n    \n    lga07\n    \n as \n    \n    lga07\n    \n, \n    \n    \n    lga08\n    \n as \n    \n    lga08\n    \n, \n    \n    \n    lga09\n    \n as \n    \n    lga09\n    \n, \n    \n    \n    lga10\n    \n as \n    \n    lga10\n    \n, \n    \n    \n    lga11\n    \n as \n    \n    lga11\n    \n, \n    \n    \n    lga12\n    \n as \n    \n    lga12\n    \n, \n    \n    \n    lga13\n    \n as \n    \n    lga13\n    \n, \n    \n    \n    lga14\n    \n as \n    \n    lga14\n    \n, \n    \n    \n    lga15\n    \n as \n    \n    lga15\n    \n, \n    \n    \n    lga16\n    \n as \n    \n    lga16\n    \n, \n    \n    \n    lga17\n    \n as \n    \n    lga17\n    \n, \n    \n    \n    lga18\n    \n as \n    \n    lga18\n    \n, \n    \n    \n    lga19\n    \n as \n    \n    lga19\n    \n, \n    \n    \n    lga20\n    \n as \n    \n    lga20\n    \n, \n    \n    \n    lga21\n    \n as \n    \n    lga21\n    \n, \n    \n    \n    lga22\n    \n as \n    \n    lga22\n    \n, \n    \n    \n    lga23\n    \n as \n    \n    lga23\n    \n, \n    \n    \n    lga24\n    \n as \n    \n    lga24\n    \n, \n    \n    \n    lga25\n    \n as \n    \n    lga25\n    \n, \n    \n    \n    lga26\n    \n as \n    \n    lga26\n    \n, \n    \n    \n    lga27\n    \n as \n    \n    lga27\n    \n, \n    \n    \n    lga28\n    \n as \n    \n    lga28\n    \n, \n    \n    \n    lga29\n    \n as \n    \n    lga29\n    \n, \n    \n    \n    lga30\n    \n as \n    \n    lga30\n    \n, \n    \n    \n    lga31\n    \n as \n    \n    lga31\n    \n, \n    \n    \n    lga32\n    \n as \n    \n    lga32\n    \n, \n    \n    \n    lga33\n    \n as \n    \n    lga33\n    \n, \n    \n    \n    lga34\n    \n as \n    \n    lga34\n    \n, \n    \n    \n    lga35\n    \n as \n    \n    lga35\n    \n, \n    \n    \n    lga36\n    \n as \n    \n    lga36\n    \n, \n    \n    \n    lga37\n    \n as \n    \n    lga37\n    \n, \n    \n    \n    lga38\n    \n as \n    \n    lga38\n    \n, \n    \n    \n    lga39\n    \n as \n    \n    lga39\n    \n, \n    \n    \n    lga40\n    \n as \n    \n    lga40\n    \n, \n    \n    \n    mandt\n    \n as \n    \n    mandt\n    \n, \n    \n    \n    objps\n    \n as \n    \n    objps\n    \n, \n    \n    \n    opk01\n    \n as \n    \n    opk01\n    \n, \n    \n    \n    opk02\n    \n as \n    \n    opk02\n    \n, \n    \n    \n    opk03\n    \n as \n    \n    opk03\n    \n, \n    \n    \n    opk04\n    \n as \n    \n    opk04\n    \n, \n    \n    \n    opk05\n    \n as \n    \n    opk05\n    \n, \n    \n    \n    opk06\n    \n as \n    \n    opk06\n    \n, \n    \n    \n    opk07\n    \n as \n    \n    opk07\n    \n, \n    \n    \n    opk08\n    \n as \n    \n    opk08\n    \n, \n    \n    \n    opk09\n    \n as \n    \n    opk09\n    \n, \n    \n    \n    opk10\n    \n as \n    \n    opk10\n    \n, \n    \n    \n    opk11\n    \n as \n    \n    opk11\n    \n, \n    \n    \n    opk12\n    \n as \n    \n    opk12\n    \n, \n    \n    \n    opk13\n    \n as \n    \n    opk13\n    \n, \n    \n    \n    opk14\n    \n as \n    \n    opk14\n    \n, \n    \n    \n    opk15\n    \n as \n    \n    opk15\n    \n, \n    \n    \n    opk16\n    \n as \n    \n    opk16\n    \n, \n    \n    \n    opk17\n    \n as \n    \n    opk17\n    \n, \n    \n    \n    opk18\n    \n as \n    \n    opk18\n    \n, \n    \n    \n    opk19\n    \n as \n    \n    opk19\n    \n, \n    \n    \n    opk20\n    \n as \n    \n    opk20\n    \n, \n    \n    \n    opk21\n    \n as \n    \n    opk21\n    \n, \n    \n    \n    opk22\n    \n as \n    \n    opk22\n    \n, \n    \n    \n    opk23\n    \n as \n    \n    opk23\n    \n, \n    \n    \n    opk24\n    \n as \n    \n    opk24\n    \n, \n    \n    \n    opk25\n    \n as \n    \n    opk25\n    \n, \n    \n    \n    opk26\n    \n as \n    \n    opk26\n    \n, \n    \n    \n    opk27\n    \n as \n    \n    opk27\n    \n, \n    \n    \n    opk28\n    \n as \n    \n    opk28\n    \n, \n    \n    \n    opk29\n    \n as \n    \n    opk29\n    \n, \n    \n    \n    opk30\n    \n as \n    \n    opk30\n    \n, \n    \n    \n    opk31\n    \n as \n    \n    opk31\n    \n, \n    \n    \n    opk32\n    \n as \n    \n    opk32\n    \n, \n    \n    \n    opk33\n    \n as \n    \n    opk33\n    \n, \n    \n    \n    opk34\n    \n as \n    \n    opk34\n    \n, \n    \n    \n    opk35\n    \n as \n    \n    opk35\n    \n, \n    \n    \n    opk36\n    \n as \n    \n    opk36\n    \n, \n    \n    \n    opk37\n    \n as \n    \n    opk37\n    \n, \n    \n    \n    opk38\n    \n as \n    \n    opk38\n    \n, \n    \n    \n    opk39\n    \n as \n    \n    opk39\n    \n, \n    \n    \n    opk40\n    \n as \n    \n    opk40\n    \n, \n    \n    \n    ordex\n    \n as \n    \n    ordex\n    \n, \n    \n    \n    orzst\n    \n as \n    \n    orzst\n    \n, \n    \n    \n    partn\n    \n as \n    \n    partn\n    \n, \n    \n    \n    pernr\n    \n as \n    \n    pernr\n    \n, \n    \n    \n    preas\n    \n as \n    \n    preas\n    \n, \n    \n    \n    refex\n    \n as \n    \n    refex\n    \n, \n    \n    \n    rese1\n    \n as \n    \n    rese1\n    \n, \n    \n    \n    rese2\n    \n as \n    \n    rese2\n    \n, \n    \n    \n    seqnr\n    \n as \n    \n    seqnr\n    \n, \n    \n    \n    sprps\n    \n as \n    \n    sprps\n    \n, \n    \n    \n    stvor\n    \n as \n    \n    stvor\n    \n, \n    \n    \n    subty\n    \n as \n    \n    subty\n    \n, \n    \n    \n    trfar\n    \n as \n    \n    trfar\n    \n, \n    \n    \n    trfgb\n    \n as \n    \n    trfgb\n    \n, \n    \n    \n    trfgr\n    \n as \n    \n    trfgr\n    \n, \n    \n    \n    trfst\n    \n as \n    \n    trfst\n    \n, \n    \n    \n    uname\n    \n as \n    \n    uname\n    \n, \n    \n    \n    vglgb\n    \n as \n    \n    vglgb\n    \n, \n    \n    \n    vglgr\n    \n as \n    \n    vglgr\n    \n, \n    \n    \n    vglst\n    \n as \n    \n    vglst\n    \n, \n    \n    \n    vglsv\n    \n as \n    \n    vglsv\n    \n, \n    \n    \n    vglta\n    \n as \n    \n    vglta\n    \n, \n    \n    \n    waers\n    \n as \n    \n    waers\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        mandt,\n        pernr,  \n        subty,\n        objps,\n        sprps,\n        endda,\n        begda,\n        seqnr,\n        aedtm,\n        ancur,\n        ansal,\n        anz01,\n        anz02,\n        anz03,\n        anz04,\n        anz05,\n        anz06,\n        anz07,\n        anz08,\n        anz09,\n        anz10,\n        anz11,\n        anz12,\n        anz13,\n        anz14,\n        anz15,\n        anz16,\n        anz17,\n        anz18,\n        anz19,\n        anz20,\n        anz21,\n        anz22,\n        anz23,\n        anz24,\n        anz25,\n        anz26,\n        anz27,\n        anz28,\n        anz29,\n        anz30,\n        anz31,\n        anz32,\n        anz33,\n        anz34,\n        anz35,\n        anz36,\n        anz37,\n        anz38,\n        anz39,\n        anz40,\n        bet01,\n        bet02,\n        bet03,\n        bet04,\n        bet05,\n        bet06,\n        bet07,\n        bet08,\n        bet09,\n        bet10,\n        bet11,\n        bet12,\n        bet13,\n        bet14,\n        bet15,\n        bet16,\n        bet17,\n        bet18,\n        bet19,\n        bet20,\n        bet21,\n        bet22,\n        bet23,\n        bet24,\n        bet25,\n        bet26,\n        bet27,\n        bet28,\n        bet29,\n        bet30,\n        bet31,\n        bet32,\n        bet33,\n        bet34,\n        bet35,\n        bet36,\n        bet37,\n        bet38,\n        bet39,\n        bet40,\n        bsgrd,\n        cpind,\n        divgv,\n        ein01,\n        ein02,\n        ein03,\n        ein04,\n        ein05,\n        ein06,\n        ein07,\n        ein08,\n        ein09,\n        ein10,\n        ein11,\n        ein12,\n        ein13,\n        ein14,\n        ein15,\n        ein16,\n        ein17,\n        ein18,\n        ein19,\n        ein20,\n        ein21,\n        ein22,\n        ein23,\n        ein24,\n        ein25,\n        ein26,\n        ein27,\n        ein28,\n        ein29,\n        ein30,\n        ein31,\n        ein32,\n        ein33,\n        ein34,\n        ein35,\n        ein36,\n        ein37,\n        ein38,\n        ein39,\n        ein40,\n        falgk,\n        falgr,\n        flag1,\n        flag2,\n        flag3,\n        flag4,\n        flaga,\n        grpvl,\n        histo,\n        ind01,\n        ind02,\n        ind03,\n        ind04,\n        ind05,\n        ind06,\n        ind07,\n        ind08,\n        ind09,\n        ind10,\n        ind11,\n        ind12,\n        ind13,\n        ind14,\n        ind15,\n        ind16,\n        ind17,\n        ind18,\n        ind19,\n        ind20,\n        ind21,\n        ind22,\n        ind23,\n        ind24,\n        ind25,\n        ind26,\n        ind27,\n        ind28,\n        ind29,\n        ind30,\n        ind31,\n        ind32,\n        ind33,\n        ind34,\n        ind35,\n        ind36,\n        ind37,\n        ind38,\n        ind39,\n        ind40,\n        itbld,\n        itxex,\n        lga01,\n        lga02,\n        lga03,\n        lga04,\n        lga05,\n        lga06,\n        lga07,\n        lga08,\n        lga09,\n        lga10,\n        lga11,\n        lga12,\n        lga13,\n        lga14,\n        lga15,\n        lga16,\n        lga17,\n        lga18,\n        lga19,\n        lga20,\n        lga21,\n        lga22,\n        lga23,\n        lga24,\n        lga25,\n        lga26,\n        lga27,\n        lga28,\n        lga29,\n        lga30,\n        lga31,\n        lga32,\n        lga33,\n        lga34,\n        lga35,\n        lga36,\n        lga37,\n        lga38,\n        lga39,\n        lga40,\n        opk01,\n        opk02,\n        opk03,\n        opk04,\n        opk05,\n        opk06,\n        opk07,\n        opk08,\n        opk09,\n        opk10,\n        opk11,\n        opk12,\n        opk13,\n        opk14,\n        opk15,\n        opk16,\n        opk17,\n        opk18,\n        opk19,\n        opk20,\n        opk21,\n        opk22,\n        opk23,\n        opk24,\n        opk25,\n        opk26,\n        opk27,\n        opk28,\n        opk29,\n        opk30,\n        opk31,\n        opk32,\n        opk33,\n        opk34,\n        opk35,\n        opk36,\n        opk37,\n        opk38,\n        opk39,\n        opk40,\n        ordex,\n        orzst,\n        partn,\n        preas,\n        refex,\n        rese1,\n        rese2,\n        stvor,\n        trfar,\n        trfgb,\n        trfgr,\n        trfst,\n        uname,\n        vglgb,\n        vglgr,\n        vglst,\n        vglsv,\n        vglta,\n        waers\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__t503": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__t503", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__t503.sql", "original_file_path": "models/stg_sap__t503.sql", "unique_id": "model.sap_source.stg_sap__t503", "fqn": ["sap_source", "stg_sap__t503"], "alias": "stg_sap__t503", "checksum": {"name": "sha256", "checksum": "2b56358a7c5375d9a36a877d0cb538901fd24f1e03ecd255f7f961c7d4697c14"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Employee group/subgroup", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "persg": {"name": "persg", "description": "Employee group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "persk": {"name": "persk", "description": "Employee subgroup", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "abart": {"name": "abart", "description": "Employee subgroup grouping for personnel calculation rule", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "abtyp": {"name": "abtyp", "description": "Employee subgroup grouping for primary wage tpyes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aksta": {"name": "aksta", "description": "Activity status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ansta": {"name": "ansta", "description": "Employment status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "antyp": {"name": "antyp", "description": "Employee category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "austa": {"name": "austa", "description": "Training status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "burkz": {"name": "burkz", "description": "Employee subgroup grouping for appraisal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inwid": {"name": "inwid", "description": "Participation in incentive wages", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "konty": {"name": "konty", "description": "Employee subgroup grouping for time quota types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "molga": {"name": "molga", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trfkz": {"name": "trfkz", "description": "ES grouping for collective agreement provision", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "typsz": {"name": "typsz", "description": "Single-character indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zeity": {"name": "zeity", "description": "Employee subgroup grouping for work schedules", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111437.136839, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__t503", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__t503_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__t503_tmp')),\n                staging_columns=get_t503_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select    \n        mandt,\n        persg,\n        persk,\n        abart,\n        abtyp,\n        aksta,\n        ansta,\n        antyp,\n        austa,\n        burkz,\n        inwid,\n        konty,\n        molga,\n        trfkz,\n        typsz,\n        zeity\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_sap__t503_tmp", "package": null, "version": null}, {"name": "stg_sap__t503_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_t503_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.sap_source.stg_sap__t503_tmp", "model.sap_source.stg_sap__t503_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__t503.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__t503_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    abart\n    \n as \n    \n    abart\n    \n, \n    \n    \n    abtyp\n    \n as \n    \n    abtyp\n    \n, \n    \n    \n    aksta\n    \n as \n    \n    aksta\n    \n, \n    \n    \n    ansta\n    \n as \n    \n    ansta\n    \n, \n    \n    \n    antyp\n    \n as \n    \n    antyp\n    \n, \n    \n    \n    austa\n    \n as \n    \n    austa\n    \n, \n    \n    \n    burkz\n    \n as \n    \n    burkz\n    \n, \n    \n    \n    inwid\n    \n as \n    \n    inwid\n    \n, \n    \n    \n    konty\n    \n as \n    \n    konty\n    \n, \n    \n    \n    mandt\n    \n as \n    \n    mandt\n    \n, \n    \n    \n    molga\n    \n as \n    \n    molga\n    \n, \n    \n    \n    persg\n    \n as \n    \n    persg\n    \n, \n    \n    \n    persk\n    \n as \n    \n    persk\n    \n, \n    \n    \n    trfkz\n    \n as \n    \n    trfkz\n    \n, \n    \n    \n    typsz\n    \n as \n    \n    typsz\n    \n, \n    \n    \n    zeity\n    \n as \n    \n    zeity\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select    \n        mandt,\n        persg,\n        persk,\n        abart,\n        abtyp,\n        aksta,\n        ansta,\n        antyp,\n        austa,\n        burkz,\n        inwid,\n        konty,\n        molga,\n        trfkz,\n        typsz,\n        zeity\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__pa0031": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__pa0031", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__pa0031.sql", "original_file_path": "models/stg_sap__pa0031.sql", "unique_id": "model.sap_source.stg_sap__pa0031", "fqn": ["sap_source", "stg_sap__pa0031"], "alias": "stg_sap__pa0031", "checksum": {"name": "sha256", "checksum": "0afdc678065f0b610fbdf85f304738b987217a323c5ce83c7ef00b58857e821d"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "HR master record--infotype 0031 (Reference personnel numbers)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pernr": {"name": "pernr", "description": "Personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subty": {"name": "subty", "description": "Subtype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objps": {"name": "objps", "description": "Object information", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sprps": {"name": "sprps", "description": "Lock indicator for HR master data record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "begda": {"name": "begda", "description": "Start date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "endda": {"name": "endda", "description": "End date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seqnr": {"name": "seqnr", "description": "Number of infotype record with same key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aedtm": {"name": "aedtm", "description": "Changed on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag1": {"name": "flag1", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag2": {"name": "flag2", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag3": {"name": "flag3", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag4": {"name": "flag4", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grpvl": {"name": "grpvl", "description": "Grouping value for personnel assignments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "histo": {"name": "histo", "description": "Historical record flag", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itbld": {"name": "itbld", "description": "Infotype screen control", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itxex": {"name": "itxex", "description": "Text exists for infotype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ordex": {"name": "ordex", "description": "Confirmation fields exist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preas": {"name": "preas", "description": "Reason for changing master data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refex": {"name": "refex", "description": "Reference fields exist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese1": {"name": "rese1", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese2": {"name": "rese2", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp01": {"name": "rfp01", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp02": {"name": "rfp02", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp03": {"name": "rfp03", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp04": {"name": "rfp04", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp05": {"name": "rfp05", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp06": {"name": "rfp06", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp07": {"name": "rfp07", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp08": {"name": "rfp08", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp09": {"name": "rfp09", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp10": {"name": "rfp10", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp11": {"name": "rfp11", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp12": {"name": "rfp12", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp13": {"name": "rfp13", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp14": {"name": "rfp14", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp15": {"name": "rfp15", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp16": {"name": "rfp16", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp17": {"name": "rfp17", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp18": {"name": "rfp18", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp19": {"name": "rfp19", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp20": {"name": "rfp20", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uname": {"name": "uname", "description": "Name of person who changed object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111437.1293051, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0031", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__pa0031_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__pa0031_tmp')),\n                staging_columns=get_pa0031_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        mandt,\n        pernr,\n        subty,\n        objps,\n        sprps,\n        endda,\n        begda,\n        seqnr,\n        aedtm,\n        flag1,\n        flag2,\n        flag3,\n        flag4,\n        grpvl,\n        histo,\n        itbld,\n        itxex,\n        ordex,\n        preas,\n        refex,\n        rese1,\n        rese2,\n        rfp01,\n        rfp02,\n        rfp03,\n        rfp04,\n        rfp05,\n        rfp06,\n        rfp07,\n        rfp08,\n        rfp09,\n        rfp10,\n        rfp11,\n        rfp12,\n        rfp13,\n        rfp14,\n        rfp15,\n        rfp16,\n        rfp17,\n        rfp18,\n        rfp19,\n        rfp20,\n        uname\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_sap__pa0031_tmp", "package": null, "version": null}, {"name": "stg_sap__pa0031_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_pa0031_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.sap_source.stg_sap__pa0031_tmp", "model.sap_source.stg_sap__pa0031_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__pa0031.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0031_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    aedtm\n    \n as \n    \n    aedtm\n    \n, \n    \n    \n    begda\n    \n as \n    \n    begda\n    \n, \n    \n    \n    endda\n    \n as \n    \n    endda\n    \n, \n    \n    \n    flag1\n    \n as \n    \n    flag1\n    \n, \n    \n    \n    flag2\n    \n as \n    \n    flag2\n    \n, \n    \n    \n    flag3\n    \n as \n    \n    flag3\n    \n, \n    \n    \n    flag4\n    \n as \n    \n    flag4\n    \n, \n    \n    \n    grpvl\n    \n as \n    \n    grpvl\n    \n, \n    \n    \n    histo\n    \n as \n    \n    histo\n    \n, \n    \n    \n    itbld\n    \n as \n    \n    itbld\n    \n, \n    \n    \n    itxex\n    \n as \n    \n    itxex\n    \n, \n    \n    \n    mandt\n    \n as \n    \n    mandt\n    \n, \n    \n    \n    objps\n    \n as \n    \n    objps\n    \n, \n    \n    \n    ordex\n    \n as \n    \n    ordex\n    \n, \n    \n    \n    pernr\n    \n as \n    \n    pernr\n    \n, \n    \n    \n    preas\n    \n as \n    \n    preas\n    \n, \n    \n    \n    refex\n    \n as \n    \n    refex\n    \n, \n    \n    \n    rese1\n    \n as \n    \n    rese1\n    \n, \n    \n    \n    rese2\n    \n as \n    \n    rese2\n    \n, \n    \n    \n    rfp01\n    \n as \n    \n    rfp01\n    \n, \n    \n    \n    rfp02\n    \n as \n    \n    rfp02\n    \n, \n    \n    \n    rfp03\n    \n as \n    \n    rfp03\n    \n, \n    \n    \n    rfp04\n    \n as \n    \n    rfp04\n    \n, \n    \n    \n    rfp05\n    \n as \n    \n    rfp05\n    \n, \n    \n    \n    rfp06\n    \n as \n    \n    rfp06\n    \n, \n    \n    \n    rfp07\n    \n as \n    \n    rfp07\n    \n, \n    \n    \n    rfp08\n    \n as \n    \n    rfp08\n    \n, \n    \n    \n    rfp09\n    \n as \n    \n    rfp09\n    \n, \n    \n    \n    rfp10\n    \n as \n    \n    rfp10\n    \n, \n    \n    \n    rfp11\n    \n as \n    \n    rfp11\n    \n, \n    \n    \n    rfp12\n    \n as \n    \n    rfp12\n    \n, \n    \n    \n    rfp13\n    \n as \n    \n    rfp13\n    \n, \n    \n    \n    rfp14\n    \n as \n    \n    rfp14\n    \n, \n    \n    \n    rfp15\n    \n as \n    \n    rfp15\n    \n, \n    \n    \n    rfp16\n    \n as \n    \n    rfp16\n    \n, \n    \n    \n    rfp17\n    \n as \n    \n    rfp17\n    \n, \n    \n    \n    rfp18\n    \n as \n    \n    rfp18\n    \n, \n    \n    \n    rfp19\n    \n as \n    \n    rfp19\n    \n, \n    \n    \n    rfp20\n    \n as \n    \n    rfp20\n    \n, \n    \n    \n    seqnr\n    \n as \n    \n    seqnr\n    \n, \n    \n    \n    sprps\n    \n as \n    \n    sprps\n    \n, \n    \n    \n    subty\n    \n as \n    \n    subty\n    \n, \n    \n    \n    uname\n    \n as \n    \n    uname\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        mandt,\n        pernr,\n        subty,\n        objps,\n        sprps,\n        endda,\n        begda,\n        seqnr,\n        aedtm,\n        flag1,\n        flag2,\n        flag3,\n        flag4,\n        grpvl,\n        histo,\n        itbld,\n        itxex,\n        ordex,\n        preas,\n        refex,\n        rese1,\n        rese2,\n        rfp01,\n        rfp02,\n        rfp03,\n        rfp04,\n        rfp05,\n        rfp06,\n        rfp07,\n        rfp08,\n        rfp09,\n        rfp10,\n        rfp11,\n        rfp12,\n        rfp13,\n        rfp14,\n        rfp15,\n        rfp16,\n        rfp17,\n        rfp18,\n        rfp19,\n        rfp20,\n        uname\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__mara": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__mara", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__mara.sql", "original_file_path": "models/stg_sap__mara.sql", "unique_id": "model.sap_source.stg_sap__mara", "fqn": ["sap_source", "stg_sap__mara"], "alias": "stg_sap__mara", "checksum": {"name": "sha256", "checksum": "864671f97e47fe6be526822649834c35e669eca41b581676e7c271890c4c8e67"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "General material data", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "matnr": {"name": "matnr", "description": "Material number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ersda": {"name": "ersda", "description": "Created on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ernam": {"name": "ernam", "description": "Name of person who created the object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "laeda": {"name": "laeda", "description": "Date of last change", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aenam": {"name": "aenam", "description": "Name of person who changed object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vpsta": {"name": "vpsta", "description": "Maintenance status of complete material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pstat": {"name": "pstat", "description": "Maintenance status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lvorm": {"name": "lvorm", "description": "Flag material for deletion at client level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mtart": {"name": "mtart", "description": "Material type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mbrsh": {"name": "mbrsh", "description": "Industry sector", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "matkl": {"name": "matkl", "description": "Material group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bismt": {"name": "bismt", "description": "Old material number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meins": {"name": "meins", "description": "Base unit of measure", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bstme": {"name": "bstme", "description": "Order unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zeinr": {"name": "zeinr", "description": "Document number (without document management system)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zeiar": {"name": "zeiar", "description": "Document type (without document management system)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zeivr": {"name": "zeivr", "description": "Document version (without document management system)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zeifo": {"name": "zeifo", "description": "Page form of document (without document management system)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aeszn": {"name": "aeszn", "description": "Document change number (without document management system)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blatt": {"name": "blatt", "description": "Page number of document (without document management system)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blanz": {"name": "blanz", "description": "Number of sheets (without document management system)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ferth": {"name": "ferth", "description": "Production/inspection memo", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "formt": {"name": "formt", "description": "Page format of production memo", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "groes": {"name": "groes", "description": "Size/dimensions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wrkst": {"name": "wrkst", "description": "Basic material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normt": {"name": "normt", "description": "Industry Standard Description (such as ANSI or ISO)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "labor": {"name": "labor", "description": "Laboratory/design office", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ekwsl": {"name": "ekwsl", "description": "Purchasing value key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brgew": {"name": "brgew", "description": "Gross weight", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ntgew": {"name": "ntgew", "description": "Net weight", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gewei": {"name": "gewei", "description": "Weight unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "volum": {"name": "volum", "description": "Volume", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "voleh": {"name": "voleh", "description": "Volume unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "behvo": {"name": "behvo", "description": "Container requirements", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "raube": {"name": "raube", "description": "Storage conditions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tempb": {"name": "tempb", "description": "Temperature conditions indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "disst": {"name": "disst", "description": "Low-level code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tragr": {"name": "tragr", "description": "Transportation group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stoff": {"name": "stoff", "description": "Hazardous material number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "spart": {"name": "spart", "description": "Divsion", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kunnr": {"name": "kunnr", "description": "Competitor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "eannr": {"name": "eannr", "description": "European Article Number (EAN)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wesch": {"name": "wesch", "description": "Quantity, or number of GR/GI slips to be printed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bwvor": {"name": "bwvor", "description": "Procurement rule", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bwscl": {"name": "bwscl", "description": "Source of supply", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saiso": {"name": "saiso", "description": "Season category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "etiar": {"name": "etiar", "description": "Label type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "etifo": {"name": "etifo", "description": "Label form", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "entar": {"name": "entar", "description": "Disposal type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ean11": {"name": "ean11", "description": "International Article Number (EAN/UPC)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numtp": {"name": "numtp", "description": "Category of International Article Number (EAN)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "laeng": {"name": "laeng", "description": "Length", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "breit": {"name": "breit", "description": "Width", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hoehe": {"name": "hoehe", "description": "Height", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meabm": {"name": "meabm", "description": "Unit of dimension for length/width/height", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prdha": {"name": "prdha", "description": "Product hierarchy", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aeklk": {"name": "aeklk", "description": "Stock transfer net change costing", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cadkz": {"name": "cadkz", "description": "CAD indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "qmpur": {"name": "qmpur", "description": "QM in procurement is active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ergew": {"name": "ergew", "description": "Allowed packaging weight", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ergei": {"name": "ergei", "description": "Unit of weight (allowed packaging weight)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ervol": {"name": "ervol", "description": "Allowed packaging volume", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ervoe": {"name": "ervoe", "description": "Volume unit (allowed packaging volume)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gewto": {"name": "gewto", "description": "Excess weight tolerance for handling unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "volto": {"name": "volto", "description": "Excess volume tolerance of the handling unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vabme": {"name": "vabme", "description": "Variable purchase order unit active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kzrev": {"name": "kzrev", "description": "Revision level has been assigned to the material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kzkfg": {"name": "kzkfg", "description": "Configurable material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xchpf": {"name": "xchpf", "description": "Batch management requirement indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vhart": {"name": "vhart", "description": "Packaging material type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fuelg": {"name": "fuelg", "description": "Maximum level (by volume)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stfak": {"name": "stfak", "description": "Stacking factor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "magrv": {"name": "magrv", "description": "Material group (Packaging materials)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "begru": {"name": "begru", "description": "Authorization group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "datab": {"name": "datab", "description": "Valid-from date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "liqdt": {"name": "liqdt", "description": "Deletion date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saisj": {"name": "saisj", "description": "Season year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plgtp": {"name": "plgtp", "description": "Price band category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mlgut": {"name": "mlgut", "description": "Empties bill of material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extwg": {"name": "extwg", "description": "External material group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "satnr": {"name": "satnr", "description": "Cross-plant configurable material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attyp": {"name": "attyp", "description": "Material category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kzkup": {"name": "kzkup", "description": "Indicator (Material can be co-product)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kznfm": {"name": "kznfm", "description": "Indicator (The amterial has a follow-up material)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pmata": {"name": "pmata", "description": "Pricing reference material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mstae": {"name": "mstae", "description": "Cross-plant material status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mstav": {"name": "mstav", "description": "Cross-distribution-chain material status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mstde": {"name": "mstde", "description": "Date from which the cross-plan material status is valid", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mstdv": {"name": "mstdv", "description": "Date from which the X-distr.-chain material status is valid", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "taklv": {"name": "taklv", "description": "Tax classification of the material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rbnrm": {"name": "rbnrm", "description": "Catalog profile", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mhdrz": {"name": "mhdrz", "description": "Minimum remaining shelf life", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mhdhb": {"name": "mhdhb", "description": "Total shelf life", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mhdlp": {"name": "mhdlp", "description": "Storage percentage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inhme": {"name": "inhme", "description": "Content unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inhal": {"name": "inhal", "description": "Net contents", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vpreh": {"name": "vpreh", "description": "Comparison price unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "etiag": {"name": "etiag", "description": "IS-R labeling (material grouping)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inhbr": {"name": "inhbr", "description": "Gross contents", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmeth": {"name": "cmeth", "description": "Quantity conversion method", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cuobf": {"name": "cuobf", "description": "Internal object number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kzumw": {"name": "kzumw", "description": "Environmentally relevant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kosch": {"name": "kosch", "description": "Product allocation determination procedure", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sprof": {"name": "sprof", "description": "Pricing profile for variants", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nrfhg": {"name": "nrfhg", "description": "Material qualifies for discount in kind", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mfrpn": {"name": "mfrpn", "description": "Manufacturer part number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mfrnr": {"name": "mfrnr", "description": "Manufacturer number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bmatn": {"name": "bmatn", "description": "Number of firm's own (internal) inventory-managed material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mprof": {"name": "mprof", "description": "Mfr part profile", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kzwsm": {"name": "kzwsm", "description": "Units of measure usage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saity": {"name": "saity", "description": "Rollout in a season", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "profl": {"name": "profl", "description": "Dangerous goods indicator profile", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ihivi": {"name": "ihivi", "description": "Indicator (highly viscous)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "iloos": {"name": "iloos", "description": "Indicator (in bulk/liquid)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "serlv": {"name": "serlv", "description": "Level of explicitness for serial numbers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kzgvh": {"name": "kzgvh", "description": "Packaging material is closed packaging", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xgchp": {"name": "xgchp", "description": "Indicator (Approved batch record required)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kzeff": {"name": "kzeff", "description": "Assign effectivity parameter values / override change numbers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compl": {"name": "compl", "description": "Material completion level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "iprkz": {"name": "iprkz", "description": "Period indicator for shelf life expiration date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rdmhd": {"name": "rdmhd", "description": "Rounding rule for calculation of SLED", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "przus": {"name": "przus", "description": "Indicator (Product composition printed on packaging)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mtpos_mara": {"name": "mtpos_mara", "description": "General item category group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bflme": {"name": "bflme", "description": "Generic material with logistical variants", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nsnid": {"name": "nsnid", "description": "NATO item identification number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111437.0655549, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__mara", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__mara_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__mara_tmp')),\n                staging_columns=get_mara_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        mandt,\n        matnr,\n        ersda,\n        ernam,\n        laeda,\n        aenam,\n        vpsta,\n        pstat,\n        lvorm,\n        mtart,\n        mbrsh,\n        matkl,\n        bismt,\n        meins,\n        bstme,\n        zeinr,\n        zeiar,\n        zeivr,\n        zeifo,\n        aeszn,\n        blatt,\n        blanz,\n        ferth,\n        formt,\n        groes,\n        wrkst,\n        normt,\n        labor,\n        ekwsl,\n        brgew,\n        ntgew,\n        gewei,\n        volum,\n        voleh,\n        behvo,\n        raube,\n        tempb,\n        disst,\n        tragr,\n        stoff,\n        spart,\n        kunnr,\n        eannr,\n        wesch,\n        bwvor,\n        bwscl,\n        saiso,\n        etiar,\n        etifo,\n        entar,\n        ean11,\n        numtp,\n        laeng,\n        breit,\n        hoehe,\n        meabm,\n        prdha,\n        aeklk,\n        cadkz,\n        qmpur,\n        ergew,\n        ergei,\n        ervol,\n        ervoe,\n        gewto,\n        volto,\n        vabme,\n        kzrev,\n        kzkfg,\n        xchpf,\n        vhart,\n        fuelg,\n        stfak,\n        magrv,\n        begru,\n        datab,\n        liqdt,\n        saisj,\n        plgtp,\n        mlgut,\n        extwg,\n        satnr,\n        attyp,\n        kzkup,\n        kznfm,\n        pmata,\n        mstae,\n        mstav,\n        mstde,\n        mstdv,\n        taklv,\n        rbnrm,\n        mhdrz,\n        mhdhb,\n        mhdlp,\n        inhme,\n        inhal,\n        vpreh,\n        etiag,\n        inhbr,\n        cmeth,\n        cuobf,\n        kzumw,\n        kosch,\n        sprof,\n        nrfhg,\n        mfrpn,\n        mfrnr,\n        bmatn,\n        mprof,\n        kzwsm,\n        saity,\n        profl,\n        ihivi,\n        iloos,\n        serlv,\n        kzgvh,\n        xgchp,\n        kzeff,\n        compl,\n        iprkz,\n        rdmhd,\n        przus,\n        mtpos_mara,\n        bflme,\n        nsnid,\n        _fivetran_rowid,\n        _fivetran_deleted,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_sap__mara_tmp", "package": null, "version": null}, {"name": "stg_sap__mara_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_mara_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.sap_source.stg_sap__mara_tmp", "model.sap_source.stg_sap__mara_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__mara.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__mara_tmp\n),\n\nfields as (\n\n    select\n        \n    cast(null as TEXT) as \n    \n    _accgo_assgd_uom\n    \n , \n    cast(null as TEXT) as \n    \n    _bev1_luldegrp\n    \n , \n    cast(null as TEXT) as \n    \n    _bev1_luleinh\n    \n , \n    cast(null as TEXT) as \n    \n    _bev1_nestruccat\n    \n , \n    cast(null as TEXT) as \n    \n    _dsd_sl_toltyp\n    \n , \n    cast(null as TEXT) as \n    \n    _dsd_sv_cnt_grp\n    \n , \n    cast(null as TEXT) as \n    \n    _dsd_vc_group\n    \n , \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as TEXT) as \n    \n    _sttpec_country_ref\n    \n , \n    cast(null as TEXT) as \n    \n    _sttpec_prdcat\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    _sttpec_sertype\n    \n , \n    cast(null as TEXT) as \n    \n    _sttpec_syncact\n    \n , \n    cast(null as TEXT) as \n    \n    _sttpec_syncchg\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    _sttpec_synctime\n    \n , \n    cast(null as TEXT) as \n    \n    _vso_r_bot_ind\n    \n , \n    cast(null as TEXT) as \n    \n    _vso_r_kzgvh_ind\n    \n , \n    cast(null as TEXT) as \n    \n    _vso_r_no_p_gvh\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    _vso_r_pal_b_ht\n    \n , \n    cast(null as TEXT) as \n    \n    _vso_r_pal_ind\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    _vso_r_pal_min_h\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    _vso_r_pal_ovr_d\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    _vso_r_pal_ovr_w\n    \n , \n    cast(null as TEXT) as \n    \n    _vso_r_quan_unit\n    \n , \n    cast(null as TEXT) as \n    \n    _vso_r_stack_ind\n    \n , \n    cast(null as TEXT) as \n    \n    _vso_r_stack_no\n    \n , \n    cast(null as TEXT) as \n    \n    _vso_r_tilt_ind\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    _vso_r_tol_b_ht\n    \n , \n    cast(null as TEXT) as \n    \n    _vso_r_top_ind\n    \n , \n    cast(null as TEXT) as \n    \n    adprof\n    \n , \n    cast(null as TEXT) as \n    \n    adspc_spc\n    \n , \n    \n    \n    aeklk\n    \n as \n    \n    aeklk\n    \n, \n    \n    \n    aenam\n    \n as \n    \n    aenam\n    \n, \n    \n    \n    aeszn\n    \n as \n    \n    aeszn\n    \n, \n    cast(null as TEXT) as \n    \n    allow_pmat_igno\n    \n , \n    cast(null as TEXT) as \n    \n    animal_origin\n    \n , \n    cast(null as TEXT) as \n    \n    anp\n    \n , \n    \n    \n    attyp\n    \n as \n    \n    attyp\n    \n, \n    cast(null as TEXT) as \n    \n    bbtyp\n    \n , \n    \n    \n    begru\n    \n as \n    \n    begru\n    \n, \n    \n    \n    behvo\n    \n as \n    \n    behvo\n    \n, \n    \n    \n    bflme\n    \n as \n    \n    bflme\n    \n, \n    \n    \n    bismt\n    \n as \n    \n    bismt\n    \n, \n    \n    \n    blanz\n    \n as \n    \n    blanz\n    \n, \n    \n    \n    blatt\n    \n as \n    \n    blatt\n    \n, \n    \n    \n    bmatn\n    \n as \n    \n    bmatn\n    \n, \n    cast(null as TEXT) as \n    \n    brand_id\n    \n , \n    \n    \n    breit\n    \n as \n    \n    breit\n    \n, \n    \n    \n    brgew\n    \n as \n    \n    brgew\n    \n, \n    cast(null as TEXT) as \n    \n    bstat\n    \n , \n    \n    \n    bstme\n    \n as \n    \n    bstme\n    \n, \n    \n    \n    bwscl\n    \n as \n    \n    bwscl\n    \n, \n    \n    \n    bwvor\n    \n as \n    \n    bwvor\n    \n, \n    \n    \n    cadkz\n    \n as \n    \n    cadkz\n    \n, \n    cast(null as TEXT) as \n    \n    care_code\n    \n , \n    \n    \n    cmeth\n    \n as \n    \n    cmeth\n    \n, \n    cast(null as TEXT) as \n    \n    cmrel\n    \n , \n    cast(null as TEXT) as \n    \n    cobjid\n    \n , \n    cast(null as TEXT) as \n    \n    color\n    \n , \n    cast(null as TEXT) as \n    \n    color_atinn\n    \n , \n    cast(null as TEXT) as \n    \n    commodity\n    \n , \n    \n    \n    compl\n    \n as \n    \n    compl\n    \n, \n    cast(null as TEXT) as \n    \n    cotype\n    \n , \n    \n    \n    cuobf\n    \n as \n    \n    cuobf\n    \n, \n    cast(null as TEXT) as \n    \n    cwqproc\n    \n , \n    cast(null as TEXT) as \n    \n    cwqrel\n    \n , \n    cast(null as TEXT) as \n    \n    cwqtolgr\n    \n , \n    \n    \n    datab\n    \n as \n    \n    datab\n    \n, \n    cast(null as TEXT) as \n    \n    dg_pack_status\n    \n , \n    \n    \n    disst\n    \n as \n    \n    disst\n    \n, \n    \n    \n    ean11\n    \n as \n    \n    ean11\n    \n, \n    \n    \n    eannr\n    \n as \n    \n    eannr\n    \n, \n    \n    \n    ekwsl\n    \n as \n    \n    ekwsl\n    \n, \n    \n    \n    entar\n    \n as \n    \n    entar\n    \n, \n    \n    \n    ergei\n    \n as \n    \n    ergei\n    \n, \n    \n    \n    ergew\n    \n as \n    \n    ergew\n    \n, \n    \n    \n    ernam\n    \n as \n    \n    ernam\n    \n, \n    \n    \n    ersda\n    \n as \n    \n    ersda\n    \n, \n    \n    \n    ervoe\n    \n as \n    \n    ervoe\n    \n, \n    \n    \n    ervol\n    \n as \n    \n    ervol\n    \n, \n    \n    \n    etiag\n    \n as \n    \n    etiag\n    \n, \n    \n    \n    etiar\n    \n as \n    \n    etiar\n    \n, \n    \n    \n    etifo\n    \n as \n    \n    etifo\n    \n, \n    \n    \n    extwg\n    \n as \n    \n    extwg\n    \n, \n    cast(null as TEXT) as \n    \n    fashgrd\n    \n , \n    \n    \n    ferth\n    \n as \n    \n    ferth\n    \n, \n    cast(null as TEXT) as \n    \n    fiber_code1\n    \n , \n    cast(null as TEXT) as \n    \n    fiber_code2\n    \n , \n    cast(null as TEXT) as \n    \n    fiber_code3\n    \n , \n    cast(null as TEXT) as \n    \n    fiber_code4\n    \n , \n    cast(null as TEXT) as \n    \n    fiber_code5\n    \n , \n    cast(null as TEXT) as \n    \n    fiber_part1\n    \n , \n    cast(null as TEXT) as \n    \n    fiber_part2\n    \n , \n    cast(null as TEXT) as \n    \n    fiber_part3\n    \n , \n    cast(null as TEXT) as \n    \n    fiber_part4\n    \n , \n    cast(null as TEXT) as \n    \n    fiber_part5\n    \n , \n    \n    \n    formt\n    \n as \n    \n    formt\n    \n, \n    cast(null as TEXT) as \n    \n    free_char\n    \n , \n    cast(null as TEXT) as \n    \n    fsh_mg_at1\n    \n , \n    cast(null as TEXT) as \n    \n    fsh_mg_at2\n    \n , \n    cast(null as TEXT) as \n    \n    fsh_mg_at3\n    \n , \n    cast(null as TEXT) as \n    \n    fsh_sc_mid\n    \n , \n    cast(null as TEXT) as \n    \n    fsh_seaim\n    \n , \n    cast(null as TEXT) as \n    \n    fsh_sealv\n    \n , \n    \n    \n    fuelg\n    \n as \n    \n    fuelg\n    \n, \n    cast(null as TEXT) as \n    \n    gds_relevant\n    \n , \n    cast(null as TEXT) as \n    \n    gennr\n    \n , \n    \n    \n    gewei\n    \n as \n    \n    gewei\n    \n, \n    \n    \n    gewto\n    \n as \n    \n    gewto\n    \n, \n    \n    \n    groes\n    \n as \n    \n    groes\n    \n, \n    cast(null as TEXT) as \n    \n    gtin_variant\n    \n , \n    cast(null as TEXT) as \n    \n    hazmat\n    \n , \n    cast(null as TEXT) as \n    \n    herkl\n    \n , \n    cast(null as TEXT) as \n    \n    hndlcode\n    \n , \n    \n    \n    hoehe\n    \n as \n    \n    hoehe\n    \n, \n    cast(null as TEXT) as \n    \n    hutyp\n    \n , \n    cast(null as TEXT) as \n    \n    hutyp_dflt\n    \n , \n    \n    \n    ihivi\n    \n as \n    \n    ihivi\n    \n, \n    \n    \n    iloos\n    \n as \n    \n    iloos\n    \n, \n    cast(null as TEXT) as \n    \n    imatn\n    \n , \n    \n    \n    inhal\n    \n as \n    \n    inhal\n    \n, \n    \n    \n    inhbr\n    \n as \n    \n    inhbr\n    \n, \n    \n    \n    inhme\n    \n as \n    \n    inhme\n    \n, \n    cast(null as TEXT) as \n    \n    ipmipproduct\n    \n , \n    \n    \n    iprkz\n    \n as \n    \n    iprkz\n    \n, \n    \n    \n    kosch\n    \n as \n    \n    kosch\n    \n, \n    \n    \n    kunnr\n    \n as \n    \n    kunnr\n    \n, \n    \n    \n    kzeff\n    \n as \n    \n    kzeff\n    \n, \n    \n    \n    kzgvh\n    \n as \n    \n    kzgvh\n    \n, \n    \n    \n    kzkfg\n    \n as \n    \n    kzkfg\n    \n, \n    \n    \n    kzkup\n    \n as \n    \n    kzkup\n    \n, \n    \n    \n    kznfm\n    \n as \n    \n    kznfm\n    \n, \n    \n    \n    kzrev\n    \n as \n    \n    kzrev\n    \n, \n    \n    \n    kzumw\n    \n as \n    \n    kzumw\n    \n, \n    \n    \n    kzwsm\n    \n as \n    \n    kzwsm\n    \n, \n    \n    \n    labor\n    \n as \n    \n    labor\n    \n, \n    \n    \n    laeda\n    \n as \n    \n    laeda\n    \n, \n    \n    \n    laeng\n    \n as \n    \n    laeng\n    \n, \n    \n    \n    liqdt\n    \n as \n    \n    liqdt\n    \n, \n    cast(null as TEXT) as \n    \n    loglev_reto\n    \n , \n    cast(null as TEXT) as \n    \n    logunit\n    \n , \n    \n    \n    lvorm\n    \n as \n    \n    lvorm\n    \n, \n    \n    \n    magrv\n    \n as \n    \n    magrv\n    \n, \n    \n    \n    mandt\n    \n as \n    \n    mandt\n    \n, \n    cast(null as TEXT) as \n    \n    matfi\n    \n , \n    \n    \n    matkl\n    \n as \n    \n    matkl\n    \n, \n    \n    \n    matnr\n    \n as \n    \n    matnr\n    \n, \n    cast(null as numeric(28,6)) as \n    \n    maxb\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    maxc\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    maxc_tol\n    \n , \n    cast(null as TEXT) as \n    \n    maxdim_uom\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    maxh\n    \n , \n    cast(null as numeric(28,6)) as \n    \n    maxl\n    \n , \n    \n    \n    mbrsh\n    \n as \n    \n    mbrsh\n    \n, \n    cast(null as TEXT) as \n    \n    mcond\n    \n , \n    \n    \n    meabm\n    \n as \n    \n    meabm\n    \n, \n    cast(null as TEXT) as \n    \n    medium\n    \n , \n    \n    \n    meins\n    \n as \n    \n    meins\n    \n, \n    cast(null as TEXT) as \n    \n    mfrgr\n    \n , \n    \n    \n    mfrnr\n    \n as \n    \n    mfrnr\n    \n, \n    \n    \n    mfrpn\n    \n as \n    \n    mfrpn\n    \n, \n    \n    \n    mhdhb\n    \n as \n    \n    mhdhb\n    \n, \n    \n    \n    mhdlp\n    \n as \n    \n    mhdlp\n    \n, \n    \n    \n    mhdrz\n    \n as \n    \n    mhdrz\n    \n, \n    \n    \n    mlgut\n    \n as \n    \n    mlgut\n    \n, \n    \n    \n    mprof\n    \n as \n    \n    mprof\n    \n, \n    \n    \n    mstae\n    \n as \n    \n    mstae\n    \n, \n    \n    \n    mstav\n    \n as \n    \n    mstav\n    \n, \n    \n    \n    mstde\n    \n as \n    \n    mstde\n    \n, \n    \n    \n    mstdv\n    \n as \n    \n    mstdv\n    \n, \n    \n    \n    mtart\n    \n as \n    \n    mtart\n    \n, \n    \n    \n    mtpos_mara\n    \n as \n    \n    mtpos_mara\n    \n, \n    \n    \n    normt\n    \n as \n    \n    normt\n    \n, \n    \n    \n    nrfhg\n    \n as \n    \n    nrfhg\n    \n, \n    \n    \n    nsnid\n    \n as \n    \n    nsnid\n    \n, \n    \n    \n    ntgew\n    \n as \n    \n    ntgew\n    \n, \n    \n    \n    numtp\n    \n as \n    \n    numtp\n    \n, \n    cast(null as TEXT) as \n    \n    oigroupnam\n    \n , \n    cast(null as TEXT) as \n    \n    oihmtxgr\n    \n , \n    cast(null as TEXT) as \n    \n    oitrind\n    \n , \n    cast(null as TEXT) as \n    \n    packcode\n    \n , \n    cast(null as TEXT) as \n    \n    picnum\n    \n , \n    cast(null as TEXT) as \n    \n    pilferable\n    \n , \n    \n    \n    plgtp\n    \n as \n    \n    plgtp\n    \n, \n    \n    \n    pmata\n    \n as \n    \n    pmata\n    \n, \n    \n    \n    prdha\n    \n as \n    \n    prdha\n    \n, \n    \n    \n    profl\n    \n as \n    \n    profl\n    \n, \n    \n    \n    przus\n    \n as \n    \n    przus\n    \n, \n    cast(null as TEXT) as \n    \n    ps_smartform\n    \n , \n    cast(null as TEXT) as \n    \n    psm_code\n    \n , \n    \n    \n    pstat\n    \n as \n    \n    pstat\n    \n, \n    cast(null as TEXT) as \n    \n    qgrp\n    \n , \n    \n    \n    qmpur\n    \n as \n    \n    qmpur\n    \n, \n    cast(null as numeric(28,6)) as \n    \n    qqtime\n    \n , \n    cast(null as TEXT) as \n    \n    qqtimeuom\n    \n , \n    \n    \n    raube\n    \n as \n    \n    raube\n    \n, \n    \n    \n    rbnrm\n    \n as \n    \n    rbnrm\n    \n, \n    \n    \n    rdmhd\n    \n as \n    \n    rdmhd\n    \n, \n    cast(null as TEXT) as \n    \n    retdelc\n    \n , \n    cast(null as TEXT) as \n    \n    rmatp\n    \n , \n    \n    \n    saisj\n    \n as \n    \n    saisj\n    \n, \n    \n    \n    saiso\n    \n as \n    \n    saiso\n    \n, \n    \n    \n    saity\n    \n as \n    \n    saity\n    \n, \n    \n    \n    satnr\n    \n as \n    \n    satnr\n    \n, \n    cast(null as TEXT) as \n    \n    serial\n    \n , \n    \n    \n    serlv\n    \n as \n    \n    serlv\n    \n, \n    cast(null as TEXT) as \n    \n    sgt_covsa\n    \n , \n    cast(null as TEXT) as \n    \n    sgt_csgr\n    \n , \n    cast(null as TEXT) as \n    \n    sgt_rel\n    \n , \n    cast(null as TEXT) as \n    \n    sgt_scope\n    \n , \n    cast(null as TEXT) as \n    \n    sgt_stat\n    \n , \n    cast(null as TEXT) as \n    \n    size1\n    \n , \n    cast(null as TEXT) as \n    \n    size1_atinn\n    \n , \n    cast(null as TEXT) as \n    \n    size2\n    \n , \n    cast(null as TEXT) as \n    \n    size2_atinn\n    \n , \n    cast(null as TEXT) as \n    \n    sled_bbd\n    \n , \n    \n    \n    spart\n    \n as \n    \n    spart\n    \n, \n    \n    \n    sprof\n    \n as \n    \n    sprof\n    \n, \n    \n    \n    stfak\n    \n as \n    \n    stfak\n    \n, \n    \n    \n    stoff\n    \n as \n    \n    stoff\n    \n, \n    \n    \n    taklv\n    \n as \n    \n    taklv\n    \n, \n    cast(null as TEXT) as \n    \n    tare_var\n    \n , \n    \n    \n    tempb\n    \n as \n    \n    tempb\n    \n, \n    cast(null as TEXT) as \n    \n    textile_comp_ind\n    \n , \n    \n    \n    tragr\n    \n as \n    \n    tragr\n    \n, \n    \n    \n    vabme\n    \n as \n    \n    vabme\n    \n, \n    \n    \n    vhart\n    \n as \n    \n    vhart\n    \n, \n    \n    \n    voleh\n    \n as \n    \n    voleh\n    \n, \n    \n    \n    volto\n    \n as \n    \n    volto\n    \n, \n    \n    \n    volum\n    \n as \n    \n    volum\n    \n, \n    \n    \n    vpreh\n    \n as \n    \n    vpreh\n    \n, \n    \n    \n    vpsta\n    \n as \n    \n    vpsta\n    \n, \n    cast(null as TEXT) as \n    \n    weora\n    \n , \n    \n    \n    wesch\n    \n as \n    \n    wesch\n    \n, \n    cast(null as TEXT) as \n    \n    whmatgr\n    \n , \n    cast(null as TEXT) as \n    \n    whstc\n    \n , \n    \n    \n    wrkst\n    \n as \n    \n    wrkst\n    \n, \n    \n    \n    xchpf\n    \n as \n    \n    xchpf\n    \n, \n    \n    \n    xgchp\n    \n as \n    \n    xgchp\n    \n, \n    \n    \n    zeiar\n    \n as \n    \n    zeiar\n    \n, \n    \n    \n    zeifo\n    \n as \n    \n    zeifo\n    \n, \n    \n    \n    zeinr\n    \n as \n    \n    zeinr\n    \n, \n    \n    \n    zeivr\n    \n as \n    \n    zeivr\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        mandt,\n        matnr,\n        ersda,\n        ernam,\n        laeda,\n        aenam,\n        vpsta,\n        pstat,\n        lvorm,\n        mtart,\n        mbrsh,\n        matkl,\n        bismt,\n        meins,\n        bstme,\n        zeinr,\n        zeiar,\n        zeivr,\n        zeifo,\n        aeszn,\n        blatt,\n        blanz,\n        ferth,\n        formt,\n        groes,\n        wrkst,\n        normt,\n        labor,\n        ekwsl,\n        brgew,\n        ntgew,\n        gewei,\n        volum,\n        voleh,\n        behvo,\n        raube,\n        tempb,\n        disst,\n        tragr,\n        stoff,\n        spart,\n        kunnr,\n        eannr,\n        wesch,\n        bwvor,\n        bwscl,\n        saiso,\n        etiar,\n        etifo,\n        entar,\n        ean11,\n        numtp,\n        laeng,\n        breit,\n        hoehe,\n        meabm,\n        prdha,\n        aeklk,\n        cadkz,\n        qmpur,\n        ergew,\n        ergei,\n        ervol,\n        ervoe,\n        gewto,\n        volto,\n        vabme,\n        kzrev,\n        kzkfg,\n        xchpf,\n        vhart,\n        fuelg,\n        stfak,\n        magrv,\n        begru,\n        datab,\n        liqdt,\n        saisj,\n        plgtp,\n        mlgut,\n        extwg,\n        satnr,\n        attyp,\n        kzkup,\n        kznfm,\n        pmata,\n        mstae,\n        mstav,\n        mstde,\n        mstdv,\n        taklv,\n        rbnrm,\n        mhdrz,\n        mhdhb,\n        mhdlp,\n        inhme,\n        inhal,\n        vpreh,\n        etiag,\n        inhbr,\n        cmeth,\n        cuobf,\n        kzumw,\n        kosch,\n        sprof,\n        nrfhg,\n        mfrpn,\n        mfrnr,\n        bmatn,\n        mprof,\n        kzwsm,\n        saity,\n        profl,\n        ihivi,\n        iloos,\n        serlv,\n        kzgvh,\n        xgchp,\n        kzeff,\n        compl,\n        iprkz,\n        rdmhd,\n        przus,\n        mtpos_mara,\n        bflme,\n        nsnid,\n        _fivetran_rowid,\n        _fivetran_deleted,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__t880": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__t880", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__t880.sql", "original_file_path": "models/stg_sap__t880.sql", "unique_id": "model.sap_source.stg_sap__t880", "fqn": ["sap_source", "stg_sap__t880"], "alias": "stg_sap__t880", "checksum": {"name": "sha256", "checksum": "054180060c4fb7b114790adc7881601b769b0e7e0e33232dd33afc0ed4ddfc30"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Global company data (for KONS Ledger)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rcomp": {"name": "rcomp", "description": "Company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name1": {"name": "name1", "description": "Company name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111437.137517, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__t880", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__t880_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__t880_tmp')),\n                staging_columns=get_t880_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        cast(mandt as {{ dbt.type_string() }}) as mandt,\n        rcomp,\n        name1\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_sap__t880_tmp", "package": null, "version": null}, {"name": "stg_sap__t880_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_t880_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_string"], "nodes": ["model.sap_source.stg_sap__t880_tmp", "model.sap_source.stg_sap__t880_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__t880.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__t880_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    cntry\n    \n as \n    \n    cntry\n    \n, \n    \n    \n    curr\n    \n as \n    \n    curr\n    \n, \n    \n    \n    glsip\n    \n as \n    \n    glsip\n    \n, \n    \n    \n    indpo\n    \n as \n    \n    indpo\n    \n, \n    \n    \n    langu\n    \n as \n    \n    langu\n    \n, \n    \n    \n    lccomp\n    \n as \n    \n    lccomp\n    \n, \n    \n    \n    mandt\n    \n as \n    \n    mandt\n    \n, \n    \n    \n    mclnt\n    \n as \n    \n    mclnt\n    \n, \n    \n    \n    mcomp\n    \n as \n    \n    mcomp\n    \n, \n    \n    \n    modcp\n    \n as \n    \n    modcp\n    \n, \n    \n    \n    name1\n    \n as \n    \n    name1\n    \n, \n    \n    \n    name2\n    \n as \n    \n    name2\n    \n, \n    \n    \n    pobox\n    \n as \n    \n    pobox\n    \n, \n    \n    \n    pstlc\n    \n as \n    \n    pstlc\n    \n, \n    \n    \n    rcomp\n    \n as \n    \n    rcomp\n    \n, \n    \n    \n    resta\n    \n as \n    \n    resta\n    \n, \n    \n    \n    rform\n    \n as \n    \n    rform\n    \n, \n    \n    \n    stret\n    \n as \n    \n    stret\n    \n, \n    \n    \n    strt2\n    \n as \n    \n    strt2\n    \n, \n    \n    \n    zweig\n    \n as \n    \n    zweig\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(mandt as TEXT) as mandt,\n        rcomp,\n        name1\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__t001": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__t001", "resource_type": "model", "package_name": "sap_source", "path": "stg_sap__t001.sql", "original_file_path": "models/stg_sap__t001.sql", "unique_id": "model.sap_source.stg_sap__t001", "fqn": ["sap_source", "stg_sap__t001"], "alias": "stg_sap__t001", "checksum": {"name": "sha256", "checksum": "779c8b1e06eb2c8dd0dfb05a20eb5be04a5f9769b799167584b0564a56d6331a"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Company codes", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "waers": {"name": "waers", "description": "Currency key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "periv": {"name": "periv", "description": "Fiscal year variant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ktopl": {"name": "ktopl", "description": "Chart of accounts", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bukrs": {"name": "bukrs", "description": "Company code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "land1": {"name": "land1", "description": "Country key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kkber": {"name": "kkber", "description": "Credit control area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rcomp": {"name": "rcomp", "description": "Company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "butxt": {"name": "butxt", "description": "Name of company code or company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "spras": {"name": "spras", "description": "Language key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sap_source://models/stg_sap.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111437.134211, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__t001", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_sap__t001_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_sap__t001_tmp')),\n                staging_columns=get_t001_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        cast(mandt as {{ dbt.type_string() }}) as mandt,\n        cast(bukrs as {{ dbt.type_string() }}) as bukrs,\n        waers,\n        periv,\n        ktopl, \n        land1, \n        kkber,\n        rcomp,\n        butxt,\n        spras\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_sap__t001_tmp", "package": null, "version": null}, {"name": "stg_sap__t001_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sap_source.get_t001_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_string"], "nodes": ["model.sap_source.stg_sap__t001_tmp", "model.sap_source.stg_sap__t001_tmp"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap__t001.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__t001_tmp\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_rowid\n    \n as \n    \n    _fivetran_rowid\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    adrnr\n    \n as \n    \n    adrnr\n    \n, \n    \n    \n    bapovar\n    \n as \n    \n    bapovar\n    \n, \n    \n    \n    bukrs\n    \n as \n    \n    bukrs\n    \n, \n    \n    \n    bukrs_glob\n    \n as \n    \n    bukrs_glob\n    \n, \n    \n    \n    butxt\n    \n as \n    \n    butxt\n    \n, \n    \n    \n    buvar\n    \n as \n    \n    buvar\n    \n, \n    \n    \n    dkweg\n    \n as \n    \n    dkweg\n    \n, \n    \n    \n    dtamtc\n    \n as \n    \n    dtamtc\n    \n, \n    \n    \n    dtaxr\n    \n as \n    \n    dtaxr\n    \n, \n    \n    \n    dtprov\n    \n as \n    \n    dtprov\n    \n, \n    \n    \n    dttaxc\n    \n as \n    \n    dttaxc\n    \n, \n    \n    \n    dttdsp\n    \n as \n    \n    dttdsp\n    \n, \n    \n    \n    ebukr\n    \n as \n    \n    ebukr\n    \n, \n    \n    \n    fdbuk\n    \n as \n    \n    fdbuk\n    \n, \n    \n    \n    fikrs\n    \n as \n    \n    fikrs\n    \n, \n    \n    \n    fm_derive_acc\n    \n as \n    \n    fm_derive_acc\n    \n, \n    \n    \n    fmhrdate\n    \n as \n    \n    fmhrdate\n    \n, \n    \n    \n    fstva\n    \n as \n    \n    fstva\n    \n, \n    \n    \n    fstvare\n    \n as \n    \n    fstvare\n    \n, \n    \n    \n    impda\n    \n as \n    \n    impda\n    \n, \n    \n    \n    infmt\n    \n as \n    \n    infmt\n    \n, \n    \n    \n    kkber\n    \n as \n    \n    kkber\n    \n, \n    \n    \n    kokfi\n    \n as \n    \n    kokfi\n    \n, \n    \n    \n    kopim\n    \n as \n    \n    kopim\n    \n, \n    \n    \n    ktop2\n    \n as \n    \n    ktop2\n    \n, \n    \n    \n    ktopl\n    \n as \n    \n    ktopl\n    \n, \n    \n    \n    land1\n    \n as \n    \n    land1\n    \n, \n    \n    \n    mandt\n    \n as \n    \n    mandt\n    \n, \n    \n    \n    mregl\n    \n as \n    \n    mregl\n    \n, \n    \n    \n    mwska\n    \n as \n    \n    mwska\n    \n, \n    \n    \n    mwskv\n    \n as \n    \n    mwskv\n    \n, \n    \n    \n    offsacct\n    \n as \n    \n    offsacct\n    \n, \n    \n    \n    opvar\n    \n as \n    \n    opvar\n    \n, \n    \n    \n    ort01\n    \n as \n    \n    ort01\n    \n, \n    \n    \n    periv\n    \n as \n    \n    periv\n    \n, \n    \n    \n    pp_pdate\n    \n as \n    \n    pp_pdate\n    \n, \n    \n    \n    pst_per_var\n    \n as \n    \n    pst_per_var\n    \n, \n    \n    \n    rcomp\n    \n as \n    \n    rcomp\n    \n, \n    \n    \n    spras\n    \n as \n    \n    spras\n    \n, \n    \n    \n    stceg\n    \n as \n    \n    stceg\n    \n, \n    \n    \n    surccm\n    \n as \n    \n    surccm\n    \n, \n    \n    \n    txjcd\n    \n as \n    \n    txjcd\n    \n, \n    \n    \n    txkrs\n    \n as \n    \n    txkrs\n    \n, \n    \n    \n    umkrs\n    \n as \n    \n    umkrs\n    \n, \n    \n    \n    waabw\n    \n as \n    \n    waabw\n    \n, \n    \n    \n    waers\n    \n as \n    \n    waers\n    \n, \n    \n    \n    wfvar\n    \n as \n    \n    wfvar\n    \n, \n    \n    \n    wt_newwt\n    \n as \n    \n    wt_newwt\n    \n, \n    \n    \n    xbbba\n    \n as \n    \n    xbbba\n    \n, \n    \n    \n    xbbbe\n    \n as \n    \n    xbbbe\n    \n, \n    \n    \n    xbbbf\n    \n as \n    \n    xbbbf\n    \n, \n    \n    \n    xbbko\n    \n as \n    \n    xbbko\n    \n, \n    \n    \n    xbbsc\n    \n as \n    \n    xbbsc\n    \n, \n    \n    \n    xcession\n    \n as \n    \n    xcession\n    \n, \n    \n    \n    xcos\n    \n as \n    \n    xcos\n    \n, \n    \n    \n    xcovr\n    \n as \n    \n    xcovr\n    \n, \n    \n    \n    xeink\n    \n as \n    \n    xeink\n    \n, \n    \n    \n    xextb\n    \n as \n    \n    xextb\n    \n, \n    \n    \n    xfdis\n    \n as \n    \n    xfdis\n    \n, \n    \n    \n    xfdmm\n    \n as \n    \n    xfdmm\n    \n, \n    \n    \n    xfdsd\n    \n as \n    \n    xfdsd\n    \n, \n    \n    \n    xfmca\n    \n as \n    \n    xfmca\n    \n, \n    \n    \n    xfmcb\n    \n as \n    \n    xfmcb\n    \n, \n    \n    \n    xfmco\n    \n as \n    \n    xfmco\n    \n, \n    \n    \n    xgjrv\n    \n as \n    \n    xgjrv\n    \n, \n    \n    \n    xgsbe\n    \n as \n    \n    xgsbe\n    \n, \n    \n    \n    xjvaa\n    \n as \n    \n    xjvaa\n    \n, \n    \n    \n    xkdft\n    \n as \n    \n    xkdft\n    \n, \n    \n    \n    xkkbi\n    \n as \n    \n    xkkbi\n    \n, \n    \n    \n    xmwsn\n    \n as \n    \n    xmwsn\n    \n, \n    \n    \n    xnegp\n    \n as \n    \n    xnegp\n    \n, \n    \n    \n    xprod\n    \n as \n    \n    xprod\n    \n, \n    \n    \n    xskfn\n    \n as \n    \n    xskfn\n    \n, \n    \n    \n    xslta\n    \n as \n    \n    xslta\n    \n, \n    \n    \n    xsplt\n    \n as \n    \n    xsplt\n    \n, \n    \n    \n    xstdt\n    \n as \n    \n    xstdt\n    \n, \n    \n    \n    xvalv\n    \n as \n    \n    xvalv\n    \n, \n    \n    \n    xvatdate\n    \n as \n    \n    xvatdate\n    \n, \n    \n    \n    xvvwa\n    \n as \n    \n    xvvwa\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(mandt as TEXT) as mandt,\n        cast(bukrs as TEXT) as bukrs,\n        waers,\n        periv,\n        ktopl, \n        land1, \n        kkber,\n        rcomp,\n        butxt,\n        spras\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__t001_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__t001_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__t001_tmp.sql", "original_file_path": "models/tmp/stg_sap__t001_tmp.sql", "unique_id": "model.sap_source.stg_sap__t001_tmp", "fqn": ["sap_source", "tmp", "stg_sap__t001_tmp"], "alias": "stg_sap__t001_tmp", "checksum": {"name": "sha256", "checksum": "2631376cbf067f4698bd89bab1431c7ce78c31b95c475ddd7165731e3f65c8c8"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.8880708, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__t001_tmp", "raw_code": "select * \nfrom {{ var('t001') }}", "language": "sql", "refs": [], "sources": [["sap", "t001"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.t001"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__t001_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_t001_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__lfa1_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__lfa1_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__lfa1_tmp.sql", "original_file_path": "models/tmp/stg_sap__lfa1_tmp.sql", "unique_id": "model.sap_source.stg_sap__lfa1_tmp", "fqn": ["sap_source", "tmp", "stg_sap__lfa1_tmp"], "alias": "stg_sap__lfa1_tmp", "checksum": {"name": "sha256", "checksum": "8b4b25f017062d6e4128e0557b8d77924b08b067e71b4dc7f6910e60b021a6c7"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.8929641, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__lfa1_tmp", "raw_code": "select * \nfrom {{ var('lfa1') }}", "language": "sql", "refs": [], "sources": [["sap", "lfa1"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.lfa1"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__lfa1_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_lfa1_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__pa0000_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__pa0000_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__pa0000_tmp.sql", "original_file_path": "models/tmp/stg_sap__pa0000_tmp.sql", "unique_id": "model.sap_source.stg_sap__pa0000_tmp", "fqn": ["sap_source", "tmp", "stg_sap__pa0000_tmp"], "alias": "stg_sap__pa0000_tmp", "checksum": {"name": "sha256", "checksum": "7dad99c4e8c966edb48917e00badeafdea0de5df049fc5bf6ba81912c06c5d24"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.896627, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0000_tmp", "raw_code": "select * \nfrom {{ var('pa0000') }}", "language": "sql", "refs": [], "sources": [["sap", "pa0000"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.pa0000"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__pa0000_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_pa0000_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__t880_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__t880_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__t880_tmp.sql", "original_file_path": "models/tmp/stg_sap__t880_tmp.sql", "unique_id": "model.sap_source.stg_sap__t880_tmp", "fqn": ["sap_source", "tmp", "stg_sap__t880_tmp"], "alias": "stg_sap__t880_tmp", "checksum": {"name": "sha256", "checksum": "bec687eaacaa24752afe884ec3b7c5fa585159961893875effef922c59608e30"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.900396, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__t880_tmp", "raw_code": "select * \nfrom {{ var('t880') }}", "language": "sql", "refs": [], "sources": [["sap", "t880"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.t880"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__t880_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_t880_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__faglflexa_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__faglflexa_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__faglflexa_tmp.sql", "original_file_path": "models/tmp/stg_sap__faglflexa_tmp.sql", "unique_id": "model.sap_source.stg_sap__faglflexa_tmp", "fqn": ["sap_source", "tmp", "stg_sap__faglflexa_tmp"], "alias": "stg_sap__faglflexa_tmp", "checksum": {"name": "sha256", "checksum": "ba5f252e00a6960e3146a0292daf572a2e915a71d77f299513d8cc14865562ca"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.904703, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__faglflexa_tmp", "raw_code": "select * \nfrom {{ var('faglflexa') }}", "language": "sql", "refs": [], "sources": [["sap", "faglflexa"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.faglflexa"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__faglflexa_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_faglflexa_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__pa0008_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__pa0008_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__pa0008_tmp.sql", "original_file_path": "models/tmp/stg_sap__pa0008_tmp.sql", "unique_id": "model.sap_source.stg_sap__pa0008_tmp", "fqn": ["sap_source", "tmp", "stg_sap__pa0008_tmp"], "alias": "stg_sap__pa0008_tmp", "checksum": {"name": "sha256", "checksum": "ad934e07ec61a5c7649b52375026bd49f0a56465bffb1d4d03d70c4db210079a"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.908437, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0008_tmp", "raw_code": "select * \nfrom {{ var('pa0008') }}", "language": "sql", "refs": [], "sources": [["sap", "pa0008"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.pa0008"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__pa0008_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_pa0008_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__faglflext_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__faglflext_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__faglflext_tmp.sql", "original_file_path": "models/tmp/stg_sap__faglflext_tmp.sql", "unique_id": "model.sap_source.stg_sap__faglflext_tmp", "fqn": ["sap_source", "tmp", "stg_sap__faglflext_tmp"], "alias": "stg_sap__faglflext_tmp", "checksum": {"name": "sha256", "checksum": "a8d5c5bbe24ae3e2eabf66d9020dc88996ccd124dcfacb5f5c6d6b93d0cab235"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.9125278, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__faglflext_tmp", "raw_code": "select * \nfrom {{ var('faglflext') }}", "language": "sql", "refs": [], "sources": [["sap", "faglflext"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.faglflext"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__faglflext_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_faglflext_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__pa0001_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__pa0001_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__pa0001_tmp.sql", "original_file_path": "models/tmp/stg_sap__pa0001_tmp.sql", "unique_id": "model.sap_source.stg_sap__pa0001_tmp", "fqn": ["sap_source", "tmp", "stg_sap__pa0001_tmp"], "alias": "stg_sap__pa0001_tmp", "checksum": {"name": "sha256", "checksum": "44a0d95b73f33b9b0788fb8c90f5fde9dd2ebe3a52e72d1323911a4250f9ae6a"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.916231, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0001_tmp", "raw_code": "select * \nfrom {{ var('pa0001') }}", "language": "sql", "refs": [], "sources": [["sap", "pa0001"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.pa0001"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__pa0001_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_pa0001_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__t503_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__t503_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__t503_tmp.sql", "original_file_path": "models/tmp/stg_sap__t503_tmp.sql", "unique_id": "model.sap_source.stg_sap__t503_tmp", "fqn": ["sap_source", "tmp", "stg_sap__t503_tmp"], "alias": "stg_sap__t503_tmp", "checksum": {"name": "sha256", "checksum": "22823e3c098a581aa883d1dc00d14dfeee063bb488befc66838f487527be2c97"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.9197671, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__t503_tmp", "raw_code": "select * \nfrom {{ var('t503') }}", "language": "sql", "refs": [], "sources": [["sap", "t503"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.t503"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__t503_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_t503_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__mara_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__mara_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__mara_tmp.sql", "original_file_path": "models/tmp/stg_sap__mara_tmp.sql", "unique_id": "model.sap_source.stg_sap__mara_tmp", "fqn": ["sap_source", "tmp", "stg_sap__mara_tmp"], "alias": "stg_sap__mara_tmp", "checksum": {"name": "sha256", "checksum": "b67a0f35af74200122ffe4a487c1dc6239dec4696f40f099a227f27aacb8497d"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.9234948, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__mara_tmp", "raw_code": "select * \nfrom {{ var('mara') }}", "language": "sql", "refs": [], "sources": [["sap", "mara"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.mara"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__mara_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_mara_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__kna1_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__kna1_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__kna1_tmp.sql", "original_file_path": "models/tmp/stg_sap__kna1_tmp.sql", "unique_id": "model.sap_source.stg_sap__kna1_tmp", "fqn": ["sap_source", "tmp", "stg_sap__kna1_tmp"], "alias": "stg_sap__kna1_tmp", "checksum": {"name": "sha256", "checksum": "b1521c5048c50f75f099830681d6e305e97abaa733b41452ce23632d576aa5d0"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.928226, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__kna1_tmp", "raw_code": "select * \nfrom {{ var('kna1') }}", "language": "sql", "refs": [], "sources": [["sap", "kna1"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.kna1"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__kna1_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_kna1_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__bseg_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__bseg_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__bseg_tmp.sql", "original_file_path": "models/tmp/stg_sap__bseg_tmp.sql", "unique_id": "model.sap_source.stg_sap__bseg_tmp", "fqn": ["sap_source", "tmp", "stg_sap__bseg_tmp"], "alias": "stg_sap__bseg_tmp", "checksum": {"name": "sha256", "checksum": "674c7afb27a7ef7e774b33cb66e4dced1e52705f66aa4fcea3f4a1e735973122"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.931803, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__bseg_tmp", "raw_code": "select * \nfrom {{ var('bseg') }}", "language": "sql", "refs": [], "sources": [["sap", "bseg"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.bseg"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__bseg_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_bseg_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__pa0031_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__pa0031_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__pa0031_tmp.sql", "original_file_path": "models/tmp/stg_sap__pa0031_tmp.sql", "unique_id": "model.sap_source.stg_sap__pa0031_tmp", "fqn": ["sap_source", "tmp", "stg_sap__pa0031_tmp"], "alias": "stg_sap__pa0031_tmp", "checksum": {"name": "sha256", "checksum": "f66b002608aafdc098484ebefd725867c47fb6bd86ecbc48ec67094cd51c5ef3"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.935425, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0031_tmp", "raw_code": "select * \nfrom {{ var('pa0031') }}", "language": "sql", "refs": [], "sources": [["sap", "pa0031"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.pa0031"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__pa0031_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_pa0031_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__bkpf_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__bkpf_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__bkpf_tmp.sql", "original_file_path": "models/tmp/stg_sap__bkpf_tmp.sql", "unique_id": "model.sap_source.stg_sap__bkpf_tmp", "fqn": ["sap_source", "tmp", "stg_sap__bkpf_tmp"], "alias": "stg_sap__bkpf_tmp", "checksum": {"name": "sha256", "checksum": "5713fe28adc7575a6818511ef4bfd95784504e69af0e14766885561a94ebb5ec"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.9388218, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__bkpf_tmp", "raw_code": "select * \nfrom {{ var('bkpf') }}", "language": "sql", "refs": [], "sources": [["sap", "bkpf"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.bkpf"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__bkpf_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_bkpf_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__pa0007_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__pa0007_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__pa0007_tmp.sql", "original_file_path": "models/tmp/stg_sap__pa0007_tmp.sql", "unique_id": "model.sap_source.stg_sap__pa0007_tmp", "fqn": ["sap_source", "tmp", "stg_sap__pa0007_tmp"], "alias": "stg_sap__pa0007_tmp", "checksum": {"name": "sha256", "checksum": "152296e094b155a73907e18f7c35f79901701edd33f66c5378dc0052528741eb"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.942154, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0007_tmp", "raw_code": "select * \nfrom {{ var('pa0007') }}", "language": "sql", "refs": [], "sources": [["sap", "pa0007"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.pa0007"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__pa0007_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_pa0007_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.sap_source.stg_sap__ska1_tmp": {"database": "EC_DB", "schema": "sap_source_integration_tests_stg_sap", "name": "stg_sap__ska1_tmp", "resource_type": "model", "package_name": "sap_source", "path": "tmp/stg_sap__ska1_tmp.sql", "original_file_path": "models/tmp/stg_sap__ska1_tmp.sql", "unique_id": "model.sap_source.stg_sap__ska1_tmp", "fqn": ["sap_source", "tmp", "stg_sap__ska1_tmp"], "alias": "stg_sap__ska1_tmp", "checksum": {"name": "sha256", "checksum": "72aa33c4da687466a918b2674e2354df382d26fa6cb34d6955abd8c5078de67b"}, "config": {"enabled": true, "alias": null, "schema": "stg_sap", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_sap"}, "created_at": 1689111436.946321, "relation_name": "EC_DB.sap_source_integration_tests_stg_sap.stg_sap__ska1_tmp", "raw_code": "select * \nfrom {{ var('ska1') }}", "language": "sql", "refs": [], "sources": [["sap", "ska1"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sap_source.sap.ska1"]}, "compiled_path": "target/compiled/sap_source/models/tmp/stg_sap__ska1_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom EC_DB.sap_source_integration_tests.sap_ska1_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__bkpf_mandt__bukrs__belnr__gjahr.24408a1598": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["mandt", "bukrs", "belnr", "gjahr"], "model": "{{ get_where_subquery(ref('stg_sap__bkpf')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__bkpf_mandt__bukrs__belnr__gjahr", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_29249f4a506b13d0100a10e1fdb95045.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__bkpf_mandt__bukrs__belnr__gjahr.24408a1598", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__bkpf_mandt__bukrs__belnr__gjahr"], "alias": "dbt_utils_unique_combination_o_29249f4a506b13d0100a10e1fdb95045", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_29249f4a506b13d0100a10e1fdb95045", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_29249f4a506b13d0100a10e1fdb95045"}, "created_at": 1689111437.145797, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_29249f4a506b13d0100a10e1fdb95045\") }}", "language": "sql", "refs": [{"name": "stg_sap__bkpf", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__bkpf"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_29249f4a506b13d0100a10e1fdb95045.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mandt, bukrs, belnr, gjahr\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__bkpf\n    group by mandt, bukrs, belnr, gjahr\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__bkpf", "attached_node": "model.sap_source.stg_sap__bkpf"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__bseg_mandt__bukrs__belnr__gjahr__buzei.b82e3bb488": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["mandt", "bukrs", "belnr", "gjahr", "buzei"], "model": "{{ get_where_subquery(ref('stg_sap__bseg')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__bseg_mandt__bukrs__belnr__gjahr__buzei", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_83317fb21987d38698f0a0358fa3eb04.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__bseg_mandt__bukrs__belnr__gjahr__buzei.b82e3bb488", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__bseg_mandt__bukrs__belnr__gjahr__buzei"], "alias": "dbt_utils_unique_combination_o_83317fb21987d38698f0a0358fa3eb04", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_83317fb21987d38698f0a0358fa3eb04", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_83317fb21987d38698f0a0358fa3eb04"}, "created_at": 1689111437.153295, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_83317fb21987d38698f0a0358fa3eb04\") }}", "language": "sql", "refs": [{"name": "stg_sap__bseg", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__bseg"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_83317fb21987d38698f0a0358fa3eb04.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mandt, bukrs, belnr, gjahr, buzei\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__bseg\n    group by mandt, bukrs, belnr, gjahr, buzei\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__bseg", "attached_node": "model.sap_source.stg_sap__bseg"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__faglflexa_rclnt__ryear__docnr__rldnr__rbukrs__docln.25873b9ae2": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["rclnt", "ryear", "docnr", "rldnr", "rbukrs", "docln"], "model": "{{ get_where_subquery(ref('stg_sap__faglflexa')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__faglflexa_rclnt__ryear__docnr__rldnr__rbukrs__docln", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_9886a7ec2ea5f7a85cd8eb0bf4ad9453.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__faglflexa_rclnt__ryear__docnr__rldnr__rbukrs__docln.25873b9ae2", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__faglflexa_rclnt__ryear__docnr__rldnr__rbukrs__docln"], "alias": "dbt_utils_unique_combination_o_9886a7ec2ea5f7a85cd8eb0bf4ad9453", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9886a7ec2ea5f7a85cd8eb0bf4ad9453", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9886a7ec2ea5f7a85cd8eb0bf4ad9453"}, "created_at": 1689111437.156567, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9886a7ec2ea5f7a85cd8eb0bf4ad9453\") }}", "language": "sql", "refs": [{"name": "stg_sap__faglflexa", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__faglflexa"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_9886a7ec2ea5f7a85cd8eb0bf4ad9453.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        rclnt, ryear, docnr, rldnr, rbukrs, docln\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__faglflexa\n    group by rclnt, ryear, docnr, rldnr, rbukrs, docln\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__faglflexa", "attached_node": "model.sap_source.stg_sap__faglflexa"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__faglflext_rclnt__ryear__objnr00__objnr01__objnr02__objnr03__objnr04__objnr05__objnr06__objnr07__objnr08__drcrk__rpmax.044702dcdc": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["rclnt", "ryear", "objnr00", "objnr01", "objnr02", "objnr03", "objnr04", "objnr05", "objnr06", "objnr07", "objnr08", "drcrk", "rpmax"], "model": "{{ get_where_subquery(ref('stg_sap__faglflext')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__faglflext_rclnt__ryear__objnr00__objnr01__objnr02__objnr03__objnr04__objnr05__objnr06__objnr07__objnr08__drcrk__rpmax", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_73e59f41bcffb35327e0ffb8c15b0b9f.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__faglflext_rclnt__ryear__objnr00__objnr01__objnr02__objnr03__objnr04__objnr05__objnr06__objnr07__objnr08__drcrk__rpmax.044702dcdc", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__faglflext_rclnt__ryear__objnr00__objnr01__objnr02__objnr03__objnr04__objnr05__objnr06__objnr07__objnr08__drcrk__rpmax"], "alias": "dbt_utils_unique_combination_o_73e59f41bcffb35327e0ffb8c15b0b9f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_73e59f41bcffb35327e0ffb8c15b0b9f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_73e59f41bcffb35327e0ffb8c15b0b9f"}, "created_at": 1689111437.160034, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_73e59f41bcffb35327e0ffb8c15b0b9f\") }}", "language": "sql", "refs": [{"name": "stg_sap__faglflext", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__faglflext"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_73e59f41bcffb35327e0ffb8c15b0b9f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        rclnt, ryear, objnr00, objnr01, objnr02, objnr03, objnr04, objnr05, objnr06, objnr07, objnr08, drcrk, rpmax\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__faglflext\n    group by rclnt, ryear, objnr00, objnr01, objnr02, objnr03, objnr04, objnr05, objnr06, objnr07, objnr08, drcrk, rpmax\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__faglflext", "attached_node": "model.sap_source.stg_sap__faglflext"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__kna1_mandt__kunnr.267e63971e": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["mandt", "kunnr"], "model": "{{ get_where_subquery(ref('stg_sap__kna1')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__kna1_mandt__kunnr", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_0e8503d3162cc140f1ac1f5da129503c.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__kna1_mandt__kunnr.267e63971e", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__kna1_mandt__kunnr"], "alias": "dbt_utils_unique_combination_o_0e8503d3162cc140f1ac1f5da129503c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0e8503d3162cc140f1ac1f5da129503c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0e8503d3162cc140f1ac1f5da129503c"}, "created_at": 1689111437.1644921, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0e8503d3162cc140f1ac1f5da129503c\") }}", "language": "sql", "refs": [{"name": "stg_sap__kna1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__kna1"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_0e8503d3162cc140f1ac1f5da129503c.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mandt, kunnr\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__kna1\n    group by mandt, kunnr\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__kna1", "attached_node": "model.sap_source.stg_sap__kna1"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__lfa1_mandt__lifnr.a14d089450": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["mandt", "lifnr"], "model": "{{ get_where_subquery(ref('stg_sap__lfa1')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__lfa1_mandt__lifnr", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_df1566c04ca5f2e96818434f94b90864.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__lfa1_mandt__lifnr.a14d089450", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__lfa1_mandt__lifnr"], "alias": "dbt_utils_unique_combination_o_df1566c04ca5f2e96818434f94b90864", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_df1566c04ca5f2e96818434f94b90864", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_df1566c04ca5f2e96818434f94b90864"}, "created_at": 1689111437.167208, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_df1566c04ca5f2e96818434f94b90864\") }}", "language": "sql", "refs": [{"name": "stg_sap__lfa1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__lfa1"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_df1566c04ca5f2e96818434f94b90864.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mandt, lifnr\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__lfa1\n    group by mandt, lifnr\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__lfa1", "attached_node": "model.sap_source.stg_sap__lfa1"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__mara_mandt__matnr.22aa05e858": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["mandt", "matnr"], "model": "{{ get_where_subquery(ref('stg_sap__mara')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__mara_mandt__matnr", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_aba943f3d552898f8cde7e570f24bd10.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__mara_mandt__matnr.22aa05e858", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__mara_mandt__matnr"], "alias": "dbt_utils_unique_combination_o_aba943f3d552898f8cde7e570f24bd10", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_aba943f3d552898f8cde7e570f24bd10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_aba943f3d552898f8cde7e570f24bd10"}, "created_at": 1689111437.169996, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_aba943f3d552898f8cde7e570f24bd10\") }}", "language": "sql", "refs": [{"name": "stg_sap__mara", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__mara"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_aba943f3d552898f8cde7e570f24bd10.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mandt, matnr\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__mara\n    group by mandt, matnr\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__mara", "attached_node": "model.sap_source.stg_sap__mara"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0000_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.d4e0143493": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["mandt", "pernr", "subty", "objps", "sprps", "endda", "begda", "seqnr"], "model": "{{ get_where_subquery(ref('stg_sap__pa0000')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__pa0000_mandt__pernr__subty__objps__sprps__endda__begda__seqnr", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_1399aab16ef9475053c03446170d466a.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0000_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.d4e0143493", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__pa0000_mandt__pernr__subty__objps__sprps__endda__begda__seqnr"], "alias": "dbt_utils_unique_combination_o_1399aab16ef9475053c03446170d466a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1399aab16ef9475053c03446170d466a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1399aab16ef9475053c03446170d466a"}, "created_at": 1689111437.173204, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1399aab16ef9475053c03446170d466a\") }}", "language": "sql", "refs": [{"name": "stg_sap__pa0000", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__pa0000"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_1399aab16ef9475053c03446170d466a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mandt, pernr, subty, objps, sprps, endda, begda, seqnr\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0000\n    group by mandt, pernr, subty, objps, sprps, endda, begda, seqnr\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__pa0000", "attached_node": "model.sap_source.stg_sap__pa0000"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0001_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.dff9406c1d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["mandt", "pernr", "subty", "objps", "sprps", "endda", "begda", "seqnr"], "model": "{{ get_where_subquery(ref('stg_sap__pa0001')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__pa0001_mandt__pernr__subty__objps__sprps__endda__begda__seqnr", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_c3328c9bbd7dd62f0a3374572c4a4f2a.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0001_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.dff9406c1d", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__pa0001_mandt__pernr__subty__objps__sprps__endda__begda__seqnr"], "alias": "dbt_utils_unique_combination_o_c3328c9bbd7dd62f0a3374572c4a4f2a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c3328c9bbd7dd62f0a3374572c4a4f2a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c3328c9bbd7dd62f0a3374572c4a4f2a"}, "created_at": 1689111437.1767738, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c3328c9bbd7dd62f0a3374572c4a4f2a\") }}", "language": "sql", "refs": [{"name": "stg_sap__pa0001", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__pa0001"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_c3328c9bbd7dd62f0a3374572c4a4f2a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mandt, pernr, subty, objps, sprps, endda, begda, seqnr\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0001\n    group by mandt, pernr, subty, objps, sprps, endda, begda, seqnr\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__pa0001", "attached_node": "model.sap_source.stg_sap__pa0001"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0007_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.7c591718a3": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["mandt", "pernr", "subty", "objps", "sprps", "endda", "begda", "seqnr"], "model": "{{ get_where_subquery(ref('stg_sap__pa0007')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__pa0007_mandt__pernr__subty__objps__sprps__endda__begda__seqnr", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_995aae8678e1d831c24bedf590773f04.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0007_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.7c591718a3", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__pa0007_mandt__pernr__subty__objps__sprps__endda__begda__seqnr"], "alias": "dbt_utils_unique_combination_o_995aae8678e1d831c24bedf590773f04", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_995aae8678e1d831c24bedf590773f04", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_995aae8678e1d831c24bedf590773f04"}, "created_at": 1689111437.180445, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_995aae8678e1d831c24bedf590773f04\") }}", "language": "sql", "refs": [{"name": "stg_sap__pa0007", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__pa0007"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_995aae8678e1d831c24bedf590773f04.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mandt, pernr, subty, objps, sprps, endda, begda, seqnr\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0007\n    group by mandt, pernr, subty, objps, sprps, endda, begda, seqnr\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__pa0007", "attached_node": "model.sap_source.stg_sap__pa0007"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0008_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.8a4607e6ae": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["mandt", "pernr", "subty", "objps", "sprps", "endda", "begda", "seqnr"], "model": "{{ get_where_subquery(ref('stg_sap__pa0008')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__pa0008_mandt__pernr__subty__objps__sprps__endda__begda__seqnr", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_b18a773168e1a3d8fda5f24034f69070.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0008_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.8a4607e6ae", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__pa0008_mandt__pernr__subty__objps__sprps__endda__begda__seqnr"], "alias": "dbt_utils_unique_combination_o_b18a773168e1a3d8fda5f24034f69070", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b18a773168e1a3d8fda5f24034f69070", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b18a773168e1a3d8fda5f24034f69070"}, "created_at": 1689111437.184, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b18a773168e1a3d8fda5f24034f69070\") }}", "language": "sql", "refs": [{"name": "stg_sap__pa0008", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__pa0008"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_b18a773168e1a3d8fda5f24034f69070.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mandt, pernr, subty, objps, sprps, endda, begda, seqnr\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0008\n    group by mandt, pernr, subty, objps, sprps, endda, begda, seqnr\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__pa0008", "attached_node": "model.sap_source.stg_sap__pa0008"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0031_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.5eeaab575a": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["mandt", "pernr", "subty", "objps", "sprps", "endda", "begda", "seqnr"], "model": "{{ get_where_subquery(ref('stg_sap__pa0031')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__pa0031_mandt__pernr__subty__objps__sprps__endda__begda__seqnr", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_d50e6f7cc498686b685312b08c8950f4.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0031_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.5eeaab575a", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__pa0031_mandt__pernr__subty__objps__sprps__endda__begda__seqnr"], "alias": "dbt_utils_unique_combination_o_d50e6f7cc498686b685312b08c8950f4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d50e6f7cc498686b685312b08c8950f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d50e6f7cc498686b685312b08c8950f4"}, "created_at": 1689111437.187674, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d50e6f7cc498686b685312b08c8950f4\") }}", "language": "sql", "refs": [{"name": "stg_sap__pa0031", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__pa0031"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_d50e6f7cc498686b685312b08c8950f4.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mandt, pernr, subty, objps, sprps, endda, begda, seqnr\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__pa0031\n    group by mandt, pernr, subty, objps, sprps, endda, begda, seqnr\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__pa0031", "attached_node": "model.sap_source.stg_sap__pa0031"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__ska1_mandt__ktopl__saknr.f71e6ad713": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["mandt", "ktopl", "saknr"], "model": "{{ get_where_subquery(ref('stg_sap__ska1')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__ska1_mandt__ktopl__saknr", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_cb768a0afe71399460bc2b87979f7a43.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__ska1_mandt__ktopl__saknr.f71e6ad713", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__ska1_mandt__ktopl__saknr"], "alias": "dbt_utils_unique_combination_o_cb768a0afe71399460bc2b87979f7a43", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cb768a0afe71399460bc2b87979f7a43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cb768a0afe71399460bc2b87979f7a43"}, "created_at": 1689111437.191818, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cb768a0afe71399460bc2b87979f7a43\") }}", "language": "sql", "refs": [{"name": "stg_sap__ska1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__ska1"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_cb768a0afe71399460bc2b87979f7a43.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mandt, ktopl, saknr\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__ska1\n    group by mandt, ktopl, saknr\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__ska1", "attached_node": "model.sap_source.stg_sap__ska1"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t001_mandt__bukrs.8004c782aa": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["mandt", "bukrs"], "model": "{{ get_where_subquery(ref('stg_sap__t001')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__t001_mandt__bukrs", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_72a4519a726f10162f4b5a539aa23802.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t001_mandt__bukrs.8004c782aa", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__t001_mandt__bukrs"], "alias": "dbt_utils_unique_combination_o_72a4519a726f10162f4b5a539aa23802", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_72a4519a726f10162f4b5a539aa23802", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_72a4519a726f10162f4b5a539aa23802"}, "created_at": 1689111437.194785, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_72a4519a726f10162f4b5a539aa23802\") }}", "language": "sql", "refs": [{"name": "stg_sap__t001", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__t001"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_72a4519a726f10162f4b5a539aa23802.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mandt, bukrs\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__t001\n    group by mandt, bukrs\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__t001", "attached_node": "model.sap_source.stg_sap__t001"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t503_mandt__persg__persk.326edc3672": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["mandt", "persg", "persk"], "model": "{{ get_where_subquery(ref('stg_sap__t503')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__t503_mandt__persg__persk", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_819efb166187c2512476d4c0132f955b.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t503_mandt__persg__persk.326edc3672", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__t503_mandt__persg__persk"], "alias": "dbt_utils_unique_combination_o_819efb166187c2512476d4c0132f955b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_819efb166187c2512476d4c0132f955b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_819efb166187c2512476d4c0132f955b"}, "created_at": 1689111437.1974552, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_819efb166187c2512476d4c0132f955b\") }}", "language": "sql", "refs": [{"name": "stg_sap__t503", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__t503"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_819efb166187c2512476d4c0132f955b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mandt, persg, persk\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__t503\n    group by mandt, persg, persk\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__t503", "attached_node": "model.sap_source.stg_sap__t503"}, "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t880_mandt__rcomp.076ad31b7f": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["mandt", "rcomp"], "model": "{{ get_where_subquery(ref('stg_sap__t880')) }}"}, "namespace": "dbt_utils"}, "database": "EC_DB", "schema": "sap_source_integration_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sap__t880_mandt__rcomp", "resource_type": "test", "package_name": "sap_source", "path": "dbt_utils_unique_combination_o_352c25c537e5159321755b7931bcd403.sql", "original_file_path": "models/stg_sap.yml", "unique_id": "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t880_mandt__rcomp.076ad31b7f", "fqn": ["sap_source", "dbt_utils_unique_combination_of_columns_stg_sap__t880_mandt__rcomp"], "alias": "dbt_utils_unique_combination_o_352c25c537e5159321755b7931bcd403", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_352c25c537e5159321755b7931bcd403", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_352c25c537e5159321755b7931bcd403"}, "created_at": 1689111437.2003741, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_352c25c537e5159321755b7931bcd403\") }}", "language": "sql", "refs": [{"name": "stg_sap__t880", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sap_source.stg_sap__t880"]}, "compiled_path": "target/compiled/sap_source/models/stg_sap.yml/dbt_utils_unique_combination_o_352c25c537e5159321755b7931bcd403.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        mandt, rcomp\n    from EC_DB.sap_source_integration_tests_stg_sap.stg_sap__t880\n    group by mandt, rcomp\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sap__t880", "attached_node": "model.sap_source.stg_sap__t880"}}, "sources": {"source.sap_source.sap.bkpf": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "bkpf", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.bkpf", "fqn": ["sap_source", "sap", "bkpf"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_bkpf_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Accounting document header", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gjahr": {"name": "gjahr", "description": "Fiscal year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bukrs": {"name": "bukrs", "description": "Company code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "belnr": {"name": "belnr", "description": "Accounting document number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blart": {"name": "blart", "description": "Document type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bldat": {"name": "bldat", "description": "Document date in document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "monat": {"name": "monat", "description": "Fiscal period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cpudt": {"name": "cpudt", "description": "Day on which accounting document was entered", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xblnr": {"name": "xblnr", "description": "Reference document number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "waers": {"name": "waers", "description": "Currency key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "glvor": {"name": "glvor", "description": "Business transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "awkey": {"name": "awkey", "description": "Reference key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fikrs": {"name": "fikrs", "description": "Financial management area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hwaer": {"name": "hwaer", "description": "Local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hwae2": {"name": "hwae2", "description": "Currency key of second local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hwae3": {"name": "hwae3", "description": "Currency key of third local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "awsys": {"name": "awsys", "description": "Logical system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ldgrp": {"name": "ldgrp", "description": "Ledger group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kursf": {"name": "kursf", "description": "Exchange rate", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xreorg": {"name": "xreorg", "description": "Doc. contains open item that was transferred during reorg.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_bkpf_data", "created_at": 1689111437.356317}, "source.sap_source.sap.bseg": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "bseg", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.bseg", "fqn": ["sap_source", "sap", "bseg"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_bseg_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Accounting document segment", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bukrs": {"name": "bukrs", "description": "Company code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "belnr": {"name": "belnr", "description": "Accounting document number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gjahr": {"name": "gjahr", "description": "Fiscal year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buzei": {"name": "buzei", "description": "Number of line item within accounting document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anln1": {"name": "anln1", "description": "Main asset number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anln2": {"name": "anln2", "description": "Asset subnumber", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aufnr": {"name": "aufnr", "description": "Order number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "augbl": {"name": "augbl", "description": "Document number of the clearing document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "augdt": {"name": "augdt", "description": "Clearing date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ebeln": {"name": "ebeln", "description": "Purchasing document number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ebelp": {"name": "ebelp", "description": "Item number of purchasing document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "eten2": {"name": "eten2", "description": "Delivery schedule line number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "filkd": {"name": "filkd", "description": "Account number of the branch", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gsber": {"name": "gsber", "description": "Business area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "koart": {"name": "koart", "description": "Account type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kostl": {"name": "kostl", "description": "Cost center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maber": {"name": "maber", "description": "Dunning Area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "madat": {"name": "madat", "description": "Last dunned on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mansp": {"name": "mansp", "description": "Dunning block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manst": {"name": "manst", "description": "Dunning level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mschl": {"name": "mschl", "description": "Dunning key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mwskz": {"name": "mwskz", "description": "Tax on sales/purchases code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "posn2": {"name": "posn2", "description": "Sales document item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "qbshb": {"name": "qbshb", "description": "Withholding tax amount (in document currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "qsfbt": {"name": "qsfbt", "description": "Withholding tax-exempt amount (in document currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "qsshb": {"name": "qsshb", "description": "Withholding tax base amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rebzg": {"name": "rebzg", "description": "Number of the invoice the transaction belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "samnr": {"name": "samnr", "description": "Invoice list number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sgtxt": {"name": "sgtxt", "description": "Item text", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shkzg": {"name": "shkzg", "description": "Debit/credit indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "skfbt": {"name": "skfbt", "description": "Amount eligible for cash discount in document currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wskto": {"name": "wskto", "description": "Cash discount amount in document currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sknto": {"name": "sknto", "description": "Cash discount amount in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umsks": {"name": "umsks", "description": "Special G/L transaction type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "umskz": {"name": "umskz", "description": "Special G/L indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uzawe": {"name": "uzawe", "description": "Payment method supplement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "valut": {"name": "valut", "description": "Value date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vbel2": {"name": "vbel2", "description": "Sales document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vbeln": {"name": "vbeln", "description": "Billing document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vbewa": {"name": "vbewa", "description": "Flow type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vbund": {"name": "vbund", "description": "Company id of trading partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vertn": {"name": "vertn", "description": "Contract number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vertt": {"name": "vertt", "description": "Contract type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "werks": {"name": "werks", "description": "Plant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wverw": {"name": "wverw", "description": "Bill of exchange usage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xzahl": {"name": "xzahl", "description": "Indicator (Is the posting key used in a payment transaction?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zbd1p": {"name": "zbd1p", "description": "Cash discount percentage 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zbd1t": {"name": "zbd1t", "description": "Cash discount days 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zbd2p": {"name": "zbd2p", "description": "Cash discount percentage 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zbd2t": {"name": "zbd2t", "description": "Cash discount days 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zbd3t": {"name": "zbd3t", "description": "Net payment terms period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zfbdt": {"name": "zfbdt", "description": "Baseline date for due date calculation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zlsch": {"name": "zlsch", "description": "Payment method", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zlspr": {"name": "zlspr", "description": "Payment block key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zterm": {"name": "zterm", "description": "Terms of payment key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zuonr": {"name": "zuonr", "description": "Assignment number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xref1": {"name": "xref1", "description": "Business partner reference key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xref2": {"name": "xref2", "description": "Business partner reference key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rstgr": {"name": "rstgr", "description": "Reason code for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rebzt": {"name": "rebzt", "description": "Follow-on document type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pswsl": {"name": "pswsl", "description": "Update currency for general ledger transaction figures", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pswbt": {"name": "pswbt", "description": "Amount for updating in general ledger", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hkont": {"name": "hkont", "description": "General ledger account", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xnegp": {"name": "xnegp", "description": "Indicator (Negative posting)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zbfix": {"name": "zbfix", "description": "Fixed payment terms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfzei": {"name": "rfzei", "description": "Payment card item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccbtc": {"name": "ccbtc", "description": "Payment cards (Settlement run)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kkber": {"name": "kkber", "description": "Credit control area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xref3": {"name": "xref3", "description": "Reference key for line item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dtws1": {"name": "dtws1", "description": "Instruction key 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dtws2": {"name": "dtws2", "description": "Instruction key 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dtws3": {"name": "dtws3", "description": "Instruction key 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dtws4": {"name": "dtws4", "description": "Instruction key 4", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "absbt": {"name": "absbt", "description": "Credit management (Hedged amount)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "projk": {"name": "projk", "description": "Work Breakdown Structure Element (WBS Element)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xpypr": {"name": "xpypr", "description": "Indicator (Items from payment program blocked)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kidno": {"name": "kidno", "description": "Payment reference", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bupla": {"name": "bupla", "description": "Business place", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "secco": {"name": "secco", "description": "Section code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pycur": {"name": "pycur", "description": "Currency for automatic payment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pyamt": {"name": "pyamt", "description": "Amount in payment currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xragl": {"name": "xragl", "description": "Indicator (Clearing was reversed)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cession_kz": {"name": "cession_kz", "description": "Accounts receivable pledging indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buzid": {"name": "buzid", "description": "Identification of the line item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auggj": {"name": "auggj", "description": "Fiscal year of clearing document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "agzei": {"name": "agzei", "description": "Clearing item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bdiff": {"name": "bdiff", "description": "Valuation difference", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bdif2": {"name": "bdif2", "description": "Valuation difference for the second local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bdif3": {"name": "bdif3", "description": "Valuation difference for the third local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bewar": {"name": "bewar", "description": "Transaction type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dabrz": {"name": "dabrz", "description": "Reference date for settlement", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dmbtr": {"name": "dmbtr", "description": "Amount in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fkber": {"name": "fkber", "description": "Functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fkber_long": {"name": "fkber_long", "description": "Functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "imkey": {"name": "imkey", "description": "Internal key for real estate object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kstar": {"name": "kstar", "description": "Cost element", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kunnr": {"name": "kunnr", "description": "Customer numbers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lifnr": {"name": "lifnr", "description": "Account number of vendor or creditor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meins": {"name": "meins", "description": "Base unit of measure", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "menge": {"name": "menge", "description": "Quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pargb": {"name": "pargb", "description": "Trading partner's business area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pfkber": {"name": "pfkber", "description": "Partner functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pprct": {"name": "pprct", "description": "Partner profit center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saknr": {"name": "saknr", "description": "G/L account number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wrbtr": {"name": "wrbtr", "description": "Amount in document currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xopvw": {"name": "xopvw", "description": "Indicator (Open item management?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xlgclr": {"name": "xlgclr", "description": "Clearing specific to ledger groups", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzspreg": {"name": "zzspreg", "description": "Special region", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzbuspartn": {"name": "zzbuspartn", "description": "Business partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzproduct": {"name": "zzproduct", "description": "Product group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzloca": {"name": "zzloca", "description": "City", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzchan": {"name": "zzchan", "description": "Distribution channel", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzlob": {"name": "zzlob", "description": "Business line", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzuserfld1": {"name": "zzuserfld1", "description": "Territory", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzuserfld2": {"name": "zzuserfld2", "description": "Owner/Cont.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzuserfld3": {"name": "zzuserfld3", "description": "Vein", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzregion": {"name": "zzregion", "description": "User defined regions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzstate": {"name": "zzstate", "description": "State/province code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_bseg_data", "created_at": 1689111437.356598}, "source.sap_source.sap.faglflexa": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "faglflexa", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.faglflexa", "fqn": ["sap_source", "sap", "faglflexa"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_faglflexa_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "General ledger (Actual line items)", "columns": {"ryear": {"name": "ryear", "description": "Fiscal year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "docnr": {"name": "docnr", "description": "Accounting document number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rldnr": {"name": "rldnr", "description": "Ledger in genral ledger accounting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rbukrs": {"name": "rbukrs", "description": "Company code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "docln": {"name": "docln", "description": "Six-character posting item for ledger", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activ": {"name": "activ", "description": "FI-SL business transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rmvct": {"name": "rmvct", "description": "Transaction type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rtcur": {"name": "rtcur", "description": "Currency key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "runit": {"name": "runit", "description": "Base unit of measure", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "awtyp": {"name": "awtyp", "description": "Reference transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rrcty": {"name": "rrcty", "description": "Record type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rvers": {"name": "rvers", "description": "Version", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "logsys": {"name": "logsys", "description": "Logical system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "racct": {"name": "racct", "description": "Account number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_elem": {"name": "cost_elem", "description": "Cost element", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rclnt": {"name": "rclnt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rcntr": {"name": "rcntr", "description": "Cost center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prctr": {"name": "prctr", "description": "Profit center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfarea": {"name": "rfarea", "description": "Functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rbusa": {"name": "rbusa", "description": "Business area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kokrs": {"name": "kokrs", "description": "Controlling area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "segment": {"name": "segment", "description": "Segment for segmental reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scntr": {"name": "scntr", "description": "Sender cost center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pprctr": {"name": "pprctr", "description": "Partner profit center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sfarea": {"name": "sfarea", "description": "Partner functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sbusa": {"name": "sbusa", "description": "Trading partner's business area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rassc": {"name": "rassc", "description": "Company id of trading partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "psegment": {"name": "psegment", "description": "Partner segment for segmental reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl": {"name": "tsl", "description": "Value in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl": {"name": "hsl", "description": "Value in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl": {"name": "ksl", "description": "Value in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl": {"name": "osl", "description": "Value in another currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "msl": {"name": "msl", "description": "Quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wsl": {"name": "wsl", "description": "Value in original transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drcrk": {"name": "drcrk", "description": "Debt/credit indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "poper": {"name": "poper", "description": "Posting period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rwcur": {"name": "rwcur", "description": "Currency key of the original transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gjahr": {"name": "gjahr", "description": "Fiscal year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "budat": {"name": "budat", "description": "Posting date in the document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "belnr": {"name": "belnr", "description": "Accounting document number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "buzei": {"name": "buzei", "description": "Number of line item within accounting document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bschl": {"name": "bschl", "description": "Posting key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bstat": {"name": "bstat", "description": "Document status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "faglflexa_timestamp": {"name": "faglflexa_timestamp", "description": "UTC Timestamp in short form (YYYYMMDDhhmmss)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_faglflexa_data", "created_at": 1689111437.3568058}, "source.sap_source.sap.faglflext": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "faglflext", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.faglflext", "fqn": ["sap_source", "sap", "faglflext"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_faglflext_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "General ledger (Totals)", "columns": {"drcrk": {"name": "drcrk", "description": "Debit/credit indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr00": {"name": "objnr00", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr01": {"name": "objnr01", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr02": {"name": "objnr02", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr03": {"name": "objnr03", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr04": {"name": "objnr04", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr05": {"name": "objnr05", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr06": {"name": "objnr06", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr07": {"name": "objnr07", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objnr08": {"name": "objnr08", "description": "Object number for table group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rclnt": {"name": "rclnt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rpmax": {"name": "rpmax", "description": "Period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ryear": {"name": "ryear", "description": "Fiscal year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activ": {"name": "activ", "description": "FI-SL business transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rmvct": {"name": "rmvct", "description": "Transaction type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rtcur": {"name": "rtcur", "description": "Currency key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "runit": {"name": "runit", "description": "Base unit of measure", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "awtyp": {"name": "awtyp", "description": "Reference transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rldnr": {"name": "rldnr", "description": "Ledger in general ledger accounting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rrcty": {"name": "rrcty", "description": "Record type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rvers": {"name": "rvers", "description": "Version", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "logsys": {"name": "logsys", "description": "Logical system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "racct": {"name": "racct", "description": "Account number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost_elem": {"name": "cost_elem", "description": "Cost element", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rbukrs": {"name": "rbukrs", "description": "Company code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rcntr": {"name": "rcntr", "description": "Cost center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prctr": {"name": "prctr", "description": "Profit center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfarea": {"name": "rfarea", "description": "Functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rbusa": {"name": "rbusa", "description": "Business area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kokrs": {"name": "kokrs", "description": "Controlling area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "segment": {"name": "segment", "description": "Segment for segmental reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zzspreg": {"name": "zzspreg", "description": "Special region", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scntr": {"name": "scntr", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "dsecription": "Sender cost center"}, "pprctr": {"name": "pprctr", "description": "Partner profit center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sfarea": {"name": "sfarea", "description": "Partner functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sbusa": {"name": "sbusa", "description": "Trading partner's business area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rassc": {"name": "rassc", "description": "Company id of trading partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "psegment": {"name": "psegment", "description": "Partner segment for segmental reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hslvt": {"name": "hslvt", "description": "Balance carried forward in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl01": {"name": "hsl01", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl02": {"name": "hsl02", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl03": {"name": "hsl03", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl04": {"name": "hsl04", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl05": {"name": "hsl05", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl06": {"name": "hsl06", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl07": {"name": "hsl07", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl08": {"name": "hsl08", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl09": {"name": "hsl09", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl10": {"name": "hsl10", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl11": {"name": "hsl11", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl12": {"name": "hsl12", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl13": {"name": "hsl13", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl14": {"name": "hsl14", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl15": {"name": "hsl15", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hsl16": {"name": "hsl16", "description": "Total of transactions of the period in local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tslvt": {"name": "tslvt", "description": "Balance carried forward in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl01": {"name": "tsl01", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl02": {"name": "tsl02", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl03": {"name": "tsl03", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl04": {"name": "tsl04", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl05": {"name": "tsl05", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl06": {"name": "tsl06", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl07": {"name": "tsl07", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl08": {"name": "tsl08", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl09": {"name": "tsl09", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl10": {"name": "tsl10", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl11": {"name": "tsl11", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl12": {"name": "tsl12", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl13": {"name": "tsl13", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl14": {"name": "tsl14", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl15": {"name": "tsl15", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tsl16": {"name": "tsl16", "description": "Total of transactions of the period in transaction currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kslvt": {"name": "kslvt", "description": "Balance carried forward in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl01": {"name": "ksl01", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl02": {"name": "ksl02", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl03": {"name": "ksl03", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl04": {"name": "ksl04", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl05": {"name": "ksl05", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl06": {"name": "ksl06", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl07": {"name": "ksl07", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl08": {"name": "ksl08", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl09": {"name": "ksl09", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl10": {"name": "ksl10", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl11": {"name": "ksl11", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl12": {"name": "ksl12", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl13": {"name": "ksl13", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl14": {"name": "ksl14", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl15": {"name": "ksl15", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ksl16": {"name": "ksl16", "description": "Total of transactions of the period in group currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "oslvt": {"name": "oslvt", "description": "Balance carried forward in fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl01": {"name": "osl01", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl02": {"name": "osl02", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl03": {"name": "osl03", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl04": {"name": "osl04", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl05": {"name": "osl05", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl06": {"name": "osl06", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl07": {"name": "osl07", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl08": {"name": "osl08", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl09": {"name": "osl09", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl10": {"name": "osl10", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl11": {"name": "osl11", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl12": {"name": "osl12", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl13": {"name": "osl13", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl14": {"name": "osl14", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl15": {"name": "osl15", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "osl16": {"name": "osl16", "description": "Total transactions for the period in the fourth currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "faglflext_timestamp": {"name": "faglflext_timestamp", "description": "UTC timestamp in short form (YYYYMMDDhhmmss)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_faglflext_data", "created_at": 1689111437.357019}, "source.sap_source.sap.kna1": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "kna1", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.kna1", "fqn": ["sap_source", "sap", "kna1"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_kna1_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "General Data in Customer Master", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kunnr": {"name": "kunnr", "description": "Customer number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brsch": {"name": "brsch", "description": "Industry key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ktokd": {"name": "ktokd", "description": "Customer account group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kukla": {"name": "kukla", "description": "Customer classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "land1": {"name": "land1", "description": "Country key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lifnr": {"name": "lifnr", "description": "Account number of vendor or creditor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loevm": {"name": "loevm", "description": "Central deletion flag for master record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name1": {"name": "name1", "description": "Name 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name2": {"name": "name2", "description": "Name 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name3": {"name": "name3", "description": "Name 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "niels": {"name": "niels", "description": "Nielsen ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ort01": {"name": "ort01", "description": "City", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ort02": {"name": "ort02", "description": "District", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "periv": {"name": "periv", "description": "Fiscal year variant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pfach": {"name": "pfach", "description": "PO Box", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pfort": {"name": "pfort", "description": "PO Box city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pstl2": {"name": "pstl2", "description": "PO Box postal code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pstlz": {"name": "pstlz", "description": "Postal code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "regio": {"name": "regio", "description": "Regional market", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "counc": {"name": "counc", "description": "County code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sortl": {"name": "sortl", "description": "Sort field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "spras": {"name": "spras", "description": "Language key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stcd1": {"name": "stcd1", "description": "Tax number 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stcd2": {"name": "stcd2", "description": "Tax number 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stcd3": {"name": "stcd3", "description": "Tax number 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stras": {"name": "stras", "description": "House number and street", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "telf1": {"name": "telf1", "description": "First telephone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "telfx": {"name": "telfx", "description": "Fax number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xcpdk": {"name": "xcpdk", "description": "Indictoar (Is the account a one-time account?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vbund": {"name": "vbund", "description": "Company id of trading partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dear6": {"name": "dear6", "description": "Indicator (Consumer)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bran1": {"name": "bran1", "description": "Industry code 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bran2": {"name": "bran2", "description": "Industry code 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bran3": {"name": "bran3", "description": "Industry code 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bran4": {"name": "bran4", "description": "Industry code 4", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bran5": {"name": "bran5", "description": "Industry code 5", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "abrvw": {"name": "abrvw", "description": "Usage indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "werks": {"name": "werks", "description": "Plant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_kna1_data", "created_at": 1689111437.357156}, "source.sap_source.sap.lfa1": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "lfa1", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.lfa1", "fqn": ["sap_source", "sap", "lfa1"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_lfa1_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Vendor master (General section)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lifnr": {"name": "lifnr", "description": "Account number of vendor or creditor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brsch": {"name": "brsch", "description": "Industry key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ktokk": {"name": "ktokk", "description": "Vendor account group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "land1": {"name": "land1", "description": "Country key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loevm": {"name": "loevm", "description": "Central deletion flag for master record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name1": {"name": "name1", "description": "Name 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name2": {"name": "name2", "description": "Name 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name3": {"name": "name3", "description": "Name 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ort01": {"name": "ort01", "description": "City", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ort02": {"name": "ort02", "description": "District", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pfach": {"name": "pfach", "description": "PO Box", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pstl2": {"name": "pstl2", "description": "P.O. Box postal code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pstlz": {"name": "pstlz", "description": "Postal code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "regio": {"name": "regio", "description": "Region (State, province, county)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sortl": {"name": "sortl", "description": "Sort field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "spras": {"name": "spras", "description": "Language key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stcd1": {"name": "stcd1", "description": "Tax number 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stcd2": {"name": "stcd2", "description": "Tax number 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stcd3": {"name": "stcd3", "description": "Tax number 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stras": {"name": "stras", "description": "Street and house number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "telf1": {"name": "telf1", "description": "First telephone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "telfx": {"name": "telfx", "description": "Fax number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xcpdk": {"name": "xcpdk", "description": "Indicator (is the account a one-time account?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vbund": {"name": "vbund", "description": "Company id of trading partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kraus": {"name": "kraus", "description": "Credit information number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pfort": {"name": "pfort", "description": "PO box city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "werks": {"name": "werks", "description": "Plant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_lfa1_data", "created_at": 1689111437.357306}, "source.sap_source.sap.mara": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "mara", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.mara", "fqn": ["sap_source", "sap", "mara"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_mara_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "General material data", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "matnr": {"name": "matnr", "description": "Material number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ersda": {"name": "ersda", "description": "Created on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ernam": {"name": "ernam", "description": "Name of person who created the object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "laeda": {"name": "laeda", "description": "Date of last change", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aenam": {"name": "aenam", "description": "Name of person who changed object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vpsta": {"name": "vpsta", "description": "Maintenance status of complete material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pstat": {"name": "pstat", "description": "Maintenance status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lvorm": {"name": "lvorm", "description": "Flag material for deletion at client level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mtart": {"name": "mtart", "description": "Material type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mbrsh": {"name": "mbrsh", "description": "Industry sector", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "matkl": {"name": "matkl", "description": "Material group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bismt": {"name": "bismt", "description": "Old material number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meins": {"name": "meins", "description": "Base unit of measure", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bstme": {"name": "bstme", "description": "Order unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zeinr": {"name": "zeinr", "description": "Document number (without document management system)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zeiar": {"name": "zeiar", "description": "Document type (without document management system)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zeivr": {"name": "zeivr", "description": "Document version (without document management system)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zeifo": {"name": "zeifo", "description": "Page form of document (without document management system)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aeszn": {"name": "aeszn", "description": "Document change number (without document management system)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blatt": {"name": "blatt", "description": "Page number of document (without document management system)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blanz": {"name": "blanz", "description": "Number of sheets (without document management system)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ferth": {"name": "ferth", "description": "Production/inspection memo", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "formt": {"name": "formt", "description": "Page format of production memo", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "groes": {"name": "groes", "description": "Size/dimensions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wrkst": {"name": "wrkst", "description": "Basic material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normt": {"name": "normt", "description": "Industry Standard Description (such as ANSI or ISO)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "labor": {"name": "labor", "description": "Laboratory/design office", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ekwsl": {"name": "ekwsl", "description": "Purchasing value key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brgew": {"name": "brgew", "description": "Gross weight", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ntgew": {"name": "ntgew", "description": "Net weight", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gewei": {"name": "gewei", "description": "Weight unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "volum": {"name": "volum", "description": "Volume", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "voleh": {"name": "voleh", "description": "Volume unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "behvo": {"name": "behvo", "description": "Container requirements", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "raube": {"name": "raube", "description": "Storage conditions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tempb": {"name": "tempb", "description": "Temperature conditions indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "disst": {"name": "disst", "description": "Low-level code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tragr": {"name": "tragr", "description": "Transportation group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stoff": {"name": "stoff", "description": "Hazardous material number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "spart": {"name": "spart", "description": "Divsion", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kunnr": {"name": "kunnr", "description": "Competitor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "eannr": {"name": "eannr", "description": "European Article Number (EAN)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wesch": {"name": "wesch", "description": "Quantity, or number of GR/GI slips to be printed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bwvor": {"name": "bwvor", "description": "Procurement rule", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bwscl": {"name": "bwscl", "description": "Source of supply", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saiso": {"name": "saiso", "description": "Season category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "etiar": {"name": "etiar", "description": "Label type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "etifo": {"name": "etifo", "description": "Label form", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "entar": {"name": "entar", "description": "Disposal type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ean11": {"name": "ean11", "description": "International Article Number (EAN/UPC)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numtp": {"name": "numtp", "description": "Category of International Article Number (EAN)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "laeng": {"name": "laeng", "description": "Length", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "breit": {"name": "breit", "description": "Width", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hoehe": {"name": "hoehe", "description": "Height", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meabm": {"name": "meabm", "description": "Unit of dimension for length/width/height", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prdha": {"name": "prdha", "description": "Product hierarchy", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aeklk": {"name": "aeklk", "description": "Stock transfer net change costing", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cadkz": {"name": "cadkz", "description": "CAD indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "qmpur": {"name": "qmpur", "description": "QM in procurement is active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ergew": {"name": "ergew", "description": "Allowed packaging weight", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ergei": {"name": "ergei", "description": "Unit of weight (allowed packaging weight)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ervol": {"name": "ervol", "description": "Allowed packaging volume", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ervoe": {"name": "ervoe", "description": "Volume unit (allowed packaging volume)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gewto": {"name": "gewto", "description": "Excess weight tolerance for handling unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "volto": {"name": "volto", "description": "Excess volume tolerance of the handling unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vabme": {"name": "vabme", "description": "Variable purchase order unit active", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kzrev": {"name": "kzrev", "description": "Revision level has been assigned to the material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kzkfg": {"name": "kzkfg", "description": "Configurable material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xchpf": {"name": "xchpf", "description": "Batch management requirement indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vhart": {"name": "vhart", "description": "Packaging material type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fuelg": {"name": "fuelg", "description": "Maximum level (by volume)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stfak": {"name": "stfak", "description": "Stacking factor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "magrv": {"name": "magrv", "description": "Material group (Packaging materials)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "begru": {"name": "begru", "description": "Authorization group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "datab": {"name": "datab", "description": "Valid-from date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "liqdt": {"name": "liqdt", "description": "Deletion date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saisj": {"name": "saisj", "description": "Season year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plgtp": {"name": "plgtp", "description": "Price band category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mlgut": {"name": "mlgut", "description": "Empties bill of material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extwg": {"name": "extwg", "description": "External material group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "satnr": {"name": "satnr", "description": "Cross-plant configurable material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attyp": {"name": "attyp", "description": "Material category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kzkup": {"name": "kzkup", "description": "Indicator (Material can be co-product)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kznfm": {"name": "kznfm", "description": "Indicator (The amterial has a follow-up material)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pmata": {"name": "pmata", "description": "Pricing reference material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mstae": {"name": "mstae", "description": "Cross-plant material status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mstav": {"name": "mstav", "description": "Cross-distribution-chain material status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mstde": {"name": "mstde", "description": "Date from which the cross-plan material status is valid", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mstdv": {"name": "mstdv", "description": "Date from which the X-distr.-chain material status is valid", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "taklv": {"name": "taklv", "description": "Tax classification of the material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rbnrm": {"name": "rbnrm", "description": "Catalog profile", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mhdrz": {"name": "mhdrz", "description": "Minimum remaining shelf life", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mhdhb": {"name": "mhdhb", "description": "Total shelf life", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mhdlp": {"name": "mhdlp", "description": "Storage percentage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inhme": {"name": "inhme", "description": "Content unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inhal": {"name": "inhal", "description": "Net contents", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vpreh": {"name": "vpreh", "description": "Comparison price unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "etiag": {"name": "etiag", "description": "IS-R labeling (material grouping)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inhbr": {"name": "inhbr", "description": "Gross contents", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cmeth": {"name": "cmeth", "description": "Quantity conversion method", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cuobf": {"name": "cuobf", "description": "Internal object number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kzumw": {"name": "kzumw", "description": "Environmentally relevant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kosch": {"name": "kosch", "description": "Product allocation determination procedure", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sprof": {"name": "sprof", "description": "Pricing profile for variants", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nrfhg": {"name": "nrfhg", "description": "Material qualifies for discount in kind", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mfrpn": {"name": "mfrpn", "description": "Manufacturer part number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mfrnr": {"name": "mfrnr", "description": "Manufacturer number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bmatn": {"name": "bmatn", "description": "Number of firm's own (internal) inventory-managed material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mprof": {"name": "mprof", "description": "Mfr part profile", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kzwsm": {"name": "kzwsm", "description": "Units of measure usage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saity": {"name": "saity", "description": "Rollout in a season", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "profl": {"name": "profl", "description": "Dangerous goods indicator profile", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ihivi": {"name": "ihivi", "description": "Indicator (highly viscous)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "iloos": {"name": "iloos", "description": "Indicator (in bulk/liquid)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "serlv": {"name": "serlv", "description": "Level of explicitness for serial numbers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kzgvh": {"name": "kzgvh", "description": "Packaging material is closed packaging", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xgchp": {"name": "xgchp", "description": "Indicator (Approved batch record required)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kzeff": {"name": "kzeff", "description": "Assign effectivity parameter values / override change numbers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compl": {"name": "compl", "description": "Material completion level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "iprkz": {"name": "iprkz", "description": "Period indicator for shelf life expiration date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rdmhd": {"name": "rdmhd", "description": "Rounding rule for calculation of SLED", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "przus": {"name": "przus", "description": "Indicator (Product composition printed on packaging)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mtpos_mara": {"name": "mtpos_mara", "description": "General item category group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bflme": {"name": "bflme", "description": "Generic material with logistical variants", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nsnid": {"name": "nsnid", "description": "NATO item identification number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_mara_data", "created_at": 1689111437.3575308}, "source.sap_source.sap.pa0000": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "pa0000", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.pa0000", "fqn": ["sap_source", "sap", "pa0000"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_pa0000_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "HR master record--infotype 0000 (Actions)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pernr": {"name": "pernr", "description": "Personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subty": {"name": "subty", "description": "Subtype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objps": {"name": "objps", "description": "Object identification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sprps": {"name": "sprps", "description": "Lock indicator for HR master data record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "begda": {"name": "begda", "description": "Start date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "endda": {"name": "endda", "description": "End date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seqnr": {"name": "seqnr", "description": "Number of infotype record with same key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aedtm": {"name": "aedtm", "description": "Last changed on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag1": {"name": "flag1", "description": "Reserved field/Unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag2": {"name": "flag2", "description": "Reserved field/Unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag3": {"name": "flag3", "description": "Reserved field/Unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag4": {"name": "flag4", "description": "Reserved field/Unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grpvl": {"name": "grpvl", "description": "Grouping value for personnel assignments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "histo": {"name": "histo", "description": "Historical record flag", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itbld": {"name": "itbld", "description": "Infotype screen control", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itxex": {"name": "itxex", "description": "Text exists for infotype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "massg": {"name": "massg", "description": "Reason for action", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "massn": {"name": "massn", "description": "Action type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ordex": {"name": "ordex", "description": "Confirmation fields exist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preas": {"name": "preas", "description": "Reason for changing master data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refex": {"name": "refex", "description": "Reference fields exist (primary/secondary costs)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese1": {"name": "rese1", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese2": {"name": "rese2", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stat1": {"name": "stat1", "description": "Customer-specific status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stat2": {"name": "stat2", "description": "Employment status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stat3": {"name": "stat3", "description": "Special payment status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uname": {"name": "uname", "description": "Name of person who changed object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_pa0000_data", "created_at": 1689111437.357677}, "source.sap_source.sap.pa0001": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "pa0001", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.pa0001", "fqn": ["sap_source", "sap", "pa0001"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_pa0001_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "HR master record--infotype 0001 (org. assignment)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pernr": {"name": "pernr", "description": "Personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subty": {"name": "subty", "description": "Subtype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objps": {"name": "objps", "description": "Object identification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sprps": {"name": "sprps", "description": "Lock indicator for HR master data record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "begda": {"name": "begda", "description": "Start date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "endda": {"name": "endda", "description": "End date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seqnr": {"name": "seqnr", "description": "Number of infotype record with same key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "abkrs": {"name": "abkrs", "description": "Payroll area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aedtm": {"name": "aedtm", "description": "Changed on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ansvh": {"name": "ansvh", "description": "Work contract", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "btrtl": {"name": "btrtl", "description": "Personnel subarea", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "budget_pd": {"name": "budget_pd", "description": "FM--Budget period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bukrs": {"name": "bukrs", "description": "Company code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ename": {"name": "ename", "description": "Formatted name of employee or applicant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fistl": {"name": "fistl", "description": "Funds center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fkber": {"name": "fkber", "description": "Functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag1": {"name": "flag1", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag2": {"name": "flag2", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag3": {"name": "flag3", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag4": {"name": "flag4", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geber": {"name": "geber", "description": "Fund", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grant_nbr": {"name": "grant_nbr", "description": "Grant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grpvl": {"name": "grpvl", "description": "Grouping value for personnel assignments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gsber": {"name": "gsber", "description": "Business area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "histo": {"name": "histo", "description": "Historical record flag", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itbld": {"name": "itbld", "description": "Infotype screen control", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itxex": {"name": "itxex", "description": "Text exists for infotype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "juper": {"name": "juper", "description": "Legal person", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kokrs": {"name": "kokrs", "description": "Controlling area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kostl": {"name": "kostl", "description": "Cost center", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mstbr": {"name": "mstbr", "description": "Supervisor area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ordex": {"name": "ordex", "description": "Confirmation fields exist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "orgeh": {"name": "orgeh", "description": "Organizational unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "otype": {"name": "otype", "description": "Object type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "persg": {"name": "persg", "description": "Employee group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "persk": {"name": "persk", "description": "Employee subgroup", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plans": {"name": "plans", "description": "Position", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preas": {"name": "preas", "description": "Reason for changing master data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refex": {"name": "refex", "description": "Reference fields exist (primary/secondary costs)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese1": {"name": "rese1", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese2": {"name": "rese2", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sacha": {"name": "sacha", "description": "Payroll administrator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sachp": {"name": "sachp", "description": "Administrator for HR master data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sachz": {"name": "sachz", "description": "Administrator for time recording", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sbmod": {"name": "sbmod", "description": "Administrator group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sgmnt": {"name": "sgmnt", "description": "Segment for segmental reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sname": {"name": "sname", "description": "Employee's name (Sortable by LAST NAME FIRST NAME)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stell": {"name": "stell", "description": "Job", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uname": {"name": "uname", "description": "Name of person who changed object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vdsk1": {"name": "vdsk1", "description": "Organizational key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "werks": {"name": "werks", "description": "Personnel area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_pa0001_data", "created_at": 1689111437.357823}, "source.sap_source.sap.pa0007": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "pa0007", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.pa0007", "fqn": ["sap_source", "sap", "pa0007"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_pa0007_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "HR master record--infotype 0007 (planned working time)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pernr": {"name": "pernr", "description": "Personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subty": {"name": "subty", "description": "Subtype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objps": {"name": "objps", "description": "Object identification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sprps": {"name": "sprps", "description": "Lock indicator for HR master data record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "begda": {"name": "begda", "description": "Start date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "endda": {"name": "endda", "description": "End date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seqnr": {"name": "seqnr", "description": "Number of infotype record with same key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aedtm": {"name": "aedtm", "description": "Changed on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "arbst": {"name": "arbst", "description": "Daily working hours", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "awtyp": {"name": "awtyp", "description": "Reference transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dysch": {"name": "dysch", "description": "Create daily work schedule dynamically", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "empct": {"name": "empct", "description": "Employment percentage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag1": {"name": "flag1", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag2": {"name": "flag2", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag3": {"name": "flag3", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag4": {"name": "flag4", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grpvl": {"name": "grpvl", "description": "Grouping value for personnel assignments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "histo": {"name": "histo", "description": "Historical record flag", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itbld": {"name": "itbld", "description": "Infotype screen control", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itxex": {"name": "itxex", "description": "Text exists for infotype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "jrstd": {"name": "jrstd", "description": "Annual working hours", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kztim": {"name": "kztim", "description": "Additional indicator for time management", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maxja": {"name": "maxja", "description": "Maximum number of working hours per year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maxmo": {"name": "maxmo", "description": "Maximum number of work hours per month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maxta": {"name": "maxta", "description": "Maximum number of work hours per day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maxwo": {"name": "maxwo", "description": "Maximum number of work hours per week", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minja": {"name": "minja", "description": "Minimum annual working hours", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minmo": {"name": "minmo", "description": "Minimum number of work hours per month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minta": {"name": "minta", "description": "Minimum number of work hours per day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minwo": {"name": "minwo", "description": "Minimum weekly working hours", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mostd": {"name": "mostd", "description": "Monthly hours", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ordex": {"name": "ordex", "description": "Confirmation fields exist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preas": {"name": "preas", "description": "Reason for changing master data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refex": {"name": "refex", "description": "Reference fields exist (primary/secondary costs)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese1": {"name": "rese1", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese2": {"name": "rese2", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schkz": {"name": "schkz", "description": "Work schedule rule", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "teilk": {"name": "teilk", "description": "Indicator part-time employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uname": {"name": "uname", "description": "Name of person who changed objects", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wkwdy": {"name": "wkwdy", "description": "Weekly workdays", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wostd": {"name": "wostd", "description": "Hours per week", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wweek": {"name": "wweek", "description": "Working week", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zterf": {"name": "zterf", "description": "Employee time management status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_pa0007_data", "created_at": 1689111437.3579588}, "source.sap_source.sap.pa0008": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "pa0008", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.pa0008", "fqn": ["sap_source", "sap", "pa0008"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_pa0008_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "HR master record--infotype 0008 (basic pay)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pernr": {"name": "pernr", "description": "Personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subty": {"name": "subty", "description": "Subtype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objps": {"name": "objps", "description": "Object identification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sprps": {"name": "sprps", "description": "Lock indicator for HR master data record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "begda": {"name": "begda", "description": "Start date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "endda": {"name": "endda", "description": "End date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seqnr": {"name": "seqnr", "description": "Number of infotype record with same key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aedtm": {"name": "aedtm", "description": "Changed on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ancur": {"name": "ancur", "description": "Currency key for annual salary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ansal": {"name": "ansal", "description": "Annual salary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz01": {"name": "anz01", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz02": {"name": "anz02", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz03": {"name": "anz03", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz04": {"name": "anz04", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz05": {"name": "anz05", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz06": {"name": "anz06", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz07": {"name": "anz07", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz08": {"name": "anz08", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz09": {"name": "anz09", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz10": {"name": "anz10", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz11": {"name": "anz11", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz12": {"name": "anz12", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz13": {"name": "anz13", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz14": {"name": "anz14", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz15": {"name": "anz15", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz16": {"name": "anz16", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz17": {"name": "anz17", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz18": {"name": "anz18", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz19": {"name": "anz19", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz20": {"name": "anz20", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz21": {"name": "anz21", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz22": {"name": "anz22", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz23": {"name": "anz23", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz24": {"name": "anz24", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz25": {"name": "anz25", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz26": {"name": "anz26", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz27": {"name": "anz27", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz28": {"name": "anz28", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz29": {"name": "anz29", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz30": {"name": "anz30", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz31": {"name": "anz31", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz32": {"name": "anz32", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz33": {"name": "anz33", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz34": {"name": "anz34", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz35": {"name": "anz35", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz36": {"name": "anz36", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz37": {"name": "anz37", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz38": {"name": "anz38", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz39": {"name": "anz39", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "anz40": {"name": "anz40", "description": "Number/unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet01": {"name": "bet01", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet02": {"name": "bet02", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet03": {"name": "bet03", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet04": {"name": "bet04", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet05": {"name": "bet05", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet06": {"name": "bet06", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet07": {"name": "bet07", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet08": {"name": "bet08", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet09": {"name": "bet09", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet10": {"name": "bet10", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet11": {"name": "bet11", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet12": {"name": "bet12", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet13": {"name": "bet13", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet14": {"name": "bet14", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet15": {"name": "bet15", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet16": {"name": "bet16", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet17": {"name": "bet17", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet18": {"name": "bet18", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet19": {"name": "bet19", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet20": {"name": "bet20", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet21": {"name": "bet21", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet22": {"name": "bet22", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet23": {"name": "bet23", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet24": {"name": "bet24", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet25": {"name": "bet25", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet26": {"name": "bet26", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet27": {"name": "bet27", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet28": {"name": "bet28", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet29": {"name": "bet29", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet30": {"name": "bet30", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet31": {"name": "bet31", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet32": {"name": "bet32", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet33": {"name": "bet33", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet34": {"name": "bet34", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet35": {"name": "bet35", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet36": {"name": "bet36", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet37": {"name": "bet37", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet38": {"name": "bet38", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet39": {"name": "bet39", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bet40": {"name": "bet40", "description": "Wage type amount for payments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bsgrd": {"name": "bsgrd", "description": "Capacity utilization level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cpind": {"name": "cpind", "description": "Planned compensation type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "divgv": {"name": "divgv", "description": "Working hours per payroll period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein01": {"name": "ein01", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein02": {"name": "ein02", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein03": {"name": "ein03", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein04": {"name": "ein04", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein05": {"name": "ein05", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein06": {"name": "ein06", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein07": {"name": "ein07", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein08": {"name": "ein08", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein09": {"name": "ein09", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein10": {"name": "ein10", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein11": {"name": "ein11", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein12": {"name": "ein12", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein13": {"name": "ein13", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein14": {"name": "ein14", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein15": {"name": "ein15", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein16": {"name": "ein16", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein17": {"name": "ein17", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein18": {"name": "ein18", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein19": {"name": "ein19", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein20": {"name": "ein20", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein21": {"name": "ein21", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein22": {"name": "ein22", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein23": {"name": "ein23", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein24": {"name": "ein24", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein25": {"name": "ein25", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein26": {"name": "ein26", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein27": {"name": "ein27", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein28": {"name": "ein28", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein29": {"name": "ein29", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein30": {"name": "ein30", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein31": {"name": "ein31", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein32": {"name": "ein32", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein33": {"name": "ein33", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein34": {"name": "ein34", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein35": {"name": "ein35", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein36": {"name": "ein36", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein37": {"name": "ein37", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein38": {"name": "ein38", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein39": {"name": "ein39", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ein40": {"name": "ein40", "description": "Time/measurement unit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "falgk": {"name": "falgk", "description": "Case group catalog", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "falgr": {"name": "falgr", "description": "Case group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag1": {"name": "flag1", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag2": {"name": "flag2", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag3": {"name": "flag3", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag4": {"name": "flag4", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flaga": {"name": "flaga", "description": "General flag", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grpvl": {"name": "grpvl", "description": "Grouping value for personnel assignments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "histo": {"name": "histo", "description": "Historical record flag", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind01": {"name": "ind01", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind02": {"name": "ind02", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind03": {"name": "ind03", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind04": {"name": "ind04", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind05": {"name": "ind05", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind06": {"name": "ind06", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind07": {"name": "ind07", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind08": {"name": "ind08", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind09": {"name": "ind09", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind10": {"name": "ind10", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind11": {"name": "ind11", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind12": {"name": "ind12", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind13": {"name": "ind13", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind14": {"name": "ind14", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind15": {"name": "ind15", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind16": {"name": "ind16", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind17": {"name": "ind17", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind18": {"name": "ind18", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind19": {"name": "ind19", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind20": {"name": "ind20", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind21": {"name": "ind21", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind22": {"name": "ind22", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind23": {"name": "ind23", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind24": {"name": "ind24", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind25": {"name": "ind25", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind26": {"name": "ind26", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind27": {"name": "ind27", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind28": {"name": "ind28", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind29": {"name": "ind29", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind30": {"name": "ind30", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind31": {"name": "ind31", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind32": {"name": "ind32", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind33": {"name": "ind33", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind34": {"name": "ind34", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind35": {"name": "ind35", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind36": {"name": "ind36", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind37": {"name": "ind37", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind38": {"name": "ind38", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind39": {"name": "ind39", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ind40": {"name": "ind40", "description": "Indicator for indirect valuation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itbld": {"name": "itbld", "description": "Infotype screen control", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itxex": {"name": "itxex", "description": "Text exists for infotype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga01": {"name": "lga01", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga02": {"name": "lga02", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga03": {"name": "lga03", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga04": {"name": "lga04", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga05": {"name": "lga05", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga06": {"name": "lga06", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga07": {"name": "lga07", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga08": {"name": "lga08", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga09": {"name": "lga09", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga10": {"name": "lga10", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga11": {"name": "lga11", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga12": {"name": "lga12", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga13": {"name": "lga13", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga14": {"name": "lga14", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga15": {"name": "lga15", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga16": {"name": "lga16", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga17": {"name": "lga17", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga18": {"name": "lga18", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga19": {"name": "lga19", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga20": {"name": "lga20", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga21": {"name": "lga21", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga22": {"name": "lga22", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga23": {"name": "lga23", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga24": {"name": "lga24", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga25": {"name": "lga25", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga26": {"name": "lga26", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga27": {"name": "lga27", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga28": {"name": "lga28", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga29": {"name": "lga29", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga30": {"name": "lga30", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga31": {"name": "lga31", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga32": {"name": "lga32", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga33": {"name": "lga33", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga34": {"name": "lga34", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga35": {"name": "lga35", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga36": {"name": "lga36", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga37": {"name": "lga37", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga38": {"name": "lga38", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga39": {"name": "lga39", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lga40": {"name": "lga40", "description": "Wage type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk01": {"name": "opk01", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk02": {"name": "opk02", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk03": {"name": "opk03", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk04": {"name": "opk04", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk05": {"name": "opk05", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk06": {"name": "opk06", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk07": {"name": "opk07", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk08": {"name": "opk08", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk09": {"name": "opk09", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk10": {"name": "opk10", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk11": {"name": "opk11", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk12": {"name": "opk12", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk13": {"name": "opk13", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk14": {"name": "opk14", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk15": {"name": "opk15", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk16": {"name": "opk16", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk17": {"name": "opk17", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk18": {"name": "opk18", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk19": {"name": "opk19", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk20": {"name": "opk20", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk21": {"name": "opk21", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk22": {"name": "opk22", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk23": {"name": "opk23", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk24": {"name": "opk24", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk25": {"name": "opk25", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk26": {"name": "opk26", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk27": {"name": "opk27", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk28": {"name": "opk28", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk29": {"name": "opk29", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk30": {"name": "opk30", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk31": {"name": "opk31", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk32": {"name": "opk32", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk33": {"name": "opk33", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk34": {"name": "opk34", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk35": {"name": "opk35", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk36": {"name": "opk36", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk37": {"name": "opk37", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk38": {"name": "opk38", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk39": {"name": "opk39", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "opk40": {"name": "opk40", "description": "Operation indicator for wage types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ordex": {"name": "ordex", "description": "Confirmation fields exist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "orzst": {"name": "orzst", "description": "Cost of living allowance level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "partn": {"name": "partn", "description": "Partnership", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preas": {"name": "preas", "description": "Reason for changing master data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refex": {"name": "refex", "description": "Reference fields exist (primary/secondary costs)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese1": {"name": "rese1", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese2": {"name": "rese2", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stvor": {"name": "stvor", "description": "Date of next increase", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trfar": {"name": "trfar", "description": "Pay scale type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trfgb": {"name": "trfgb", "description": "Pay scale area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trfgr": {"name": "trfgr", "description": "Pay scale group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trfst": {"name": "trfst", "description": "Pay scale level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uname": {"name": "uname", "description": "Name of person who changed object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vglgb": {"name": "vglgb", "description": "Comparison pay scale area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vglgr": {"name": "vglgr", "description": "Comparison pay scale group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vglst": {"name": "vglst", "description": "Comparison pay scale level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vglsv": {"name": "vglsv", "description": "Date of next increase", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vglta": {"name": "vglta", "description": "Comparison pay scale type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "waers": {"name": "waers", "description": "Currency key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_pa0008_data", "created_at": 1689111437.358709}, "source.sap_source.sap.pa0031": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "pa0031", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.pa0031", "fqn": ["sap_source", "sap", "pa0031"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_pa0031_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "HR master record--infotype 0031 (Reference personnel numbers)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pernr": {"name": "pernr", "description": "Personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subty": {"name": "subty", "description": "Subtype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objps": {"name": "objps", "description": "Object information", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sprps": {"name": "sprps", "description": "Lock indicator for HR master data record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "begda": {"name": "begda", "description": "Start date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "endda": {"name": "endda", "description": "End date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seqnr": {"name": "seqnr", "description": "Number of infotype record with same key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aedtm": {"name": "aedtm", "description": "Changed on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag1": {"name": "flag1", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag2": {"name": "flag2", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag3": {"name": "flag3", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flag4": {"name": "flag4", "description": "Reserved field/unused field", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grpvl": {"name": "grpvl", "description": "Grouping value for personnel assignments", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "histo": {"name": "histo", "description": "Historical record flag", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itbld": {"name": "itbld", "description": "Infotype screen control", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "itxex": {"name": "itxex", "description": "Text exists for infotype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ordex": {"name": "ordex", "description": "Confirmation fields exist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preas": {"name": "preas", "description": "Reason for changing master data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refex": {"name": "refex", "description": "Reference fields exist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese1": {"name": "rese1", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rese2": {"name": "rese2", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp01": {"name": "rfp01", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp02": {"name": "rfp02", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp03": {"name": "rfp03", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp04": {"name": "rfp04", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp05": {"name": "rfp05", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp06": {"name": "rfp06", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp07": {"name": "rfp07", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp08": {"name": "rfp08", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp09": {"name": "rfp09", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp10": {"name": "rfp10", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp11": {"name": "rfp11", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp12": {"name": "rfp12", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp13": {"name": "rfp13", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp14": {"name": "rfp14", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp15": {"name": "rfp15", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp16": {"name": "rfp16", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp17": {"name": "rfp17", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp18": {"name": "rfp18", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp19": {"name": "rfp19", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rfp20": {"name": "rfp20", "description": "Reference personnel number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uname": {"name": "uname", "description": "Name of person who changed object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_pa0031_data", "created_at": 1689111437.358901}, "source.sap_source.sap.ska1": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "ska1", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.ska1", "fqn": ["sap_source", "sap", "ska1"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_ska1_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "G/L Account Master (Chart of Accounts)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ktopl": {"name": "ktopl", "description": "Chart of accounts", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "saknr": {"name": "saknr", "description": "G/L account number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bilkt": {"name": "bilkt", "description": "Group account number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gvtyp": {"name": "gvtyp", "description": "P&L statement account type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vbund": {"name": "vbund", "description": "Company id of tradiing partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xbilk": {"name": "xbilk", "description": "Indicator (account is a balance sheet account?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sakan": {"name": "sakan", "description": "G/L account number, significant length", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "erdat": {"name": "erdat", "description": "Date on which the record was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ernam": {"name": "ernam", "description": "Name of person who created the object", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ktoks": {"name": "ktoks", "description": "G/L account group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xloev": {"name": "xloev", "description": "Indicator (account marked for deletion?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xspea": {"name": "xspea", "description": "Indicator (account is blocked for creation?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xspeb": {"name": "xspeb", "description": "Indicator (Is account blocked for posting?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xspep": {"name": "xspep", "description": "Indicator (Account blocked for planning?)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "func_area": {"name": "func_area", "description": "Functional area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mustr": {"name": "mustr", "description": "Number of the sample account", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_ska1_data", "created_at": 1689111437.359031}, "source.sap_source.sap.t001": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "t001", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.t001", "fqn": ["sap_source", "sap", "t001"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_t001_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Company codes", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "waers": {"name": "waers", "description": "Currency key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "periv": {"name": "periv", "description": "Fiscal year variant", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ktopl": {"name": "ktopl", "description": "Chart of accounts", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bukrs": {"name": "bukrs", "description": "Company code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "land1": {"name": "land1", "description": "Country key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kkber": {"name": "kkber", "description": "Credit control area", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rcomp": {"name": "rcomp", "description": "Company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "butxt": {"name": "butxt", "description": "Name of company code or company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "spras": {"name": "spras", "description": "Language key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_t001_data", "created_at": 1689111437.3591459}, "source.sap_source.sap.t503": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "t503", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.t503", "fqn": ["sap_source", "sap", "t503"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_t503_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Employee group/subgroup", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "persg": {"name": "persg", "description": "Employee group", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "persk": {"name": "persk", "description": "Employee subgroup", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "abart": {"name": "abart", "description": "Employee subgroup grouping for personnel calculation rule", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "abtyp": {"name": "abtyp", "description": "Employee subgroup grouping for primary wage tpyes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "aksta": {"name": "aksta", "description": "Activity status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ansta": {"name": "ansta", "description": "Employment status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "antyp": {"name": "antyp", "description": "Employee category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "austa": {"name": "austa", "description": "Training status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "burkz": {"name": "burkz", "description": "Employee subgroup grouping for appraisal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inwid": {"name": "inwid", "description": "Participation in incentive wages", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "konty": {"name": "konty", "description": "Employee subgroup grouping for time quota types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "molga": {"name": "molga", "description": "Reserved field/unused field of length 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trfkz": {"name": "trfkz", "description": "ES grouping for collective agreement provision", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "typsz": {"name": "typsz", "description": "Single-character indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zeity": {"name": "zeity", "description": "Employee subgroup grouping for work schedules", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_t503_data", "created_at": 1689111437.359297}, "source.sap_source.sap.t880": {"database": "EC_DB", "schema": "sap_source_integration_tests", "name": "t880", "resource_type": "source", "package_name": "sap_source", "path": "models/src_sap.yml", "original_file_path": "models/src_sap.yml", "unique_id": "source.sap_source.sap.t880", "fqn": ["sap_source", "sap", "t880"], "source_name": "sap", "source_description": "", "loader": "fivetran", "identifier": "sap_t880_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Global company data (for KONS Ledger)", "columns": {"mandt": {"name": "mandt", "description": "Client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rcomp": {"name": "rcomp", "description": "Company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "City where company is located", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cntry": {"name": "cntry", "description": "Country of company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "curr": {"name": "curr", "description": "Local currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "glsip": {"name": "glsip", "description": "Write line items", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "indpo": {"name": "indpo", "description": "Read purchase order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "langu": {"name": "langu", "description": "Language key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lccomp": {"name": "lccomp", "description": "Consolidation company indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mclnt": {"name": "mclnt", "description": "Master data client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mcomp": {"name": "mcomp", "description": "Master data company code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "modcp": {"name": "modcp", "description": "Global company grouping code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name1": {"name": "name1", "description": "Company name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name2": {"name": "name2", "description": "Name of company 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pobox": {"name": "pobox", "description": "Post office box of the company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pstlc": {"name": "pstlc", "description": "Global company zip code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resta": {"name": "resta", "description": "Legal status of company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rform": {"name": "rform", "description": "Legal form of company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stret": {"name": "stret", "description": "Street address of the company", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "strt2": {"name": "strt2", "description": "Street of company 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zweig": {"name": "zweig", "description": "Industrial sector", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "EC_DB.sap_source_integration_tests.sap_t880_data", "created_at": 1689111437.359421}}, "macros": {"macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1041, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.117944, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.118607, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.118999, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.119943, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1201012, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1208131, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1212978, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many objects in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.121738, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.122026, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.122196, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1224132, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.122594, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.123043, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.123203, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1233459, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1237671, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.123931, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1243489, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1250932, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1252842, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1254919, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1257758, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.125877, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1261828, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1272619, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1275342, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1277618, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1299279, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1302662, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.13083, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.133227, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.133567, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1336699, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.136127, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.139273, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.139436, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.139772, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.140058, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.140225, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.140318, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1404119, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.140537, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1407151, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.140929, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1410758, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.141203, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.141361, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.142318, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.142495, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.142624, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.14275, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.142872, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.143202, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1435552, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.143842, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1442308, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.144503, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.147728, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.147887, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1480808, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1487439, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.148906, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.14908, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.150455, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.151981, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.155757, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.156037, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.156207, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1562948, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.156437, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.156547, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1567411, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.157658, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.15783, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1580648, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1584551, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.164238, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.166209, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1666508, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.167017, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.167391, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.167756, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1692202, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.169753, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.170388, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.170623, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.171417, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.176785, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.178305, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.178544, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.179424, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.179677, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.180272, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.180854, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.181841, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.18209, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.182267, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.182554, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.182751, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.183033, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.183212, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.183459, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.183639, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.183774, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.184052, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.189093, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1945238, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.195723, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1968682, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1976461, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.198824, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1989682, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.199488, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.199658, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.1998012, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(model['columns'])) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.200823, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.201167, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.201598, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.204283, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2050781, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.205249, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.205649, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.206243, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2067242, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.206916, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.20709, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.209731, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.210034, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.210241, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.211638, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.212039, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.212193, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2123609, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2127528, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.21589, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2202308, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.221073, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2213042, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.22175, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.221938, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.222058, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.222184, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2222888, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2224362, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.222543, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.222978, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2232041, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.224465, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.224937, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.225316, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.225903, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.226155, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2264261, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2268028, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.227047, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.227401, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.227675, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.227911, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.22844, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2297971, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.230413, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.230709, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.232395, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.233561, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2342908, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.234515, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2347379, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.234807, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.235116, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2352781, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2355258, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.235649, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.23588, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.235979, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2363038, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2364538, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.236673, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.236741, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.236984, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.237113, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.237383, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2375958, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.238228, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.238643, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2389948, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.239212, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.239522, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.239657, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2399192, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2400708, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.240302, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.240462, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.240701, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2408, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.241069, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.241212, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2414489, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.241548, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.242419, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.242555, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.242795, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.24294, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.243089, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2432268, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.24338, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.243545, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.243698, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2438369, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2439759, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2441092, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.244252, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2443898, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2446542, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.244776, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.245009, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.245107, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.245425, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.24568, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2458172, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2462919, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.246517, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.246733, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2470021, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.247124, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2474701, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2476978, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.247961, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.24809, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2485518, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.248746, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.248916, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.249095, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.249592, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.249744, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.249896, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2499971, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.250154, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.250238, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.250396, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.250666, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2511182, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.251251, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2513988, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2517781, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.254761, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.254924, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.255129, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.255401, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.255626, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.255917, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.256087, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.256303, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2564778, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.256626, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2568269, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.257097, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.257431, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2580822, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2584362, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.258614, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.258812, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.259252, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.259656, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2612932, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2614112, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.261569, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.261678, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2620218, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.262212, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2623098, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.262511, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.26276, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.263, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2631931, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.263413, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.264153, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.264338, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.26458, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2647989, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.265866, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2665431, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.26671, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2669098, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.267065, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.267306, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2677388, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.269066, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2693, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2694669, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.269612, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.269782, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.27002, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2702122, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.270498, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.270677, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.270831, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2727838, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2730181, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.273293, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2735019, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.273696, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2738628, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.274564, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.274883, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.275054, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.27537, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.27557, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.276096, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2763278, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2770162, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2785192, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.278668, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.279584, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.280428, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2809951, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.281492, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.28157, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.28207, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.282288, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.282655, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2829068, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.283242, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2836962, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.284163, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.28479, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.285092, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2854059, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.286399, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2876391, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.288534, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.289876, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.29053, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.290879, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.291564, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.292362, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.292773, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2931871, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.29374, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.294202, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.294694, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.295038, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.295627, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2963681, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.296915, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.297499, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.298003, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.298335, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2987149, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2991202, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.2997382, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.300499, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.301297, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.302124, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3027918, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.30362, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.304074, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.304351, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.307379, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.308893, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.30914, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.309454, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.309963, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.310268, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.310473, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.310783, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.310993, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3116212, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3124359, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.313109, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.313677, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3138921, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.314312, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3147268, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.31523, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.315514, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.315823, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.316441, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3173308, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.318072, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.318454, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.318628, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.319098, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.319965, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.320946, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.321399, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.321708, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.322808, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.324268, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.325462, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.32688, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.32715, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3272698, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.33009, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.33377, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.334107, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.334342, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.335059, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.335286, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3354728, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.335648, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3358011, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3359601, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3363059, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.33653, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.336869, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.337357, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3376598, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3379579, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.339503, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.339964, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.340802, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.341401, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3425379, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3439841, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.345064, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.345939, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.346466, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3472, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3479428, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.348472, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.348674, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3490849, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.349735, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.350204, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.350775, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.351259, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3513868, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.351508, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.351629, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.352095, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3528588, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3538501, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.35411, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3546581, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3554099, "supported_languages": null}, "macro.spark_utils.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3602931, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"name": "get_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.360948, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"name": "get_statistic_columns", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3618088, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"name": "spark_optimize_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3625002, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"name": "spark_vacuum_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.363168, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"name": "spark_analyze_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3641548, "supported_languages": null}, "macro.spark_utils.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "unique_id": "macro.spark_utils.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.364352, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"name": "spark__type_numeric", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "unique_id": "macro.spark_utils.spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.364455, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "unique_id": "macro.spark_utils.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.36709, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "unique_id": "macro.spark_utils.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3740978, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3742652, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"name": "spark__current_timestamp_in_utc", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.37434, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "unique_id": "macro.spark_utils.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3749251, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"name": "spark__get_relations_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.37642, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"name": "spark__get_relations_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.376745, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"name": "spark__get_tables_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.376998, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"name": "spark__get_tables_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.377252, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.377556, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"name": "default__assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.3777459, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "unique_id": "macro.spark_utils.spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.37794, "supported_languages": null}, "macro.sap_source.get_faglflexa_columns": {"name": "get_faglflexa_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_faglflexa_columns.sql", "original_file_path": "macros/get_faglflexa_columns.sql", "unique_id": "macro.sap_source.get_faglflexa_columns", "macro_sql": "{% macro get_faglflexa_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"activ\", \"datatype\": dbt.type_string()},\n    {\"name\": \"awtyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"belnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bschl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bstat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"budat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buzei\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cost_elem\", \"datatype\": dbt.type_string()},\n    {\"name\": \"docln\", \"datatype\": dbt.type_string()},\n    {\"name\": \"docnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"drcrk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gjahr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hsl\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"kokrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ksl\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"linetype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"logsys\", \"datatype\": dbt.type_string()},\n    {\"name\": \"msl\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"poper\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pprctr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"prctr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psegment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"racct\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rassc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rbukrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rbusa\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rclnt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rcntr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfarea\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rldnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rmvct\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rrcty\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rtcur\", \"datatype\": dbt.type_string()},\n    {\"name\": \"runit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rvers\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rwcur\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ryear\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sbusa\", \"datatype\": dbt.type_string()},\n    {\"name\": \"scntr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"segment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sfarea\", \"datatype\": dbt.type_string()},\n    {\"name\": \"timestamp\", \"datatype\": dbt.type_numeric(), \"alias\": \"faglflexa_timestamp\"},\n    {\"name\": \"tsl\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"usnam\", \"datatype\": dbt.type_string()},\n    {\"name\": \"wsl\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"xsplitmod\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zzspreg\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.383669, "supported_languages": null}, "macro.sap_source.get_pa0008_columns": {"name": "get_pa0008_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_pa0008_columns.sql", "original_file_path": "macros/get_pa0008_columns.sql", "unique_id": "macro.sap_source.get_pa0008_columns", "macro_sql": "{% macro get_pa0008_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"aedtm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ancur\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ansal\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz01\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz02\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz03\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz04\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz05\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz06\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz07\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz08\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz09\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz10\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz11\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz12\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz13\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz14\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz15\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz16\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz17\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz18\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz19\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz20\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz21\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz22\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz23\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz24\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz25\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz26\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz27\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz28\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz29\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz30\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz31\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz32\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz33\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz34\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz35\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz36\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz37\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz38\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz39\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"anz40\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"begda\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bet01\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet02\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet03\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet04\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet05\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet06\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet07\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet08\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet09\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet10\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet11\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet12\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet13\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet14\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet15\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet16\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet17\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet18\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet19\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet20\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet21\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet22\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet23\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet24\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet25\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet26\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet27\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet28\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet29\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet30\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet31\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet32\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet33\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet34\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet35\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet36\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet37\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet38\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet39\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bet40\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bsgrd\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"cpind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"divgv\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ein01\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein02\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein03\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein04\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein05\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein06\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein07\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein08\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein09\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein10\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein11\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein12\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein13\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein14\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein15\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein16\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein17\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein18\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein19\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein20\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein21\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein22\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein23\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein24\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein25\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein26\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein27\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein28\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein29\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein30\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein31\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein32\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein33\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein34\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein35\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein36\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein37\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein38\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein39\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ein40\", \"datatype\": dbt.type_string()},\n    {\"name\": \"endda\", \"datatype\": dbt.type_string()},\n    {\"name\": \"falgk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"falgr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flaga\", \"datatype\": dbt.type_string()},\n    {\"name\": \"grpvl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"histo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind01\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind02\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind03\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind04\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind05\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind06\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind07\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind08\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind09\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind10\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind11\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind12\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind13\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind14\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind15\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind16\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind17\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind18\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind19\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind20\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind21\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind22\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind23\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind24\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind25\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind26\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind27\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind28\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind29\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind30\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind31\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind32\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind33\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind34\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind35\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind36\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind37\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind38\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind39\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ind40\", \"datatype\": dbt.type_string()},\n    {\"name\": \"itbld\", \"datatype\": dbt.type_string()},\n    {\"name\": \"itxex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga01\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga02\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga03\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga04\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga05\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga06\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga07\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga08\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga09\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga10\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga11\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga12\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga13\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga14\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga15\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga16\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga17\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga18\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga19\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga20\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga21\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga22\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga23\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga24\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga25\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga26\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga27\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga28\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga29\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga30\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga31\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga32\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga33\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga34\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga35\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga36\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga37\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga38\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga39\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lga40\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mandt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"objps\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk01\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk02\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk03\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk04\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk05\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk06\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk07\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk08\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk09\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk10\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk11\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk12\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk13\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk14\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk15\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk16\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk17\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk18\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk19\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk20\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk21\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk22\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk23\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk24\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk25\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk26\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk27\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk28\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk29\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk30\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk31\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk32\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk33\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk34\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk35\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk36\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk37\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk38\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk39\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opk40\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ordex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"orzst\", \"datatype\": dbt.type_string()},\n    {\"name\": \"partn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pernr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"preas\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rese1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rese2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"seqnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sprps\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stvor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subty\", \"datatype\": dbt.type_string()},\n    {\"name\": \"trfar\", \"datatype\": dbt.type_string()},\n    {\"name\": \"trfgb\", \"datatype\": dbt.type_string()},\n    {\"name\": \"trfgr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"trfst\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vglgb\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vglgr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vglst\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vglsv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vglta\", \"datatype\": dbt.type_string()},\n    {\"name\": \"waers\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.4429922, "supported_languages": null}, "macro.sap_source.get_pa0001_columns": {"name": "get_pa0001_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_pa0001_columns.sql", "original_file_path": "macros/get_pa0001_columns.sql", "unique_id": "macro.sap_source.get_pa0001_columns", "macro_sql": "{% macro get_pa0001_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"abkrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"aedtm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ansvh\", \"datatype\": dbt.type_string()},\n    {\"name\": \"begda\", \"datatype\": dbt.type_string()},\n    {\"name\": \"btrtl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"budget_pd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bukrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ename\", \"datatype\": dbt.type_string()},\n    {\"name\": \"endda\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fistl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fkber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"geber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"grant_nbr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"grpvl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gsber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"histo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"itbld\", \"datatype\": dbt.type_string()},\n    {\"name\": \"itxex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"juper\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kokrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kostl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mandt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mstbr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"objps\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ordex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"orgeh\", \"datatype\": dbt.type_string()},\n    {\"name\": \"otype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pernr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"persg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"persk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"plans\", \"datatype\": dbt.type_string()},\n    {\"name\": \"preas\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rese1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rese2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sacha\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sachp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sachz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sbmod\", \"datatype\": dbt.type_string()},\n    {\"name\": \"seqnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sgmnt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sprps\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stell\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subty\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vdsk1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"werks\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.449297, "supported_languages": null}, "macro.sap_source.get_lfa1_columns": {"name": "get_lfa1_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_lfa1_columns.sql", "original_file_path": "macros/get_lfa1_columns.sql", "unique_id": "macro.sap_source.get_lfa1_columns", "macro_sql": "{% macro get_lfa1_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"actss\", \"datatype\": dbt.type_string()},\n    {\"name\": \"adrnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"alc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"anred\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bahns\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bbbnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bbsnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"begru\", \"datatype\": dbt.type_string()},\n    {\"name\": \"brsch\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bubkz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"carrier_conf\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cnae\", \"datatype\": dbt.type_string()},\n    {\"name\": \"comsize\", \"datatype\": dbt.type_string()},\n    {\"name\": \"confs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"crc_num\", \"datatype\": dbt.type_string()},\n    {\"name\": \"crtn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cvp_xblck\", \"datatype\": dbt.type_string()},\n    {\"name\": \"datlt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"decregpc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dlgrp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dtams\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dtaws\", \"datatype\": dbt.type_string()},\n    {\"name\": \"duefl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"emnfr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"erdat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ernam\", \"datatype\": dbt.type_string()},\n    {\"name\": \"esrnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiskn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fisku\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fityp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gbdat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gbort\", \"datatype\": dbt.type_string()},\n    {\"name\": \"icmstaxpay\", \"datatype\": dbt.type_string()},\n    {\"name\": \"indtyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ipisp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"j_1kfrepre\", \"datatype\": dbt.type_string()},\n    {\"name\": \"j_1kftbus\", \"datatype\": dbt.type_string()},\n    {\"name\": \"j_1kftind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"j_sc_capital\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"j_sc_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"konzs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kraus\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ktock\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ktokk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kunnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"land1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"legalnat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lfurl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lifnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lnrza\", \"datatype\": dbt.type_string()},\n    {\"name\": \"loevm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ltsna\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lzone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mandt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mcod1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mcod2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mcod3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"min_comp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"nodel\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ort01\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ort02\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pfach\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pfort\", \"datatype\": dbt.type_string()},\n    {\"name\": \"plkal\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pmt_office\", \"datatype\": dbt.type_string()},\n    {\"name\": \"podkzb\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ppa_relevant\", \"datatype\": dbt.type_string()},\n    {\"name\": \"profs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psofg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psohs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psois\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pson1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pson2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pson3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psost\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psotl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psovn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pstl2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pstlz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"qssys\", \"datatype\": dbt.type_string()},\n    {\"name\": \"qssysdat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"regio\", \"datatype\": dbt.type_string()},\n    {\"name\": \"regss\", \"datatype\": dbt.type_string()},\n    {\"name\": \"revdb\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rgdate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ric\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rne\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rnedate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"scacd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"scheduling_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sexkz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sfrgr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sortl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sperm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sperq\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sperr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sperz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"spras\", \"datatype\": dbt.type_string()},\n    {\"name\": \"staging_time\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"stcd1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stcd2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stcd3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stcd4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stcd5\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stcdt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stceg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stenr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stgdl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stkza\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stkzn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stkzu\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stras\", \"datatype\": dbt.type_string()},\n    {\"name\": \"submi_relevant\", \"datatype\": dbt.type_string()},\n    {\"name\": \"taxbs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tdt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"telbx\", \"datatype\": dbt.type_string()},\n    {\"name\": \"telf1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"telf2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"telfx\", \"datatype\": dbt.type_string()},\n    {\"name\": \"teltx\", \"datatype\": dbt.type_string()},\n    {\"name\": \"telx1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"term_li\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transport_chain\", \"datatype\": dbt.type_string()},\n    {\"name\": \"txjcd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uf\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uptim\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vbund\", \"datatype\": dbt.type_string()},\n    {\"name\": \"werkr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"werks\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xcpdk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xlfza\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xzemp\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.470475, "supported_languages": null}, "macro.sap_source.get_faglflext_columns": {"name": "get_faglflext_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_faglflext_columns.sql", "original_file_path": "macros/get_faglflext_columns.sql", "unique_id": "macro.sap_source.get_faglflext_columns", "macro_sql": "{% macro get_faglflext_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"activ\", \"datatype\": dbt.type_string()},\n    {\"name\": \"awtyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cost_elem\", \"datatype\": dbt.type_string()},\n    {\"name\": \"drcrk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hsl01\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl02\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl03\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl04\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl05\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl06\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl07\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl08\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl09\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl10\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl11\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl12\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl13\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl14\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl15\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hsl16\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hslvt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"kokrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ksl01\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl02\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl03\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl04\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl05\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl06\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl07\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl08\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl09\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl10\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl11\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl12\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl13\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl14\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl15\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ksl16\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"kslvt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"logsys\", \"datatype\": dbt.type_string()},\n    {\"name\": \"msl01\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl02\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl03\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl04\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl05\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl06\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl07\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl08\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl09\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl10\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl11\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl12\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl13\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl14\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl15\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"msl16\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"mslvt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"objnr00\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"objnr01\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"objnr02\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"objnr03\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"objnr04\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"objnr05\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"objnr06\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"objnr07\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"objnr08\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl01\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl02\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl03\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl04\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl05\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl06\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl07\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl08\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl09\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl10\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl11\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl12\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl13\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl14\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl15\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"osl16\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"oslvt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"pprctr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"prctr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psegment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"racct\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rassc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rbukrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rbusa\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rclnt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rcntr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfarea\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rldnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rmvct\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rpmax\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rrcty\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rtcur\", \"datatype\": dbt.type_string()},\n    {\"name\": \"runit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rvers\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ryear\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sbusa\", \"datatype\": dbt.type_string()},\n    {\"name\": \"scntr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"segment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sfarea\", \"datatype\": dbt.type_string()},\n    {\"name\": \"timestamp\", \"datatype\": dbt.type_numeric(), \"alias\": \"faglflext_timestamp\"},\n    {\"name\": \"tsl01\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl02\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl03\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl04\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl05\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl06\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl07\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl08\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl09\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl10\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl11\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl12\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl13\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl14\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl15\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tsl16\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tslvt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"zzspreg\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.489352, "supported_languages": null}, "macro.sap_source.get_pa0007_columns": {"name": "get_pa0007_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_pa0007_columns.sql", "original_file_path": "macros/get_pa0007_columns.sql", "unique_id": "macro.sap_source.get_pa0007_columns", "macro_sql": "{% macro get_pa0007_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"aedtm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"arbst\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"awtyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"begda\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dysch\", \"datatype\": dbt.type_string()},\n    {\"name\": \"empct\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"endda\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"grpvl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"histo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"itbld\", \"datatype\": dbt.type_string()},\n    {\"name\": \"itxex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"jrstd\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"kztim\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mandt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"maxja\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"maxmo\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"maxta\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"maxwo\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"minja\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"minmo\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"minta\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"minwo\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"mostd\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"objps\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ordex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pernr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"preas\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rese1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rese2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"schkz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"seqnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sprps\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subty\", \"datatype\": dbt.type_string()},\n    {\"name\": \"teilk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"wkwdy\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"wostd\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"wweek\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zterf\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.494666, "supported_languages": null}, "macro.sap_source.get_bseg_columns": {"name": "get_bseg_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_bseg_columns.sql", "original_file_path": "macros/get_bseg_columns.sql", "unique_id": "macro.sap_source.get_bseg_columns", "macro_sql": "{% macro get_bseg_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"abper\", \"datatype\": dbt.type_string()},\n    {\"name\": \"absbt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"agzei\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"altkt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"anbwa\", \"datatype\": dbt.type_string()},\n    {\"name\": \"anfae\", \"datatype\": dbt.type_string()},\n    {\"name\": \"anfbj\", \"datatype\": dbt.type_string()},\n    {\"name\": \"anfbn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"anfbu\", \"datatype\": dbt.type_string()},\n    {\"name\": \"anln1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"anln2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"aplzl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"aufnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"aufpl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"augbl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"augcp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"augdt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"auggj\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bdif2\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bdif3\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bdiff\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"belnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bewar\", \"datatype\": dbt.type_string()},\n    {\"name\": \"blnbt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"blnkz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"blnpz\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bonfb\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bpmng\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bprme\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bschl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"btype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bualt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"budget_pd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bukrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bupla\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bustw\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buzei\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buzid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bvtyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bwkey\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bwtar\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bzdat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ccbtc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cession_kz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dabrz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"depot\", \"datatype\": dbt.type_string()},\n    {\"name\": \"diekz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"disbj\", \"datatype\": dbt.type_string()},\n    {\"name\": \"disbn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"disbz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dmb21\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"dmb22\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"dmb23\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"dmb31\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"dmb32\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"dmb33\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"dmbe2\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"dmbe3\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"dmbt1\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"dmbt2\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"dmbt3\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"dmbtr\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"docln\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dtws1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dtws2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dtws3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dtws4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ebeln\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ebelp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"egbld\", \"datatype\": dbt.type_string()},\n    {\"name\": \"eglld\", \"datatype\": dbt.type_string()},\n    {\"name\": \"egrup\", \"datatype\": dbt.type_string()},\n    {\"name\": \"elikz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"empfb\", \"datatype\": dbt.type_string()},\n    {\"name\": \"erfme\", \"datatype\": dbt.type_string()},\n    {\"name\": \"erfmg\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"esrnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"esrpz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"esrre\", \"datatype\": dbt.type_string()},\n    {\"name\": \"eten2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"etype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fastpay\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fdgrp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fdlev\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fdtag\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fdwbt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"filkd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fipos\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fistl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fkber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fkber_long\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fkont\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fmfgus_key\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fmxdocln\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fmxdocnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fmxyear\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fmxzekkn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fwbas\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"fwzuz\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"gbetr\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"geber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gityp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gjahr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"glupm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gmvkz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"grant_nbr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gricd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"grirg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gsber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gvtyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hbkid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hkont\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hktid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hrkft\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hwbas\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hwmet\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hwzuz\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hzuon\", \"datatype\": dbt.type_string()},\n    {\"name\": \"idxsp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ignr_ivref\", \"datatype\": dbt.type_string()},\n    {\"name\": \"imkey\", \"datatype\": dbt.type_string()},\n    {\"name\": \"intreno\", \"datatype\": dbt.type_string()},\n    {\"name\": \"j_1tpbupl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kblnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kblpos\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kidno\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kkber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"klibt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"koart\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kokrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kontl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kontt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kostl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kstar\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kstrg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ktosl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kunnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kursr\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"kzbtr\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"landl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lifnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"linfv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lnran\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lokkt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lstar\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lzbkz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"maber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"madat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mandt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mansp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"manst\", \"datatype\": dbt.type_string()},\n    {\"name\": \"matnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"measure\", \"datatype\": dbt.type_string()},\n    {\"name\": \"meins\", \"datatype\": dbt.type_string()},\n    {\"name\": \"menge\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"mndid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mschl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mwart\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mwsk1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mwsk2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mwsk3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mwskz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mwst2\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"mwst3\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"mwsts\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"navfw\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"navh2\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"navh3\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"navhw\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"nebtr\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"nplnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"nprei\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"obzei\", \"datatype\": dbt.type_string()},\n    {\"name\": \"paobjnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pargb\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pasubnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pays_prov\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pays_tran\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pbudget_pd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"peinh\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"pendays\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"penfc\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"penlc1\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"penlc2\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"penlc3\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"penrc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pernr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"perop_beg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"perop_end\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pfkber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pgeber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pgrant_nbr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"popts\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"posn2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ppa_ex_ind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ppdif2\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ppdif3\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ppdiff\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"pprct\", \"datatype\": dbt.type_string()},\n    {\"name\": \"prctr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"prodper\", \"datatype\": dbt.type_string()},\n    {\"name\": \"projk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"projn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"prznr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psalt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psegment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pswbt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"pswsl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pyamt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"pycur\", \"datatype\": dbt.type_string()},\n    {\"name\": \"qbshb\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"qsfbt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"qsshb\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"qsskz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"qsznr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rdif2\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"rdif3\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"rdiff\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"re_account\", \"datatype\": dbt.type_string()},\n    {\"name\": \"re_bukrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rebzg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rebzj\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rebzt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rebzz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"recid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"recrf\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rewrt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"rewwr\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"rfzei\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rpacq\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rstgr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ryacq\", \"datatype\": dbt.type_string()},\n    {\"name\": \"saknr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"samnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sctax\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"secco\", \"datatype\": dbt.type_string()},\n    {\"name\": \"segment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sgtxt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shkzg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shzuz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"skfbt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"sknt2\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"sknt3\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"sknto\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"spgrc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"spgrg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"spgrm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"spgrp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"spgrq\", \"datatype\": dbt.type_string()},\n    {\"name\": \"spgrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"spgrt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"spgrv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"squan\", \"datatype\": dbt.type_string()},\n    {\"name\": \"srtype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stbuk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stceg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stekz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sttax\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"taxps\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tbtkz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"txbfw\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"txbh2\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"txbh3\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"txbhw\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"txdat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"txgrp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"txjcd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"umsks\", \"datatype\": dbt.type_string()},\n    {\"name\": \"umskz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uzawe\", \"datatype\": dbt.type_string()},\n    {\"name\": \"valut\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vbel2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vbeln\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vbewa\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vbund\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vertn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vertt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vorgn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vprsv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vptnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vrsdt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vrskz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"werks\", \"datatype\": dbt.type_string()},\n    {\"name\": \"wmwst\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"wrbt1\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"wrbt2\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"wrbt3\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"wrbtr\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"wskto\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"wverw\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xanet\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xauto\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xbilk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xcpdd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xegdr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xfakt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xfrge_bseg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xhkom\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xhres\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xinve\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xkres\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xlgclr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xncop\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xnegp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xopvw\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xpanz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xpypr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xragl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xref1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xref2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xref3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xsauf\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xserg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xskrl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xskst\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xspro\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xuman\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xumsw\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xzahl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zbd1p\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"zbd1t\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"zbd2p\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"zbd2t\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"zbd3t\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"zbfix\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zekkn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zfbdt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zinkz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zlsch\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zlspr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zolld\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zollt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zterm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zumsk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zuonr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zzbuspartn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zzchan\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zzlob\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zzloca\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zzproduct\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zzregion\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zzspreg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zzstate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zzuserfld1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zzuserfld2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zzuserfld3\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.605366, "supported_languages": null}, "macro.sap_source.get_t880_columns": {"name": "get_t880_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_t880_columns.sql", "original_file_path": "macros/get_t880_columns.sql", "unique_id": "macro.sap_source.get_t880_columns", "macro_sql": "{% macro get_t880_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cntry\", \"datatype\": dbt.type_string()},\n    {\"name\": \"curr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"glsip\", \"datatype\": dbt.type_string()},\n    {\"name\": \"indpo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"langu\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lccomp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mandt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mclnt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mcomp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"modcp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pobox\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pstlc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rcomp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"resta\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rform\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stret\", \"datatype\": dbt.type_string()},\n    {\"name\": \"strt2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zweig\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.6082711, "supported_languages": null}, "macro.sap_source.get_mara_columns": {"name": "get_mara_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_mara_columns.sql", "original_file_path": "macros/get_mara_columns.sql", "unique_id": "macro.sap_source.get_mara_columns", "macro_sql": "{% macro get_mara_columns() %}\n\n{% set columns = [\n    {\"name\": \"_accgo_assgd_uom\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_bev1_luldegrp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_bev1_luleinh\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_bev1_nestruccat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_dsd_sl_toltyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_dsd_sv_cnt_grp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_dsd_vc_group\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_sttpec_country_ref\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_sttpec_prdcat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_sttpec_sertype\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_sttpec_syncact\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_sttpec_syncchg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_sttpec_synctime\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_vso_r_bot_ind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_kzgvh_ind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_no_p_gvh\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_pal_b_ht\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_vso_r_pal_ind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_pal_min_h\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_vso_r_pal_ovr_d\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_vso_r_pal_ovr_w\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_vso_r_quan_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_stack_ind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_stack_no\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_tilt_ind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_tol_b_ht\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_vso_r_top_ind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"adprof\", \"datatype\": dbt.type_string()},\n    {\"name\": \"adspc_spc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"aeklk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"aenam\", \"datatype\": dbt.type_string()},\n    {\"name\": \"aeszn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"allow_pmat_igno\", \"datatype\": dbt.type_string()},\n    {\"name\": \"animal_origin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"anp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"attyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bbtyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"begru\", \"datatype\": dbt.type_string()},\n    {\"name\": \"behvo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bflme\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bismt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"blanz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"blatt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bmatn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"brand_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"breit\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"brgew\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"bstat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bstme\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bwscl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bwvor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cadkz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"care_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cmeth\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cmrel\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cobjid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"color\", \"datatype\": dbt.type_string()},\n    {\"name\": \"color_atinn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"commodity\", \"datatype\": dbt.type_string()},\n    {\"name\": \"compl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cotype\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cuobf\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cwqproc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cwqrel\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cwqtolgr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"datab\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dg_pack_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"disst\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ean11\", \"datatype\": dbt.type_string()},\n    {\"name\": \"eannr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ekwsl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"entar\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ergei\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ergew\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"ernam\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ersda\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ervoe\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ervol\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"etiag\", \"datatype\": dbt.type_string()},\n    {\"name\": \"etiar\", \"datatype\": dbt.type_string()},\n    {\"name\": \"etifo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"extwg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fashgrd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ferth\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiber_code1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiber_code2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiber_code3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiber_code4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiber_code5\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiber_part1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiber_part2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiber_part3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiber_part4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiber_part5\", \"datatype\": dbt.type_string()},\n    {\"name\": \"formt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"free_char\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fsh_mg_at1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fsh_mg_at2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fsh_mg_at3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fsh_sc_mid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fsh_seaim\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fsh_sealv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fuelg\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"gds_relevant\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gennr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gewei\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gewto\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"groes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gtin_variant\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hazmat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"herkl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hndlcode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hoehe\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"hutyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hutyp_dflt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ihivi\", \"datatype\": dbt.type_string()},\n    {\"name\": \"iloos\", \"datatype\": dbt.type_string()},\n    {\"name\": \"imatn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"inhal\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"inhbr\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"inhme\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ipmipproduct\", \"datatype\": dbt.type_string()},\n    {\"name\": \"iprkz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kosch\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kunnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kzeff\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kzgvh\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kzkfg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kzkup\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kznfm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kzrev\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kzumw\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kzwsm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"labor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"laeda\", \"datatype\": dbt.type_string()},\n    {\"name\": \"laeng\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"liqdt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"loglev_reto\", \"datatype\": dbt.type_string()},\n    {\"name\": \"logunit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lvorm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"magrv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mandt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"matfi\", \"datatype\": dbt.type_string()},\n    {\"name\": \"matkl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"matnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"maxb\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"maxc\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"maxc_tol\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"maxdim_uom\", \"datatype\": dbt.type_string()},\n    {\"name\": \"maxh\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"maxl\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"mbrsh\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mcond\", \"datatype\": dbt.type_string()},\n    {\"name\": \"meabm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"medium\", \"datatype\": dbt.type_string()},\n    {\"name\": \"meins\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mfrgr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mfrnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mfrpn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mhdhb\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"mhdlp\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"mhdrz\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"mlgut\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mprof\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mstae\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mstav\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mstde\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mstdv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mtart\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mtpos_mara\", \"datatype\": dbt.type_string()},\n    {\"name\": \"normt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"nrfhg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"nsnid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ntgew\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"numtp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"oigroupnam\", \"datatype\": dbt.type_string()},\n    {\"name\": \"oihmtxgr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"oitrind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"packcode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"picnum\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pilferable\", \"datatype\": dbt.type_string()},\n    {\"name\": \"plgtp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pmata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"prdha\", \"datatype\": dbt.type_string()},\n    {\"name\": \"profl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"przus\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ps_smartform\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psm_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pstat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"qgrp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"qmpur\", \"datatype\": dbt.type_string()},\n    {\"name\": \"qqtime\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"qqtimeuom\", \"datatype\": dbt.type_string()},\n    {\"name\": \"raube\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rbnrm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rdmhd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"retdelc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rmatp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"saisj\", \"datatype\": dbt.type_string()},\n    {\"name\": \"saiso\", \"datatype\": dbt.type_string()},\n    {\"name\": \"saity\", \"datatype\": dbt.type_string()},\n    {\"name\": \"satnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"serial\", \"datatype\": dbt.type_string()},\n    {\"name\": \"serlv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sgt_covsa\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sgt_csgr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sgt_rel\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sgt_scope\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sgt_stat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"size1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"size1_atinn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"size2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"size2_atinn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sled_bbd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"spart\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sprof\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stfak\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"stoff\", \"datatype\": dbt.type_string()},\n    {\"name\": \"taklv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tare_var\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tempb\", \"datatype\": dbt.type_string()},\n    {\"name\": \"textile_comp_ind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tragr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vabme\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vhart\", \"datatype\": dbt.type_string()},\n    {\"name\": \"voleh\", \"datatype\": dbt.type_string()},\n    {\"name\": \"volto\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"volum\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"vpreh\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"vpsta\", \"datatype\": dbt.type_string()},\n    {\"name\": \"weora\", \"datatype\": dbt.type_string()},\n    {\"name\": \"wesch\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"whmatgr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"whstc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"wrkst\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xchpf\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xgchp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zeiar\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zeifo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zeinr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zeivr\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_numeric", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.655736, "supported_languages": null}, "macro.sap_source.get_pa0000_columns": {"name": "get_pa0000_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_pa0000_columns.sql", "original_file_path": "macros/get_pa0000_columns.sql", "unique_id": "macro.sap_source.get_pa0000_columns", "macro_sql": "{% macro get_pa0000_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"aedtm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"begda\", \"datatype\": dbt.type_string()},\n    {\"name\": \"endda\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"grpvl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"histo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"itbld\", \"datatype\": dbt.type_string()},\n    {\"name\": \"itxex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mandt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"massg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"massn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"objps\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ordex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pernr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"preas\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rese1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rese2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"seqnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sprps\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stat1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stat2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stat3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subty\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uname\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.6592379, "supported_languages": null}, "macro.sap_source.get_ska1_columns": {"name": "get_ska1_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_ska1_columns.sql", "original_file_path": "macros/get_ska1_columns.sql", "unique_id": "macro.sap_source.get_ska1_columns", "macro_sql": "{% macro get_ska1_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"bilkt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"erdat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ernam\", \"datatype\": dbt.type_string()},\n    {\"name\": \"func_area\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gvtyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ktoks\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ktopl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mandt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mcod1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mustr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sakan\", \"datatype\": dbt.type_string()},\n    {\"name\": \"saknr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vbund\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xbilk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xloev\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xspea\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xspeb\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xspep\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.66148, "supported_languages": null}, "macro.sap_source.get_kna1_columns": {"name": "get_kna1_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_kna1_columns.sql", "original_file_path": "macros/get_kna1_columns.sql", "unique_id": "macro.sap_source.get_kna1_columns", "macro_sql": "{% macro get_kna1_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_vso_r_dpoint\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_i_no_lyr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_load_pref\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_matpal\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_one_mat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_one_sort\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_pal_ul\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_palhgt\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_vso_r_pk_mat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_vso_r_uld_side\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_xlso_client\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_xlso_customer\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_xlso_partner\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_xlso_pref_pay\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_xlso_sysid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"abrvw\", \"datatype\": dbt.type_string()},\n    {\"name\": \"adrnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"alc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"anred\", \"datatype\": dbt.type_string()},\n    {\"name\": \"aufsd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bahne\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bahns\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bbbnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bbsnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"begru\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bran1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bran2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bran3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bran4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bran5\", \"datatype\": dbt.type_string()},\n    {\"name\": \"brsch\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bubkz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cassd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ccc01\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ccc02\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ccc03\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ccc04\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cfopc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cityc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"civve\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cnae\", \"datatype\": dbt.type_string()},\n    {\"name\": \"comsize\", \"datatype\": dbt.type_string()},\n    {\"name\": \"confs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"counc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"crtn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cvp_xblck\", \"datatype\": dbt.type_string()},\n    {\"name\": \"datlt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dear1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dear2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dear3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dear4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dear5\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dear6\", \"datatype\": dbt.type_string()},\n    {\"name\": \"decregpc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dtams\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dtaws\", \"datatype\": dbt.type_string()},\n    {\"name\": \"duefl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"duns\", \"datatype\": dbt.type_string()},\n    {\"name\": \"duns4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ekont\", \"datatype\": dbt.type_string()},\n    {\"name\": \"erdat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ernam\", \"datatype\": dbt.type_string()},\n    {\"name\": \"etikg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exabl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"faksd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fee_schedule\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fiskn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fityp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gform\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hzuor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"icmstaxpay\", \"datatype\": dbt.type_string()},\n    {\"name\": \"indtyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"inspatdebi\", \"datatype\": dbt.type_string()},\n    {\"name\": \"inspbydebi\", \"datatype\": dbt.type_string()},\n    {\"name\": \"j_1kfrepre\", \"datatype\": dbt.type_string()},\n    {\"name\": \"j_1kftbus\", \"datatype\": dbt.type_string()},\n    {\"name\": \"j_1kftind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"jmjah\", \"datatype\": dbt.type_string()},\n    {\"name\": \"jmzah\", \"datatype\": dbt.type_string()},\n    {\"name\": \"katr1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"katr10\", \"datatype\": dbt.type_string()},\n    {\"name\": \"katr2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"katr3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"katr4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"katr5\", \"datatype\": dbt.type_string()},\n    {\"name\": \"katr6\", \"datatype\": dbt.type_string()},\n    {\"name\": \"katr7\", \"datatype\": dbt.type_string()},\n    {\"name\": \"katr8\", \"datatype\": dbt.type_string()},\n    {\"name\": \"katr9\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kdkg1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kdkg2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kdkg3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kdkg4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kdkg5\", \"datatype\": dbt.type_string()},\n    {\"name\": \"knazk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"knrza\", \"datatype\": dbt.type_string()},\n    {\"name\": \"knurl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"konzs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ktocd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ktokd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kukla\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kunnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"land1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"legalnat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lifnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lifsd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"locco\", \"datatype\": dbt.type_string()},\n    {\"name\": \"loevm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lzone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mandt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mcod1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mcod2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mcod3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"milve\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"niels\", \"datatype\": dbt.type_string()},\n    {\"name\": \"nodel\", \"datatype\": dbt.type_string()},\n    {\"name\": \"oid_poreqd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"oidrc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"oipbl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ort01\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ort02\", \"datatype\": dbt.type_string()},\n    {\"name\": \"periv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pfach\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pfort\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pmt_office\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psofg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psohs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psois\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pson1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pson2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pson3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psoo1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psoo2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psoo3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psoo4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psoo5\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psost\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psotl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psovn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pstl2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pstlz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"regio\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rgdate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ric\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rne\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rnedate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rpmkr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sortl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sperr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sperz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"spras\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stcd1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stcd2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stcd3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stcd4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stcd5\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stcdt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stceg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stkza\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stkzn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stkzu\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stras\", \"datatype\": dbt.type_string()},\n    {\"name\": \"suframa\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tdt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"telbx\", \"datatype\": dbt.type_string()},\n    {\"name\": \"telf1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"telf2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"telfx\", \"datatype\": dbt.type_string()},\n    {\"name\": \"teltx\", \"datatype\": dbt.type_string()},\n    {\"name\": \"telx1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"txjcd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"txlw1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"txlw2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uf\", \"datatype\": dbt.type_string()},\n    {\"name\": \"umjah\", \"datatype\": dbt.type_string()},\n    {\"name\": \"umsa1\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"umsat\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"updat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uptim\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uwaer\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vbund\", \"datatype\": dbt.type_string()},\n    {\"name\": \"werks\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xcpdk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xicms\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xknza\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xsubt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xxipi\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xzemp\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.6954272, "supported_languages": null}, "macro.sap_source.get_t503_columns": {"name": "get_t503_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_t503_columns.sql", "original_file_path": "macros/get_t503_columns.sql", "unique_id": "macro.sap_source.get_t503_columns", "macro_sql": "{% macro get_t503_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"abart\", \"datatype\": dbt.type_string()},\n    {\"name\": \"abtyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"aksta\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ansta\", \"datatype\": dbt.type_string()},\n    {\"name\": \"antyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"austa\", \"datatype\": dbt.type_string()},\n    {\"name\": \"burkz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"inwid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"konty\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mandt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"molga\", \"datatype\": dbt.type_string()},\n    {\"name\": \"persg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"persk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"trfkz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"typsz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zeity\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.697458, "supported_languages": null}, "macro.sap_source.get_bkpf_columns": {"name": "get_bkpf_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_bkpf_columns.sql", "original_file_path": "macros/get_bkpf_columns.sql", "unique_id": "macro.sap_source.get_bkpf_columns", "macro_sql": "{% macro get_bkpf_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_sapf15_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"adisc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"aedat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"arcid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ausbk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"awkey\", \"datatype\": dbt.type_string()},\n    {\"name\": \"awsys\", \"datatype\": dbt.type_string()},\n    {\"name\": \"awtyp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"basw2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"basw3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"batch\", \"datatype\": dbt.type_string()},\n    {\"name\": \"belnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bktxt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"blart\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bldat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"blind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"brnch\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bstat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"budat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bukrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bvorg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cash_alloc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ccins\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ccnum\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cpudt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cputm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ctxkrs\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"curt2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"curt3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dbblg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"doccat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dokid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"duefl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exclude_flag\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fikrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fm_umart\", \"datatype\": dbt.type_string()},\n    {\"name\": \"follow_on\", \"datatype\": dbt.type_string()},\n    {\"name\": \"frath\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"gjahr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"glvor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"grpid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hwae2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hwae3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hwaer\", \"datatype\": dbt.type_string()},\n    {\"name\": \"iblar\", \"datatype\": dbt.type_string()},\n    {\"name\": \"intdate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"intform\", \"datatype\": dbt.type_string()},\n    {\"name\": \"knumv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kur2x\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"kur3x\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"kurs2\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"kurs3\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"kursf\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"kurst\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kursx\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"kuty2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kuty3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kzkrs\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"kzwrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ldgrp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lotkz\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mandt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"monat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"numpg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"offset_refer_dat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"offset_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"penrc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ppnam\", \"datatype\": dbt.type_string()},\n    {\"name\": \"propmano\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psoak\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psobt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psodt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psofn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psoks\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psosg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psotm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psoty\", \"datatype\": dbt.type_string()},\n    {\"name\": \"psozl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reindat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"resubmission\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rldnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sampled\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ssblk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stblg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stgrd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stjah\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stodt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subset\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tcode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"txkrs\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"umrd2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"umrd3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"upddt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"usnam\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vatdate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"waers\", \"datatype\": dbt.type_string()},\n    {\"name\": \"wwert\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xblnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xblnr_alt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xmca\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xmwst\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xnetb\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xref1_hd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xref2_hd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xreorg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xreversal\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xrueb\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xsnet\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xsplit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xstov\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xusvr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xwvof\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.713166, "supported_languages": null}, "macro.sap_source.get_t001_columns": {"name": "get_t001_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_t001_columns.sql", "original_file_path": "macros/get_t001_columns.sql", "unique_id": "macro.sap_source.get_t001_columns", "macro_sql": "{% macro get_t001_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"adrnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bapovar\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bukrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bukrs_glob\", \"datatype\": dbt.type_string()},\n    {\"name\": \"butxt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buvar\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dkweg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dtamtc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dtaxr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dtprov\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dttaxc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dttdsp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ebukr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fdbuk\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fikrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fm_derive_acc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fmhrdate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fstva\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fstvare\", \"datatype\": dbt.type_string()},\n    {\"name\": \"impda\", \"datatype\": dbt.type_string()},\n    {\"name\": \"infmt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kkber\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kokfi\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kopim\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ktop2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ktopl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"land1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mandt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mregl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mwska\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mwskv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"offsacct\", \"datatype\": dbt.type_string()},\n    {\"name\": \"opvar\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ort01\", \"datatype\": dbt.type_string()},\n    {\"name\": \"periv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pp_pdate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pst_per_var\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rcomp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"spras\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stceg\", \"datatype\": dbt.type_string()},\n    {\"name\": \"surccm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"txjcd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"txkrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"umkrs\", \"datatype\": dbt.type_string()},\n    {\"name\": \"waabw\", \"datatype\": dbt.type_string()},\n    {\"name\": \"waers\", \"datatype\": dbt.type_string()},\n    {\"name\": \"wfvar\", \"datatype\": dbt.type_string()},\n    {\"name\": \"wt_newwt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xbbba\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xbbbe\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xbbbf\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xbbko\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xbbsc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xcession\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xcos\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xcovr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xeink\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xextb\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xfdis\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xfdmm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xfdsd\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xfmca\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xfmcb\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xfmco\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xgjrv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xgsbe\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xjvaa\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xkdft\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xkkbi\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xmwsn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xnegp\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xprod\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xskfn\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xslta\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xsplt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xstdt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xvalv\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xvatdate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"xvvwa\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.723053, "supported_languages": null}, "macro.sap_source.get_pa0031_columns": {"name": "get_pa0031_columns", "resource_type": "macro", "package_name": "sap_source", "path": "macros/get_pa0031_columns.sql", "original_file_path": "macros/get_pa0031_columns.sql", "unique_id": "macro.sap_source.get_pa0031_columns", "macro_sql": "{% macro get_pa0031_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_rowid\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"aedtm\", \"datatype\": dbt.type_string()},\n    {\"name\": \"begda\", \"datatype\": dbt.type_string()},\n    {\"name\": \"endda\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag3\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flag4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"grpvl\", \"datatype\": dbt.type_string()},\n    {\"name\": \"histo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"itbld\", \"datatype\": dbt.type_string()},\n    {\"name\": \"itxex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"mandt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"objps\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ordex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pernr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"preas\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refex\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rese1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rese2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp01\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp02\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp03\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp04\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp05\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp06\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp07\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp08\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp09\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp10\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp11\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp12\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp13\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp14\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp15\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp16\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp17\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp18\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp19\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rfp20\", \"datatype\": dbt.type_string()},\n    {\"name\": \"seqnr\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sprps\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subty\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uname\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7280152, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.728415, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.729253, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.729414, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.729568, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7297149, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7298508, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.729999, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.730709, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.731296, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.snowflake__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.732417, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.732668, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.732896, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.733119, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.733341, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.733581, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.733817, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.snowflake__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.734109, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7342, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7343612, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.734454, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.734777, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.735393, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.736316, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.736833, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7375329, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.snowflake__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.737967, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.738086, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7382, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.738313, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.738441, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7409961, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.741143, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.74129, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.741432, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.742978, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.snowflake__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7437718, "supported_languages": null}, "macro.fivetran_utils.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.743895, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.744134, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.744389, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7445052, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.744616, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.744725, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.745166, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.745674, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.746125, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.746319, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.746531, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.746782, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7478662, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.75146, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.751795, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.75213, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7534862, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7539709, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.snowflake__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7544708, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.754611, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7547479, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.754899, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.755035, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.755174, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.755787, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.756641, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.757261, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.757407, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.757548, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7576902, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.757837, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.75805, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.snowflake__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.758274, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.758365, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.758452, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.759091, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7622862, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.766576, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7678652, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.snowflake__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.76818, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.768286, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.768384, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.768476, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.768563, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.768799, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.768893, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.768984, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.7693372, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689111435.769686, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"seed.sap_source_integration_tests.sap_pa0031_data": [], "seed.sap_source_integration_tests.sap_mara_data": [], "seed.sap_source_integration_tests.sap_bseg_data": [], "seed.sap_source_integration_tests.sap_t880_data": [], "seed.sap_source_integration_tests.sap_ska1_data": [], "seed.sap_source_integration_tests.sap_lfa1_data": [], "seed.sap_source_integration_tests.sap_pa0008_data": [], "seed.sap_source_integration_tests.sap_t503_data": [], "seed.sap_source_integration_tests.sap_pa0007_data": [], "seed.sap_source_integration_tests.sap_faglflexa_data": [], "seed.sap_source_integration_tests.sap_pa0001_data": [], "seed.sap_source_integration_tests.sap_pa0000_data": [], "seed.sap_source_integration_tests.sap_bkpf_data": [], "seed.sap_source_integration_tests.sap_kna1_data": [], "seed.sap_source_integration_tests.sap_faglflext_data": [], "seed.sap_source_integration_tests.sap_t001_data": [], "model.sap_source.stg_sap__lfa1": ["model.sap_source.stg_sap__lfa1_tmp", "model.sap_source.stg_sap__lfa1_tmp"], "model.sap_source.stg_sap__bkpf": ["model.sap_source.stg_sap__bkpf_tmp", "model.sap_source.stg_sap__bkpf_tmp"], "model.sap_source.stg_sap__kna1": ["model.sap_source.stg_sap__kna1_tmp", "model.sap_source.stg_sap__kna1_tmp"], "model.sap_source.stg_sap__pa0001": ["model.sap_source.stg_sap__pa0001_tmp", "model.sap_source.stg_sap__pa0001_tmp"], "model.sap_source.stg_sap__ska1": ["model.sap_source.stg_sap__ska1_tmp", "model.sap_source.stg_sap__ska1_tmp"], "model.sap_source.stg_sap__pa0000": ["model.sap_source.stg_sap__pa0000_tmp", "model.sap_source.stg_sap__pa0000_tmp"], "model.sap_source.stg_sap__faglflexa": ["model.sap_source.stg_sap__faglflexa_tmp", "model.sap_source.stg_sap__faglflexa_tmp"], "model.sap_source.stg_sap__faglflext": ["model.sap_source.stg_sap__faglflext_tmp", "model.sap_source.stg_sap__faglflext_tmp"], "model.sap_source.stg_sap__pa0007": ["model.sap_source.stg_sap__pa0007_tmp", "model.sap_source.stg_sap__pa0007_tmp"], "model.sap_source.stg_sap__bseg": ["model.sap_source.stg_sap__bseg_tmp", "model.sap_source.stg_sap__bseg_tmp"], "model.sap_source.stg_sap__pa0008": ["model.sap_source.stg_sap__pa0008_tmp", "model.sap_source.stg_sap__pa0008_tmp"], "model.sap_source.stg_sap__t503": ["model.sap_source.stg_sap__t503_tmp", "model.sap_source.stg_sap__t503_tmp"], "model.sap_source.stg_sap__pa0031": ["model.sap_source.stg_sap__pa0031_tmp", "model.sap_source.stg_sap__pa0031_tmp"], "model.sap_source.stg_sap__mara": ["model.sap_source.stg_sap__mara_tmp", "model.sap_source.stg_sap__mara_tmp"], "model.sap_source.stg_sap__t880": ["model.sap_source.stg_sap__t880_tmp", "model.sap_source.stg_sap__t880_tmp"], "model.sap_source.stg_sap__t001": ["model.sap_source.stg_sap__t001_tmp", "model.sap_source.stg_sap__t001_tmp"], "model.sap_source.stg_sap__t001_tmp": ["source.sap_source.sap.t001"], "model.sap_source.stg_sap__lfa1_tmp": ["source.sap_source.sap.lfa1"], "model.sap_source.stg_sap__pa0000_tmp": ["source.sap_source.sap.pa0000"], "model.sap_source.stg_sap__t880_tmp": ["source.sap_source.sap.t880"], "model.sap_source.stg_sap__faglflexa_tmp": ["source.sap_source.sap.faglflexa"], "model.sap_source.stg_sap__pa0008_tmp": ["source.sap_source.sap.pa0008"], "model.sap_source.stg_sap__faglflext_tmp": ["source.sap_source.sap.faglflext"], "model.sap_source.stg_sap__pa0001_tmp": ["source.sap_source.sap.pa0001"], "model.sap_source.stg_sap__t503_tmp": ["source.sap_source.sap.t503"], "model.sap_source.stg_sap__mara_tmp": ["source.sap_source.sap.mara"], "model.sap_source.stg_sap__kna1_tmp": ["source.sap_source.sap.kna1"], "model.sap_source.stg_sap__bseg_tmp": ["source.sap_source.sap.bseg"], "model.sap_source.stg_sap__pa0031_tmp": ["source.sap_source.sap.pa0031"], "model.sap_source.stg_sap__bkpf_tmp": ["source.sap_source.sap.bkpf"], "model.sap_source.stg_sap__pa0007_tmp": ["source.sap_source.sap.pa0007"], "model.sap_source.stg_sap__ska1_tmp": ["source.sap_source.sap.ska1"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__bkpf_mandt__bukrs__belnr__gjahr.24408a1598": ["model.sap_source.stg_sap__bkpf"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__bseg_mandt__bukrs__belnr__gjahr__buzei.b82e3bb488": ["model.sap_source.stg_sap__bseg"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__faglflexa_rclnt__ryear__docnr__rldnr__rbukrs__docln.25873b9ae2": ["model.sap_source.stg_sap__faglflexa"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__faglflext_rclnt__ryear__objnr00__objnr01__objnr02__objnr03__objnr04__objnr05__objnr06__objnr07__objnr08__drcrk__rpmax.044702dcdc": ["model.sap_source.stg_sap__faglflext"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__kna1_mandt__kunnr.267e63971e": ["model.sap_source.stg_sap__kna1"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__lfa1_mandt__lifnr.a14d089450": ["model.sap_source.stg_sap__lfa1"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__mara_mandt__matnr.22aa05e858": ["model.sap_source.stg_sap__mara"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0000_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.d4e0143493": ["model.sap_source.stg_sap__pa0000"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0001_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.dff9406c1d": ["model.sap_source.stg_sap__pa0001"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0007_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.7c591718a3": ["model.sap_source.stg_sap__pa0007"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0008_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.8a4607e6ae": ["model.sap_source.stg_sap__pa0008"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0031_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.5eeaab575a": ["model.sap_source.stg_sap__pa0031"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__ska1_mandt__ktopl__saknr.f71e6ad713": ["model.sap_source.stg_sap__ska1"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t001_mandt__bukrs.8004c782aa": ["model.sap_source.stg_sap__t001"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t503_mandt__persg__persk.326edc3672": ["model.sap_source.stg_sap__t503"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t880_mandt__rcomp.076ad31b7f": ["model.sap_source.stg_sap__t880"], "source.sap_source.sap.bkpf": [], "source.sap_source.sap.bseg": [], "source.sap_source.sap.faglflexa": [], "source.sap_source.sap.faglflext": [], "source.sap_source.sap.kna1": [], "source.sap_source.sap.lfa1": [], "source.sap_source.sap.mara": [], "source.sap_source.sap.pa0000": [], "source.sap_source.sap.pa0001": [], "source.sap_source.sap.pa0007": [], "source.sap_source.sap.pa0008": [], "source.sap_source.sap.pa0031": [], "source.sap_source.sap.ska1": [], "source.sap_source.sap.t001": [], "source.sap_source.sap.t503": [], "source.sap_source.sap.t880": []}, "child_map": {"seed.sap_source_integration_tests.sap_pa0031_data": [], "seed.sap_source_integration_tests.sap_mara_data": [], "seed.sap_source_integration_tests.sap_bseg_data": [], "seed.sap_source_integration_tests.sap_t880_data": [], "seed.sap_source_integration_tests.sap_ska1_data": [], "seed.sap_source_integration_tests.sap_lfa1_data": [], "seed.sap_source_integration_tests.sap_pa0008_data": [], "seed.sap_source_integration_tests.sap_t503_data": [], "seed.sap_source_integration_tests.sap_pa0007_data": [], "seed.sap_source_integration_tests.sap_faglflexa_data": [], "seed.sap_source_integration_tests.sap_pa0001_data": [], "seed.sap_source_integration_tests.sap_pa0000_data": [], "seed.sap_source_integration_tests.sap_bkpf_data": [], "seed.sap_source_integration_tests.sap_kna1_data": [], "seed.sap_source_integration_tests.sap_faglflext_data": [], "seed.sap_source_integration_tests.sap_t001_data": [], "model.sap_source.stg_sap__lfa1": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__lfa1_mandt__lifnr.a14d089450"], "model.sap_source.stg_sap__bkpf": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__bkpf_mandt__bukrs__belnr__gjahr.24408a1598"], "model.sap_source.stg_sap__kna1": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__kna1_mandt__kunnr.267e63971e"], "model.sap_source.stg_sap__pa0001": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0001_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.dff9406c1d"], "model.sap_source.stg_sap__ska1": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__ska1_mandt__ktopl__saknr.f71e6ad713"], "model.sap_source.stg_sap__pa0000": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0000_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.d4e0143493"], "model.sap_source.stg_sap__faglflexa": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__faglflexa_rclnt__ryear__docnr__rldnr__rbukrs__docln.25873b9ae2"], "model.sap_source.stg_sap__faglflext": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__faglflext_rclnt__ryear__objnr00__objnr01__objnr02__objnr03__objnr04__objnr05__objnr06__objnr07__objnr08__drcrk__rpmax.044702dcdc"], "model.sap_source.stg_sap__pa0007": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0007_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.7c591718a3"], "model.sap_source.stg_sap__bseg": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__bseg_mandt__bukrs__belnr__gjahr__buzei.b82e3bb488"], "model.sap_source.stg_sap__pa0008": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0008_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.8a4607e6ae"], "model.sap_source.stg_sap__t503": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t503_mandt__persg__persk.326edc3672"], "model.sap_source.stg_sap__pa0031": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0031_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.5eeaab575a"], "model.sap_source.stg_sap__mara": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__mara_mandt__matnr.22aa05e858"], "model.sap_source.stg_sap__t880": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t880_mandt__rcomp.076ad31b7f"], "model.sap_source.stg_sap__t001": ["test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t001_mandt__bukrs.8004c782aa"], "model.sap_source.stg_sap__t001_tmp": ["model.sap_source.stg_sap__t001", "model.sap_source.stg_sap__t001"], "model.sap_source.stg_sap__lfa1_tmp": ["model.sap_source.stg_sap__lfa1", "model.sap_source.stg_sap__lfa1"], "model.sap_source.stg_sap__pa0000_tmp": ["model.sap_source.stg_sap__pa0000", "model.sap_source.stg_sap__pa0000"], "model.sap_source.stg_sap__t880_tmp": ["model.sap_source.stg_sap__t880", "model.sap_source.stg_sap__t880"], "model.sap_source.stg_sap__faglflexa_tmp": ["model.sap_source.stg_sap__faglflexa", "model.sap_source.stg_sap__faglflexa"], "model.sap_source.stg_sap__pa0008_tmp": ["model.sap_source.stg_sap__pa0008", "model.sap_source.stg_sap__pa0008"], "model.sap_source.stg_sap__faglflext_tmp": ["model.sap_source.stg_sap__faglflext", "model.sap_source.stg_sap__faglflext"], "model.sap_source.stg_sap__pa0001_tmp": ["model.sap_source.stg_sap__pa0001", "model.sap_source.stg_sap__pa0001"], "model.sap_source.stg_sap__t503_tmp": ["model.sap_source.stg_sap__t503", "model.sap_source.stg_sap__t503"], "model.sap_source.stg_sap__mara_tmp": ["model.sap_source.stg_sap__mara", "model.sap_source.stg_sap__mara"], "model.sap_source.stg_sap__kna1_tmp": ["model.sap_source.stg_sap__kna1", "model.sap_source.stg_sap__kna1"], "model.sap_source.stg_sap__bseg_tmp": ["model.sap_source.stg_sap__bseg", "model.sap_source.stg_sap__bseg"], "model.sap_source.stg_sap__pa0031_tmp": ["model.sap_source.stg_sap__pa0031", "model.sap_source.stg_sap__pa0031"], "model.sap_source.stg_sap__bkpf_tmp": ["model.sap_source.stg_sap__bkpf", "model.sap_source.stg_sap__bkpf"], "model.sap_source.stg_sap__pa0007_tmp": ["model.sap_source.stg_sap__pa0007", "model.sap_source.stg_sap__pa0007"], "model.sap_source.stg_sap__ska1_tmp": ["model.sap_source.stg_sap__ska1", "model.sap_source.stg_sap__ska1"], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__bkpf_mandt__bukrs__belnr__gjahr.24408a1598": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__bseg_mandt__bukrs__belnr__gjahr__buzei.b82e3bb488": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__faglflexa_rclnt__ryear__docnr__rldnr__rbukrs__docln.25873b9ae2": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__faglflext_rclnt__ryear__objnr00__objnr01__objnr02__objnr03__objnr04__objnr05__objnr06__objnr07__objnr08__drcrk__rpmax.044702dcdc": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__kna1_mandt__kunnr.267e63971e": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__lfa1_mandt__lifnr.a14d089450": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__mara_mandt__matnr.22aa05e858": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0000_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.d4e0143493": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0001_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.dff9406c1d": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0007_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.7c591718a3": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0008_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.8a4607e6ae": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__pa0031_mandt__pernr__subty__objps__sprps__endda__begda__seqnr.5eeaab575a": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__ska1_mandt__ktopl__saknr.f71e6ad713": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t001_mandt__bukrs.8004c782aa": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t503_mandt__persg__persk.326edc3672": [], "test.sap_source.dbt_utils_unique_combination_of_columns_stg_sap__t880_mandt__rcomp.076ad31b7f": [], "source.sap_source.sap.bkpf": ["model.sap_source.stg_sap__bkpf_tmp"], "source.sap_source.sap.bseg": ["model.sap_source.stg_sap__bseg_tmp"], "source.sap_source.sap.faglflexa": ["model.sap_source.stg_sap__faglflexa_tmp"], "source.sap_source.sap.faglflext": ["model.sap_source.stg_sap__faglflext_tmp"], "source.sap_source.sap.kna1": ["model.sap_source.stg_sap__kna1_tmp"], "source.sap_source.sap.lfa1": ["model.sap_source.stg_sap__lfa1_tmp"], "source.sap_source.sap.mara": ["model.sap_source.stg_sap__mara_tmp"], "source.sap_source.sap.pa0000": ["model.sap_source.stg_sap__pa0000_tmp"], "source.sap_source.sap.pa0001": ["model.sap_source.stg_sap__pa0001_tmp"], "source.sap_source.sap.pa0007": ["model.sap_source.stg_sap__pa0007_tmp"], "source.sap_source.sap.pa0008": ["model.sap_source.stg_sap__pa0008_tmp"], "source.sap_source.sap.pa0031": ["model.sap_source.stg_sap__pa0031_tmp"], "source.sap_source.sap.ska1": ["model.sap_source.stg_sap__ska1_tmp"], "source.sap_source.sap.t001": ["model.sap_source.stg_sap__t001_tmp"], "source.sap_source.sap.t503": ["model.sap_source.stg_sap__t503_tmp"], "source.sap_source.sap.t880": ["model.sap_source.stg_sap__t880_tmp"]}, "group_map": {}}