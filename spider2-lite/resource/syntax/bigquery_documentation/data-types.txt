[ ![Google Cloud](https://www.gstatic.com/devrel-
devsite/prod/vc851b65627ca98cc752c9ae13e5f506cd6dbb7ed1bb4c8df6090c5f9130ed83c/cloud/images/cloud-
logo.svg) ](/)

*

[ Documentation ](https://cloud.google.com/docs) [ Technology areas
](https://cloud.google.com/docs/tech-area-overviews)

close

* [ AI solutions, generative AI, and ML  ](https://cloud.google.com/docs/ai-ml)
* [ Application development  ](https://cloud.google.com/docs/application-development)
* [ Application hosting  ](https://cloud.google.com/docs/application-hosting)
* [ Compute  ](https://cloud.google.com/docs/compute-area)
* [ Data analytics and pipelines  ](https://cloud.google.com/docs/data)
* [ Databases  ](https://cloud.google.com/docs/databases)
* [ Distributed, hybrid, and multicloud  ](https://cloud.google.com/docs/dhm-cloud)
* [ Industry solutions  ](https://cloud.google.com/docs/industry)
* [ Networking  ](https://cloud.google.com/docs/networking)
* [ Observability and monitoring  ](https://cloud.google.com/docs/observability)
* [ Security  ](https://cloud.google.com/docs/security)
* [ Storage  ](https://cloud.google.com/docs/storage)

[ Cross-product tools ](https://cloud.google.com/docs/cross-product-overviews)

close

* [ Access and resources management  ](https://cloud.google.com/docs/access-resources)
* [ Cloud SDK, languages, frameworks, and tools  ](https://cloud.google.com/docs/devtools)
* [ Costs and usage management  ](https://cloud.google.com/docs/costs-usage)
* [ Infrastructure as code  ](https://cloud.google.com/docs/iac)
* [ Migration  ](https://cloud.google.com/docs/migration)

[ Related sites ](https://cloud.google.com/)

close

* [ Google Cloud Home  ](https://cloud.google.com/)
* [ Free Trial and Free Tier  ](https://cloud.google.com/free)
* [ Architecture Center  ](https://cloud.google.com/architecture)
* [ Blog  ](https://cloud.google.com/blog)
* [ Contact Sales  ](https://cloud.google.com/contact)
* [ Google Cloud Developer Center  ](https://cloud.google.com/developers)
* [ Google Developer Center  ](https://developers.google.com/)
* [ Google Cloud Marketplace (in console)  ](https://console.cloud.google.com/marketplace)
* [ Google Cloud Marketplace Documentation  ](https://cloud.google.com/marketplace/docs)
* [ Google Cloud Skills Boost  ](https://www.cloudskillsboost.google/paths)
* [ Google Cloud Solution Center  ](https://cloud.google.com/solutions)
* [ Google Cloud Support  ](https://cloud.google.com/support-hub)
* [ Google Cloud Tech Youtube Channel  ](https://www.youtube.com/@googlecloudtech)

* English
* Deutsch
* Español – América Latina
* Français
* Português – Brasil
* 中文 – 简体
* 日本語
* 한국어

Sign in

* [ BigQuery ](https://cloud.google.com/bigquery)

[ Guides ](https://cloud.google.com/bigquery/docs/introduction) [ Reference
](https://cloud.google.com/bigquery/quotas) [ Samples
](https://cloud.google.com/bigquery/docs/samples) [ Resources
](https://cloud.google.com/bigquery/docs/release-notes)

[ Contact Us ](https://cloud.google.com/contact) [ Start free
](//console.cloud.google.com/freetrial)

[ ![Google Cloud](https://www.gstatic.com/devrel-
devsite/prod/vc851b65627ca98cc752c9ae13e5f506cd6dbb7ed1bb4c8df6090c5f9130ed83c/cloud/images/cloud-
logo.svg) ](/)

*

* [ Documentation  ](/docs)
* [ Guides  ](/bigquery/docs/introduction)
* [ Reference  ](/bigquery/quotas)
* [ Samples  ](/bigquery/docs/samples)
* [ Resources  ](/bigquery/docs/release-notes)
* [ Technology areas  ](/docs/tech-area-overviews)
* More
* [ Cross-product tools  ](/docs/cross-product-overviews)
* More
* [ Related sites  ](/)
* More
* [ Console  ](//console.cloud.google.com/)
* [ Contact Us  ](/contact)
* [ Start free  ](//console.cloud.google.com/freetrial)

* Quotas and limits

* [ Quotas and limits reference  ](/bigquery/quotas)
* [ Troubleshoot quota errors  ](/bigquery/docs/troubleshoot-quotas)
* BigQuery command-line tool

* [ bq command-line tool reference  ](/bigquery/docs/reference/bq-cli-reference)
* SQL in BigQuery

* GoogleSQL reference

* [ Query syntax  ](/bigquery/docs/reference/standard-sql/query-syntax)
* General reference

* [ Data types  ](/bigquery/docs/reference/standard-sql/data-types)
* [ Lexical structure and syntax  ](/bigquery/docs/reference/standard-sql/lexical)
* [ Conversion rules  ](/bigquery/docs/reference/standard-sql/conversion_rules)
* [ Format elements  ](/bigquery/docs/reference/standard-sql/format-elements)
* [ Collation  ](/bigquery/docs/reference/standard-sql/collation-concepts)
* [ Text analysis  ](/bigquery/docs/reference/standard-sql/text-analysis)
* [ BI Engine optimized functions  ](/bigquery/docs/bi-engine-optimized-sql)

* Expressions

* [ Function calls  ](/bigquery/docs/reference/standard-sql/functions-reference)
* [ Aggregate function calls  ](/bigquery/docs/reference/standard-sql/aggregate-function-calls)
* [ Window function calls  ](/bigquery/docs/reference/standard-sql/window-function-calls)
* [ Operators  ](/bigquery/docs/reference/standard-sql/operators)
* [ Conditional expressions  ](/bigquery/docs/reference/standard-sql/conditional_expressions)
* [ Subqueries  ](/bigquery/docs/reference/standard-sql/subqueries)

* Functions

* [ All functions and operators  ](/bigquery/docs/reference/standard-sql/functions-and-operators)
* [ AEAD encryption functions  ](/bigquery/docs/reference/standard-sql/aead_encryption_functions)
* [ Aggregate functions  ](/bigquery/docs/reference/standard-sql/aggregate_functions)
* [ Approximate aggregate functions  ](/bigquery/docs/reference/standard-sql/approximate_aggregate_functions)
* [ Array functions  ](/bigquery/docs/reference/standard-sql/array_functions)
* [ Bit functions  ](/bigquery/docs/reference/standard-sql/bit_functions)
* [ Conversion functions  ](/bigquery/docs/reference/standard-sql/conversion_functions)
* [ Date functions  ](/bigquery/docs/reference/standard-sql/date_functions)
* [ Datetime functions  ](/bigquery/docs/reference/standard-sql/datetime_functions)
* [ Debugging functions  ](/bigquery/docs/reference/standard-sql/debugging_functions)
* [ Differentially private aggregate functions  ](/bigquery/docs/reference/standard-sql/aggregate-dp-functions)
* [ Federated query functions  ](/bigquery/docs/reference/standard-sql/federated_query_functions)
* [ DLP encryption functions  ](/bigquery/docs/reference/standard-sql/dlp_functions)
* [ Geography functions  ](/bigquery/docs/reference/standard-sql/geography_functions)
* [ Hash functions  ](/bigquery/docs/reference/standard-sql/hash_functions)
* [ HyperLogLog++ functions  ](/bigquery/docs/reference/standard-sql/hll_functions)
* [ Interval functions  ](/bigquery/docs/reference/standard-sql/interval_functions)
* [ JSON functions  ](/bigquery/docs/reference/standard-sql/json_functions)
* [ Mathematical functions  ](/bigquery/docs/reference/standard-sql/mathematical_functions)
* [ Navigation functions  ](/bigquery/docs/reference/standard-sql/navigation_functions)
* [ Net functions  ](/bigquery/docs/reference/standard-sql/net_functions)
* [ Numbering functions  ](/bigquery/docs/reference/standard-sql/numbering_functions)
* [ Range functions  ](/bigquery/docs/reference/standard-sql/range-functions)
* [ Search functions  ](/bigquery/docs/reference/standard-sql/search_functions)
* [ Security functions  ](/bigquery/docs/reference/standard-sql/security_functions)
* [ Statistical aggregate functions  ](/bigquery/docs/reference/standard-sql/statistical_aggregate_functions)
* [ String functions  ](/bigquery/docs/reference/standard-sql/string_functions)
* [ Table functions (built-in)  ](/bigquery/docs/reference/standard-sql/table-functions-built-in)
* [ Text analysis functions  ](/bigquery/docs/reference/standard-sql/text-analysis-functions)
* [ Time functions  ](/bigquery/docs/reference/standard-sql/time_functions)
* [ Time series functions  ](/bigquery/docs/reference/standard-sql/time-series-functions)
* [ Timestamp functions  ](/bigquery/docs/reference/standard-sql/timestamp_functions)
* [ Utility functions  ](/bigquery/docs/reference/standard-sql/utility-functions)

* Statements

* [ Data definition language (DDL)  ](/bigquery/docs/reference/standard-sql/data-definition-language)
* [ Data manipulation language (DML)  ](/bigquery/docs/reference/standard-sql/dml-syntax)
* [ Data control language (DCL)  ](/bigquery/docs/reference/standard-sql/data-control-language)
* [ Procedural language  ](/bigquery/docs/reference/standard-sql/procedural-language)
* [ Export and load statements  ](/bigquery/docs/reference/standard-sql/other-statements)
* [ Debugging statements  ](/bigquery/docs/reference/standard-sql/debugging-statements)

* BigQuery ML SQL reference

* Creating and training models

* [ CREATE MODEL statement overview  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create)
* Regression and classification

* [ Linear and logistic regression  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-glm)
* [ Boosted trees  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-boosted-tree)
* [ Random forest  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-random-forest)
* [ Deep neural networks  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-dnn-models)
* [ Wide & Deep networks  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-wnd-models)
* [ AutoML models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-automl)

* Clustering

* [ K-means  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-kmeans)

* Dimensionality reduction

* [ Principal component analysis  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-pca)
* [ Autoencoder  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-autoencoder)

* Collaborative filtering

* [ Matrix factorization  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-matrix-factorization)

* Time series forecasting

* [ Univariate forecasting with ARIMA_PLUS models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-time-series)
* [ Multivariate forecasting with ARIMA_PLUS_XREG models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-multivariate-time-series)

* Importing models

* [ Open Neural Network Exchange (ONNX)  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-onnx)
* [ TensorFlow  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-tensorflow)
* [ TensorFlow Lite  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-tflite)
* [ XGBoost  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-xgboost)

* Remote models

* [ LLMs  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-remote-model)
* [ Cloud AI services  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-remote-model-service)
* [ Vertex AI hosted models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-remote-model-https)

* Feature engineering

* [ Feature transformation  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-transform)
* [ ML.TRANSFORM  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-transform)
* [ ML.FEATURE_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-feature)
* General functions

* [ ML.IMPUTER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-imputer)

* Numerical functions

* [ ML.BUCKETIZE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-bucketize)
* [ ML.MAX_ABS_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-max-abs-scaler)
* [ ML.MIN_MAX_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-min-max-scaler)
* [ ML.NORMALIZER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-normalizer)
* [ ML.POLYNOMIAL_EXPAND  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-polynomial-expand)
* [ ML.QUANTILE_BUCKETIZE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-quantile-bucketize)
* [ ML.ROBUST_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-robust-scaler)
* [ ML.STANDARD_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-standard-scaler)

* Categorical functions

* [ ML.FEATURE_CROSS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-feature-cross)
* [ ML.HASH_BUCKETIZE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-hash-bucketize)
* [ ML.LABEL_ENCODER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-label-encoder)
* [ ML.MULTI_HOT_ENCODER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-multi-hot-encoder)
* [ ML.ONE_HOT_ENCODER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-one-hot-encoder)

* Text functions

* [ ML.NGRAMS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-ngrams)
* [ ML.BAG_OF_WORDS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-bag-of-words)
* [ ML.TF_IDF  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-tf-idf)

* Image functions

* [ ML.CONVERT_COLOR_SPACE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-convert-color-space)
* [ ML.CONVERT_IMAGE_TYPE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-convert-image-type)
* [ ML.DECODE_IMAGE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-decode-image)
* [ ML.RESIZE_IMAGE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-resize-image)

* Point-in-time lookup functions

* [ ML.FEATURES_AT_TIME  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-feature-time)
* [ ML.ENTITY_FEATURES_AT_TIME  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-entity-feature-time)

* Hyperparameter tuning functions

* [ ML.TRIAL_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-trial-info)

* Evaluation functions

* [ ML.EVALUATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-evaluate)
* [ ML.ROC_CURVE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-roc)
* [ ML.CONFUSION_MATRIX  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-confusion)
* [ ML.ARIMA_EVALUATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-arima-evaluate)
* [ ML.TRAINING_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-train)
* [ ML.RECONSTRUCTION_LOSS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-reconstruction-loss)
* [ ML.HOLIDAY_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-holiday-info)

* Inference functions

* [ ML.PREDICT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-predict)
* [ ML.FORECAST  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-forecast)
* [ ML.RECOMMEND  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-recommend)
* [ ML.DETECT_ANOMALIES  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-detect-anomalies)

* Generative AI functions

* [ ML.GENERATE_TEXT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-text)
* [ ML.GENERATE_EMBEDDING  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-embedding)

* AI functions

* [ ML.UNDERSTAND_TEXT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-understand-text)
* [ ML.TRANSLATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-translate)
* [ ML.PROCESS_DOCUMENT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-process-document)
* [ ML.TRANSCRIBE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-transcribe)
* [ ML.ANNOTATE_IMAGE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-annotate-image)

* AI Explanation functions

* [ ML.EXPLAIN_PREDICT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-explain-predict)
* [ ML.EXPLAIN_FORECAST  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-explain-forecast)
* [ ML.GLOBAL_EXPLAIN  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-global-explain)
* [ ML.FEATURE_IMPORTANCE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-importance)
* [ ML.ADVANCED_WEIGHTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-advanced-weights)

* Model weights functions

* [ ML.WEIGHTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-weights)
* [ ML.CENTROIDS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-centroids)
* [ ML.PRINCIPAL_COMPONENTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-principal-components)
* [ ML.PRINCIPAL_COMPONENT_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-principal-component-info)
* [ ML.ARIMA_COEFFICIENTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-arima-coefficients)

* Model monitoring functions

* [ ML.DESCRIBE_DATA  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-describe-data)
* [ ML.VALIDATE_DATA_DRIFT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-validate-data-drift)
* [ ML.VALIDATE_DATA_SKEW  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-validate-data-skew)
* [ ML.TFDV_DESCRIBE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-tfdv-describe)
* [ ML.TFDV_VALIDATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-tfdv-validate)

* Math utility functions

* [ ML.DISTANCE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-distance)
* [ ML.LP_NORM  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-lp-norm)

* Model management statements

* [ EXPORT MODEL statement  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-export-model)
* [ ALTER MODEL statement  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-alter-model)
* [ DROP MODEL statement  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-drop-model)

* INFORMATION SCHEMA views

* [ Introduction  ](/bigquery/docs/information-schema-intro)
* Access control

* [ OBJECT_PRIVILEGES view  ](/bigquery/docs/information-schema-object-privileges)

* BI Engine

* [ BI_CAPACITIES  ](/bigquery/docs/information-schema-bi-capacities)
* [ BI_CAPACITY_CHANGES  ](/bigquery/docs/information-schema-bi-capacity-changes)

* Configurations

* [ EFFECTIVE_PROJECT_OPTIONS view  ](/bigquery/docs/information-schema-effective-project-options)
* [ ORGANIZATION_OPTIONS view  ](/bigquery/docs/information-schema-organization-options)
* [ ORGANIZATION_OPTIONS_CHANGES view  ](/bigquery/docs/information-schema-organization-options-changes)
* [ PROJECT_OPTIONS view  ](/bigquery/docs/information-schema-project-options)
* [ PROJECT_OPTIONS_CHANGES view  ](/bigquery/docs/information-schema-project-options-changes)

* Datasets

* [ SCHEMATA view  ](/bigquery/docs/information-schema-datasets-schemata)
* [ SCHEMATA_LINKS view  ](/bigquery/docs/information-schema-datasets-schemata-links)
* [ SCHEMATA_OPTIONS view  ](/bigquery/docs/information-schema-datasets-schemata-options)
* [ SHARED_DATASET_USAGE view  ](/bigquery/docs/information-schema-shared-dataset-usage)
* [ SCHEMATA_REPLICAS view  ](/bigquery/docs/information-schema-schemata-replicas)

* Jobs

* [ JOBS view  ](/bigquery/docs/information-schema-jobs)
* [ JOBS_BY_USER view  ](/bigquery/docs/information-schema-jobs-by-user)
* [ JOBS_BY_FOLDER view  ](/bigquery/docs/information-schema-jobs-by-folder)
* [ JOBS_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-jobs-by-organization)

* Jobs by timeslice

* [ JOBS_TIMELINE view  ](/bigquery/docs/information-schema-jobs-timeline)
* [ JOBS_TIMELINE_BY_USER view  ](/bigquery/docs/information-schema-jobs-timeline-by-user)
* [ JOBS_TIMELINE_BY_FOLDER view  ](/bigquery/docs/information-schema-jobs-timeline-by-folder)
* [ JOBS_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-jobs-timeline-by-organization)

* Reservations

* [ ASSIGNMENTS view  ](/bigquery/docs/information-schema-assignments)
* [ ASSIGNMENT_CHANGES view  ](/bigquery/docs/information-schema-assignments-changes)
* [ CAPACITY_COMMITMENTS view  ](/bigquery/docs/information-schema-capacity-commitments)
* [ CAPACITY_COMMITMENT_CHANGES view  ](/bigquery/docs/information-schema-capacity-commitment-changes)
* [ RESERVATIONS view  ](/bigquery/docs/information-schema-reservations)
* [ RESERVATION_CHANGES view  ](/bigquery/docs/information-schema-reservation-changes)
* [ RESERVATIONS_TIMELINE view  ](/bigquery/docs/information-schema-reservation-timeline)

* Routines

* [ PARAMETERS view  ](/bigquery/docs/information-schema-parameters)
* [ ROUTINES view  ](/bigquery/docs/information-schema-routines)
* [ ROUTINE_OPTIONS view  ](/bigquery/docs/information-schema-routine-options)

* Search indexes

* [ SEARCH_INDEXES view  ](/bigquery/docs/information-schema-indexes)
* [ SEARCH_INDEX_COLUMNS view  ](/bigquery/docs/information-schema-index-columns)

* Sessions

* [ SESSIONS_BY_PROJECT view  ](/bigquery/docs/information-schema-sessions-by-project)
* [ SESSIONS_BY_USER view  ](/bigquery/docs/information-schema-sessions-by-user)

* Streaming

* [ STREAMING_TIMELINE view  ](/bigquery/docs/information-schema-streaming)
* [ STREAMING_TIMELINE_BY_FOLDER view  ](/bigquery/docs/information-schema-streaming-by-folder)
* [ STREAMING_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-streaming-by-organization)

* Tables

* [ COLUMNS view  ](/bigquery/docs/information-schema-columns)
* [ COLUMN_FIELD_PATHS view  ](/bigquery/docs/information-schema-column-field-paths)
* [ CONSTRAINT_COLUMN_USAGE view  ](/bigquery/docs/information-schema-constraint-column-usage)
* [ KEY_COLUMN_USAGE view  ](/bigquery/docs/information-schema-key-column-usage)
* [ PARTITIONS view  ](/bigquery/docs/information-schema-partitions)
* [ TABLES view  ](/bigquery/docs/information-schema-tables)
* [ TABLE_OPTIONS view  ](/bigquery/docs/information-schema-table-options)
* [ TABLE_CONSTRAINTS view  ](/bigquery/docs/information-schema-table-constraints)
* [ TABLE_SNAPSHOTS view  ](/bigquery/docs/information-schema-snapshots)
* [ TABLE_STORAGE view  ](/bigquery/docs/information-schema-table-storage)
* [ TABLE_STORAGE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-table-storage-by-organization)
* [ TABLE_STORAGE_USAGE_TIMELINE view  ](/bigquery/docs/information-schema-table-storage-usage)
* [ TABLE_STORAGE_USAGE_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-table-storage-usage-by-organization)

* Vector indexes

* [ VECTOR_INDEXES view  ](/bigquery/docs/information-schema-vector-indexes)
* [ VECTOR_INDEX_COLUMNS view  ](/bigquery/docs/information-schema-vector-index-columns)
* [ VECTOR_INDEX_OPTIONS view  ](/bigquery/docs/information-schema-vector-index-options)

* Views

* [ VIEWS view  ](/bigquery/docs/information-schema-views)
* [ MATERIALIZED_VIEWS view  ](/bigquery/docs/information-schema-materialized-views)

* Write API

* [ WRITE_API_TIMELINE view  ](/bigquery/docs/information-schema-write-api)
* [ WRITE_API_TIMELINE_BY_FOLDER view  ](/bigquery/docs/information-schema-write-api-by-folder)
* [ WRITE_API_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-write-api-by-organization)

* Legacy SQL reference

* [ Migrating to GoogleSQL  ](/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql)
* [ Functions and operators  ](/bigquery/docs/reference/legacy-sql)
* [ Data types  ](/bigquery/docs/data-types)
* [ Querying nested and repeated fields  ](/bigquery/docs/legacy-nested-repeated)
* [ User-defined functions  ](/bigquery/docs/user-defined-functions-legacy)
* [ Table decorators  ](/bigquery/docs/table-decorators)

* BigQuery DataFrames Python API

* [ BigQuery DataFrames  ](/bigquery/docs/reference/bigquery-dataframes)
* BigQuery APIs

* BigQuery API reference

* [ BigQuery APIs and libraries overview  ](/bigquery/docs/reference/libraries-overview)
* BigQuery API reference

* [ BigQuery client libraries  ](/bigquery/docs/reference/libraries)
* [ BigQuery REST API  ](/bigquery/docs/reference/rest)
* REST reference (v2)

* REST Resources

* datasets

* [ Overview  ](/bigquery/docs/reference/rest/v2/datasets)
* [ delete  ](/bigquery/docs/reference/rest/v2/datasets/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/datasets/get)
* [ insert  ](/bigquery/docs/reference/rest/v2/datasets/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/datasets/list)
* [ patch  ](/bigquery/docs/reference/rest/v2/datasets/patch)
* [ undelete  ](/bigquery/docs/reference/rest/v2/datasets/undelete)
* [ update  ](/bigquery/docs/reference/rest/v2/datasets/update)

* jobs

* [ Overview  ](/bigquery/docs/reference/rest/v2/jobs)
* [ cancel  ](/bigquery/docs/reference/rest/v2/jobs/cancel)
* [ delete  ](/bigquery/docs/reference/rest/v2/jobs/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/jobs/get)
* [ getQueryResults  ](/bigquery/docs/reference/rest/v2/jobs/getQueryResults)
* [ insert  ](/bigquery/docs/reference/rest/v2/jobs/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/jobs/list)
* [ query  ](/bigquery/docs/reference/rest/v2/jobs/query)

* models

* [ Overview  ](/bigquery/docs/reference/rest/v2/models)
* [ delete  ](/bigquery/docs/reference/rest/v2/models/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/models/get)
* [ list  ](/bigquery/docs/reference/rest/v2/models/list)
* [ patch  ](/bigquery/docs/reference/rest/v2/models/patch)

* projects

* [ Overview  ](/bigquery/docs/reference/rest/v2/projects)
* [ getServiceAccount  ](/bigquery/docs/reference/rest/v2/projects/getServiceAccount)
* [ list  ](/bigquery/docs/reference/rest/v2/projects/list)

* routines

* [ Overview  ](/bigquery/docs/reference/rest/v2/routines)
* [ delete  ](/bigquery/docs/reference/rest/v2/routines/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/routines/get)
* [ insert  ](/bigquery/docs/reference/rest/v2/routines/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/routines/list)
* [ update  ](/bigquery/docs/reference/rest/v2/routines/update)

* rowAccessPolicies

* [ Overview  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies)
* [ getIamPolicy  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies/getIamPolicy)
* [ list  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies/list)
* [ testIamPermissions  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies/testIamPermissions)

* tabledata

* [ Overview  ](/bigquery/docs/reference/rest/v2/tabledata)
* [ insertAll  ](/bigquery/docs/reference/rest/v2/tabledata/insertAll)
* [ list  ](/bigquery/docs/reference/rest/v2/tabledata/list)

* tables

* [ Overview  ](/bigquery/docs/reference/rest/v2/tables)
* [ delete  ](/bigquery/docs/reference/rest/v2/tables/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/tables/get)
* [ getIamPolicy  ](/bigquery/docs/reference/rest/v2/tables/getIamPolicy)
* [ insert  ](/bigquery/docs/reference/rest/v2/tables/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/tables/list)
* [ patch  ](/bigquery/docs/reference/rest/v2/tables/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/rest/v2/tables/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/rest/v2/tables/testIamPermissions)
* [ update  ](/bigquery/docs/reference/rest/v2/tables/update)

* Types

* [ ConnectionProperty  ](/bigquery/docs/reference/rest/v2/ConnectionProperty)
* [ DataFormatOptions  ](/bigquery/docs/reference/rest/v2/DataFormatOptions)
* [ DatasetAccessEntry  ](/bigquery/docs/reference/rest/v2/DatasetAccessEntry)
* [ DmlStats  ](/bigquery/docs/reference/rest/v2/DmlStats)
* [ EncryptionConfiguration  ](/bigquery/docs/reference/rest/v2/EncryptionConfiguration)
* [ GetPolicyOptions  ](/bigquery/docs/reference/rest/v2/GetPolicyOptions)
* [ Job  ](/bigquery/docs/reference/rest/v2/Job)
* [ JobReference  ](/bigquery/docs/reference/rest/v2/JobReference)
* [ Policy  ](/bigquery/docs/reference/rest/v2/Policy)
* [ ProjectReference  ](/bigquery/docs/reference/rest/v2/ProjectReference)
* [ QueryParameter  ](/bigquery/docs/reference/rest/v2/QueryParameter)
* [ RoundingMode  ](/bigquery/docs/reference/rest/v2/RoundingMode)
* [ RowAccessPolicyReference  ](/bigquery/docs/reference/rest/v2/RowAccessPolicyReference)
* [ SessionInfo  ](/bigquery/docs/reference/rest/v2/SessionInfo)
* [ StandardSqlDataType  ](/bigquery/docs/reference/rest/v2/StandardSqlDataType)
* [ StandardSqlField  ](/bigquery/docs/reference/rest/v2/StandardSqlField)
* [ TableReference  ](/bigquery/docs/reference/rest/v2/TableReference)
* [ TargetType  ](/bigquery/docs/reference/rest/v2/TargetType)
* [ TestIamPermissionsResponse  ](/bigquery/docs/reference/rest/v2/TestIamPermissionsResponse)

* [ API uploads  ](/bigquery/docs/reference/api-uploads)

* BigQuery Data Policy API reference

* [ Data Policy REST reference  ](/bigquery/docs/reference/bigquerydatapolicy/rest)
* v1

* REST Resources

* projects.locations.dataPolicies

* [ Overview  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies)
* [ create  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/create)
* [ delete  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/delete)
* [ get  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/list)
* [ patch  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/patch)
* [ rename  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/rename)
* [ setIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/testIamPermissions)

* v1beta1

* REST Resources

* projects.locations.dataPolicies

* [ Overview  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies)
* [ create  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/create)
* [ delete  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/delete)
* [ get  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/list)
* [ patch  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/testIamPermissions)

* BigQuery Connections API reference

* [ BigQuery Connection client libraries  ](/bigquery/docs/reference/bigqueryconnection)
* [ BigQuery Connection REST API  ](/bigquery/docs/reference/bigqueryconnection/rest)
* RPC reference

* [ Overview  ](/bigquery/docs/reference/bigqueryconnection/rpc)
* [ google.cloud.bigquery.connection.v1  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.cloud.bigquery.connection.v1)
* [ google.cloud.bigquery.connection.v1beta1  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.cloud.bigquery.connection.v1beta1)
* [ google.iam.v1  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.iam.v1)
* [ google.type  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.type)

* REST reference (v1)

* REST Resources

* projects.locations.connections

* [ Overview  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections)
* [ create  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/create)
* [ delete  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/delete)
* [ get  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/list)
* [ patch  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/testIamPermissions)

* REST reference (v1beta1)

* REST Resources

* projects.locations.connections

* [ Overview  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections)
* [ create  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/create)
* [ delete  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/delete)
* [ get  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/list)
* [ patch  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/testIamPermissions)
* [ updateCredential  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/updateCredential)

* BigQuery Migration API reference

* [ BigQuery Migration client libraries  ](/bigquery/docs/reference/migration)
* [ BigQuery Migration REST API  ](/bigquery/docs/reference/migration/rest)
* REST reference (v2)

* REST Resources

* projects.locations.workflows

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows)
* [ create  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/create)
* [ delete  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/delete)
* [ get  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/list)
* [ start  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/start)

* projects.locations.workflows.subtasks

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows.subtasks)
* [ get  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows.subtasks/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows.subtasks/list)

* Types

* [ Distribution  ](/bigquery/docs/reference/migration/rest/Shared.Types/Distribution)
* [ ErrorInfo  ](/bigquery/docs/reference/migration/rest/Shared.Types/ErrorInfo)
* [ MetricKind  ](/bigquery/docs/reference/migration/rest/Shared.Types/MetricKind)
* [ ResourceInfo  ](/bigquery/docs/reference/migration/rest/Shared.Types/ResourceInfo)
* [ ValueType  ](/bigquery/docs/reference/migration/rest/Shared.Types/ValueType)

* REST reference (v2alpha)

* REST Resources

* projects.locations.workflows

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows)
* [ create  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/create)
* [ delete  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/delete)
* [ get  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/list)
* [ start  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/start)

* projects.locations.workflows.subtasks

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows.subtasks)
* [ get  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows.subtasks/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows.subtasks/list)

* RPC reference

* [ Overview  ](/bigquery/docs/reference/migration/rpc)
* [ google.api  ](/bigquery/docs/reference/migration/rpc/google.api)
* [ google.cloud.bigquery.migration.tasks.assessment.v2alpha  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.tasks.assessment.v2alpha)
* [ google.cloud.bigquery.migration.tasks.translation.v2alpha  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.tasks.translation.v2alpha)
* [ google.cloud.bigquery.migration.v2  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.v2)
* [ google.cloud.bigquery.migration.v2alpha  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.v2alpha)
* [ google.rpc  ](/bigquery/docs/reference/migration/rpc/google.rpc)

* BigQuery Storage API reference

* [ Storage API client libraries  ](/bigquery/docs/reference/storage/libraries)
* RPC reference

* [ Overview  ](/bigquery/docs/reference/storage/rpc)
* [ google.cloud.bigquery.storage.v1  ](/bigquery/docs/reference/storage/rpc/google.cloud.bigquery.storage.v1)
* [ google.cloud.bigquery.storage.v1beta1  ](/bigquery/docs/reference/storage/rpc/google.cloud.bigquery.storage.v1beta1)
* [ google.cloud.bigquery.storage.v1beta2  ](/bigquery/docs/reference/storage/rpc/google.cloud.bigquery.storage.v1beta2)
* [ google.rpc  ](/bigquery/docs/reference/storage/rpc/google.rpc)

* BigQuery Reservation API reference

* [ BigQuery Reservation API client libraries  ](/bigquery/docs/reference/reservations)
* [ BigQuery Reservation REST API  ](/bigquery/docs/reference/reservations/rest)
* RPC reference

* [ Overview  ](/bigquery/docs/reference/reservations/rpc)
* [ google.cloud.bigquery.reservation.v1  ](/bigquery/docs/reference/reservations/rpc/google.cloud.bigquery.reservation.v1)
* [ google.rpc  ](/bigquery/docs/reference/reservations/rpc/google.rpc)

* REST reference (v1)

* REST Resources

* projects.locations

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations)
* [ getBiReservation  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/getBiReservation)
* [ searchAllAssignments  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/searchAllAssignments)
* [ searchAssignments  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/searchAssignments)
* [ updateBiReservation  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/updateBiReservation)

* projects.locations.capacityCommitments

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments)
* [ create  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/create)
* [ delete  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/delete)
* [ get  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/get)
* [ list  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/list)
* [ merge  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/merge)
* [ patch  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/patch)
* [ split  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/split)

* projects.locations.reservations

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations)
* [ create  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/create)
* [ delete  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/delete)
* [ get  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/get)
* [ list  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/list)
* [ patch  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/patch)

* projects.locations.reservations.assignments

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments)
* [ create  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/create)
* [ delete  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/delete)
* [ list  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/list)
* [ move  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/move)
* [ patch  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/patch)

* Types

* [ BiReservation  ](/bigquery/docs/reference/reservations/rest/v1/BiReservation)
* [ Edition  ](/bigquery/docs/reference/reservations/rest/v1/Edition)

* BigQuery Analytics Hub API reference

* [ Analytics Hub client libraries  ](/bigquery/docs/reference/analytics-hub)
* [ Analytics Hub REST API  ](/bigquery/docs/reference/analytics-hub/rest)
* REST reference (v1)

* REST Resources

* organizations.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/organizations.locations.dataExchanges)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/organizations.locations.dataExchanges/list)

* projects.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/list)
* [ listSubscriptions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/listSubscriptions)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/setIamPolicy)
* [ subscribe  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/subscribe)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/testIamPermissions)

* projects.locations.dataExchanges.listings

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/list)
* [ listSubscriptions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/listSubscriptions)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/setIamPolicy)
* [ subscribe  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/subscribe)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/testIamPermissions)

* projects.locations.subscriptions

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/get)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/list)
* [ refresh  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/refresh)
* [ revoke  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/revoke)

* Types

* [ ListSharedResourceSubscriptionsResponse  ](/bigquery/docs/reference/analytics-hub/rest/v1/ListSharedResourceSubscriptionsResponse)
* [ Operation  ](/bigquery/docs/reference/analytics-hub/rest/v1/Operation)

* REST reference (v1beta1)

* REST Resources

* organizations.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/organizations.locations.dataExchanges)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/organizations.locations.dataExchanges/list)

* projects.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/list)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/testIamPermissions)

* projects.locations.dataExchanges.listings

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/list)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/setIamPolicy)
* [ subscribe  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/subscribe)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/testIamPermissions)

* BigQuery Data Transfer Service API reference

* [ BigQuery Data Transfer Service client libraries  ](/bigquery/docs/reference/datatransfer/libraries)
* [ BigQuery Data Transfer Service REST API  ](/bigquery/docs/reference/datatransfer/rest)
* REST reference

* REST Resources

* projects

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects)
* [ enrollDataSources  ](/bigquery/docs/reference/datatransfer/rest/v1/projects/enrollDataSources)

* projects.dataSources

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources)
* [ checkValidCreds  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources/checkValidCreds)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources/list)

* projects.locations

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations)
* [ enrollDataSources  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/enrollDataSources)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/list)
* [ unenrollDataSources  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/unenrollDataSources)

* projects.locations.dataSources

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources)
* [ checkValidCreds  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/checkValidCreds)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list)

* projects.locations.transferConfigs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs)
* [ create  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/create)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/list)
* [ patch  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/patch)
* [ scheduleRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/scheduleRuns)
* [ startManualRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/startManualRuns)

* projects.locations.transferConfigs.runs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs/list)

* projects.locations.transferConfigs.runs.transferLogs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs.transferLogs)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs.transferLogs/list)

* projects.transferConfigs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs)
* [ create  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/create)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/list)
* [ patch  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/patch)
* [ scheduleRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/scheduleRuns)
* [ startManualRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/startManualRuns)

* projects.transferConfigs.runs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs/list)

* projects.transferConfigs.runs.transferLogs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs.transferLogs)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs.transferLogs/list)

* Types

* [ CheckValidCredsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/CheckValidCredsResponse)
* [ Code  ](/bigquery/docs/reference/datatransfer/rest/v1/Code)
* [ EmailPreferences  ](/bigquery/docs/reference/datatransfer/rest/v1/EmailPreferences)
* [ ListDataSourcesResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListDataSourcesResponse)
* [ ListTransferConfigsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListTransferConfigsResponse)
* [ ListTransferLogsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListTransferLogsResponse)
* [ ListTransferRunsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListTransferRunsResponse)
* [ RunAttempt  ](/bigquery/docs/reference/datatransfer/rest/v1/RunAttempt)
* [ ScheduleTransferRunsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ScheduleTransferRunsResponse)
* [ StartManualTransferRunsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/StartManualTransferRunsResponse)
* [ TimeRange  ](/bigquery/docs/reference/datatransfer/rest/v1/TimeRange)
* [ TransferState  ](/bigquery/docs/reference/datatransfer/rest/v1/TransferState)

* RPC reference

* [ Overview  ](/bigquery/docs/reference/datatransfer/rpc)
* [ google.cloud.bigquery.datatransfer.v1  ](/bigquery/docs/reference/datatransfer/rpc/google.cloud.bigquery.datatransfer.v1)
* [ google.cloud.location  ](/bigquery/docs/reference/datatransfer/rpc/google.cloud.location)
* [ google.rpc  ](/bigquery/docs/reference/datatransfer/rpc/google.rpc)

* BigQuery BigLake API reference

* [ BigLake REST API  ](/bigquery/docs/reference/biglake/rest)
* REST reference (v1)

* REST Resources

* projects.locations.catalogs

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/list)

* projects.locations.catalogs.databases

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/patch)

* projects.locations.catalogs.databases.tables

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/patch)
* [ rename  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/rename)

* REST reference (v1alpha1)

* REST Resources

* projects.locations.catalogs

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/list)

* projects.locations.catalogs.databases

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/patch)

* projects.locations.catalogs.databases.locks

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks)
* [ check  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/check)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/delete)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/list)

* projects.locations.catalogs.databases.tables

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/patch)
* [ rename  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/rename)

* BigQuery routines

* [ System procedures reference  ](/bigquery/docs/reference/system-procedures)
* [ System variables reference  ](/bigquery/docs/reference/system-variables)
* BigQuery audit logging

* BigQuery audit logging reference

* [ Overview  ](/bigquery/docs/reference/auditlogs)
* Types

* [ AuditData  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/AuditData)
* [ AuditLogConfig.LogType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/AuditLogConfig.LogType)
* [ BigQueryAuditMetadata  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata)
* [ BigQueryAuditMetadata.AccessChange.Action  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.AccessChange.Action)
* [ BigQueryAuditMetadata.ConnectionChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ConnectionChange.Reason)
* [ BigQueryAuditMetadata.CreateDisposition  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.CreateDisposition)
* [ BigQueryAuditMetadata.DatasetChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.DatasetChange.Reason)
* [ BigQueryAuditMetadata.DatasetCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.DatasetCreation.Reason)
* [ BigQueryAuditMetadata.DatasetDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.DatasetDeletion.Reason)
* [ BigQueryAuditMetadata.JobConfig.Query.Priority  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobConfig.Query.Priority)
* [ BigQueryAuditMetadata.JobConfig.Type  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobConfig.Type)
* [ BigQueryAuditMetadata.JobDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobDeletion.Reason)
* [ BigQueryAuditMetadata.JobInsertion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobInsertion.Reason)
* [ BigQueryAuditMetadata.JobState  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobState)
* [ BigQueryAuditMetadata.ModelCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelCreation.Reason)
* [ BigQueryAuditMetadata.ModelDataChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelDataChange.Reason)
* [ BigQueryAuditMetadata.ModelDataRead.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelDataRead.Reason)
* [ BigQueryAuditMetadata.ModelDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelDeletion.Reason)
* [ BigQueryAuditMetadata.ModelMetadataChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelMetadataChange.Reason)
* [ BigQueryAuditMetadata.OperationType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.OperationType)
* [ BigQueryAuditMetadata.QueryStatementType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.QueryStatementType)
* [ BigQueryAuditMetadata.RoutineChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.RoutineChange.Reason)
* [ BigQueryAuditMetadata.RoutineCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.RoutineCreation.Reason)
* [ BigQueryAuditMetadata.RoutineDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.RoutineDeletion.Reason)
* [ BigQueryAuditMetadata.SearchIndexCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.SearchIndexCreation.Reason)
* [ BigQueryAuditMetadata.SearchIndexDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.SearchIndexDeletion.Reason)
* [ BigQueryAuditMetadata.TableChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableChange.Reason)
* [ BigQueryAuditMetadata.TableCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableCreation.Reason)
* [ BigQueryAuditMetadata.TableDataChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableDataChange.Reason)
* [ BigQueryAuditMetadata.TableDataRead.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableDataRead.Reason)
* [ BigQueryAuditMetadata.TableDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableDeletion.Reason)
* [ BigQueryAuditMetadata.UnlinkDataset.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.UnlinkDataset.Reason)
* [ BigQueryAuditMetadata.WriteDisposition  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.WriteDisposition)
* [ BindingDelta.Action  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BindingDelta.Action)
* [ DatasetAccessEntry  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/DatasetAccessEntry)
* [ DatasetAccessEntry.TargetType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/DatasetAccessEntry.TargetType)
* [ Expr  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/Expr)
* [ JoinRestrictionPolicy.JoinCondition  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/JoinRestrictionPolicy.JoinCondition)
* [ Policy  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/Policy)
* [ RoutineReference  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/RoutineReference)
* [ Status  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/Status)
* [ TableReference  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/TableReference)

* [ AI solutions, generative AI, and ML  ](/docs/ai-ml)
* [ Application development  ](/docs/application-development)
* [ Application hosting  ](/docs/application-hosting)
* [ Compute  ](/docs/compute-area)
* [ Data analytics and pipelines  ](/docs/data)
* [ Databases  ](/docs/databases)
* [ Distributed, hybrid, and multicloud  ](/docs/dhm-cloud)
* [ Industry solutions  ](/docs/industry)
* [ Networking  ](/docs/networking)
* [ Observability and monitoring  ](/docs/observability)
* [ Security  ](/docs/security)
* [ Storage  ](/docs/storage)

* [ Access and resources management  ](/docs/access-resources)
* [ Cloud SDK, languages, frameworks, and tools  ](/docs/devtools)
* [ Costs and usage management  ](/docs/costs-usage)
* [ Infrastructure as code  ](/docs/iac)
* [ Migration  ](/docs/migration)

* [ Google Cloud Home  ](/)
* [ Free Trial and Free Tier  ](/free)
* [ Architecture Center  ](/architecture)
* [ Blog  ](https://cloud.google.com/blog)
* [ Contact Sales  ](/contact)
* [ Google Cloud Developer Center  ](/developers)
* [ Google Developer Center  ](https://developers.google.com/)
* [ Google Cloud Marketplace (in console)  ](https://console.cloud.google.com/marketplace)
* [ Google Cloud Marketplace Documentation  ](/marketplace/docs)
* [ Google Cloud Skills Boost  ](https://www.cloudskillsboost.google/paths)
* [ Google Cloud Solution Center  ](/solutions)
* [ Google Cloud Support  ](/support-hub)
* [ Google Cloud Tech Youtube Channel  ](https://www.youtube.com/@googlecloudtech)

* [ Home ](https://cloud.google.com/)
* [ BigQuery ](https://cloud.google.com/bigquery)
* [ Documentation ](https://cloud.google.com/bigquery/docs)
* [ Reference ](https://cloud.google.com/bigquery/quotas)

Send feedback

#  Data types

Stay organized with collections  Save and categorize content based on your
preferences.

This page provides an overview of all GoogleSQL for BigQuery data types,
including information about their value domains. For information on data type
literals and constructors, see [ Lexical Structure and Syntax
](/bigquery/docs/reference/standard-sql/lexical#literals) .

##  Data type properties

When storing and querying data, it is helpful to keep the following data type
properties in mind:

###  Nullable data types

For nullable data types, ` NULL ` is a valid value. Currently, all existing
data types are nullable. Conditions apply for  arrays  .

###  Orderable data types

Expressions of orderable data types can be used in an ` ORDER BY ` clause.
Applies to all data types except for:

* ` ARRAY `
* ` STRUCT `
* ` GEOGRAPHY `
* ` JSON `

####  Ordering ` NULL ` s

In the context of the ` ORDER BY ` clause, ` NULL ` s are the minimum possible
value; that is, ` NULL ` s appear first in ` ASC ` sorts and last in ` DESC `
sorts.

` NULL ` values can be specified as the first or last values for a column
irrespective of ` ASC ` or ` DESC ` by using the ` NULLS FIRST ` or ` NULLS
LAST ` modifiers respectively.

To learn more about using ` ASC ` , ` DESC ` , ` NULLS FIRST ` and ` NULLS
LAST ` , see the [ ` ORDER BY ` clause ](/bigquery/docs/reference/standard-
sql/query-syntax#order_by_clause) .

####  Ordering floating points

Floating point values are sorted in this order, from least to greatest:

1. ` NULL `
2. ` NaN ` — All ` NaN ` values are considered equal when sorting.
3. ` -inf `
4. Negative numbers
5. 0 or -0 — All zero values are considered equal when sorting.
6. Positive numbers
7. ` +inf `

###  Groupable data types

Groupable data types can generally appear in an expression following ` GROUP
BY ` , ` DISTINCT ` , and ` PARTITION BY ` . All data types are supported
except for:

* ` GEOGRAPHY `
* ` JSON `
* ` ARRAY `
* ` STRUCT `

####  Grouping with floating point types

Groupable floating point types can appear in an expression following ` GROUP
BY ` and ` DISTINCT ` . ` PARTITION BY ` expressions cannot include  floating
point types  .

Special floating point values are grouped in the following way, including both
grouping done by a ` GROUP BY ` clause and grouping done by the ` DISTINCT `
keyword:

* ` NULL `
* ` NaN ` — All ` NaN ` values are considered equal when grouping.
* ` -inf `
* 0 or -0 — All zero values are considered equal when grouping.
* ` +inf `

###  Comparable data types

Values of the same comparable data type can be compared to each other. All
data types are supported except for:

* ` GEOGRAPHY `
* ` JSON `

Notes:

* Equality comparisons for structs are supported field by field, in field order. Field names are ignored. Less than and greater than comparisons are not supported.
* To compare geography values, use [ ST_Equals ](/bigquery/docs/reference/standard-sql/geography_functions#st_equals) .
* When comparing ranges, the lower bounds are compared. If the lower bounds are equal, the upper bounds are compared, instead.
* When comparing ranges, ` NULL ` values are handled as follows:
* ` NULL ` lower bounds are sorted before non- ` NULL ` lower bounds.
* ` NULL ` upper bounds are sorted after non- ` NULL ` upper bounds.
* If two bounds that are being compared are ` NULL ` , the comparison is ` TRUE ` .
* An ` UNBOUNDED ` bound is treated as a ` NULL ` bound.
* All types that support comparisons can be used in a ` JOIN ` condition. See [ JOIN Types ](/bigquery/docs/reference/standard-sql/query-syntax#join_types) for an explanation of join conditions.

###  Collatable data types

Collatable data types support collation, which determines how to sort and
compare strings. These data types support collation:

* String
* String fields in a struct
* String elements in an array

The maximum size of a column value is 10MiB, which applies to scalar and array
types.

##  Data type sizes

Use the following table to see the size in logical bytes for each supported
data type.

Data type  |  Size
---|---
` ARRAY ` |  The sum of the size of its elements. For example, an array
defined as ( ` ARRAY<INT64> ` ) that contains 4 entries is calculated as 32
logical bytes (4 entries x 8 logical bytes).
` BIGNUMERIC ` |  32 logical bytes
` BOOL ` |  1 logical byte
` BYTES ` |  2 logical bytes + the number of logical bytes in the value
` DATE ` |  8 logical bytes
` DATETIME ` |  8 logical bytes
` FLOAT64 ` |  8 logical bytes
` GEOGRAPHY ` |  16 logical bytes + 24 logical bytes * the number of vertices
in the geography type. To verify the number of vertices, use the [ `
ST_NumPoints ` ](/bigquery/docs/reference/standard-
sql/geography_functions#st_numpoints) function.
` INT64 ` |  8 logical bytes
` INTERVAL ` |  16 logical bytes
` JSON ` |  The number of logical bytes in UTF-8 encoding of the JSON-
formatted string equivalent after canonicalization.
` NUMERIC ` |  16 logical bytes
` RANGE ` |  16 logical bytes
` STRING ` |  2 logical bytes + the UTF-8 encoded string size
` STRUCT ` |  0 logical bytes + the size of the contained fields
` TIME ` |  8 logical bytes
` TIMESTAMP ` |  8 logical bytes

A ` NULL ` value for any data type is calculated as 0 logical bytes.

A repeated column is stored as an array, and the size is calculated based on
the column data type and the number of values. For example, an integer column
( ` INT64 ` ) that is repeated ( ` ARRAY<INT64> ` ) and contains 4 entries is
calculated as 32 logical bytes (4 entries x 8 logical bytes). The total size
of all values in a table row can't exceed the [ maximum row size
](/bigquery/quotas#max_row_size) .

##  Parameterized data types

Syntax:



DATA_TYPE(param[, ...])


You can use parameters to specify constraints for the following data types:

* ` STRING `
* ` BYTES `
* ` NUMERIC `
* ` BIGNUMERIC `

A data type that is declared with parameters is called a parameterized data
type. You can only use parameterized data types with columns and script
variables. A column with a parameterized data type is a _parameterized column_
and a script variable with a parameterized data type is a _parameterized
script variable_ . Parameterized type constraints are enforced when writing a
value to a parameterized column or when assigning a value to a parameterized
script variable.

A data type's parameters are not propagated in an expression, only the data
type is.

**Examples**



-- Declare a variable with type parameters.
DECLARE x STRING(10);

-- This is a valid assignment to x.
SET x = "hello";

-- This assignment to x violates the type parameter constraint and results in an OUT_OF_RANGE error.
SET x = "this string is too long"



-- Declare variables with type parameters.
DECLARE x NUMERIC(10) DEFAULT 12345;
DECLARE y NUMERIC(5, 2) DEFAULT 123.45;

-- The variable x is treated as a NUMERIC value when read, so the result of this query
-- is a NUMERIC without type parameters.
SELECT x;

-- Type parameters are not propagated within expressions, so variables x and y are treated
-- as NUMERIC values when read and the result of this query is a NUMERIC without type parameters.
SELECT x + y;


##  Array type

Name  |  Description
---|---
` ARRAY ` |  Ordered list of zero or more elements of any non-array type.

An array is an ordered list of zero or more elements of non-array values.
Elements in an array must share the same type.

Arrays of arrays are not allowed. Queries that would produce an array of
arrays will return an error. Instead, a struct must be inserted between the
arrays using the ` SELECT AS STRUCT ` construct.

To learn more about the literal representation of an array type, see [ Array
literals ](/bigquery/docs/reference/standard-sql/lexical#array_literals) .

To learn more about using arrays in GoogleSQL, see [ Work with arrays
](/bigquery/docs/arrays#constructing_arrays) .

###  ` NULL ` s and the array type

Currently, GoogleSQL for BigQuery has the following rules with respect to `
NULL ` s and arrays:

* An array can be ` NULL ` .

For example:


SELECT CAST(NULL AS ARRAY<INT64>) IS NULL AS array_is_null;

/*---------------*
| array_is_null |
+---------------+
| TRUE          |
*---------------*/


* GoogleSQL for BigQuery translates a ` NULL ` array into an empty array in the query result, although inside the query, ` NULL ` and empty arrays are two distinct values.

For example:


WITH Items AS (
SELECT [] AS numbers, "Empty array in query" AS description UNION ALL
SELECT CAST(NULL AS ARRAY<INT64>), "NULL array in query")
SELECT numbers, description, numbers IS NULL AS numbers_null
FROM Items;

/*---------+----------------------+--------------*
| numbers | description          | numbers_null |
+---------+----------------------+--------------+
| []      | Empty array in query | false        |
| []      | NULL array in query  | true         |
*---------+----------------------+--------------*/


When you write a ` NULL ` array to a table, it is converted to an empty array.
If you write ` Items ` to a table from the previous query, then each array is
written as an empty array:


SELECT numbers, description, numbers IS NULL AS numbers_null
FROM Items;

/*---------+----------------------+--------------*
| numbers | description          | numbers_null |
+---------+----------------------+--------------+
| []      | Empty array in query | false        |
| []      | NULL array in query  | false        |
*---------+----------------------+--------------*/


* GoogleSQL for BigQuery raises an error if the query result has an array which contains ` NULL ` elements, although such an array can be used inside the query.

For example, this works:


SELECT FORMAT("%T", [1, NULL, 3]) as numbers;

/*--------------*
| numbers      |
+--------------+
| [1, NULL, 3] |
*--------------*/


But this raises an error:


-- error
SELECT [1, NULL, 3] as numbers;


###  Declaring an array type



ARRAY<T>


Array types are declared using the angle brackets ( ` < ` and ` > ` ). The
type of the elements of an array can be arbitrarily complex with the exception
that an array cannot directly contain another array.

**Examples**

Type Declaration  |  Meaning
---|---
` ARRAY<INT64> ` |  Simple array of 64-bit integers.
` ARRAY<BYTES(5)> ` |  Simple array of parameterized bytes.
` ARRAY<STRUCT<INT64, INT64>> ` |  An array of structs, each of which contains
two 64-bit integers.
` ARRAY<ARRAY<INT64>> `
(not supported)  |  This is an **invalid** type declaration which is included
here just in case you came looking for how to create a multi-level array.
Arrays cannot contain arrays directly. Instead see the next example.
` ARRAY<STRUCT<ARRAY<INT64>>> ` |  An array of arrays of 64-bit integers.
Notice that there is a struct between the two arrays because arrays cannot
hold other arrays directly.

###  Constructing an array

You can construct an array using array literals or array functions.

####  Using array literals

You can build an array literal in GoogleSQL using brackets ( ` [ ` and ` ] `
). Each element in an array is separated by a comma.



SELECT [1, 2, 3] AS numbers;

SELECT ["apple", "pear", "orange"] AS fruit;

SELECT [true, false, true] AS booleans;


You can also create arrays from any expressions that have compatible types.
For example:



SELECT [a, b, c]
FROM
(SELECT 5 AS a,
37 AS b,
406 AS c);

SELECT [a, b, c]
FROM
(SELECT CAST(5 AS INT64) AS a,
CAST(37 AS FLOAT64) AS b,
406 AS c);


Notice that the second example contains three expressions: one that returns an
` INT64 ` , one that returns a ` FLOAT64 ` , and one that declares a literal.
This expression works because all three expressions share ` FLOAT64 ` as a
supertype.

To declare a specific data type for an array, use angle brackets ( ` < ` and `
> ` ). For example:



SELECT ARRAY<FLOAT64>[1, 2, 3] AS floats;


Arrays of most data types, such as ` INT64 ` or ` STRING ` , don't require
that you declare them first.



SELECT [1, 2, 3] AS numbers;


You can write an empty array of a specific type using ` ARRAY<type>[] ` . You
can also write an untyped empty array using ` [] ` , in which case GoogleSQL
attempts to infer the array type from the surrounding context. If GoogleSQL
cannot infer a type, the default type ` ARRAY<INT64> ` is used.

####  Using generated values

You can also construct an ` ARRAY ` with generated values.

#####  Generating arrays of integers

[ ` GENERATE_ARRAY ` ](/bigquery/docs/reference/standard-
sql/array_functions#generate_array) generates an array of values from a
starting and ending value and a step value. For example, the following query
generates an array that contains all of the odd integers from 11 to 33,
inclusive:



SELECT GENERATE_ARRAY(11, 33, 2) AS odds;

/*--------------------------------------------------*
| odds                                             |
+--------------------------------------------------+
| [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33] |
*--------------------------------------------------*/


You can also generate an array of values in descending order by giving a
negative step value:



SELECT GENERATE_ARRAY(21, 14, -1) AS countdown;

/*----------------------------------*
| countdown                        |
+----------------------------------+
| [21, 20, 19, 18, 17, 16, 15, 14] |
*----------------------------------*/


#####  Generating arrays of dates

[ ` GENERATE_DATE_ARRAY ` ](/bigquery/docs/reference/standard-
sql/array_functions#generate_date_array) generates an array of ` DATE ` s from
a starting and ending ` DATE ` and a step ` INTERVAL ` .

You can generate a set of ` DATE ` values using ` GENERATE_DATE_ARRAY ` . For
example, this query returns the current ` DATE ` and the following ` DATE ` s
at 1 ` WEEK ` intervals up to and including a later ` DATE ` :



SELECT
GENERATE_DATE_ARRAY('2017-11-21', '2017-12-31', INTERVAL 1 WEEK)
AS date_array;

/*--------------------------------------------------------------------------*
| date_array                                                               |
+--------------------------------------------------------------------------+
| [2017-11-21, 2017-11-28, 2017-12-05, 2017-12-12, 2017-12-19, 2017-12-26] |
*--------------------------------------------------------------------------*/


##  Boolean type

Name  |  Description
---|---
` BOOL ` |  Boolean values are represented by the keywords ` TRUE ` and `
FALSE ` (case-insensitive).

Boolean values are sorted in this order, from least to greatest:

1. ` NULL `
2. ` FALSE `
3. ` TRUE `

##  Bytes type

Name  |  Description
---|---
` BYTES ` |  Variable-length binary data.

String and bytes are separate types that cannot be used interchangeably. Most
functions on strings are also defined on bytes. The bytes version operates on
raw bytes rather than Unicode characters. Casts between string and bytes
enforce that the bytes are encoded using UTF-8.

To learn more about the literal representation of a bytes type, see [ Bytes
literals ](/bigquery/docs/reference/standard-
sql/lexical#string_and_bytes_literals) .

###  Parameterized bytes type

Parameterized Type  |  Description
---|---
` BYTES(L) ` |  Sequence of bytes with a maximum of  L  bytes allowed in the
binary string, where  L  is a positive ` INT64 ` value. If a sequence of bytes
has more than  L  bytes, throws an ` OUT_OF_RANGE ` error.

See  Parameterized Data Types  for more information on parameterized types and
where they can be used.

##  Date type

Name  |  Range
---|---
` DATE ` |  0001-01-01 to 9999-12-31.

The date type represents a Gregorian calendar date, independent of time zone.
A date value does not represent a specific 24-hour time period. Rather, a
given date value represents a different 24-hour period when interpreted in
different time zones, and may represent a shorter or longer day during
daylight saving time (DST) transitions. To represent an absolute point in
time, use a  timestamp  .

#####  Canonical format



YYYY-[M]M-[D]D


* ` YYYY ` : Four-digit year.
* ` [M]M ` : One or two digit month.
* ` [D]D ` : One or two digit day.

To learn more about the literal representation of a date type, see [ Date
literals ](/bigquery/docs/reference/standard-sql/lexical#date_literals) .

##  Datetime type

Name  |  Range
---|---
` DATETIME ` |  0001-01-01 00:00:00 to 9999-12-31 23:59:59.999999

A datetime value represents a Gregorian date and a time, as they might be
displayed on a watch, independent of time zone. It includes the year, month,
day, hour, minute, second, and subsecond. To represent an absolute point in
time, use a  timestamp  .

#####  Canonical format



civil_date_part[time_part]

civil_date_part:
YYYY-[M]M-[D]D

time_part:
{ |T|t}[H]H:[M]M:[S]S[.F]


* ` YYYY ` : Four-digit year.
* ` [M]M ` : One or two digit month.
* ` [D]D ` : One or two digit day.
* ` { |T|t} ` : A space or a ` T ` or ` t ` separator. The ` T ` and ` t ` separators are flags for time.
* ` [H]H ` : One or two digit hour (valid values from 00 to 23).
* ` [M]M ` : One or two digit minutes (valid values from 00 to 59).
* ` [S]S ` : One or two digit seconds (valid values from 00 to 60).
* ` [.F] ` : Up to six fractional digits (microsecond precision).

To learn more about the literal representation of a datetime type, see [
Datetime literals ](/bigquery/docs/reference/standard-
sql/lexical#datetime_literals) .

##  Geography type

Name  |  Description
---|---
` GEOGRAPHY ` |  A collection of points, linestrings, and polygons, which is
represented as a point set, or a subset of the surface of the Earth.

The geography type is based on the [ OGC Simple Features specification (SFS)
](http://www.opengeospatial.org/standards/sfs#downloads) , and can contain the
following objects:

Geography object  |  Description
---|---
` Point ` |

A single location in coordinate space known as a point. A point has an
x-coordinate value and a y-coordinate value, where the x-coordinate is
longitude and the y-coordinate is latitude of the point on the [ WGS84
reference ellipsoid ](https://en.wikipedia.org/wiki/World_Geodetic_System) .

Syntax:



POINT(x_coordinate y_coordinate)


Examples:



POINT(32 210)



POINT EMPTY


` LineString ` |

Represents a linestring, which is a one-dimensional geometric object, with a
sequence of points and geodesic edges between them.

Syntax:



LINESTRING(point[, ...])


Examples:



LINESTRING(1 1, 2 1, 3.1 2.88, 3 -3)



LINESTRING EMPTY


` Polygon ` |

A polygon, which is represented as a planar surface defined by 1 exterior
boundary and 0 or more interior boundaries. Each interior boundary defines a
hole in the polygon. The boundary loops of polygons are oriented so that if
you traverse the boundary vertices in order, the interior of the polygon is on
the left.

Syntax:



POLYGON(interior_ring[, ...])

interior_ring:
(point[, ...])


Examples:



POLYGON((0 0, 2 2, 2 0, 0 0), (2 2, 3 4, 2 4, 2 2))



POLYGON EMPTY


` MultiPoint ` |

A collection of points.

Syntax:



MULTIPOINT(point[, ...])


Examples:



MULTIPOINT(0 32, 123 9, 48 67)



MULTIPOINT EMPTY


` MultiLineString ` |

Represents a multilinestring, which is a collection of linestrings.

Syntax:



MULTILINESTRING((linestring)[, ...])


Examples:



MULTILINESTRING((2 2, 3 4), (5 6, 7 7))



MULTILINESTRING EMPTY


` MultiPolygon ` |

Represents a multipolygon, which is a collection of polygons.

Syntax:



MULTIPOLYGON((polygon)[, ...])


Examples:



MULTIPOLYGON(((0 -1, 1 0, 1 1, 0 -1)), ((0 0, 2 2, 3 0, 0 0), (2 2, 3 4, 2 4, 1 9)))



MULTIPOLYGON EMPTY


` GeometryCollection ` |

Represents a geometry collection with elements of different dimensions or an
empty geography.

Syntax:



GEOMETRYCOLLECTION(geography_object[, ...])


Examples:



GEOMETRYCOLLECTION(MULTIPOINT(-1 2, 0 12), LINESTRING(-2 4, 0 6))



GEOMETRYCOLLECTION EMPTY


The points, linestrings and polygons of a geography value form a simple
arrangement on the [ WGS84 reference ellipsoid
](https://en.wikipedia.org/wiki/World_Geodetic_System) . A simple arrangement
is one where no point on the WGS84 surface is contained by multiple elements
of the collection. If self intersections exist, they are automatically
removed.

The geography that contains no points, linestrings or polygons is called an
empty geography. An empty geography is not associated with a particular
geometry shape. For example, the following query produces the same results:



SELECT
ST_GEOGFROMTEXT('POINT EMPTY') AS a,
ST_GEOGFROMTEXT('GEOMETRYCOLLECTION EMPTY') AS b

/*--------------------------+--------------------------*
| a                        | b                        |
+--------------------------+--------------------------+
| GEOMETRYCOLLECTION EMPTY | GEOMETRYCOLLECTION EMPTY |
*--------------------------+--------------------------*/


The structure of compound geometry objects is not preserved if a simpler type
can be produced. For example, in column ` b ` , ` GEOMETRYCOLLECTION ` with `
(POINT(1 1) ` and ` POINT(2 2) ` is converted into the simplest possible
geometry, ` MULTIPOINT(1 1, 2 2) ` .



SELECT
ST_GEOGFROMTEXT('MULTIPOINT(1 1, 2 2)') AS a,
ST_GEOGFROMTEXT('GEOMETRYCOLLECTION(POINT(1 1), POINT(2 2))') AS b

/*----------------------+----------------------*
| a                    | b                    |
+----------------------+----------------------+
| MULTIPOINT(1 1, 2 2) | MULTIPOINT(1 1, 2 2) |
*----------------------+----------------------*/


A geography is the result of, or an argument to, a [ Geography Function
](/bigquery/docs/reference/standard-sql/geography_functions) .

##  Interval type

**Preview**

This product or feature is subject to the "Pre-GA Offerings Terms" in the
General Service Terms section of the [ Service Specific Terms
](/terms/service-terms) . Pre-GA products and features are available "as is"
and might have limited support. For more information, see the [ launch stage
descriptions ](/products#product-launch-stages) .

**Note:** To provide feedback or request support for this feature, send an
email to [ bigquery-sql-preview-support@google.com ](mailto:bigquery-sql-
preview-support@google.com) .  Name  |  Range
---|---
` INTERVAL ` |  -10000-0 -3660000 -87840000:0:0 to 10000-0 3660000
87840000:0:0

An ` INTERVAL ` object represents duration or amount of time, without
referring to any specific point in time.

#####  Canonical format



[sign]Y-M [sign]D [sign]H:M:S[.F]


* ` sign ` : ` + ` or ` - `
* ` Y ` : Year
* ` M ` : Month
* ` D ` : Day
* ` H ` : Hour
* ` M ` : Minute
* ` S ` : Second
* ` [.F] ` : Up to six fractional digits (microsecond precision)

To learn more about the literal representation of an interval type, see [
Interval literals ](/bigquery/docs/reference/standard-
sql/lexical#interval_literals) .

###  Constructing an interval

You can construct an interval with an interval literal that supports a  single
datetime part  or a  datetime part range  .

####  Construct an interval with a single datetime part



INTERVAL int64_expression datetime_part


You can construct an ` INTERVAL ` object with an ` INT64 ` expression and one
interval-supported datetime part  . For example:



-- 1 year, 0 months, 0 days, 0 hours, 0 minutes, and 0 seconds (1-0 0 0:0:0)
INTERVAL 1 YEAR
INTERVAL 4 QUARTER
INTERVAL 12 MONTH

-- 0 years, 3 months, 0 days, 0 hours, 0 minutes, and 0 seconds (0-3 0 0:0:0)
INTERVAL 1 QUARTER
INTERVAL 3 MONTH

-- 0 years, 0 months, 42 days, 0 hours, 0 minutes, and 0 seconds (0-0 42 0:0:0)
INTERVAL 6 WEEK
INTERVAL 42 DAY

-- 0 years, 0 months, 0 days, 25 hours, 0 minutes, and 0 seconds (0-0 0 25:0:0)
INTERVAL 25 HOUR
INTERVAL 1500 MINUTE
INTERVAL 90000 SECOND

-- 0 years, 0 months, 0 days, 1 hours, 30 minutes, and 0 seconds (0-0 0 1:30:0)
INTERVAL 90 MINUTE

-- 0 years, 0 months, 0 days, 0 hours, 1 minutes, and 30 seconds (0-0 0 0:1:30)
INTERVAL 90 SECOND

-- 0 years, 0 months, -5 days, 0 hours, 0 minutes, and 0 seconds (0-0 -5 0:0:0)
INTERVAL -5 DAY


For additional examples, see [ Interval literals
](/bigquery/docs/reference/standard-sql/lexical#interval_literal_single) .

####  Construct an interval with a datetime part range



INTERVAL datetime_parts_string starting_datetime_part TO ending_datetime_part


You can construct an ` INTERVAL ` object with a ` STRING ` that contains the
datetime parts that you want to include, a starting datetime part, and an
ending datetime part. The resulting ` INTERVAL ` object only includes datetime
parts in the specified range.

You can use one of the following formats with the  interval-supported datetime
parts  :

Datetime part string  |  Datetime parts  |  Example
---|---|---
` Y-M ` |  ` YEAR TO MONTH ` |  ` INTERVAL '2-11' YEAR TO MONTH `
` Y-M D ` |  ` YEAR TO DAY ` |  ` INTERVAL '2-11 28' YEAR TO DAY `
` Y-M D H ` |  ` YEAR TO HOUR ` |  ` INTERVAL '2-11 28 16' YEAR TO HOUR `
` Y-M D H:M ` |  ` YEAR TO MINUTE ` |  ` INTERVAL '2-11 28 16:15' YEAR TO
MINUTE `
` Y-M D H:M:S ` |  ` YEAR TO SECOND ` |  ` INTERVAL '2-11 28 16:15:14' YEAR TO
SECOND `
` M D ` |  ` MONTH TO DAY ` |  ` INTERVAL '11 28' MONTH TO DAY `
` M D H ` |  ` MONTH TO HOUR ` |  ` INTERVAL '11 28 16' MONTH TO HOUR `
` M D H:M ` |  ` MONTH TO MINUTE ` |  ` INTERVAL '11 28 16:15' MONTH TO MINUTE
`
` M D H:M:S ` |  ` MONTH TO SECOND ` |  ` INTERVAL '11 28 16:15:14' MONTH TO
SECOND `
` D H ` |  ` DAY TO HOUR ` |  ` INTERVAL '28 16' DAY TO HOUR `
` D H:M ` |  ` DAY TO MINUTE ` |  ` INTERVAL '28 16:15' DAY TO MINUTE `
` D H:M:S ` |  ` DAY TO SECOND ` |  ` INTERVAL '28 16:15:14' DAY TO SECOND `
` H:M ` |  ` HOUR TO MINUTE ` |  ` INTERVAL '16:15' HOUR TO MINUTE `
` H:M:S ` |  ` HOUR TO SECOND ` |  ` INTERVAL '16:15:14' HOUR TO SECOND `
` M:S ` |  ` MINUTE TO SECOND ` |  ` INTERVAL '15:14' MINUTE TO SECOND `

For example:



-- 0 years, 8 months, 20 days, 17 hours, 0 minutes, and 0 seconds (0-8 20 17:0:0)
INTERVAL '8 20 17' MONTH TO HOUR

-- 0 years, 8 months, -20 days, 17 hours, 0 minutes, and 0 seconds (0-8 -20 17:0:0)
INTERVAL '8 -20 17' MONTH TO HOUR


For additional examples, see [ Interval literals
](/bigquery/docs/reference/standard-sql/lexical#interval_literal_range) .

####  Interval-supported date and time parts

You can use the following date parts to construct an interval:

* ` YEAR ` : Number of years, ` Y ` .
* ` QUARTER ` : Number of quarters; each quarter is converted to ` 3 ` months, ` M ` .
* ` MONTH ` : Number of months, ` M ` . Each ` 12 ` months is converted to ` 1 ` year.
* ` WEEK ` : Number of weeks; Each week is converted to ` 7 ` days, ` D ` .
* ` DAY ` : Number of days, ` D ` .

You can use the following time parts to construct an interval:

* ` HOUR ` : Number of hours, ` H ` .
* ` MINUTE ` : Number of minutes, ` M ` . Each ` 60 ` minutes is converted to ` 1 ` hour.
* ` SECOND ` : Number of seconds, ` S ` . Each ` 60 ` seconds is converted to ` 1 ` minute. Can include up to six fractional digits (microsecond precision).
* ` MILLISECOND ` : Number of milliseconds.
* ` MICROSECOND ` : Number of microseconds.

##  JSON type

Name  |  Description
---|---
` JSON ` |  Represents JSON, a lightweight data-interchange format.

Expect these canonicalization behaviors when creating a value of JSON type:

* Booleans, strings, and nulls are preserved exactly.
* Whitespace characters are not preserved.
* A JSON value can store integers in the range of -9,223,372,036,854,775,808 (minimal signed 64-bit integer) to 18,446,744,073,709,551,615 (maximal unsigned 64-bit integer) and floating point numbers within a domain of ` FLOAT64 ` .
* The order of elements in an array is preserved exactly.
* The order of the members of an object is not guaranteed or preserved.
* If an object has duplicate keys, the first key that is found is preserved.
* Up to 500 levels can be nested.
* The format of the original string representation of a JSON number may not be preserved.

To learn more about the literal representation of a JSON type, see [ JSON
literals ](/bigquery/docs/reference/standard-sql/lexical#json_literals) .

##  Numeric types

Numeric types include the following types:

* ` INT64 ` with alias ` INT ` , ` SMALLINT ` , ` INTEGER ` , ` BIGINT ` , ` TINYINT ` , ` BYTEINT `

* ` NUMERIC ` with alias ` DECIMAL `

* ` BIGNUMERIC ` with alias ` BIGDECIMAL `

* ` FLOAT64 `

###  Integer type

Integers are numeric values that do not have fractional components.

Name  |  Range
---|---
` INT64 `
` INT `
` SMALLINT `
` INTEGER `
` BIGINT `
` TINYINT `
` BYTEINT ` |  -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807

` INT ` , ` SMALLINT ` , ` INTEGER ` , ` BIGINT ` , ` TINYINT ` , and `
BYTEINT ` are aliases for ` INT64 ` .

To learn more about the literal representation of an integer type, see [
Integer literals ](/bigquery/docs/reference/standard-
sql/lexical#integer_literals) .

###  Decimal types

Decimal type values are numeric values with fixed decimal precision and scale.
Precision is the number of digits that the number contains. Scale is how many
of these digits appear after the decimal point.

This type can represent decimal fractions exactly, and is suitable for
financial calculations.

Name  |  Precision, Scale, and Range
---|---
` NUMERIC `
` DECIMAL ` |  Precision: 38
Scale: 9
Minimum value greater than 0 that can be handled: 1e-9
Min: -9.9999999999999999999999999999999999999E+28
Max: 9.9999999999999999999999999999999999999E+28

` BIGNUMERIC `
` BIGDECIMAL ` |  Precision: 76.76 (the 77th digit is partial)
Scale: 38
Minimum value greater than 0 that can be handled: 1e-38
Min:
-5.7896044618658097711785492504343953926634992332820282019728792003956564819968E+38
Max:
5.7896044618658097711785492504343953926634992332820282019728792003956564819967E+38


` DECIMAL ` is an alias for ` NUMERIC ` .

` BIGDECIMAL ` is an alias for ` BIGNUMERIC ` .

To learn more about the literal representation of a ` NUMERIC ` type, see [ `
NUMERIC ` literals ](/bigquery/docs/reference/standard-
sql/lexical#numeric_literals) .

To learn more about the literal representation of a ` BIGNUMERIC ` type, see [
` BIGNUMERIC ` literals ](/bigquery/docs/reference/standard-
sql/lexical#bignumeric_literals) .

To learn more about how BigQuery rounds values stored as a ` DECIMAL ` type,
see [ rounding mode ](/bigquery/docs/schemas#rounding_mode) .

####  Parameterized decimal type

Parameterized Type  |  Description
---|---
` NUMERIC(P[,S]) `
` DECIMAL(P[,S]) ` |  A ` NUMERIC ` or ` DECIMAL ` type with a maximum
precision of  P  and maximum scale of  S  , where  P  and  S  are ` INT64 `
types.  S  is interpreted to be 0 if unspecified.

Maximum scale range: 0 ≤  S  ≤ 9
Maximum precision range: max(1,  S  ) ≤  P  ≤  S  \+ 29
` BIGNUMERIC(P[, S]) `
` BIGDECIMAL(P[, S]) ` |  A ` BIGNUMERIC ` or ` BIGDECIMAL ` type with a
maximum precision of  P  and maximum scale of  S  , where  P  and  S  are `
INT64 ` types.  S  is interpreted to be 0 if unspecified.

Maximum scale range: 0 ≤  S  ≤ 38
Maximum precision range: max(1,  S  ) ≤  P  ≤  S  \+ 38

If a value has more than ` S ` decimal digits, the value is rounded to ` S `
decimal digits. For example, inserting the value ` 1.125 ` into a ` NUMERIC(5,
2) ` column rounds ` 1.125 ` half-up to ` 1.13 ` .

If a value has more than ` P ` digits, throws an ` OUT_OF_RANGE ` error. For
example, inserting ` 1111 ` into a ` NUMERIC(5, 2) ` column returns an `
OUT_OF_RANGE ` error since ` 1111 ` is larger than ` 999.99 ` , the maximum
allowed value in a ` NUMERIC(5, 2) ` column.

See  Parameterized Data Types  for more information on parameterized types and
where they can be used.

**Note:** Applying restrictions with precision and scale does not impact the
storage size of the underlying data type.

###  Floating point type

Floating point values are approximate numeric values with fractional
components.

Name  |  Description
---|---
` FLOAT64 ` |  Double precision (approximate) numeric values.

To learn more about the literal representation of a floating point type, see [
Floating point literals ](/bigquery/docs/reference/standard-
sql/lexical#floating_point_literals) .

####  Floating point semantics

When working with floating point numbers, there are special non-numeric values
that need to be considered: ` NaN ` and ` +/-inf `

Arithmetic operators provide standard IEEE-754 behavior for all finite input
values that produce finite output and for all operations for which at least
one input is non-finite.

Function calls and operators return an overflow error if the input is finite
but the output would be non-finite. If the input contains non-finite values,
the output can be non-finite. In general functions do not introduce ` NaN ` s
or ` +/-inf ` . However, specific functions like ` IEEE_DIVIDE ` can return
non-finite values on finite input. All such cases are noted explicitly in [
Mathematical functions ](/bigquery/docs/reference/standard-
sql/mathematical_functions) .

Floating point values are approximations.

* The binary format used to represent floating point values can only represent a subset of the numbers between the most positive number and most negative number in the value range. This enables efficient handling of a much larger range than would be possible otherwise. Numbers that are not exactly representable are approximated by utilizing a close value instead. For example, ` 0.1 ` cannot be represented as an integer scaled by a power of ` 2 ` . When this value is displayed as a string, it is rounded to a limited number of digits, and the value approximating ` 0.1 ` might appear as ` "0.1" ` , hiding the fact that the value is not precise. In other situations, the approximation can be visible.
* Summation of floating point values might produce surprising results because of [ limited precision ](https://en.wikipedia.org/wiki/Floating-point_arithmetic#Accuracy_problems) . For example, ` (1e30 + 1) - 1e30 = 0 ` , while ` (1e30 - 1e30) + 1 = 1.0 ` . This is because the floating point value does not have enough precision to represent ` (1e30 + 1) ` , and the result is rounded to ` 1e30 ` . This example also shows that the result of the ` SUM ` aggregate function of floating points values depends on the order in which the values are accumulated. In general, this order is not deterministic and therefore the result is not deterministic. Thus, the resulting ` SUM ` of floating point values might not be deterministic and two executions of the same query on the same tables might produce different results.
* If the above points are concerning, use a  decimal type  instead.

#####  Mathematical function examples

Left Term  |  Operator  |  Right Term  |  Returns
---|---|---|---
Any value  |  ` + ` |  ` NaN ` |  ` NaN `
1.0  |  ` + ` |  ` +inf ` |  ` +inf `
1.0  |  ` + ` |  ` -inf ` |  ` -inf `
` -inf ` |  ` + ` |  ` +inf ` |  ` NaN `
Maximum ` FLOAT64 ` value  |  ` + ` |  Maximum ` FLOAT64 ` value  |  Overflow
error
Minimum ` FLOAT64 ` value  |  ` / ` |  2.0  |  0.0
1.0  |  ` / ` |  ` 0.0 ` |  "Divide by zero" error

Comparison operators provide standard IEEE-754 behavior for floating point
input.

#####  Comparison operator examples

Left Term  |  Operator  |  Right Term  |  Returns
---|---|---|---
` NaN ` |  ` = ` |  Any value  |  ` FALSE `
` NaN ` |  ` < ` |  Any value  |  ` FALSE `
Any value  |  ` < ` |  ` NaN ` |  ` FALSE `
-0.0  |  ` = ` |  0.0  |  ` TRUE `
-0.0  |  ` < ` |  0.0  |  ` FALSE `

For more information on how these values are ordered and grouped so they can
be compared, see  Ordering floating point values  .

##  Range type

**Preview**

This product or feature is subject to the "Pre-GA Offerings Terms" in the
General Service Terms section of the [ Service Specific Terms
](/terms/service-terms) . Pre-GA products and features are available "as is"
and might have limited support. For more information, see the [ launch stage
descriptions ](/products#product-launch-stages) .

**Note:** To provide feedback or request support for this feature, send an
email to [ bigquery-time-series-preview-support@google.com ](mailto:bigquery-
time-series-preview-support@google.com) .  Name  |  Range
---|---
` RANGE ` |  Contiguous range between two dates, datetimes, or timestamps. The
lower and upper bound for the range are optional. The lower bound is inclusive
and the upper bound is exclusive.

###  Declare a range type

A range type can be declared as follows:

Type Declaration  |  Meaning
---|---
` RANGE<DATE> ` |  Contiguous range between two dates.
` RANGE<DATETIME> ` |  Contiguous range between two datetimes.
` RANGE<TIMESTAMP> ` |  Contiguous range between two timestamps.

###  Construct a range

You can construct a range with the  ` RANGE ` constructor  or a  range literal
.

####  Construct a range with a constructor

You can construct a range with the ` RANGE ` constructor. To learn more, see [
` RANGE ` ](/bigquery/docs/reference/standard-sql/range-functions#range) .

####  Construct a range with a literal

You can construct a range with a range literal. The canonical format for a
range literal has the following parts:



RANGE<T> '[lower_bound, upper_bound)'


* ` T ` : The type of range. This can be ` DATE ` , ` DATETIME ` , or ` TIMESTAMP ` .
* ` lower_bound ` : The range starts from this value. This can be a [ date ](/bigquery/docs/reference/standard-sql/lexical#date_literals) , [ datetime ](/bigquery/docs/reference/standard-sql/lexical#datetime_literals) , or [ timestamp ](/bigquery/docs/reference/standard-sql/lexical#timestamp_literals) literal. If this value is ` UNBOUNDED ` or ` NULL ` , the range does not include a lower bound.
* ` upper_bound ` : The range ends before this value. This can be a [ date ](/bigquery/docs/reference/standard-sql/lexical#date_literals) , [ datetime ](/bigquery/docs/reference/standard-sql/lexical#datetime_literals) , or [ timestamp ](/bigquery/docs/reference/standard-sql/lexical#timestamp_literals) literal. If this value is ` UNBOUNDED ` or ` NULL ` , the range does not include an upper bound.

` T ` , ` lower_bound ` , and ` upper_bound ` must be of the same data type.

To learn more about the literal representation of a range type, see [ Range
literals ](/bigquery/docs/reference/standard-sql/lexical#range_literals) .

###  Additional details

The range type does not support arithmetic operators.

##  String type

Name  |  Description
---|---
` STRING ` |  Variable-length character (Unicode) data.

Input string values must be UTF-8 encoded and output string values will be
UTF-8 encoded. Alternate encodings like CESU-8 and Modified UTF-8 are not
treated as valid UTF-8.

All functions and operators that act on string values operate on Unicode
characters rather than bytes. For example, functions like ` SUBSTR ` and `
LENGTH ` applied to string input count the number of characters, not bytes.

Each Unicode character has a numeric value called a code point assigned to it.
Lower code points are assigned to lower characters. When characters are
compared, the code points determine which characters are less than or greater
than other characters.

Most functions on strings are also defined on bytes. The bytes version
operates on raw bytes rather than Unicode characters. Strings and bytes are
separate types that cannot be used interchangeably. There is no implicit
casting in either direction. Explicit casting between string and bytes does
UTF-8 encoding and decoding. Casting bytes to string returns an error if the
bytes are not valid UTF-8.

To learn more about the literal representation of a string type, see [ String
literals ](/bigquery/docs/reference/standard-
sql/lexical#string_and_bytes_literals) .

###  Parameterized string type

Parameterized Type  |  Description
---|---
` STRING(L) ` |  String with a maximum of  L  Unicode characters allowed in
the string, where  L  is a positive ` INT64 ` value. If a string with more
than  L  Unicode characters is assigned, throws an ` OUT_OF_RANGE ` error.

See  Parameterized Data Types  for more information on parameterized types and
where they can be used.

##  Struct type

Name  |  Description
---|---
` STRUCT ` |  Container of ordered fields each with a type (required) and
field name (optional).

To learn more about the literal representation of a struct type, see [ Struct
literals ](/bigquery/docs/reference/standard-sql/lexical#struct_literals) .

###  Declaring a struct type



STRUCT<T>


Struct types are declared using the angle brackets ( ` < ` and ` > ` ). The
type of the elements of a struct can be arbitrarily complex.

**Examples**

Type Declaration  |  Meaning
---|---
` STRUCT<INT64> ` |  Simple struct with a single unnamed 64-bit integer field.
` STRUCT<x STRING(10)> ` |  Simple struct with a single parameterized string
field named x.
` STRUCT<x STRUCT<y INT64, z INT64>> ` |  A struct with a nested struct named
` x ` inside it. The struct ` x ` has two fields, ` y ` and ` z ` , both of
which are 64-bit integers.
` STRUCT<inner_array ARRAY<INT64>> ` |  A struct containing an array named `
inner_array ` that holds 64-bit integer elements.

###  Constructing a struct

####  Tuple syntax



(expr1, expr2 [, ... ])


The output type is an anonymous struct type with anonymous fields with types
matching the types of the input expressions. There must be at least two
expressions specified. Otherwise this syntax is indistinguishable from an
expression wrapped with parentheses.

**Examples**

Syntax  |  Output Type  |  Notes
---|---|---
` (x, x+y) ` |  ` STRUCT<?,?> ` |  If column names are used (unquoted
strings), the struct field data type is derived from the column data type. ` x
` and ` y ` are columns, so the data types of the struct fields are derived
from the column types and the output type of the addition operator.

This syntax can also be used with struct comparison for comparison expressions
using multi-part keys, e.g., in a ` WHERE ` clause:



WHERE (Key1,Key2) IN ( (12,34), (56,78) )


####  Typeless struct syntax



STRUCT( expr1 [AS field_name] [, ... ])


Duplicate field names are allowed. Fields without names are considered
anonymous fields and cannot be referenced by name. struct values can be ` NULL
` , or can have ` NULL ` field values.

**Examples**

Syntax  |  Output Type
---|---
` STRUCT(1,2,3) ` |  ` STRUCT<int64,int64,int64> `
` STRUCT() ` |  ` STRUCT<> `
` STRUCT('abc') ` |  ` STRUCT<string> `
` STRUCT(1, t.str_col) ` |  ` STRUCT<int64, str_col string> `
` STRUCT(1 AS a, 'abc' AS b) ` |  ` STRUCT<a int64, b string> `
` STRUCT(str_col AS abc) ` |  ` STRUCT<abc string> `

####  Typed struct syntax



STRUCT<[field_name] field_type, ...>( expr1 [, ... ])


Typed syntax allows constructing structs with an explicit struct data type.
The output type is exactly the ` field_type ` provided. The input expression
is coerced to ` field_type ` if the two types are not the same, and an error
is produced if the types are not compatible. ` AS alias ` is not allowed on
the input expressions. The number of expressions must match the number of
fields in the type, and the expression types must be coercible or literal-
coercible to the field types.

**Examples**

Syntax  |  Output Type
---|---
` STRUCT<int64>(5) ` |  ` STRUCT<int64> `
` STRUCT<date>("2011-05-05") ` |  ` STRUCT<date> `
` STRUCT<x int64, y string>(1, t.str_col) ` |  ` STRUCT<x int64, y string> `
` STRUCT<int64>(int_col) ` |  ` STRUCT<int64> `
` STRUCT<x int64>(5 AS x) ` |  Error - Typed syntax does not allow ` AS `

###  Limited comparisons for structs

Structs can be directly compared using equality operators:

* Equal ( ` = ` )
* Not Equal ( ` != ` or ` <> ` )
* [ ` NOT ` ] ` IN `

Notice, though, that these direct equality comparisons compare the fields of
the struct pairwise in ordinal order ignoring any field names. If instead you
want to compare identically named fields of a struct, you can compare the
individual fields directly.

##  Time type

Name  |  Range
---|---
` TIME ` |  00:00:00 to 23:59:59.999999

A time value represents a time of day, as might be displayed on a clock,
independent of a specific date and time zone. To represent an absolute point
in time, use a  timestamp  .

#####  Canonical format



[H]H:[M]M:[S]S[.F]


* ` [H]H ` : One or two digit hour (valid values from 00 to 23).
* ` [M]M ` : One or two digit minutes (valid values from 00 to 59).
* ` [S]S ` : One or two digit seconds (valid values from 00 to 60).
* ` [.F] ` : Up to six fractional digits (microsecond precision).

To learn more about the literal representation of a time type, see [ Time
literals ](/bigquery/docs/reference/standard-sql/lexical#time_literals) .

##  Timestamp type

Name  |  Range
---|---
` TIMESTAMP ` |  0001-01-01 00:00:00 to 9999-12-31 23:59:59.999999 UTC

A timestamp value represents an absolute point in time, independent of any
time zone or convention such as daylight saving time (DST), with microsecond
precision.

A timestamp is typically represented internally as the number of elapsed
microseconds since a fixed initial point in time.

Note that a timestamp itself does not have a time zone; it represents the same
instant in time globally. However, the _display_ of a timestamp for human
readability usually includes a Gregorian date, a time, and a time zone, in an
implementation-dependent format. For example, the displayed values "2020-01-01
00:00:00 UTC", "2019-12-31 19:00:00 America/New_York", and "2020-01-01
05:30:00 Asia/Kolkata" all represent the same instant in time and therefore
represent the same timestamp value.

* To represent a Gregorian date as it might appear on a calendar (a civil date), use a  date  value.
* To represent a time as it might appear on a clock (a civil time), use a  time  value.
* To represent a Gregorian date and time as they might appear on a watch, use a  datetime  value.

#####  Canonical format

The canonical format for a timestamp literal has the following parts:



{
civil_date_part[time_part [time_zone]] |
civil_date_part[time_part[time_zone_offset]] |
civil_date_part[time_part[utc_time_zone]]
}

civil_date_part:
YYYY-[M]M-[D]D

time_part:
{ |T|t}[H]H:[M]M:[S]S[.F]


* ` YYYY ` : Four-digit year.
* ` [M]M ` : One or two digit month.
* ` [D]D ` : One or two digit day.
* ` { |T|t} ` : A space or a ` T ` or ` t ` separator. The ` T ` and ` t ` separators are flags for time.
* ` [H]H ` : One or two digit hour (valid values from 00 to 23).
* ` [M]M ` : One or two digit minutes (valid values from 00 to 59).
* ` [S]S ` : One or two digit seconds (valid values from 00 to 60).
* ` [.F] ` : Up to six fractional digits (microsecond precision).
* ` [time_zone] ` : String representing the time zone. When a time zone is not explicitly specified, the default time zone, UTC, is used. For details, see  time zones  .
* ` [time_zone_offset] ` : String representing the offset from the Coordinated Universal Time (UTC) time zone. For details, see  time zones  .
* ` [utc_time_zone] ` : String representing the Coordinated Universal Time (UTC), usually the letter ` Z ` or ` z ` . For details, see  time zones  .

To learn more about the literal representation of a timestamp type, see [
Timestamp literals ](/bigquery/docs/reference/standard-
sql/lexical#timestamp_literals) .

###  Time zones

A time zone is used when converting from a civil date or time (as might appear
on a calendar or clock) to a timestamp (an absolute time), or vice versa. This
includes the operation of parsing a string containing a civil date and time
like "2020-01-01 00:00:00" and converting it to a timestamp. The resulting
timestamp value itself does not store a specific time zone, because it
represents one instant in time globally.

Time zones are represented by strings in one of these canonical formats:

* Offset from Coordinated Universal Time (UTC), or the letter ` Z ` or ` z ` for UTC.
* Time zone name from the [ tz database ](http://www.iana.org/time-zones) .

The following timestamps are identical because the time zone offset for `
America/Los_Angeles ` is ` -08 ` for the specified date and time.



SELECT UNIX_MILLIS(TIMESTAMP '2008-12-25 15:30:00 America/Los_Angeles') AS millis;



SELECT UNIX_MILLIS(TIMESTAMP '2008-12-25 15:30:00-08:00') AS millis;


####  Offset from Coordinated Universal Time (UTC)

Format:



{+|-}H[H][:M[M]]



{Z|z}


Examples:



-08:00
-8:15
+3:00
+07:30
-7
Z


When using this format, no space is allowed between the time zone and the rest
of the timestamp.



2014-09-27 12:30:00.45-8:00
2014-09-27T12:30:00.45Z


####  Time zone name

Format:



tz_identifier


A time zone name is a tz identifier from the [ tz database
](http://www.iana.org/time-zones) . For a less comprehensive but simpler
reference, see the [ List of tz database time zones
](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones) on Wikipedia.

Examples:



America/Los_Angeles
America/Argentina/Buenos_Aires
Etc/UTC
Pacific/Auckland


When using a time zone name, a space is required between the name and the rest
of the timestamp:



2014-09-27 12:30:00.45 America/Los_Angeles


Note that not all time zone names are interchangeable even if they do happen
to report the same time during a given part of the year. For example, `
America/Los_Angeles ` reports the same time as ` UTC-7:00 ` during daylight
saving time (DST), but reports the same time as ` UTC-8:00 ` outside of DST.

If a time zone is not specified, the default time zone value is used.

####  Leap seconds

A timestamp is simply an offset from 1970-01-01 00:00:00 UTC, assuming there
are exactly 60 seconds per minute. Leap seconds are not represented as part of
a stored timestamp.

If the input contains values that use ":60" in the seconds field to represent
a leap second, that leap second is not preserved when converting to a
timestamp value. Instead that value is interpreted as a timestamp with ":00"
in the seconds field of the following minute.

Leap seconds do not affect timestamp computations. All timestamp computations
are done using Unix-style timestamps, which do not reflect leap seconds. Leap
seconds are only observable through functions that measure real-world time. In
these functions, it is possible for a timestamp second to be skipped or
repeated when there is a leap second.

Send feedback

Except as otherwise noted, the content of this page is licensed under the [
Creative Commons Attribution 4.0 License
](https://creativecommons.org/licenses/by/4.0/) , and code samples are
licensed under the [ Apache 2.0 License
](https://www.apache.org/licenses/LICENSE-2.0) . For details, see the [ Google
Developers Site Policies ](https://developers.google.com/site-policies) . Java
is a registered trademark of Oracle and/or its affiliates.

Last updated 2024-04-29 UTC.

[{ "type": "thumb-down", "id": "hardToUnderstand", "label":"Hard to
understand" },{ "type": "thumb-down", "id":
"incorrectInformationOrSampleCode", "label":"Incorrect information or sample
code" },{ "type": "thumb-down", "id": "missingTheInformationSamplesINeed",
"label":"Missing the information/samples I need" },{ "type": "thumb-down",
"id": "otherDown", "label":"Other" }]  [{ "type": "thumb-up", "id":
"easyToUnderstand", "label":"Easy to understand" },{ "type": "thumb-up", "id":
"solvedMyProblem", "label":"Solved my problem" },{ "type": "thumb-up", "id":
"otherUp", "label":"Other" }]  Need to tell us more?

* ###  Why Google

* [ Choosing Google Cloud ](/why-google-cloud/)
* [ Trust and security ](/trust-center/)
* [ Open cloud ](/open-cloud/)
* [ Multicloud ](/multicloud/)
* [ Global infrastructure ](/infrastructure/)
* [ Customers and case studies ](/customers/)
* [ Analyst reports ](/analyst-reports/)
* [ Whitepapers ](/whitepapers/)
* [ Blog ](//cloud.google.com/blog/)
* ###  Products and pricing

* [ Google Cloud pricing ](/pricing/)
* [ Google Workspace pricing ](//workspace.google.com/pricing.html)
* [ See all products ](/products/)
* ###  Solutions

* [ Infrastructure modernization ](/solutions/infrastructure-modernization/)
* [ Databases ](/solutions/databases/)
* [ Application modernization ](/solutions/application-modernization/)
* [ Smart analytics ](/solutions/smart-analytics/)
* [ Artificial Intelligence ](/solutions/ai/)
* [ Security ](/solutions/security/)
* [ Productivity & work transformation ](https://workspace.google.com/enterprise/)
* [ Industry solutions ](/solutions/#industry-solutions)
* [ DevOps solutions ](/solutions/devops/)
* [ Small business solutions ](/solutions/#section-14)
* [ See all solutions ](/solutions/)
* ###  Resources

* [ Google Cloud documentation ](/docs/)
* [ Google Cloud quickstarts ](/docs/get-started/)
* [ Google Cloud Marketplace ](/marketplace/)
* [ Learn about cloud computing ](/discover/)
* [ Support ](/support-hub/)
* [ Code samples ](/docs/samples)
* [ Cloud Architecture Center ](/architecture/)
* [ Training ](/learn/training/)
* [ Certifications ](/learn/certification/)
* [ Google for Developers ](//developers.google.com)
* [ Google Cloud for Startups ](/startup/)
* [ System status ](//status.cloud.google.com)
* [ Release Notes ](/release-notes)
* ###  Engage

* [ Contact sales ](/contact/)
* [ Find a Partner ](//cloud.google.com/find-a-partner)
* [ Become a Partner ](/partners/become-a-partner/)
* [ Events ](/events/)
* [ Podcasts ](/podcasts/)
* [ Developer Center ](/developers/)
* [ Press Corner ](https://www.googlecloudpresscorner.com/)
* [ Google Cloud on YouTube ](//www.youtube.com/googlecloud)
* [ Google Cloud Tech on YouTube ](//www.youtube.com/googlecloudplatform)
* [ Follow on X ](//x.com/googlecloud)
* [ Join User Research ](//userresearch.google.com/?reserved=1&utm_source=website&Q_Language=en&utm_medium=own_srch&utm_campaign=CloudWebFooter&utm_term=0&utm_content=0&productTag=clou&campaignDate=jul19&pType=devel&referral_code=jk212693)
* [ We're hiring. Join Google Cloud! ](//careers.google.com/cloud)
* [ Google Cloud Community ](https://www.googlecloudcommunity.com/)

* [ About Google ](//about.google/)
* [ Privacy ](//policies.google.com/privacy)
* [ Site terms ](//www.google.com/intl/en/policies/terms/regional.html)
* [ Google Cloud terms ](/product-terms/)
* Manage cookies
* [ Our third decade of climate action: join us ](/sustainability)
* Sign up for the Google Cloud newsletter  [ Subscribe ](/newsletter/)

* English
* Deutsch
* Español – América Latina
* Français
* Português – Brasil
* 中文 – 简体
* 日本語
* 한국어

