[ ![Google Cloud](https://www.gstatic.com/devrel-
devsite/prod/vc851b65627ca98cc752c9ae13e5f506cd6dbb7ed1bb4c8df6090c5f9130ed83c/cloud/images/cloud-
logo.svg) ](/)

*

[ Documentation ](https://cloud.google.com/docs) [ Technology areas
](https://cloud.google.com/docs/tech-area-overviews)

close

* [ AI solutions, generative AI, and ML  ](https://cloud.google.com/docs/ai-ml)
* [ Application development  ](https://cloud.google.com/docs/application-development)
* [ Application hosting  ](https://cloud.google.com/docs/application-hosting)
* [ Compute  ](https://cloud.google.com/docs/compute-area)
* [ Data analytics and pipelines  ](https://cloud.google.com/docs/data)
* [ Databases  ](https://cloud.google.com/docs/databases)
* [ Distributed, hybrid, and multicloud  ](https://cloud.google.com/docs/dhm-cloud)
* [ Industry solutions  ](https://cloud.google.com/docs/industry)
* [ Networking  ](https://cloud.google.com/docs/networking)
* [ Observability and monitoring  ](https://cloud.google.com/docs/observability)
* [ Security  ](https://cloud.google.com/docs/security)
* [ Storage  ](https://cloud.google.com/docs/storage)

[ Cross-product tools ](https://cloud.google.com/docs/cross-product-overviews)

close

* [ Access and resources management  ](https://cloud.google.com/docs/access-resources)
* [ Cloud SDK, languages, frameworks, and tools  ](https://cloud.google.com/docs/devtools)
* [ Costs and usage management  ](https://cloud.google.com/docs/costs-usage)
* [ Infrastructure as code  ](https://cloud.google.com/docs/iac)
* [ Migration  ](https://cloud.google.com/docs/migration)

[ Related sites ](https://cloud.google.com/)

close

* [ Google Cloud Home  ](https://cloud.google.com/)
* [ Free Trial and Free Tier  ](https://cloud.google.com/free)
* [ Architecture Center  ](https://cloud.google.com/architecture)
* [ Blog  ](https://cloud.google.com/blog)
* [ Contact Sales  ](https://cloud.google.com/contact)
* [ Google Cloud Developer Center  ](https://cloud.google.com/developers)
* [ Google Developer Center  ](https://developers.google.com/)
* [ Google Cloud Marketplace (in console)  ](https://console.cloud.google.com/marketplace)
* [ Google Cloud Marketplace Documentation  ](https://cloud.google.com/marketplace/docs)
* [ Google Cloud Skills Boost  ](https://www.cloudskillsboost.google/paths)
* [ Google Cloud Solution Center  ](https://cloud.google.com/solutions)
* [ Google Cloud Support  ](https://cloud.google.com/support-hub)
* [ Google Cloud Tech Youtube Channel  ](https://www.youtube.com/@googlecloudtech)

* English
* Deutsch
* Español – América Latina
* Français
* Português – Brasil
* 中文 – 简体
* 日本語
* 한국어

Sign in

* [ BigQuery ](https://cloud.google.com/bigquery)

[ Guides ](https://cloud.google.com/bigquery/docs/introduction) [ Reference
](https://cloud.google.com/bigquery/quotas) [ Samples
](https://cloud.google.com/bigquery/docs/samples) [ Resources
](https://cloud.google.com/bigquery/docs/release-notes)

[ Contact Us ](https://cloud.google.com/contact) [ Start free
](//console.cloud.google.com/freetrial)

[ ![Google Cloud](https://www.gstatic.com/devrel-
devsite/prod/vc851b65627ca98cc752c9ae13e5f506cd6dbb7ed1bb4c8df6090c5f9130ed83c/cloud/images/cloud-
logo.svg) ](/)

*

* [ Documentation  ](/docs)
* [ Guides  ](/bigquery/docs/introduction)
* [ Reference  ](/bigquery/quotas)
* [ Samples  ](/bigquery/docs/samples)
* [ Resources  ](/bigquery/docs/release-notes)
* [ Technology areas  ](/docs/tech-area-overviews)
* More
* [ Cross-product tools  ](/docs/cross-product-overviews)
* More
* [ Related sites  ](/)
* More
* [ Console  ](//console.cloud.google.com/)
* [ Contact Us  ](/contact)
* [ Start free  ](//console.cloud.google.com/freetrial)

* Quotas and limits

* [ Quotas and limits reference  ](/bigquery/quotas)
* [ Troubleshoot quota errors  ](/bigquery/docs/troubleshoot-quotas)
* BigQuery command-line tool

* [ bq command-line tool reference  ](/bigquery/docs/reference/bq-cli-reference)
* SQL in BigQuery

* GoogleSQL reference

* [ Query syntax  ](/bigquery/docs/reference/standard-sql/query-syntax)
* General reference

* [ Data types  ](/bigquery/docs/reference/standard-sql/data-types)
* [ Lexical structure and syntax  ](/bigquery/docs/reference/standard-sql/lexical)
* [ Conversion rules  ](/bigquery/docs/reference/standard-sql/conversion_rules)
* [ Format elements  ](/bigquery/docs/reference/standard-sql/format-elements)
* [ Collation  ](/bigquery/docs/reference/standard-sql/collation-concepts)
* [ Text analysis  ](/bigquery/docs/reference/standard-sql/text-analysis)
* [ BI Engine optimized functions  ](/bigquery/docs/bi-engine-optimized-sql)

* Expressions

* [ Function calls  ](/bigquery/docs/reference/standard-sql/functions-reference)
* [ Aggregate function calls  ](/bigquery/docs/reference/standard-sql/aggregate-function-calls)
* [ Window function calls  ](/bigquery/docs/reference/standard-sql/window-function-calls)
* [ Operators  ](/bigquery/docs/reference/standard-sql/operators)
* [ Conditional expressions  ](/bigquery/docs/reference/standard-sql/conditional_expressions)
* [ Subqueries  ](/bigquery/docs/reference/standard-sql/subqueries)

* Functions

* [ All functions and operators  ](/bigquery/docs/reference/standard-sql/functions-and-operators)
* [ AEAD encryption functions  ](/bigquery/docs/reference/standard-sql/aead_encryption_functions)
* [ Aggregate functions  ](/bigquery/docs/reference/standard-sql/aggregate_functions)
* [ Approximate aggregate functions  ](/bigquery/docs/reference/standard-sql/approximate_aggregate_functions)
* [ Array functions  ](/bigquery/docs/reference/standard-sql/array_functions)
* [ Bit functions  ](/bigquery/docs/reference/standard-sql/bit_functions)
* [ Conversion functions  ](/bigquery/docs/reference/standard-sql/conversion_functions)
* [ Date functions  ](/bigquery/docs/reference/standard-sql/date_functions)
* [ Datetime functions  ](/bigquery/docs/reference/standard-sql/datetime_functions)
* [ Debugging functions  ](/bigquery/docs/reference/standard-sql/debugging_functions)
* [ Differentially private aggregate functions  ](/bigquery/docs/reference/standard-sql/aggregate-dp-functions)
* [ Federated query functions  ](/bigquery/docs/reference/standard-sql/federated_query_functions)
* [ DLP encryption functions  ](/bigquery/docs/reference/standard-sql/dlp_functions)
* [ Geography functions  ](/bigquery/docs/reference/standard-sql/geography_functions)
* [ Hash functions  ](/bigquery/docs/reference/standard-sql/hash_functions)
* [ HyperLogLog++ functions  ](/bigquery/docs/reference/standard-sql/hll_functions)
* [ Interval functions  ](/bigquery/docs/reference/standard-sql/interval_functions)
* [ JSON functions  ](/bigquery/docs/reference/standard-sql/json_functions)
* [ Mathematical functions  ](/bigquery/docs/reference/standard-sql/mathematical_functions)
* [ Navigation functions  ](/bigquery/docs/reference/standard-sql/navigation_functions)
* [ Net functions  ](/bigquery/docs/reference/standard-sql/net_functions)
* [ Numbering functions  ](/bigquery/docs/reference/standard-sql/numbering_functions)
* [ Range functions  ](/bigquery/docs/reference/standard-sql/range-functions)
* [ Search functions  ](/bigquery/docs/reference/standard-sql/search_functions)
* [ Security functions  ](/bigquery/docs/reference/standard-sql/security_functions)
* [ Statistical aggregate functions  ](/bigquery/docs/reference/standard-sql/statistical_aggregate_functions)
* [ String functions  ](/bigquery/docs/reference/standard-sql/string_functions)
* [ Table functions (built-in)  ](/bigquery/docs/reference/standard-sql/table-functions-built-in)
* [ Text analysis functions  ](/bigquery/docs/reference/standard-sql/text-analysis-functions)
* [ Time functions  ](/bigquery/docs/reference/standard-sql/time_functions)
* [ Time series functions  ](/bigquery/docs/reference/standard-sql/time-series-functions)
* [ Timestamp functions  ](/bigquery/docs/reference/standard-sql/timestamp_functions)
* [ Utility functions  ](/bigquery/docs/reference/standard-sql/utility-functions)

* Statements

* [ Data definition language (DDL)  ](/bigquery/docs/reference/standard-sql/data-definition-language)
* [ Data manipulation language (DML)  ](/bigquery/docs/reference/standard-sql/dml-syntax)
* [ Data control language (DCL)  ](/bigquery/docs/reference/standard-sql/data-control-language)
* [ Procedural language  ](/bigquery/docs/reference/standard-sql/procedural-language)
* [ Export and load statements  ](/bigquery/docs/reference/standard-sql/other-statements)
* [ Debugging statements  ](/bigquery/docs/reference/standard-sql/debugging-statements)

* BigQuery ML SQL reference

* Creating and training models

* [ CREATE MODEL statement overview  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create)
* Regression and classification

* [ Linear and logistic regression  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-glm)
* [ Boosted trees  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-boosted-tree)
* [ Random forest  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-random-forest)
* [ Deep neural networks  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-dnn-models)
* [ Wide & Deep networks  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-wnd-models)
* [ AutoML models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-automl)

* Clustering

* [ K-means  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-kmeans)

* Dimensionality reduction

* [ Principal component analysis  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-pca)
* [ Autoencoder  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-autoencoder)

* Collaborative filtering

* [ Matrix factorization  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-matrix-factorization)

* Time series forecasting

* [ Univariate forecasting with ARIMA_PLUS models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-time-series)
* [ Multivariate forecasting with ARIMA_PLUS_XREG models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-multivariate-time-series)

* Importing models

* [ Open Neural Network Exchange (ONNX)  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-onnx)
* [ TensorFlow  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-tensorflow)
* [ TensorFlow Lite  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-tflite)
* [ XGBoost  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-xgboost)

* Remote models

* [ LLMs  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-remote-model)
* [ Cloud AI services  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-remote-model-service)
* [ Vertex AI hosted models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-remote-model-https)

* Feature engineering

* [ Feature transformation  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-transform)
* [ ML.TRANSFORM  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-transform)
* [ ML.FEATURE_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-feature)
* General functions

* [ ML.IMPUTER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-imputer)

* Numerical functions

* [ ML.BUCKETIZE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-bucketize)
* [ ML.MAX_ABS_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-max-abs-scaler)
* [ ML.MIN_MAX_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-min-max-scaler)
* [ ML.NORMALIZER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-normalizer)
* [ ML.POLYNOMIAL_EXPAND  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-polynomial-expand)
* [ ML.QUANTILE_BUCKETIZE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-quantile-bucketize)
* [ ML.ROBUST_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-robust-scaler)
* [ ML.STANDARD_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-standard-scaler)

* Categorical functions

* [ ML.FEATURE_CROSS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-feature-cross)
* [ ML.HASH_BUCKETIZE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-hash-bucketize)
* [ ML.LABEL_ENCODER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-label-encoder)
* [ ML.MULTI_HOT_ENCODER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-multi-hot-encoder)
* [ ML.ONE_HOT_ENCODER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-one-hot-encoder)

* Text functions

* [ ML.NGRAMS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-ngrams)
* [ ML.BAG_OF_WORDS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-bag-of-words)
* [ ML.TF_IDF  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-tf-idf)

* Image functions

* [ ML.CONVERT_COLOR_SPACE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-convert-color-space)
* [ ML.CONVERT_IMAGE_TYPE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-convert-image-type)
* [ ML.DECODE_IMAGE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-decode-image)
* [ ML.RESIZE_IMAGE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-resize-image)

* Point-in-time lookup functions

* [ ML.FEATURES_AT_TIME  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-feature-time)
* [ ML.ENTITY_FEATURES_AT_TIME  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-entity-feature-time)

* Hyperparameter tuning functions

* [ ML.TRIAL_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-trial-info)

* Evaluation functions

* [ ML.EVALUATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-evaluate)
* [ ML.ROC_CURVE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-roc)
* [ ML.CONFUSION_MATRIX  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-confusion)
* [ ML.ARIMA_EVALUATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-arima-evaluate)
* [ ML.TRAINING_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-train)
* [ ML.RECONSTRUCTION_LOSS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-reconstruction-loss)
* [ ML.HOLIDAY_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-holiday-info)

* Inference functions

* [ ML.PREDICT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-predict)
* [ ML.FORECAST  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-forecast)
* [ ML.RECOMMEND  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-recommend)
* [ ML.DETECT_ANOMALIES  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-detect-anomalies)

* Generative AI functions

* [ ML.GENERATE_TEXT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-text)
* [ ML.GENERATE_EMBEDDING  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-embedding)

* AI functions

* [ ML.UNDERSTAND_TEXT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-understand-text)
* [ ML.TRANSLATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-translate)
* [ ML.PROCESS_DOCUMENT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-process-document)
* [ ML.TRANSCRIBE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-transcribe)
* [ ML.ANNOTATE_IMAGE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-annotate-image)

* AI Explanation functions

* [ ML.EXPLAIN_PREDICT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-explain-predict)
* [ ML.EXPLAIN_FORECAST  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-explain-forecast)
* [ ML.GLOBAL_EXPLAIN  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-global-explain)
* [ ML.FEATURE_IMPORTANCE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-importance)
* [ ML.ADVANCED_WEIGHTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-advanced-weights)

* Model weights functions

* [ ML.WEIGHTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-weights)
* [ ML.CENTROIDS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-centroids)
* [ ML.PRINCIPAL_COMPONENTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-principal-components)
* [ ML.PRINCIPAL_COMPONENT_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-principal-component-info)
* [ ML.ARIMA_COEFFICIENTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-arima-coefficients)

* Model monitoring functions

* [ ML.DESCRIBE_DATA  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-describe-data)
* [ ML.VALIDATE_DATA_DRIFT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-validate-data-drift)
* [ ML.VALIDATE_DATA_SKEW  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-validate-data-skew)
* [ ML.TFDV_DESCRIBE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-tfdv-describe)
* [ ML.TFDV_VALIDATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-tfdv-validate)

* Math utility functions

* [ ML.DISTANCE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-distance)
* [ ML.LP_NORM  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-lp-norm)

* Model management statements

* [ EXPORT MODEL statement  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-export-model)
* [ ALTER MODEL statement  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-alter-model)
* [ DROP MODEL statement  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-drop-model)

* INFORMATION SCHEMA views

* [ Introduction  ](/bigquery/docs/information-schema-intro)
* Access control

* [ OBJECT_PRIVILEGES view  ](/bigquery/docs/information-schema-object-privileges)

* BI Engine

* [ BI_CAPACITIES  ](/bigquery/docs/information-schema-bi-capacities)
* [ BI_CAPACITY_CHANGES  ](/bigquery/docs/information-schema-bi-capacity-changes)

* Configurations

* [ EFFECTIVE_PROJECT_OPTIONS view  ](/bigquery/docs/information-schema-effective-project-options)
* [ ORGANIZATION_OPTIONS view  ](/bigquery/docs/information-schema-organization-options)
* [ ORGANIZATION_OPTIONS_CHANGES view  ](/bigquery/docs/information-schema-organization-options-changes)
* [ PROJECT_OPTIONS view  ](/bigquery/docs/information-schema-project-options)
* [ PROJECT_OPTIONS_CHANGES view  ](/bigquery/docs/information-schema-project-options-changes)

* Datasets

* [ SCHEMATA view  ](/bigquery/docs/information-schema-datasets-schemata)
* [ SCHEMATA_LINKS view  ](/bigquery/docs/information-schema-datasets-schemata-links)
* [ SCHEMATA_OPTIONS view  ](/bigquery/docs/information-schema-datasets-schemata-options)
* [ SHARED_DATASET_USAGE view  ](/bigquery/docs/information-schema-shared-dataset-usage)
* [ SCHEMATA_REPLICAS view  ](/bigquery/docs/information-schema-schemata-replicas)

* Jobs

* [ JOBS view  ](/bigquery/docs/information-schema-jobs)
* [ JOBS_BY_USER view  ](/bigquery/docs/information-schema-jobs-by-user)
* [ JOBS_BY_FOLDER view  ](/bigquery/docs/information-schema-jobs-by-folder)
* [ JOBS_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-jobs-by-organization)

* Jobs by timeslice

* [ JOBS_TIMELINE view  ](/bigquery/docs/information-schema-jobs-timeline)
* [ JOBS_TIMELINE_BY_USER view  ](/bigquery/docs/information-schema-jobs-timeline-by-user)
* [ JOBS_TIMELINE_BY_FOLDER view  ](/bigquery/docs/information-schema-jobs-timeline-by-folder)
* [ JOBS_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-jobs-timeline-by-organization)

* Reservations

* [ ASSIGNMENTS view  ](/bigquery/docs/information-schema-assignments)
* [ ASSIGNMENT_CHANGES view  ](/bigquery/docs/information-schema-assignments-changes)
* [ CAPACITY_COMMITMENTS view  ](/bigquery/docs/information-schema-capacity-commitments)
* [ CAPACITY_COMMITMENT_CHANGES view  ](/bigquery/docs/information-schema-capacity-commitment-changes)
* [ RESERVATIONS view  ](/bigquery/docs/information-schema-reservations)
* [ RESERVATION_CHANGES view  ](/bigquery/docs/information-schema-reservation-changes)
* [ RESERVATIONS_TIMELINE view  ](/bigquery/docs/information-schema-reservation-timeline)

* Routines

* [ PARAMETERS view  ](/bigquery/docs/information-schema-parameters)
* [ ROUTINES view  ](/bigquery/docs/information-schema-routines)
* [ ROUTINE_OPTIONS view  ](/bigquery/docs/information-schema-routine-options)

* Search indexes

* [ SEARCH_INDEXES view  ](/bigquery/docs/information-schema-indexes)
* [ SEARCH_INDEX_COLUMNS view  ](/bigquery/docs/information-schema-index-columns)

* Sessions

* [ SESSIONS_BY_PROJECT view  ](/bigquery/docs/information-schema-sessions-by-project)
* [ SESSIONS_BY_USER view  ](/bigquery/docs/information-schema-sessions-by-user)

* Streaming

* [ STREAMING_TIMELINE view  ](/bigquery/docs/information-schema-streaming)
* [ STREAMING_TIMELINE_BY_FOLDER view  ](/bigquery/docs/information-schema-streaming-by-folder)
* [ STREAMING_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-streaming-by-organization)

* Tables

* [ COLUMNS view  ](/bigquery/docs/information-schema-columns)
* [ COLUMN_FIELD_PATHS view  ](/bigquery/docs/information-schema-column-field-paths)
* [ CONSTRAINT_COLUMN_USAGE view  ](/bigquery/docs/information-schema-constraint-column-usage)
* [ KEY_COLUMN_USAGE view  ](/bigquery/docs/information-schema-key-column-usage)
* [ PARTITIONS view  ](/bigquery/docs/information-schema-partitions)
* [ TABLES view  ](/bigquery/docs/information-schema-tables)
* [ TABLE_OPTIONS view  ](/bigquery/docs/information-schema-table-options)
* [ TABLE_CONSTRAINTS view  ](/bigquery/docs/information-schema-table-constraints)
* [ TABLE_SNAPSHOTS view  ](/bigquery/docs/information-schema-snapshots)
* [ TABLE_STORAGE view  ](/bigquery/docs/information-schema-table-storage)
* [ TABLE_STORAGE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-table-storage-by-organization)
* [ TABLE_STORAGE_USAGE_TIMELINE view  ](/bigquery/docs/information-schema-table-storage-usage)
* [ TABLE_STORAGE_USAGE_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-table-storage-usage-by-organization)

* Vector indexes

* [ VECTOR_INDEXES view  ](/bigquery/docs/information-schema-vector-indexes)
* [ VECTOR_INDEX_COLUMNS view  ](/bigquery/docs/information-schema-vector-index-columns)
* [ VECTOR_INDEX_OPTIONS view  ](/bigquery/docs/information-schema-vector-index-options)

* Views

* [ VIEWS view  ](/bigquery/docs/information-schema-views)
* [ MATERIALIZED_VIEWS view  ](/bigquery/docs/information-schema-materialized-views)

* Write API

* [ WRITE_API_TIMELINE view  ](/bigquery/docs/information-schema-write-api)
* [ WRITE_API_TIMELINE_BY_FOLDER view  ](/bigquery/docs/information-schema-write-api-by-folder)
* [ WRITE_API_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-write-api-by-organization)

* Legacy SQL reference

* [ Migrating to GoogleSQL  ](/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql)
* [ Functions and operators  ](/bigquery/docs/reference/legacy-sql)
* [ Data types  ](/bigquery/docs/data-types)
* [ Querying nested and repeated fields  ](/bigquery/docs/legacy-nested-repeated)
* [ User-defined functions  ](/bigquery/docs/user-defined-functions-legacy)
* [ Table decorators  ](/bigquery/docs/table-decorators)

* BigQuery DataFrames Python API

* [ BigQuery DataFrames  ](/bigquery/docs/reference/bigquery-dataframes)
* BigQuery APIs

* BigQuery API reference

* [ BigQuery APIs and libraries overview  ](/bigquery/docs/reference/libraries-overview)
* BigQuery API reference

* [ BigQuery client libraries  ](/bigquery/docs/reference/libraries)
* [ BigQuery REST API  ](/bigquery/docs/reference/rest)
* REST reference (v2)

* REST Resources

* datasets

* [ Overview  ](/bigquery/docs/reference/rest/v2/datasets)
* [ delete  ](/bigquery/docs/reference/rest/v2/datasets/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/datasets/get)
* [ insert  ](/bigquery/docs/reference/rest/v2/datasets/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/datasets/list)
* [ patch  ](/bigquery/docs/reference/rest/v2/datasets/patch)
* [ undelete  ](/bigquery/docs/reference/rest/v2/datasets/undelete)
* [ update  ](/bigquery/docs/reference/rest/v2/datasets/update)

* jobs

* [ Overview  ](/bigquery/docs/reference/rest/v2/jobs)
* [ cancel  ](/bigquery/docs/reference/rest/v2/jobs/cancel)
* [ delete  ](/bigquery/docs/reference/rest/v2/jobs/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/jobs/get)
* [ getQueryResults  ](/bigquery/docs/reference/rest/v2/jobs/getQueryResults)
* [ insert  ](/bigquery/docs/reference/rest/v2/jobs/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/jobs/list)
* [ query  ](/bigquery/docs/reference/rest/v2/jobs/query)

* models

* [ Overview  ](/bigquery/docs/reference/rest/v2/models)
* [ delete  ](/bigquery/docs/reference/rest/v2/models/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/models/get)
* [ list  ](/bigquery/docs/reference/rest/v2/models/list)
* [ patch  ](/bigquery/docs/reference/rest/v2/models/patch)

* projects

* [ Overview  ](/bigquery/docs/reference/rest/v2/projects)
* [ getServiceAccount  ](/bigquery/docs/reference/rest/v2/projects/getServiceAccount)
* [ list  ](/bigquery/docs/reference/rest/v2/projects/list)

* routines

* [ Overview  ](/bigquery/docs/reference/rest/v2/routines)
* [ delete  ](/bigquery/docs/reference/rest/v2/routines/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/routines/get)
* [ insert  ](/bigquery/docs/reference/rest/v2/routines/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/routines/list)
* [ update  ](/bigquery/docs/reference/rest/v2/routines/update)

* rowAccessPolicies

* [ Overview  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies)
* [ getIamPolicy  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies/getIamPolicy)
* [ list  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies/list)
* [ testIamPermissions  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies/testIamPermissions)

* tabledata

* [ Overview  ](/bigquery/docs/reference/rest/v2/tabledata)
* [ insertAll  ](/bigquery/docs/reference/rest/v2/tabledata/insertAll)
* [ list  ](/bigquery/docs/reference/rest/v2/tabledata/list)

* tables

* [ Overview  ](/bigquery/docs/reference/rest/v2/tables)
* [ delete  ](/bigquery/docs/reference/rest/v2/tables/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/tables/get)
* [ getIamPolicy  ](/bigquery/docs/reference/rest/v2/tables/getIamPolicy)
* [ insert  ](/bigquery/docs/reference/rest/v2/tables/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/tables/list)
* [ patch  ](/bigquery/docs/reference/rest/v2/tables/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/rest/v2/tables/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/rest/v2/tables/testIamPermissions)
* [ update  ](/bigquery/docs/reference/rest/v2/tables/update)

* Types

* [ ConnectionProperty  ](/bigquery/docs/reference/rest/v2/ConnectionProperty)
* [ DataFormatOptions  ](/bigquery/docs/reference/rest/v2/DataFormatOptions)
* [ DatasetAccessEntry  ](/bigquery/docs/reference/rest/v2/DatasetAccessEntry)
* [ DmlStats  ](/bigquery/docs/reference/rest/v2/DmlStats)
* [ EncryptionConfiguration  ](/bigquery/docs/reference/rest/v2/EncryptionConfiguration)
* [ GetPolicyOptions  ](/bigquery/docs/reference/rest/v2/GetPolicyOptions)
* [ Job  ](/bigquery/docs/reference/rest/v2/Job)
* [ JobReference  ](/bigquery/docs/reference/rest/v2/JobReference)
* [ Policy  ](/bigquery/docs/reference/rest/v2/Policy)
* [ ProjectReference  ](/bigquery/docs/reference/rest/v2/ProjectReference)
* [ QueryParameter  ](/bigquery/docs/reference/rest/v2/QueryParameter)
* [ RoundingMode  ](/bigquery/docs/reference/rest/v2/RoundingMode)
* [ RowAccessPolicyReference  ](/bigquery/docs/reference/rest/v2/RowAccessPolicyReference)
* [ SessionInfo  ](/bigquery/docs/reference/rest/v2/SessionInfo)
* [ StandardSqlDataType  ](/bigquery/docs/reference/rest/v2/StandardSqlDataType)
* [ StandardSqlField  ](/bigquery/docs/reference/rest/v2/StandardSqlField)
* [ TableReference  ](/bigquery/docs/reference/rest/v2/TableReference)
* [ TargetType  ](/bigquery/docs/reference/rest/v2/TargetType)
* [ TestIamPermissionsResponse  ](/bigquery/docs/reference/rest/v2/TestIamPermissionsResponse)

* [ API uploads  ](/bigquery/docs/reference/api-uploads)

* BigQuery Data Policy API reference

* [ Data Policy REST reference  ](/bigquery/docs/reference/bigquerydatapolicy/rest)
* v1

* REST Resources

* projects.locations.dataPolicies

* [ Overview  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies)
* [ create  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/create)
* [ delete  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/delete)
* [ get  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/list)
* [ patch  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/patch)
* [ rename  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/rename)
* [ setIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/testIamPermissions)

* v1beta1

* REST Resources

* projects.locations.dataPolicies

* [ Overview  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies)
* [ create  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/create)
* [ delete  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/delete)
* [ get  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/list)
* [ patch  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/testIamPermissions)

* BigQuery Connections API reference

* [ BigQuery Connection client libraries  ](/bigquery/docs/reference/bigqueryconnection)
* [ BigQuery Connection REST API  ](/bigquery/docs/reference/bigqueryconnection/rest)
* RPC reference

* [ Overview  ](/bigquery/docs/reference/bigqueryconnection/rpc)
* [ google.cloud.bigquery.connection.v1  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.cloud.bigquery.connection.v1)
* [ google.cloud.bigquery.connection.v1beta1  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.cloud.bigquery.connection.v1beta1)
* [ google.iam.v1  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.iam.v1)
* [ google.type  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.type)

* REST reference (v1)

* REST Resources

* projects.locations.connections

* [ Overview  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections)
* [ create  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/create)
* [ delete  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/delete)
* [ get  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/list)
* [ patch  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/testIamPermissions)

* REST reference (v1beta1)

* REST Resources

* projects.locations.connections

* [ Overview  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections)
* [ create  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/create)
* [ delete  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/delete)
* [ get  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/list)
* [ patch  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/testIamPermissions)
* [ updateCredential  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/updateCredential)

* BigQuery Migration API reference

* [ BigQuery Migration client libraries  ](/bigquery/docs/reference/migration)
* [ BigQuery Migration REST API  ](/bigquery/docs/reference/migration/rest)
* REST reference (v2)

* REST Resources

* projects.locations.workflows

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows)
* [ create  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/create)
* [ delete  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/delete)
* [ get  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/list)
* [ start  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/start)

* projects.locations.workflows.subtasks

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows.subtasks)
* [ get  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows.subtasks/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows.subtasks/list)

* Types

* [ Distribution  ](/bigquery/docs/reference/migration/rest/Shared.Types/Distribution)
* [ ErrorInfo  ](/bigquery/docs/reference/migration/rest/Shared.Types/ErrorInfo)
* [ MetricKind  ](/bigquery/docs/reference/migration/rest/Shared.Types/MetricKind)
* [ ResourceInfo  ](/bigquery/docs/reference/migration/rest/Shared.Types/ResourceInfo)
* [ ValueType  ](/bigquery/docs/reference/migration/rest/Shared.Types/ValueType)

* REST reference (v2alpha)

* REST Resources

* projects.locations.workflows

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows)
* [ create  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/create)
* [ delete  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/delete)
* [ get  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/list)
* [ start  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/start)

* projects.locations.workflows.subtasks

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows.subtasks)
* [ get  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows.subtasks/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows.subtasks/list)

* RPC reference

* [ Overview  ](/bigquery/docs/reference/migration/rpc)
* [ google.api  ](/bigquery/docs/reference/migration/rpc/google.api)
* [ google.cloud.bigquery.migration.tasks.assessment.v2alpha  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.tasks.assessment.v2alpha)
* [ google.cloud.bigquery.migration.tasks.translation.v2alpha  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.tasks.translation.v2alpha)
* [ google.cloud.bigquery.migration.v2  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.v2)
* [ google.cloud.bigquery.migration.v2alpha  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.v2alpha)
* [ google.rpc  ](/bigquery/docs/reference/migration/rpc/google.rpc)

* BigQuery Storage API reference

* [ Storage API client libraries  ](/bigquery/docs/reference/storage/libraries)
* RPC reference

* [ Overview  ](/bigquery/docs/reference/storage/rpc)
* [ google.cloud.bigquery.storage.v1  ](/bigquery/docs/reference/storage/rpc/google.cloud.bigquery.storage.v1)
* [ google.cloud.bigquery.storage.v1beta1  ](/bigquery/docs/reference/storage/rpc/google.cloud.bigquery.storage.v1beta1)
* [ google.cloud.bigquery.storage.v1beta2  ](/bigquery/docs/reference/storage/rpc/google.cloud.bigquery.storage.v1beta2)
* [ google.rpc  ](/bigquery/docs/reference/storage/rpc/google.rpc)

* BigQuery Reservation API reference

* [ BigQuery Reservation API client libraries  ](/bigquery/docs/reference/reservations)
* [ BigQuery Reservation REST API  ](/bigquery/docs/reference/reservations/rest)
* RPC reference

* [ Overview  ](/bigquery/docs/reference/reservations/rpc)
* [ google.cloud.bigquery.reservation.v1  ](/bigquery/docs/reference/reservations/rpc/google.cloud.bigquery.reservation.v1)
* [ google.rpc  ](/bigquery/docs/reference/reservations/rpc/google.rpc)

* REST reference (v1)

* REST Resources

* projects.locations

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations)
* [ getBiReservation  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/getBiReservation)
* [ searchAllAssignments  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/searchAllAssignments)
* [ searchAssignments  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/searchAssignments)
* [ updateBiReservation  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/updateBiReservation)

* projects.locations.capacityCommitments

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments)
* [ create  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/create)
* [ delete  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/delete)
* [ get  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/get)
* [ list  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/list)
* [ merge  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/merge)
* [ patch  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/patch)
* [ split  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/split)

* projects.locations.reservations

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations)
* [ create  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/create)
* [ delete  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/delete)
* [ get  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/get)
* [ list  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/list)
* [ patch  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/patch)

* projects.locations.reservations.assignments

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments)
* [ create  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/create)
* [ delete  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/delete)
* [ list  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/list)
* [ move  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/move)
* [ patch  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/patch)

* Types

* [ BiReservation  ](/bigquery/docs/reference/reservations/rest/v1/BiReservation)
* [ Edition  ](/bigquery/docs/reference/reservations/rest/v1/Edition)

* BigQuery Analytics Hub API reference

* [ Analytics Hub client libraries  ](/bigquery/docs/reference/analytics-hub)
* [ Analytics Hub REST API  ](/bigquery/docs/reference/analytics-hub/rest)
* REST reference (v1)

* REST Resources

* organizations.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/organizations.locations.dataExchanges)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/organizations.locations.dataExchanges/list)

* projects.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/list)
* [ listSubscriptions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/listSubscriptions)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/setIamPolicy)
* [ subscribe  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/subscribe)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/testIamPermissions)

* projects.locations.dataExchanges.listings

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/list)
* [ listSubscriptions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/listSubscriptions)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/setIamPolicy)
* [ subscribe  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/subscribe)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/testIamPermissions)

* projects.locations.subscriptions

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/get)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/list)
* [ refresh  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/refresh)
* [ revoke  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/revoke)

* Types

* [ ListSharedResourceSubscriptionsResponse  ](/bigquery/docs/reference/analytics-hub/rest/v1/ListSharedResourceSubscriptionsResponse)
* [ Operation  ](/bigquery/docs/reference/analytics-hub/rest/v1/Operation)

* REST reference (v1beta1)

* REST Resources

* organizations.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/organizations.locations.dataExchanges)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/organizations.locations.dataExchanges/list)

* projects.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/list)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/testIamPermissions)

* projects.locations.dataExchanges.listings

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/list)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/setIamPolicy)
* [ subscribe  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/subscribe)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/testIamPermissions)

* BigQuery Data Transfer Service API reference

* [ BigQuery Data Transfer Service client libraries  ](/bigquery/docs/reference/datatransfer/libraries)
* [ BigQuery Data Transfer Service REST API  ](/bigquery/docs/reference/datatransfer/rest)
* REST reference

* REST Resources

* projects

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects)
* [ enrollDataSources  ](/bigquery/docs/reference/datatransfer/rest/v1/projects/enrollDataSources)

* projects.dataSources

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources)
* [ checkValidCreds  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources/checkValidCreds)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources/list)

* projects.locations

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations)
* [ enrollDataSources  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/enrollDataSources)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/list)
* [ unenrollDataSources  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/unenrollDataSources)

* projects.locations.dataSources

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources)
* [ checkValidCreds  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/checkValidCreds)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list)

* projects.locations.transferConfigs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs)
* [ create  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/create)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/list)
* [ patch  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/patch)
* [ scheduleRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/scheduleRuns)
* [ startManualRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/startManualRuns)

* projects.locations.transferConfigs.runs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs/list)

* projects.locations.transferConfigs.runs.transferLogs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs.transferLogs)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs.transferLogs/list)

* projects.transferConfigs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs)
* [ create  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/create)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/list)
* [ patch  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/patch)
* [ scheduleRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/scheduleRuns)
* [ startManualRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/startManualRuns)

* projects.transferConfigs.runs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs/list)

* projects.transferConfigs.runs.transferLogs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs.transferLogs)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs.transferLogs/list)

* Types

* [ CheckValidCredsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/CheckValidCredsResponse)
* [ Code  ](/bigquery/docs/reference/datatransfer/rest/v1/Code)
* [ EmailPreferences  ](/bigquery/docs/reference/datatransfer/rest/v1/EmailPreferences)
* [ ListDataSourcesResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListDataSourcesResponse)
* [ ListTransferConfigsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListTransferConfigsResponse)
* [ ListTransferLogsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListTransferLogsResponse)
* [ ListTransferRunsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListTransferRunsResponse)
* [ RunAttempt  ](/bigquery/docs/reference/datatransfer/rest/v1/RunAttempt)
* [ ScheduleTransferRunsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ScheduleTransferRunsResponse)
* [ StartManualTransferRunsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/StartManualTransferRunsResponse)
* [ TimeRange  ](/bigquery/docs/reference/datatransfer/rest/v1/TimeRange)
* [ TransferState  ](/bigquery/docs/reference/datatransfer/rest/v1/TransferState)

* RPC reference

* [ Overview  ](/bigquery/docs/reference/datatransfer/rpc)
* [ google.cloud.bigquery.datatransfer.v1  ](/bigquery/docs/reference/datatransfer/rpc/google.cloud.bigquery.datatransfer.v1)
* [ google.cloud.location  ](/bigquery/docs/reference/datatransfer/rpc/google.cloud.location)
* [ google.rpc  ](/bigquery/docs/reference/datatransfer/rpc/google.rpc)

* BigQuery BigLake API reference

* [ BigLake REST API  ](/bigquery/docs/reference/biglake/rest)
* REST reference (v1)

* REST Resources

* projects.locations.catalogs

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/list)

* projects.locations.catalogs.databases

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/patch)

* projects.locations.catalogs.databases.tables

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/patch)
* [ rename  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/rename)

* REST reference (v1alpha1)

* REST Resources

* projects.locations.catalogs

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/list)

* projects.locations.catalogs.databases

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/patch)

* projects.locations.catalogs.databases.locks

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks)
* [ check  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/check)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/delete)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/list)

* projects.locations.catalogs.databases.tables

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/patch)
* [ rename  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/rename)

* BigQuery routines

* [ System procedures reference  ](/bigquery/docs/reference/system-procedures)
* [ System variables reference  ](/bigquery/docs/reference/system-variables)
* BigQuery audit logging

* BigQuery audit logging reference

* [ Overview  ](/bigquery/docs/reference/auditlogs)
* Types

* [ AuditData  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/AuditData)
* [ AuditLogConfig.LogType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/AuditLogConfig.LogType)
* [ BigQueryAuditMetadata  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata)
* [ BigQueryAuditMetadata.AccessChange.Action  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.AccessChange.Action)
* [ BigQueryAuditMetadata.ConnectionChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ConnectionChange.Reason)
* [ BigQueryAuditMetadata.CreateDisposition  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.CreateDisposition)
* [ BigQueryAuditMetadata.DatasetChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.DatasetChange.Reason)
* [ BigQueryAuditMetadata.DatasetCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.DatasetCreation.Reason)
* [ BigQueryAuditMetadata.DatasetDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.DatasetDeletion.Reason)
* [ BigQueryAuditMetadata.JobConfig.Query.Priority  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobConfig.Query.Priority)
* [ BigQueryAuditMetadata.JobConfig.Type  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobConfig.Type)
* [ BigQueryAuditMetadata.JobDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobDeletion.Reason)
* [ BigQueryAuditMetadata.JobInsertion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobInsertion.Reason)
* [ BigQueryAuditMetadata.JobState  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobState)
* [ BigQueryAuditMetadata.ModelCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelCreation.Reason)
* [ BigQueryAuditMetadata.ModelDataChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelDataChange.Reason)
* [ BigQueryAuditMetadata.ModelDataRead.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelDataRead.Reason)
* [ BigQueryAuditMetadata.ModelDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelDeletion.Reason)
* [ BigQueryAuditMetadata.ModelMetadataChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelMetadataChange.Reason)
* [ BigQueryAuditMetadata.OperationType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.OperationType)
* [ BigQueryAuditMetadata.QueryStatementType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.QueryStatementType)
* [ BigQueryAuditMetadata.RoutineChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.RoutineChange.Reason)
* [ BigQueryAuditMetadata.RoutineCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.RoutineCreation.Reason)
* [ BigQueryAuditMetadata.RoutineDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.RoutineDeletion.Reason)
* [ BigQueryAuditMetadata.SearchIndexCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.SearchIndexCreation.Reason)
* [ BigQueryAuditMetadata.SearchIndexDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.SearchIndexDeletion.Reason)
* [ BigQueryAuditMetadata.TableChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableChange.Reason)
* [ BigQueryAuditMetadata.TableCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableCreation.Reason)
* [ BigQueryAuditMetadata.TableDataChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableDataChange.Reason)
* [ BigQueryAuditMetadata.TableDataRead.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableDataRead.Reason)
* [ BigQueryAuditMetadata.TableDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableDeletion.Reason)
* [ BigQueryAuditMetadata.UnlinkDataset.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.UnlinkDataset.Reason)
* [ BigQueryAuditMetadata.WriteDisposition  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.WriteDisposition)
* [ BindingDelta.Action  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BindingDelta.Action)
* [ DatasetAccessEntry  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/DatasetAccessEntry)
* [ DatasetAccessEntry.TargetType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/DatasetAccessEntry.TargetType)
* [ Expr  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/Expr)
* [ JoinRestrictionPolicy.JoinCondition  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/JoinRestrictionPolicy.JoinCondition)
* [ Policy  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/Policy)
* [ RoutineReference  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/RoutineReference)
* [ Status  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/Status)
* [ TableReference  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/TableReference)

* [ AI solutions, generative AI, and ML  ](/docs/ai-ml)
* [ Application development  ](/docs/application-development)
* [ Application hosting  ](/docs/application-hosting)
* [ Compute  ](/docs/compute-area)
* [ Data analytics and pipelines  ](/docs/data)
* [ Databases  ](/docs/databases)
* [ Distributed, hybrid, and multicloud  ](/docs/dhm-cloud)
* [ Industry solutions  ](/docs/industry)
* [ Networking  ](/docs/networking)
* [ Observability and monitoring  ](/docs/observability)
* [ Security  ](/docs/security)
* [ Storage  ](/docs/storage)

* [ Access and resources management  ](/docs/access-resources)
* [ Cloud SDK, languages, frameworks, and tools  ](/docs/devtools)
* [ Costs and usage management  ](/docs/costs-usage)
* [ Infrastructure as code  ](/docs/iac)
* [ Migration  ](/docs/migration)

* [ Google Cloud Home  ](/)
* [ Free Trial and Free Tier  ](/free)
* [ Architecture Center  ](/architecture)
* [ Blog  ](https://cloud.google.com/blog)
* [ Contact Sales  ](/contact)
* [ Google Cloud Developer Center  ](/developers)
* [ Google Developer Center  ](https://developers.google.com/)
* [ Google Cloud Marketplace (in console)  ](https://console.cloud.google.com/marketplace)
* [ Google Cloud Marketplace Documentation  ](/marketplace/docs)
* [ Google Cloud Skills Boost  ](https://www.cloudskillsboost.google/paths)
* [ Google Cloud Solution Center  ](/solutions)
* [ Google Cloud Support  ](/support-hub)
* [ Google Cloud Tech Youtube Channel  ](https://www.youtube.com/@googlecloudtech)

* [ Home ](https://cloud.google.com/)
* [ BigQuery ](https://cloud.google.com/bigquery)
* [ Documentation ](https://cloud.google.com/bigquery/docs)
* [ Reference ](https://cloud.google.com/bigquery/quotas)

Send feedback

#  Format elements

Stay organized with collections  Save and categorize content based on your
preferences.

GoogleSQL for BigQuery supports the following format elements.

##  Format elements for date and time parts

Many GoogleSQL parsing and formatting functions rely on a format string to
describe the format of parsed or formatted values. A format string represents
the textual form of date and time and contains separate format elements that
are applied left-to-right.

These functions use format strings:

* [ ` FORMAT_DATE ` ](/bigquery/docs/reference/standard-sql/date_functions#format_date)
* [ ` FORMAT_DATETIME ` ](/bigquery/docs/reference/standard-sql/datetime_functions#format_datetime)
* [ ` FORMAT_TIME ` ](/bigquery/docs/reference/standard-sql/time_functions#format_time)
* [ ` FORMAT_TIMESTAMP ` ](/bigquery/docs/reference/standard-sql/timestamp_functions#format_timestamp)
* [ ` PARSE_DATE ` ](/bigquery/docs/reference/standard-sql/date_functions#parse_date)
* [ ` PARSE_DATETIME ` ](/bigquery/docs/reference/standard-sql/datetime_functions#parse_datetime)
* [ ` PARSE_TIME ` ](/bigquery/docs/reference/standard-sql/time_functions#parse_time)
* [ ` PARSE_TIMESTAMP ` ](/bigquery/docs/reference/standard-sql/timestamp_functions#parse_timestamp)

Format strings generally support the following elements:

Format element  |  Type  |  Description  |  Example
---|---|---|---
` %A ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The full weekday name (English).  |  ` Wednesday `
` %a ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The abbreviated weekday name (English).  |  ` Wed `
` %B ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The full month name (English).  |  ` January `
` %b ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The abbreviated month name (English).  |  ` Jan `
` %C ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The century (a year divided by 100 and truncated to an integer) as a
decimal number (00-99).  |  ` 20 `
` %c ` |  ` DATETIME `
` TIMESTAMP `
|  The date and time representation (English).  |  ` Wed Jan 20 21:47:00 2021
`
` %D ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The date in the format %m/%d/%y.  |  ` 01/20/21 `
` %d ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The day of the month as a decimal number (01-31).  |  ` 20 `
` %e ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The day of month as a decimal number (1-31); single digits are preceded by
a space.  |  ` 20 `
` %F ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The date in the format %Y-%m-%d.  |  ` 2021-01-20 `
` %G ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The [ ISO 8601 ](https://en.wikipedia.org/wiki/ISO_8601) year with century
as a decimal number. Each ISO year begins on the Monday before the first
Thursday of the Gregorian calendar year. Note that %G and %Y may produce
different results near Gregorian year boundaries, where the Gregorian year and
ISO year can diverge.  |  ` 2021 `
` %g ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The [ ISO 8601 ](https://en.wikipedia.org/wiki/ISO_8601) year without
century as a decimal number (00-99). Each ISO year begins on the Monday before
the first Thursday of the Gregorian calendar year. Note that %g and %y may
produce different results near Gregorian year boundaries, where the Gregorian
year and ISO year can diverge.  |  ` 21 `
` %H ` |  ` TIME `
` DATETIME `
` TIMESTAMP `
|  The hour (24-hour clock) as a decimal number (00-23).  |  ` 21 `
` %h ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The abbreviated month name (English).  |  ` Jan `
` %I ` |  ` TIME `
` DATETIME `
` TIMESTAMP `
|  The hour (12-hour clock) as a decimal number (01-12).  |  ` 09 `
` %J ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The [ ISO 8601 ](https://en.wikipedia.org/wiki/ISO_8601) 1-based day of the
year (001-364 or 001-371 days). If the ISO year is not set, this format
element is ignored.  |  ` 364 `
` %j ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The day of the year as a decimal number (001-366).  |  ` 020 `
` %k ` |  ` TIME `
` DATETIME `
` TIMESTAMP `
|  The hour (24-hour clock) as a decimal number (0-23); single digits are
preceded by a space.  |  ` 21 `
` %l ` |  ` TIME `
` DATETIME `
` TIMESTAMP `
|  The hour (12-hour clock) as a decimal number (1-12); single digits are
preceded by a space.  |  ` 9 `
` %M ` |  ` TIME `
` DATETIME `
` TIMESTAMP `
|  The minute as a decimal number (00-59).  |  ` 47 `
` %m ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The month as a decimal number (01-12).  |  ` 01 `
` %n ` |  All  |  A newline character.  |
` %P ` |  ` TIME `
` DATETIME `
` TIMESTAMP `
|  When formatting, this is either am or pm.
This cannot be used with parsing. Instead, use %p.
|  ` pm `
` %p ` |  ` TIME `
` DATETIME `
` TIMESTAMP `
|  When formatting, this is either AM or PM.
When parsing, this can be used with am, pm, AM, or PM.
|  ` PM `
` %Q ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The quarter as a decimal number (1-4).  |  ` 1 `
` %R ` |  ` TIME `
` DATETIME `
` TIMESTAMP `
|  The time in the format %H:%M.  |  ` 21:47 `
` %S ` |  ` TIME `
` DATETIME `
` TIMESTAMP `
|  The second as a decimal number (00-60).  |  ` 00 `
` %s ` |  ` TIME `
` DATETIME `
` TIMESTAMP `
|  The number of seconds since 1970-01-01 00:00:00. Always overrides all other
format elements, independent of where %s appears in the string. If multiple %s
elements appear, then the last one takes precedence.  |  ` 1611179220 `
` %T ` |  ` TIME `
` DATETIME `
` TIMESTAMP `
|  The time in the format %H:%M:%S.  |  ` 21:47:00 `
` %t ` |  All  |  A tab character.  |
` %U ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The week number of the year (Sunday as the first day of the week) as a
decimal number (00-53).  |  ` 03 `
` %u ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The weekday (Monday as the first day of the week) as a decimal number
(1-7).  |  ` 3 `
` %V ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The [ ISO 8601 ](https://en.wikipedia.org/wiki/ISO_week_date) week number
of the year (Monday as the first day of the week) as a decimal number (01-53).
If the week containing January 1 has four or more days in the new year, then
it is week 1; otherwise it is week 53 of the previous year, and the next week
is week 1.  |  ` 03 `
` %W ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The week number of the year (Monday as the first day of the week) as a
decimal number (00-53).  |  ` 03 `
` %w ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The weekday (Sunday as the first day of the week) as a decimal number
(0-6).  |  ` 3 `
` %X ` |  ` TIME `
` DATETIME `
` TIMESTAMP `
|  The time representation in HH:MM:SS format.  |  ` 21:47:00 `
` %x ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The date representation in MM/DD/YY format.  |  ` 01/20/21 `
` %Y ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The year with century as a decimal number.  |  ` 2021 `
` %y ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  The year without century as a decimal number (00-99), with an optional
leading zero. Can be mixed with %C. If %C is not specified, years 00-68 are
2000s, while years 69-99 are 1900s.  |  ` 21 `
` %Z ` |  ` TIMESTAMP `
|  The time zone name.  |  ` UTC-5 `
` %z ` |  ` TIMESTAMP `
|  The offset from the Prime Meridian in the format +HHMM or -HHMM as
appropriate, with positive values representing locations east of Greenwich.  |
` -0500 `
` %% ` |  All  |  A single % character.  |  ` % `
` %Ez ` |  ` TIMESTAMP `
|  RFC 3339-compatible numeric time zone (+HH:MM or -HH:MM).  |  ` -05:00 `
` %E<number>S ` |  ` TIME `
` DATETIME `
` TIMESTAMP `
|  Seconds with <number> digits of fractional precision.  |  ` 00.000 for %E3S
`
` %E*S ` |  ` TIME `
` DATETIME `
` TIMESTAMP `
|  Seconds with full fractional precision (a literal '*').  |  ` 00.123456 `
` %E4Y ` |  ` DATE `
` DATETIME `
` TIMESTAMP `
|  Four-character years (0001 ... 9999). Note that %Y produces as many
characters as it takes to fully render the year.  |  ` 2021 `

Examples:



SELECT FORMAT_DATE("%b-%d-%Y", DATE "2008-12-25") AS formatted;

/*-------------*
| formatted   |
+-------------+
| Dec-25-2008 |
*-------------*/



SELECT
FORMAT_DATETIME("%c", DATETIME "2008-12-25 15:30:00")
AS formatted;

/*--------------------------*
| formatted                |
+--------------------------+
| Thu Dec 25 15:30:00 2008 |
*--------------------------*/



SELECT FORMAT_TIME("%R", TIME "15:30:00") as formatted_time;

/*----------------*
| formatted_time |
+----------------+
| 15:30          |
*----------------*/



SELECT FORMAT_TIMESTAMP("%b %Y %Ez", TIMESTAMP "2008-12-25 15:30:00+00")
AS formatted;

/*-----------------*
| formatted       |
+-----------------+
| Dec 2008 +00:00 |
*-----------------*/



SELECT PARSE_DATE("%Y%m%d", "20081225") AS parsed;

/*------------*
| parsed     |
+------------+
| 2008-12-25 |
*------------*/



SELECT PARSE_DATETIME('%Y-%m-%d %H:%M:%S', '1998-10-18 13:45:55') AS datetime;

/*---------------------*
| datetime            |
+---------------------+
| 1998-10-18T13:45:55 |
*---------------------*/



SELECT PARSE_TIME('%I:%M:%S %p', '2:23:38 pm') AS parsed_time

/*-------------*
| parsed_time |
+-------------+
| 14:23:38    |
*-------------*/



SELECT PARSE_TIMESTAMP("%c", "Thu Dec 25 07:30:00 2008") AS parsed;

-- Display of results may differ, depending upon the environment and
-- time zone where this query was executed.
/*-------------------------*
| parsed                  |
+-------------------------+
| 2008-12-25 07:30:00 UTC |
*-------------------------*/


##  Format clause for CAST



format_clause:
FORMAT format_model

format_model:
format_string_expression


The format clause can be used in some [ ` CAST ` functions
](/bigquery/docs/reference/standard-sql/conversion_functions#cast) . You use a
format clause to provide instructions for how to conduct a cast. For example,
you could instruct a cast to convert a sequence of bytes to a BASE64-encoded
string instead of a UTF-8-encoded string.

The format clause includes a format model. The format model can contain format
elements combined together as a format string.

###  Format bytes as string



CAST(bytes_expression AS STRING FORMAT format_string_expression)


You can cast a sequence of bytes to a string with a format element in the
format string. If the bytes cannot be formatted with a format element, an
error is returned. If the sequence of bytes is ` NULL ` , the result is ` NULL
` . Format elements are case-insensitive.

Format element  |  Returns  |  Example
---|---|---
HEX  |  Converts a sequence of bytes into a hexadecimal string.  |  Input:
b'\x00\x01\xEF\xFF'
Output: 0001efff
BASEX  |  Converts a sequence of bytes into a  BASEX  encoded string. X
represents one of these numbers: 2, 8, 16, 32, 64.  |  Input as BASE8:
b'\x02\x11\x3B'
Output: 00410473
BASE64M  |  Converts a sequence of bytes into a  BASE64  -encoded string based
on [ rfc 2045 ](https://tools.ietf.org/html/rfc2045#section-6.8) for MIME.
Generates a newline character ("\n") every 76 characters.  |  Input:
b'\xde\xad\xbe\xef'
Output: 3q2+7w==
ASCII  |  Converts a sequence of bytes that are ASCII values to a string. If
the input contains bytes that are not a valid ASCII encoding, an error is
returned.  |  Input: b'\x48\x65\x6c\x6c\x6f'
Output: Hello
UTF-8  |  Converts a sequence of bytes that are UTF-8 values to a string. If
the input contains bytes that are not a valid UTF-8 encoding, an error is
returned.  |  Input: b'\x24'
Output: $
UTF8  |  Same behavior as UTF-8.  |

**Return type**

` STRING `

**Example**



SELECT CAST(b'\x48\x65\x6c\x6c\x6f' AS STRING FORMAT 'ASCII') AS bytes_to_string;

/*-----------------*
| bytes_to_string |
+-----------------+
| Hello           |
*-----------------*/


###  Format string as bytes



CAST(string_expression AS BYTES FORMAT format_string_expression)


You can cast a string to bytes with a format element in the format string. If
the string cannot be formatted with the format element, an error is returned.
Format elements are case-insensitive.

In the string expression, whitespace characters, such as ` \n ` , are ignored
if the ` BASE64 ` or ` BASE64M ` format element is used.

Format element  |  Returns  |  Example
---|---|---
HEX  |  Converts a hexadecimal-encoded string to bytes. If the input contains
characters that are not part of the HEX encoding alphabet (0~9, case-
insensitive a~f), an error is returned.  |  Input: '0001efff'
Output: b'\x00\x01\xEF\xFF'
BASEX  |  Converts a  BASEX  -encoded string to bytes. X represents one of
these numbers: 2, 8, 16, 32, 64. An error is returned if the input contains
characters that are not part of the BASEX encoding alphabet, except whitespace
characters if the format element is BASE64.  |  Input as BASE8: '00410473'
Output: b'\x02\x11\x3B'
BASE64M  |  Converts a  BASE64  -encoded string to bytes. If the input
contains characters that are not whitespace and not part of the BASE64
encoding alphabet defined at [ rfc 2045
](https://tools.ietf.org/html/rfc2045#section-6.8) , an error is returned.
BASE64M and BASE64 decoding have the same behavior.  |  Input: '3q2+7w=='
Output: b'\xde\xad\xbe\xef'
ASCII  |  Converts a string with only ASCII characters to bytes. If the input
contains characters that are not ASCII characters, an error is returned.  |
Input: 'Hello'
Output: b'\x48\x65\x6c\x6c\x6f'
UTF-8  |  Converts a string to a sequence of UTF-8 bytes.  |  Input: '$'
Output: b'\x24'
UTF8  |  Same behavior as UTF-8.  |

**Return type**

` BYTES `

**Example**



SELECT CAST('Hello' AS BYTES FORMAT 'ASCII') AS string_to_bytes

/*-------------------------*
| string_to_bytes         |
+-------------------------+
| b'\x48\x65\x6c\x6c\x6f' |
*-------------------------*/


###  Format date and time as string

You can format these date and time parts as a string:

* Format year part as string
* Format month part as string
* Format day part as string
* Format hour part as string
* Format minute part as string
* Format second part as string
* Format meridian indicator as string
* Format time zone as string
* Format literal as string

Case matching is supported when you format some date or time parts as a string
and the output contains letters. To learn more, see  Case matching  .

####  Case matching

When the output of some format element contains letters, the letter cases of
the output is matched with the letter cases of the format element, meaning the
words in the output are capitalized according to how the format element is
capitalized. This is called case matching. The rules are:

* If the first two letters of the element are both upper case, the words in the output are capitalized. For example ` DAY ` = ` THURSDAY ` .
* If the first letter of the element is upper case, and the second letter is lowercase, the first letter of each word in the output is capitalized and other letters are lowercase. For example ` Day ` = ` Thursday ` .
* If the first letter of the element is lowercase, then all letters in the output are lowercase. For example, ` day ` = ` thursday ` .

####  Format year part as string



CAST(expression AS STRING FORMAT format_string_expression)


Casts a data type that contains the year part to a string. Includes format
elements, which provide instructions for how to conduct the cast.

* ` expression ` : This expression contains the data type with the year that you need to format.
* ` format_string_expression ` : A string which contains format elements, including the year format element.

These data types include a year part:

* ` DATE `
* ` DATETIME `
* ` TIMESTAMP `

If ` expression ` or ` format_string_expression ` is ` NULL ` the return value
is ` NULL ` . If ` format_string_expression ` is an empty string, the output
is an empty string. An error is generated if a value that is not a supported
format element appears in ` format_string_expression ` or ` expression ` does
not contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
YYYY  |  Year, 4 or more digits.  |  Input: DATE '2018-01-30'
Output: 2018

* * *

Input: DATE '76-01-30'
Output: 0076

* * *

Input: DATE '10000-01-30'
Output: 10000
YYY  |  Year, last 3 digits only.  |  Input: DATE '2018-01-30'
Output: 018

* * *

Input: DATE '98-01-30'
Output: 098
YY  |  Year, last 2 digits only.  |  Input: DATE '2018-01-30'
Output: 18

* * *

Input: DATE '8-01-30'
Output: 08
Y  |  Year, last digit only.  |  Input: DATE '2018-01-30'
Output: 8
RRRR  |  Same behavior as YYYY.  |
RR  |  Same behavior as YY.  |

**Return type**

` STRING `

**Example**



SELECT CAST(DATE '2018-01-30' AS STRING FORMAT 'YYYY') AS date_time_to_string;

/*---------------------*
| date_time_to_string |
+---------------------+
| 2018                |
*---------------------*/


####  Format month part as string



CAST(expression AS STRING FORMAT format_string_expression)


Casts a data type that contains the month part to a string. Includes format
elements, which provide instructions for how to conduct the cast.

* ` expression ` : This expression contains the data type with the month that you need to format.
* ` format_string_expression ` : A string which contains format elements, including the month format element.

These data types include a month part:

* ` DATE `
* ` DATETIME `
* ` TIMESTAMP `

If ` expression ` or ` format_string_expression ` is ` NULL ` the return value
is ` NULL ` . If ` format_string_expression ` is an empty string, the output
is an empty string. An error is generated if a value that is not a supported
format element appears in ` format_string_expression ` or ` expression ` does
not contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
MM  |  Month, 2 digits.  |  Input: DATE '2018-01-30'
Output: 01
MON  |  Abbreviated, 3-character name of the month. The abbreviated month
names for locale en-US are: JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT,
NOV, DEC.  Case matching  is supported.  |  Input: DATE '2018-01-30'
Output: JAN
MONTH  |  Name of the month.  Case matching  is supported.  |  Input: DATE
'2018-01-30'
Output: JANUARY

**Return type**

` STRING `

**Example**



SELECT CAST(DATE '2018-01-30' AS STRING FORMAT 'MONTH') AS date_time_to_string;

/*---------------------*
| date_time_to_string |
+---------------------+
| JANUARY             |
*---------------------*/


####  Format day part as string



CAST(expression AS STRING FORMAT format_string_expression)


Casts a data type that contains the day part to a string. Includes format
elements, which provide instructions for how to conduct the cast.

* ` expression ` : This expression contains the data type with the day that you need to format.
* ` format_string_expression ` : A string which contains format elements, including the day format element.

These data types include a day part:

* ` DATE `
* ` DATETIME `
* ` TIMESTAMP `

If ` expression ` or ` format_string_expression ` is ` NULL ` the return value
is ` NULL ` . If ` format_string_expression ` is an empty string, the output
is an empty string. An error is generated if a value that is not a supported
format element appears in ` format_string_expression ` or ` expression ` does
not contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
DAY  |  Name of the day of the week, localized. Spaces are padded on the right
side to make the output size exactly 9.  Case matching  is supported.  |
Input: DATE '2020-12-31'
Output: THURSDAY
DY  |  Abbreviated, 3-character name of the weekday, localized. The
abbreviated weekday names for locale en-US are: MON, TUE, WED, THU, FRI, SAT,
SUN.  Case matching  is supported.  |  Input: DATE '2020-12-31'
Output: THU
D  |  Day of the week (1 to 7), starting with Sunday as 1.  |  Input: DATE
'2020-12-31'
Output: 4
DD  |  2-digit day of the month.  |  Input: DATE '2018-12-02'
Output: 02
DDD  |  3-digit day of the year.  |  Input: DATE '2018-02-03'
Output: 034

**Return type**

` STRING `

**Example**



SELECT CAST(DATE '2018-02-15' AS STRING FORMAT 'DD') AS date_time_to_string;

/*---------------------*
| date_time_to_string |
+---------------------+
| 15                  |
*---------------------*/


####  Format hour part as string



CAST(expression AS STRING FORMAT format_string_expression)


Casts a data type that contains the hour part to a string. Includes format
elements, which provide instructions for how to conduct the cast.

* ` expression ` : This expression contains the data type with the hour that you need to format.
* ` format_string_expression ` : A string which contains format elements, including the hour format element.

These data types include a hour part:

* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

If ` expression ` or ` format_string_expression ` is ` NULL ` the return value
is ` NULL ` . If ` format_string_expression ` is an empty string, the output
is an empty string. An error is generated if a value that is not a supported
format element appears in ` format_string_expression ` or ` expression ` does
not contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
HH  |  Hour of the day, 12-hour clock, 2 digits.  |  Input: TIME '21:30:00'
Output: 09
HH12  |  Hour of the day, 12-hour clock.  |  Input: TIME '21:30:00'
Output: 09
HH24  |  Hour of the day, 24-hour clock, 2 digits.  |  Input: TIME '21:30:00'
Output: 21

**Return type**

` STRING `

**Examples**



SELECT CAST(TIME '21:30:00' AS STRING FORMAT 'HH24') AS date_time_to_string;

/*---------------------*
| date_time_to_string |
+---------------------+
| 21                  |
*---------------------*/



SELECT CAST(TIME '21:30:00' AS STRING FORMAT 'HH12') AS date_time_to_string;

/*---------------------*
| date_time_to_string |
+---------------------+
| 09                  |
*---------------------*/


####  Format minute part as string



CAST(expression AS STRING FORMAT format_string_expression)


Casts a data type that contains the minute part to a string. Includes format
elements, which provide instructions for how to conduct the cast.

* ` expression ` : This expression contains the data type with the minute that you need to format.
* ` format_string_expression ` : A string which contains format elements, including the minute format element.

These data types include a minute part:

* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

If ` expression ` or ` format_string_expression ` is ` NULL ` the return value
is ` NULL ` . If ` format_string_expression ` is an empty string, the output
is an empty string. An error is generated if a value that is not a supported
format element appears in ` format_string_expression ` or ` expression ` does
not contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
MI  |  Minute, 2 digits.  |  Input: TIME '01:02:03'
Output: 02

**Return type**

` STRING `

**Example**



SELECT CAST(TIME '21:30:00' AS STRING FORMAT 'MI') AS date_time_to_string;

/*---------------------*
| date_time_to_string |
+---------------------+
| 30                  |
*---------------------*/


####  Format second part as string



CAST(expression AS STRING FORMAT format_string_expression)


Casts a data type that contains the second part to a string. Includes format
elements, which provide instructions for how to conduct the cast.

* ` expression ` : This expression contains the data type with the second that you need to format.
* ` format_string_expression ` : A string which contains format elements, including the second format element.

These data types include a second part:

* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

If ` expression ` or ` format_string_expression ` is ` NULL ` the return value
is ` NULL ` . If ` format_string_expression ` is an empty string, the output
is an empty string. An error is generated if a value that is not a supported
format element appears in ` format_string_expression ` or ` expression ` does
not contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
SS  |  Seconds of the minute, 2 digits.  |  Input: TIME '01:02:03'
Output: 03
SSSSS  |  Seconds of the day, 5 digits.  |  Input: TIME '01:02:03'
Output: 03723
FFn  |  Fractional part of the second, ` n ` digits long. Replace ` n ` with a
value from 1 to 9. For example, FF5. The fractional part of the second is
rounded to fit the size of the output.  |  Input for FF1: TIME '01:05:07.16'
Output: 1

* * *

Input for FF2: TIME '01:05:07.16'
Output: 16

* * *

Input for FF3: TIME '01:05:07.16'
Output: 016

**Return type**

` STRING `

**Examples**



SELECT CAST(TIME '21:30:25.16' AS STRING FORMAT 'SS') AS date_time_to_string;

/*---------------------*
| date_time_to_string |
+---------------------+
| 25                  |
*---------------------*/



SELECT CAST(TIME '21:30:25.16' AS STRING FORMAT 'FF2') AS date_time_to_string;

/*---------------------*
| date_time_to_string |
+---------------------+
| 16                  |
*---------------------*/


####  Format meridian indicator part as string



CAST(expression AS STRING FORMAT format_string_expression)


Casts a data type that contains the meridian indicator part to a string.
Includes format elements, which provide instructions for how to conduct the
cast.

* ` expression ` : This expression contains the data type with the meridian indicator that you need to format.
* ` format_string_expression ` : A string which contains format elements, including the meridian indicator format element.

These data types include a meridian indicator part:

* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

If ` expression ` or ` format_string_expression ` is ` NULL ` the return value
is ` NULL ` . If ` format_string_expression ` is an empty string, the output
is an empty string. An error is generated if a value that is not a supported
format element appears in ` format_string_expression ` or ` expression ` does
not contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
A.M.  |  A.M. if the time is less than 12, otherwise P.M. The letter case of
the output is determined by the first letter case of the format element.  |
Input for A.M.: TIME '01:02:03'
Output: A.M.

* * *

Input for A.M.: TIME '16:02:03'
Output: P.M.

* * *

Input for a.m.: TIME '01:02:03'
Output: a.m.

* * *

Input for a.M.: TIME '01:02:03'
Output: a.m.
AM  |  AM if the time is less than 12, otherwise PM. The letter case of the
output is determined by the first letter case of the format element.  |  Input
for AM: TIME '01:02:03'
Output: AM

* * *

Input for AM: TIME '16:02:03'
Output: PM

* * *

Input for am: TIME '01:02:03'
Output: am

* * *

Input for aM: TIME '01:02:03'
Output: am
P.M.  |  Output is the same as A.M. format element.  |
PM  |  Output is the same as AM format element.  |

**Return type**

` STRING `

**Examples**



SELECT CAST(TIME '21:30:00' AS STRING FORMAT 'AM') AS date_time_to_string;
SELECT CAST(TIME '21:30:00' AS STRING FORMAT 'PM') AS date_time_to_string;

/*---------------------*
| date_time_to_string |
+---------------------+
| PM                  |
*---------------------*/



SELECT CAST(TIME '01:30:00' AS STRING FORMAT 'AM') AS date_time_to_string;
SELECT CAST(TIME '01:30:00' AS STRING FORMAT 'PM') AS date_time_to_string;

/*---------------------*
| date_time_to_string |
+---------------------+
| AM                  |
*---------------------*/


####  Format time zone part as string



CAST(expression AS STRING FORMAT format_string_expression)


Casts a data type that contains the time zone part to a string. Includes
format elements, which provide instructions for how to conduct the cast.

* ` expression ` : This expression contains the data type with the time zone that you need to format.
* ` format_string_expression ` : A string which contains format elements, including the time zone format element.

These data types include a time zone part:

* ` DATE `
* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

If ` expression ` or ` format_string_expression ` is ` NULL ` the return value
is ` NULL ` . If ` format_string_expression ` is an empty string, the output
is an empty string. An error is generated if a value that is not a supported
format element appears in ` format_string_expression ` or ` expression ` does
not contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
TZH  |  Hour offset for a time zone. This includes the ` +/- ` sign and
2-digit hour.  |  Inputstamp: TIMESTAMP '2008-12-25 05:30:00+00' Output: −08
TZM  |  Minute offset for a time zone. This includes only the 2-digit minute.
|  Inputstamp: TIMESTAMP '2008-12-25 05:30:00+00' Output: 00

**Return type**

` STRING `

**Examples**



SELECT CAST(TIMESTAMP '2008-12-25 00:00:00+00:00' AS STRING FORMAT 'TZH') AS date_time_to_string;

-- Results depend upon where this query was executed.
/*---------------------*
| date_time_to_string |
+---------------------+
| -08                 |
*---------------------*/



SELECT CAST(TIMESTAMP '2008-12-25 00:00:00+00:00' AS STRING FORMAT 'TZH' AT TIME ZONE 'Asia/Kolkata')
AS date_time_to_string;

-- Because the time zone is specified, the result is always the same.
/*---------------------*
| date_time_to_string |
+---------------------+
| +05                 |
*---------------------*/



SELECT CAST(TIMESTAMP '2008-12-25 00:00:00+00:00' AS STRING FORMAT 'TZM') AS date_time_to_string;

-- Results depend upon where this query was executed.
/*---------------------*
| date_time_to_string |
+---------------------+
| 00                  |
*---------------------*/



SELECT CAST(TIMESTAMP '2008-12-25 00:00:00+00:00' AS STRING FORMAT 'TZM' AT TIME ZONE 'Asia/Kolkata')
AS date_time_to_string;

-- Because the time zone is specified, the result is always the same.
/*---------------------*
| date_time_to_string |
+---------------------+
| 30                  |
*---------------------*/


####  Format literal as string



CAST(expression AS STRING FORMAT format_string_expression)


Format element  |  Returns  |  Example
---|---|---
\-  |  Output is the same as the input.  |  \-
.  |  Output is the same as the input.  |  .
/  |  Output is the same as the input.  |  /
,  |  Output is the same as the input.  |  ,
'  |  Output is the same as the input.  |  '
;  |  Output is the same as the input.  |  ;
:  |  Output is the same as the input.  |  :
Whitespace  |  Output is the same as the input. Whitespace means the space
character, ASCII 32. It does not mean other types of space like tab or new
line. Any whitespace character that is not the ASCII 32 character in the
format model generates an error.  |
"text"  |  Output is the value within the double quotes. To preserve a double
quote or backslash character, use the ` \" ` or ` \\ ` escape sequence. Other
escape sequences are not supported.  |  Input: "abc"
Output: abc

* * *

Input: "a\"b\\\c"
Output: a"b\c

###  Format string as date and time

You can format a string with these date and time parts:

* Format string as year part
* Format string as month part
* Format string as day part
* Format string as hour part
* Format string as minute part
* Format string as second part
* Format string as meridian indicator part
* Format string as time zone part
* Format string as literal part

When formatting a string with date and time parts, you must follow the  format
model rules  .

####  Format model rules

When casting a string to date and time parts, you must ensure the _format
model_ is valid. The format model represents the elements passed into `
CAST(string_expression AS type FORMAT format_string_expression) ` as the `
format_string_expression ` and is validated according to the following rules:

* It contains at most one of each of the following parts: meridian indicator, year, month, day, hour.
* A non-literal, non-whitespace format element cannot appear more than once.
* If it contains the day of year format element, ` DDD ` , then it cannot contain the month.
* If it contains the 24-hour format element, ` HH24 ` , then it cannot contain the 12-hour format element or a meridian indicator.
* If it contains the 12-hour format element, ` HH12 ` or ` HH ` , then it must also contain a meridian indicator.
* If it contains a meridian indicator, then it must also contain a 12-hour format element.
* If it contains the second of the day format element, ` SSSSS ` , then it cannot contain any of the following: hour, minute, second, or meridian indicator.
* It cannot contain a format element such that the value it sets does not exist in the target type. For example, an hour format element such as ` HH24 ` cannot appear in a string you are casting as a ` DATE ` .

####  Format string as year part



CAST(string_expression AS type FORMAT format_string_expression)


Casts a string-formatted year to a data type that contains the year part.
Includes format elements, which provide instructions for how to conduct the
cast.

* ` string_expression ` : This expression contains the string with the year that you need to format.
* ` type ` : The data type to which you are casting. Must include the year part.
* ` format_string_expression ` : A string which contains format elements, including the year format element. The formats elements in this string are defined collectively as the format model, which must follow  these rules  .

These data types include a year part:

* ` DATE `
* ` DATETIME `
* ` TIMESTAMP `

If the ` YEAR ` part is missing from ` string_expression ` and the return type
includes this part, ` YEAR ` is set to the current year.

An error is generated if a value that is not a supported format element
appears in ` format_string_expression ` or ` string_expression ` does not
contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
YYYY  |  If it is delimited, matches 1 to 5 digits. If it is not delimited,
matches 4 digits. Sets the year part to the matched number.  |  Input for MM-
DD-YYYY: '03-12-2018'
Output as DATE: 2018-12-03

* * *

Input for YYYY-MMDD: '10000-1203'
Output as DATE: 10000-12-03

* * *

Input for YYYY: '18'
Output as DATE: 2018-03-01 (Assume current date is March 23, 2021)
YYY  |  Matches 3 digits. Sets the last 3 digits of the year part to the
matched number.  |  Input for YYY-MM-DD: '018-12-03'
Output as DATE: 2018-12-03

* * *

Input for YYY-MM-DD: '038-12-03'
Output as DATE: 2038-12-03
YY  |  Matches 2 digits. Sets the last 2 digits of the year part to the
matched number.  |  Input for YY-MM-DD: '18-12-03'
Output as DATE: 2018-12-03

* * *

Input for YY-MM-DD: '38-12-03'
Output as DATE: 2038-12-03
Y  |  Matches 1 digit. Sets the last digit of the year part to the matched
number.  |  Input for Y-MM-DD: '8-12-03'
Output as DATE: 2008-12-03
Y,YYY  |  Matches the pattern of 1 to 2 digits, comma, then exactly 3 digits.
Sets the year part to the matched number.  |  Input for Y,YYY-MM-DD:
'2,018-12-03'
Output as DATE: 2008-12-03
RRRR  |  Same behavior as YYYY.  |
RR  |

Matches 2 digits.

If the 2 digits entered are between 00 and 49 and the last 2 digits of the
current year are between 00 and 49, the returned year has the same first 2
digits as the current year. If the last 2 digits of the current year are
between 50 and 99, the first 2 digits of the returned year is 1 greater than
the first 2 digits of the current year.

If the 2 digits entered are between 50 and 99 and the last 2 digits of the
current year are between 00 and 49, the first 2 digits of the returned year
are 1 less than the first 2 digits of the current year. If the last 2 digits
of the current year are between 50 and 99, the returned year has the same
first 2 digits as the current year.

|  Input for RR-MM-DD: '18-12-03'
Output as DATE: 2018-12-03 (executed in the year 2021) Output as DATE:
2118-12-03 (executed in the year 2050)

* * *

Input for RR-MM-DD: '50-12-03'
Output as DATE: 2050-12-03 (executed in the year 2021) Output as DATE:
2050-12-03 (executed in the year 2050)

**Return type**

The data type to which the string was cast. This can be:

* ` DATE `
* ` DATETIME `
* ` TIMESTAMP `

**Examples**



SELECT CAST('18-12-03' AS DATE FORMAT 'YY-MM-DD') AS string_to_date

/*----------------*
| string_to_date |
+----------------+
| 2018-12-03     |
*----------------*/


####  Format string as month part



CAST(string_expression AS type FORMAT format_string_expression)


Casts a string-formatted month to a data type that contains the month part.
Includes format elements, which provide instructions for how to conduct the
cast.

* ` string_expression ` : This expression contains the string with the month that you need to format.
* ` type ` : The data type to which you are casting. Must include the month part.
* ` format_string_expression ` : A string which contains format elements, including the month format element. The formats elements in this string are defined collectively as the format model, which must follow  these rules  .

These data types include a month part:

* ` DATE `
* ` DATETIME `
* ` TIMESTAMP `

If the ` MONTH ` part is missing from ` string_expression ` and the return
type includes this part, ` MONTH ` is set to the current month.

An error is generated if a value that is not a supported format element
appears in ` format_string_expression ` or ` string_expression ` does not
contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
MM  |  Matches 2 digits. Sets the month part to the matched number.  |  Input
for MM-DD-YYYY: '03-12-2018'
Output as DATE: 2018-12-03
MON  |  Matches 3 letters. Sets the month part to the matched string
interpreted as the abbreviated name of the month.  |  Input for MON DD, YYYY:
'DEC 03, 2018'
Output as DATE: 2018-12-03
MONTH  |  Matches 9 letters. Sets the month part to the matched string
interpreted as the name of the month.  |  Input for MONTH DD, YYYY: 'DECEMBER
03, 2018'
Output as DATE: 2018-12-03

**Return type**

The data type to which the string was cast. This can be:

* ` DATE `
* ` DATETIME `
* ` TIMESTAMP `

**Examples**



SELECT CAST('DEC 03, 2018' AS DATE FORMAT 'MON DD, YYYY') AS string_to_date

/*----------------*
| string_to_date |
+----------------+
| 2018-12-03     |
*----------------*/


####  Format string as day part



CAST(string_expression AS type FORMAT format_string_expression)


Casts a string-formatted day to a data type that contains the day part.
Includes format elements, which provide instructions for how to conduct the
cast.

* ` string_expression ` : This expression contains the string with the day that you need to format.
* ` type ` : The data type to which you are casting. Must include the day part.
* ` format_string_expression ` : A string which contains format elements, including the day format element. The formats elements in this string are defined collectively as the format model, which must follow  these rules  .

These data types include a day part:

* ` DATE `
* ` DATETIME `
* ` TIMESTAMP `

If the ` DAY ` part is missing from ` string_expression ` and the return type
includes this part, ` DAY ` is set to ` 1 ` .

An error is generated if a value that is not a supported format element
appears in ` format_string_expression ` or ` string_expression ` does not
contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
DD  |  Matches 2 digits. Sets the day part to the matched number.  |  Input
for MONTH DD, YYYY: 'DECEMBER 03, 2018'
Output as DATE: 2018-12-03

**Return type**

The data type to which the string was cast. This can be:

* ` DATE `
* ` DATETIME `
* ` TIMESTAMP `

**Examples**



SELECT CAST('DECEMBER 03, 2018' AS DATE FORMAT 'MONTH DD, YYYY') AS string_to_date

/*----------------*
| string_to_date |
+----------------+
| 2018-12-03     |
*----------------*/


####  Format string as hour part



CAST(string_expression AS type FORMAT format_string_expression)


Casts a string-formatted hour to a data type that contains the hour part.
Includes format elements, which provide instructions for how to conduct the
cast.

* ` string_expression ` : This expression contains the string with the hour that you need to format.
* ` type ` : The data type to which you are casting. Must include the hour part.
* ` format_string_expression ` : A string which contains format elements, including the hour format element. The formats elements in this string are defined collectively as the format model, which must follow  these rules  .

These data types include a hour part:

* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

If the ` HOUR ` part is missing from ` string_expression ` and the return type
includes this part, ` HOUR ` is set to ` 0 ` .

An error is generated if a value that is not a supported format element
appears in ` format_string_expression ` or ` string_expression ` does not
contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
HH  |  Matches 2 digits. If the matched number ` n ` is ` 12 ` , sets ` temp =
0 ` ; otherwise, sets ` temp = n ` . If the matched value of the A.M./P.M.
format element is P.M., sets ` temp = n + 12 ` . Sets the hour part to ` temp
` . A meridian indicator must be present in the format model, when HH is
present.  |  Input for HH:MI P.M.: '03:30 P.M.'
Output as TIME: 15:30:00
HH12  |  Same behavior as HH.  |
HH24  |  Matches 2 digits. Sets the hour part to the matched number.  |  Input
for HH24:MI: '15:30'
Output as TIME: 15:30:00

**Return type**

The data type to which the string was cast. This can be:

* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

**Examples**



SELECT CAST('15:30' AS TIME FORMAT 'HH24:MI') AS string_to_date_time

/*---------------------*
| string_to_date_time |
+---------------------+
| 15:30:00            |
*---------------------*/


####  Format string as minute part



CAST(string_expression AS type FORMAT format_string_expression)


Casts a string-formatted minute to a data type that contains the minute part.
Includes format elements, which provide instructions for how to conduct the
cast.

* ` string_expression ` : This expression contains the string with the minute that you need to format.
* ` type ` : The data type to which you are casting. Must include the minute part.
* ` format_string_expression ` : A string which contains format elements, including the minute format element. The formats elements in this string are defined collectively as the format model, which must follow  these rules  .

These data types include a minute part:

* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

If the ` MINUTE ` part is missing from ` string_expression ` and the return
type includes this part, ` MINUTE ` is set to ` 0 ` .

An error is generated if a value that is not a supported format element
appears in ` format_string_expression ` or ` string_expression ` does not
contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
MI  |  Matches 2 digits. Sets the minute part to the matched number.  |  Input
for HH:MI P.M.: '03:30 P.M.'
Output as TIME: 15:30:00

**Return type**

The data type to which the string was cast. This can be:

* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

**Examples**



SELECT CAST('03:30 P.M.' AS TIME FORMAT 'HH:MI P.M.') AS string_to_date_time

/*---------------------*
| string_to_date_time |
+---------------------+
| 15:30:00            |
*---------------------*/


####  Format string as second part



CAST(string_expression AS type FORMAT format_string_expression)


Casts a string-formatted second to a data type that contains the second part.
Includes format elements, which provide instructions for how to conduct the
cast.

* ` string_expression ` : This expression contains the string with the second that you need to format.
* ` type ` : The data type to which you are casting. Must include the second part.
* ` format_string_expression ` : A string which contains format elements, including the second format element. The formats elements in this string are defined collectively as the format model, which must follow  these rules  .

These data types include a second part:

* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

If the ` SECOND ` part is missing from ` string_expression ` and the return
type includes this part, ` SECOND ` is set to ` 0 ` .

An error is generated if a value that is not a supported format element
appears in ` format_string_expression ` or ` string_expression ` does not
contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
SS  |  Matches 2 digits. Sets the second part to the matched number.  |  Input
for HH:MI:SS P.M.: '03:30:02 P.M.'
Output as TIME: 15:30:02
SSSSS  |  Matches 5 digits. Sets the hour, minute and second parts by
interpreting the matched number as the number of seconds past midnight.  |
Input for SSSSS: '03723'
Output as TIME: 01:02:03
FFn  |  Matches ` n ` digits, where ` n ` is the number following FF in the
format element. Sets the fractional part of the second part to the matched
number.  |  Input for HH24:MI:SS.FF1: '01:05:07.16'
Output as TIME: 01:05:07.2

* * *

Input for HH24:MI:SS.FF2: '01:05:07.16'
Output as TIME: 01:05:07.16

* * *

Input for HH24:MI:SS.FF3: 'FF3: 01:05:07.16'
Output as TIME: 01:05:07.160

**Return type**

The data type to which the string was cast. This can be:

* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

**Examples**



SELECT CAST('01:05:07.16' AS TIME FORMAT 'HH24:MI:SS.FF1') AS string_to_date_time

/*---------------------*
| string_to_date_time |
+---------------------+
| 01:05:07.2          |
*---------------------*/


####  Format string as meridian indicator part



CAST(string_expression AS type FORMAT format_string_expression)


Casts a string-formatted meridian indicator to a data type that contains the
meridian indicator part. Includes format elements, which provide instructions
for how to conduct the cast.

* ` string_expression ` : This expression contains the string with the meridian indicator that you need to format.
* ` type ` : The data type to which you are casting. Must include the meridian indicator part.
* ` format_string_expression ` : A string which contains format elements, including the meridian indicator format element. The formats elements in this string are defined collectively as the format model, which must follow  these rules  .

These data types include a meridian indicator part:

* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

An error is generated if a value that is not a supported format element
appears in ` format_string_expression ` or ` string_expression ` does not
contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
A.M. or P.M.  |  Matches using the regular expression ` '(A|P)\.M\.' ` .  |
Input for HH:MI A.M.: '03:30 A.M.'
Output as TIME: 03:30:00

* * *

Input for HH:MI P.M.: '03:30 P.M.'
Output as TIME: 15:30:00

* * *

Input for HH:MI P.M.: '03:30 A.M.'
Output as TIME: 03:30:00

* * *

Input for HH:MI A.M.: '03:30 P.M.'
Output as TIME: 15:30:00

* * *

Input for HH:MI a.m.: '03:30 a.m.'
Output as TIME: 03:30:00

**Return type**

The data type to which the string was cast. This can be:

* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

**Examples**



SELECT CAST('03:30 P.M.' AS TIME FORMAT 'HH:MI A.M.') AS string_to_date_time

/*---------------------*
| string_to_date_time |
+---------------------+
| 15:30:00            |
*---------------------*/


####  Format string as time zone part



CAST(string_expression AS type FORMAT format_string_expression)


Casts a string-formatted time zone to a data type that contains the time zone
part. Includes format elements, which provide instructions for how to conduct
the cast.

* ` string_expression ` : This expression contains the string with the time zone that you need to format.
* ` type ` : The data type to which you are casting. Must include the time zone part.
* ` format_string_expression ` : A string which contains format elements, including the time zone format element. The formats elements in this string are defined collectively as the format model, which must follow  these rules  .

These data types include a time zone part:

* ` DATE `
* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

An error is generated if a value that is not a supported format element
appears in ` format_string_expression ` or ` string_expression ` does not
contain a value specified by a format element.

Format element  |  Returns  |  Example
---|---|---
TZH  |  Matches using the regular expression ` '(\+|\-| )[0-9]{2}' ` . Sets
the time zone and hour parts to the matched sign and number. Sets the time
zone sign to be the first letter of the matched string. The number 2 means
matching up to 2 digits for non-exact matching, and exactly 2 digits for exact
matching.  |  Input for YYYY-MM-DD HH:MI:SSTZH: '2008-12-25 05:30:00-08'
Output as TIMESTAMP: 2008-12-25 05:30:00-08
TZM  |  Matches 2 digits. Let ` n ` be the matched number. If the time zone
sign is the minus sign, sets the time zone minute part to ` -n ` . Otherwise,
sets the time zone minute part to ` n ` .  |  Input for YYYY-MM-DD
HH:MI:SSTZH: '2008-12-25 05:30:00+05.30'
Output as TIMESTAMP: 2008-12-25 05:30:00+05.30

**Return type**

The data type to which the string was cast. This can be:

* ` DATE `
* ` TIME `
* ` DATETIME `
* ` TIMESTAMP `

**Examples**



SELECT CAST('2020.06.03 00:00:53+00' AS TIMESTAMP FORMAT 'YYYY.MM.DD HH:MI:SSTZH') AS string_to_date_time

/*-----------------------------*
| as_timestamp                |
+-----------------------------+
| 2020-06-03 00:00:53.110 UTC |
*-----------------------------*/


####  Format string as literal



CAST(string_expression AS data_type FORMAT format_string_expression)


Format element  |  Returns  |  Example
---|---|---
\-  |  Output is the same as the input.  |
.  |  Output is the same as the input.  |  .
/  |  Output is the same as the input.  |  /
,  |  Output is the same as the input.  |  ,
'  |  Output is the same as the input.  |  '
;  |  Output is the same as the input.  |  ;
:  |  Output is the same as the input.  |  :
Whitespace  |  A consecutive sequence of one or more spaces in the format
model is matched with one or more consecutive Unicode whitespace characters in
the input. Space means the ASCII 32 space character. It does not mean the
general whitespace such as a tab or new line. Any whitespace character that is
not the ASCII 32 character in the format model generates an error.  |
"text"  |  Output generated by the format element in formatting, using this
regular expression, with ` s ` representing the string input: `
regex.escape(s) ` .  |  Input: "abc"
Output: abc

* * *

Input: "a\"b\\\c"
Output: a"b\c

###  Format numeric type as string



CAST(numeric_expression AS STRING FORMAT format_string_expression)


You can cast a [ numeric type ](/bigquery/docs/reference/standard-sql/data-
types#numeric_types) to a string by combining the following format elements:

* Digits
* Decimal point
* Sign
* Currency symbol
* Group separator
* Other format elements

Except for the exponent format element ( ` EEEE ` ), all of the format
elements generate a fixed number of characters in the output, and the output
is aligned by the decimal point. The first character outputs a ` - ` for
negative numbers; otherwise a space. To suppress blank characters and trailing
zeroes, use the ` FM ` flag.

**Note:** Some format elements are locale-specific. GoogleSQL always uses the
` 'en-us' ` locale.

**Return type**

` STRING `

**Example**



SELECT input, CAST(input AS STRING FORMAT '$999,999.999') AS output
FROM UNNEST([1.2, 12.3, 123.456, 1234.56, -12345.678, 1234567.89]) AS input

/*------------+---------------*
|   input    |    output     |
+------------+---------------+
|        1.2 |        $1.200 |
|       12.3 |       $12.300 |
|    123.456 |      $123.456 |
|    1234.56 |    $1,234.560 |
| -12345.678 |  -$12,345.678 |
| 1234567.89 |  $###,###.### |
*------------+---------------*/


####  Format digits as string

The following format elements output digits. If there aren't enough digit
format elements to represent the input, all digit format elements are replaced
with ` # ` in the output.

Format element  |  Returns  |  Example
---|---|---
0  |  A decimal digit. Leading and trailing zeros are included.  |  Input: `
12 `
Format: ` '000' `
Output: ` ' 012' `

* * *

Input: ` 12 `
Format: ` '000.000' `
Output: ` ' 012.000' `

* * *

Input: ` -12 `
Format: ` '000.000' `
Output: ` '-012.000' `
9  |  A decimal digit. Leading zeros are replaced with spaces. Trailing zeros
are included.  |  Input: ` 12 `
Format: ` '999' `
Output: ` ' 12' `

* * *

Input: ` 12 `
Format: ` '999.999' `
Output: ` ' 12.000' `
X or x  |

A hexadecimal digit. Cannot appear with other format elements except 0, FM,
and the sign format elements. The maximum number of hexadecimal digits in the
format string is 16.

X generates uppercase letters and x generates lowercase letters.

When 0 is combined with the hexadecimal format element, the letter generated
by 0 matches the case of the next X or x element. If there is no subsequent X
or x, then 0 generates an uppercase letter.

|  Input: ` 43981 `
Format: ` 'XXXX' `
Output: ` ' ABCD' `

* * *

Input: ` 43981 `
Format: ` 'xxxx' `
Output: ` ' abcd' `

* * *

Input: ` 43981 `
Format: ` '0X0x' `
Output: ` ' ABcd' `

* * *

Input: ` 43981 `
Format: ` '0000000X' `
Output: ` ' 0000ABCD' `

**Return type**

` STRING `

**Example**



SELECT
CAST(12 AS STRING FORMAT '999') as a,
CAST(-12 AS STRING FORMAT '999') as b;

/*------+------*
| a    | b    |
+------+------+
|   12 |  -12 |
*------+------*/


####  Format decimal point as string

The following format elements output a decimal point. These format elements
are mutually exclusive. At most one can appear in the format string.

Format element  |  Returns  |  Example
---|---|---
. (period)  |  Decimal point.  |  Input: ` 123.58 `
Format: ` '999.999' `
Output: ` ' 123.580' `
D  |  The decimal point of the current locale.  |  Input: ` 123.58 `
Format: ` '999D999' `
Output: ` ' 123.580' `

**Return type**

` STRING `

**Example**



SELECT CAST(12.5 AS STRING FORMAT '99.99') as a;

/*--------*
| a      |
+--------+
|  12.50 |
*--------*/


####  Format sign as string

The following format elements output the sign (+/-). These format elements are
mutually exclusive. At most one can appear in the format string.

If there are no sign format elements, one extra space is reserved for the
sign. For example, if the input is ` 12 ` and the format string is ` '99' ` ,
then the output is ` ' 12' ` , with a length of three characters.

The sign appears before the number. If the format model includes a currency
symbol element, then the sign appears before the currency symbol.

Format element  |  Returns  |  Example
---|---|---
S  |  Explicit sign. Outputs ` + ` for positive numbers and ` - ` for negative
numbers. The position in the output is anchored to the number. ` NaN ` and ` 0
` will not be signed.  |  Input: ` -12 `
Format: ` 'S9999' `
Output: ` ' -12' `

* * *

Input: ` -12 `
Format: ` '9999S' `
Output: ` ' 12-' `
MI  |  Explicit sign. Outputs a space for positive numbers and ` - ` for
negative numbers. This element can only appear in the last position.  |
Input: ` 12 `
Format: ` '9999MI' `
Output: ` ' 12 ' `

* * *

Input: ` -12 `
Format: ` '9999MI' `
Output: ` ' 12-' `
PR  |  For negative numbers, the value is enclosed in angle brackets. For
positive numbers, the value is returned with a leading and trailing space.
This element can only appear in the last position.  |  Input: ` 12 `
Format: ` '9999PR' `
Output: ` ' 12 ' `

* * *

Input: ` -12 `
Format: ` '9999PR' `
Output: ` ' <12>' `

**Return type**

` STRING `

**Example**



SELECT
CAST(12 AS STRING FORMAT 'S99') as a,
CAST(-12 AS STRING FORMAT 'S99') as b;

/*-----+-----*
| a   | b   |
+-----+-----+
| +12 | -12 |
*-----+-----*/


####  Format currency symbol as string

The following format elements output a currency symbol. These format elements
are mutually exclusive. At most one can appear in the format string. In the
output, the currency symbol appears before the first digit or decimal point.

Format element  |  Returns  |  Example
---|---|---
$  |  Dollar sign ($).  |  Input: ` -12 `
Format: ` '$999' `
Output: ` ' -$12' `
C or c  |  The ISO-4217 currency code of the current locale.  |  Input: ` -12
`
Format: ` 'C999' `
Output: ` ' -USD12' `

* * *

Input: ` -12 `
Format: ` 'c999' `
Output: ` ' -usd12' `
L  |  The currency symbol of the current locale.  |  Input: ` -12 `
Format: ` 'L999' `
Output: ` ' -$12' `

**Return type**

` STRING `

**Example**



SELECT
CAST(12 AS STRING FORMAT '$99') as a,
CAST(-12 AS STRING FORMAT '$99') as b;

/*------+------*
| a    | b    |
+------+------+
|  $12 | -$12 |
*------+------*/


####  Format group separator as string

The following format elements output a group separator.

Format element  |  Returns  |  Example
---|---|---
, (comma)  |  Group separator.  |  Input: ` 12345 `
Format: ` '999,999' `
Output: ` ' 12,345' `
G  |  The group separator point of the current locale.  |  Input: ` 12345 `
Format: ` '999G999' `
Output: ` ' 12,345' `

**Return type**

` STRING `

**Example**



SELECT CAST(1234 AS STRING FORMAT '999,999') as a;

/*----------*
| a        |
+----------+
|    1,234 |
*----------*/


####  Other numeric format elements

Format element  |  Returns  |  Example
---|---|---
B  |  Outputs spaces when the integer part is zero. If the integer part of the
number is 0, then the following format elements generate spaces in the output:
digits (9, X, 0), decimal point, group separator, currency, sign, and
exponent.  |  Input: ` 0.23 `
Format: ` 'B99.999S' `
Output: ` ' ' `

* * *

Input: ` 1.23 `
Format: ` 'B99.999S' `
Output: ` ' 1.230+' `
EEEE  |  Outputs the exponent part of the value in scientific notation. If the
exponent value is between -99 and 99, the output is four characters.
Otherwise, the minimum number of digits is used in the output.  |  Input: ` 20
`
Format: ` '9.99EEEE' `
Output: ` ' 2.0E+01' `

* * *

Input: ` 299792458 `
Format: ` 'S9.999EEEE' `
Output: ` '+2.998E+08' `
FM  |  Removes all spaces and trailing zeroes from the output. You can use
this element to suppress spaces and trailing zeroes that are generated by
other format elements.  |  Input: ` 12.5 `
Format: ` '999999.000FM' `
Output: ` '12.5' `
RN  |  Returns the value as Roman numerals, rounded to the nearest integer.
The input must be between 1 and 3999. The output is padded with spaces to the
left to a length of 15. This element cannot be used with other format elements
except ` FM ` .  |  Input: ` 2021 `
Format: ` 'RN' `
Output: ` ' MMXXI' `
V  |  The input value is multiplied by 10^n, where n is the number of 9s after
the ` V ` . This element cannot be used with a decimal point or exponent
format element.  |  Input: ` 23.5 `
Format: ` 'S000V00' `
Output: ` '+02350' `

**Return type**

` STRING `

**Example**



SELECT CAST(-123456 AS STRING FORMAT '9.999EEEE') as a;"

/*------------*
| a          |
+------------+
| -1.235E+05 |
*------------*/


###  About BASE encoding

BASE encoding translates binary data in string format into a radix-X
representation.

If X is 2, 8, or 16, Arabic numerals 0–9 and the Latin letters a–z are used in
the encoded string. So for example, BASE16/Hexadecimal encoding results
contain 0~9 and a~f.

If X is 32 or 64, the default character tables are defined in [ rfc 4648
](https://tools.ietf.org/html/rfc4648#section-3.3) . When you decode a BASE
string where X is 2, 8, or 16, the Latin letters in the input string are case-
insensitive. For example, both "3a" and "3A" are valid input strings for
BASE16/Hexadecimal decoding, and will output the same result.

Send feedback

Except as otherwise noted, the content of this page is licensed under the [
Creative Commons Attribution 4.0 License
](https://creativecommons.org/licenses/by/4.0/) , and code samples are
licensed under the [ Apache 2.0 License
](https://www.apache.org/licenses/LICENSE-2.0) . For details, see the [ Google
Developers Site Policies ](https://developers.google.com/site-policies) . Java
is a registered trademark of Oracle and/or its affiliates.

Last updated 2024-04-29 UTC.

[{ "type": "thumb-down", "id": "hardToUnderstand", "label":"Hard to
understand" },{ "type": "thumb-down", "id":
"incorrectInformationOrSampleCode", "label":"Incorrect information or sample
code" },{ "type": "thumb-down", "id": "missingTheInformationSamplesINeed",
"label":"Missing the information/samples I need" },{ "type": "thumb-down",
"id": "otherDown", "label":"Other" }]  [{ "type": "thumb-up", "id":
"easyToUnderstand", "label":"Easy to understand" },{ "type": "thumb-up", "id":
"solvedMyProblem", "label":"Solved my problem" },{ "type": "thumb-up", "id":
"otherUp", "label":"Other" }]  Need to tell us more?

* ###  Why Google

* [ Choosing Google Cloud ](/why-google-cloud/)
* [ Trust and security ](/trust-center/)
* [ Open cloud ](/open-cloud/)
* [ Multicloud ](/multicloud/)
* [ Global infrastructure ](/infrastructure/)
* [ Customers and case studies ](/customers/)
* [ Analyst reports ](/analyst-reports/)
* [ Whitepapers ](/whitepapers/)
* [ Blog ](//cloud.google.com/blog/)
* ###  Products and pricing

* [ Google Cloud pricing ](/pricing/)
* [ Google Workspace pricing ](//workspace.google.com/pricing.html)
* [ See all products ](/products/)
* ###  Solutions

* [ Infrastructure modernization ](/solutions/infrastructure-modernization/)
* [ Databases ](/solutions/databases/)
* [ Application modernization ](/solutions/application-modernization/)
* [ Smart analytics ](/solutions/smart-analytics/)
* [ Artificial Intelligence ](/solutions/ai/)
* [ Security ](/solutions/security/)
* [ Productivity & work transformation ](https://workspace.google.com/enterprise/)
* [ Industry solutions ](/solutions/#industry-solutions)
* [ DevOps solutions ](/solutions/devops/)
* [ Small business solutions ](/solutions/#section-14)
* [ See all solutions ](/solutions/)
* ###  Resources

* [ Google Cloud documentation ](/docs/)
* [ Google Cloud quickstarts ](/docs/get-started/)
* [ Google Cloud Marketplace ](/marketplace/)
* [ Learn about cloud computing ](/discover/)
* [ Support ](/support-hub/)
* [ Code samples ](/docs/samples)
* [ Cloud Architecture Center ](/architecture/)
* [ Training ](/learn/training/)
* [ Certifications ](/learn/certification/)
* [ Google for Developers ](//developers.google.com)
* [ Google Cloud for Startups ](/startup/)
* [ System status ](//status.cloud.google.com)
* [ Release Notes ](/release-notes)
* ###  Engage

* [ Contact sales ](/contact/)
* [ Find a Partner ](//cloud.google.com/find-a-partner)
* [ Become a Partner ](/partners/become-a-partner/)
* [ Events ](/events/)
* [ Podcasts ](/podcasts/)
* [ Developer Center ](/developers/)
* [ Press Corner ](https://www.googlecloudpresscorner.com/)
* [ Google Cloud on YouTube ](//www.youtube.com/googlecloud)
* [ Google Cloud Tech on YouTube ](//www.youtube.com/googlecloudplatform)
* [ Follow on X ](//x.com/googlecloud)
* [ Join User Research ](//userresearch.google.com/?reserved=1&utm_source=website&Q_Language=en&utm_medium=own_srch&utm_campaign=CloudWebFooter&utm_term=0&utm_content=0&productTag=clou&campaignDate=jul19&pType=devel&referral_code=jk212693)
* [ We're hiring. Join Google Cloud! ](//careers.google.com/cloud)
* [ Google Cloud Community ](https://www.googlecloudcommunity.com/)

* [ About Google ](//about.google/)
* [ Privacy ](//policies.google.com/privacy)
* [ Site terms ](//www.google.com/intl/en/policies/terms/regional.html)
* [ Google Cloud terms ](/product-terms/)
* Manage cookies
* [ Our third decade of climate action: join us ](/sustainability)
* Sign up for the Google Cloud newsletter  [ Subscribe ](/newsletter/)

* English
* Deutsch
* Español – América Latina
* Français
* Português – Brasil
* 中文 – 简体
* 日本語
* 한국어

