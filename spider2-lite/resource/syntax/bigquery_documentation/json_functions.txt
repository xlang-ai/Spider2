[ ![Google Cloud](https://www.gstatic.com/devrel-
devsite/prod/vc851b65627ca98cc752c9ae13e5f506cd6dbb7ed1bb4c8df6090c5f9130ed83c/cloud/images/cloud-
logo.svg) ](/)

*

[ Documentation ](https://cloud.google.com/docs) [ Technology areas
](https://cloud.google.com/docs/tech-area-overviews)

close

* [ AI solutions, generative AI, and ML  ](https://cloud.google.com/docs/ai-ml)
* [ Application development  ](https://cloud.google.com/docs/application-development)
* [ Application hosting  ](https://cloud.google.com/docs/application-hosting)
* [ Compute  ](https://cloud.google.com/docs/compute-area)
* [ Data analytics and pipelines  ](https://cloud.google.com/docs/data)
* [ Databases  ](https://cloud.google.com/docs/databases)
* [ Distributed, hybrid, and multicloud  ](https://cloud.google.com/docs/dhm-cloud)
* [ Industry solutions  ](https://cloud.google.com/docs/industry)
* [ Networking  ](https://cloud.google.com/docs/networking)
* [ Observability and monitoring  ](https://cloud.google.com/docs/observability)
* [ Security  ](https://cloud.google.com/docs/security)
* [ Storage  ](https://cloud.google.com/docs/storage)

[ Cross-product tools ](https://cloud.google.com/docs/cross-product-overviews)

close

* [ Access and resources management  ](https://cloud.google.com/docs/access-resources)
* [ Cloud SDK, languages, frameworks, and tools  ](https://cloud.google.com/docs/devtools)
* [ Costs and usage management  ](https://cloud.google.com/docs/costs-usage)
* [ Infrastructure as code  ](https://cloud.google.com/docs/iac)
* [ Migration  ](https://cloud.google.com/docs/migration)

[ Related sites ](https://cloud.google.com/)

close

* [ Google Cloud Home  ](https://cloud.google.com/)
* [ Free Trial and Free Tier  ](https://cloud.google.com/free)
* [ Architecture Center  ](https://cloud.google.com/architecture)
* [ Blog  ](https://cloud.google.com/blog)
* [ Contact Sales  ](https://cloud.google.com/contact)
* [ Google Cloud Developer Center  ](https://cloud.google.com/developers)
* [ Google Developer Center  ](https://developers.google.com/)
* [ Google Cloud Marketplace (in console)  ](https://console.cloud.google.com/marketplace)
* [ Google Cloud Marketplace Documentation  ](https://cloud.google.com/marketplace/docs)
* [ Google Cloud Skills Boost  ](https://www.cloudskillsboost.google/paths)
* [ Google Cloud Solution Center  ](https://cloud.google.com/solutions)
* [ Google Cloud Support  ](https://cloud.google.com/support-hub)
* [ Google Cloud Tech Youtube Channel  ](https://www.youtube.com/@googlecloudtech)

* English
* Deutsch
* Español – América Latina
* Français
* Português – Brasil
* 中文 – 简体
* 日本語
* 한국어

Sign in

* [ BigQuery ](https://cloud.google.com/bigquery)

[ Guides ](https://cloud.google.com/bigquery/docs/introduction) [ Reference
](https://cloud.google.com/bigquery/quotas) [ Samples
](https://cloud.google.com/bigquery/docs/samples) [ Resources
](https://cloud.google.com/bigquery/docs/release-notes)

[ Contact Us ](https://cloud.google.com/contact) [ Start free
](//console.cloud.google.com/freetrial)

[ ![Google Cloud](https://www.gstatic.com/devrel-
devsite/prod/vc851b65627ca98cc752c9ae13e5f506cd6dbb7ed1bb4c8df6090c5f9130ed83c/cloud/images/cloud-
logo.svg) ](/)

*

* [ Documentation  ](/docs)
* [ Guides  ](/bigquery/docs/introduction)
* [ Reference  ](/bigquery/quotas)
* [ Samples  ](/bigquery/docs/samples)
* [ Resources  ](/bigquery/docs/release-notes)
* [ Technology areas  ](/docs/tech-area-overviews)
* More
* [ Cross-product tools  ](/docs/cross-product-overviews)
* More
* [ Related sites  ](/)
* More
* [ Console  ](//console.cloud.google.com/)
* [ Contact Us  ](/contact)
* [ Start free  ](//console.cloud.google.com/freetrial)

* Quotas and limits

* [ Quotas and limits reference  ](/bigquery/quotas)
* [ Troubleshoot quota errors  ](/bigquery/docs/troubleshoot-quotas)
* BigQuery command-line tool

* [ bq command-line tool reference  ](/bigquery/docs/reference/bq-cli-reference)
* SQL in BigQuery

* GoogleSQL reference

* [ Query syntax  ](/bigquery/docs/reference/standard-sql/query-syntax)
* General reference

* [ Data types  ](/bigquery/docs/reference/standard-sql/data-types)
* [ Lexical structure and syntax  ](/bigquery/docs/reference/standard-sql/lexical)
* [ Conversion rules  ](/bigquery/docs/reference/standard-sql/conversion_rules)
* [ Format elements  ](/bigquery/docs/reference/standard-sql/format-elements)
* [ Collation  ](/bigquery/docs/reference/standard-sql/collation-concepts)
* [ Text analysis  ](/bigquery/docs/reference/standard-sql/text-analysis)
* [ BI Engine optimized functions  ](/bigquery/docs/bi-engine-optimized-sql)

* Expressions

* [ Function calls  ](/bigquery/docs/reference/standard-sql/functions-reference)
* [ Aggregate function calls  ](/bigquery/docs/reference/standard-sql/aggregate-function-calls)
* [ Window function calls  ](/bigquery/docs/reference/standard-sql/window-function-calls)
* [ Operators  ](/bigquery/docs/reference/standard-sql/operators)
* [ Conditional expressions  ](/bigquery/docs/reference/standard-sql/conditional_expressions)
* [ Subqueries  ](/bigquery/docs/reference/standard-sql/subqueries)

* Functions

* [ All functions and operators  ](/bigquery/docs/reference/standard-sql/functions-and-operators)
* [ AEAD encryption functions  ](/bigquery/docs/reference/standard-sql/aead_encryption_functions)
* [ Aggregate functions  ](/bigquery/docs/reference/standard-sql/aggregate_functions)
* [ Approximate aggregate functions  ](/bigquery/docs/reference/standard-sql/approximate_aggregate_functions)
* [ Array functions  ](/bigquery/docs/reference/standard-sql/array_functions)
* [ Bit functions  ](/bigquery/docs/reference/standard-sql/bit_functions)
* [ Conversion functions  ](/bigquery/docs/reference/standard-sql/conversion_functions)
* [ Date functions  ](/bigquery/docs/reference/standard-sql/date_functions)
* [ Datetime functions  ](/bigquery/docs/reference/standard-sql/datetime_functions)
* [ Debugging functions  ](/bigquery/docs/reference/standard-sql/debugging_functions)
* [ Differentially private aggregate functions  ](/bigquery/docs/reference/standard-sql/aggregate-dp-functions)
* [ Federated query functions  ](/bigquery/docs/reference/standard-sql/federated_query_functions)
* [ DLP encryption functions  ](/bigquery/docs/reference/standard-sql/dlp_functions)
* [ Geography functions  ](/bigquery/docs/reference/standard-sql/geography_functions)
* [ Hash functions  ](/bigquery/docs/reference/standard-sql/hash_functions)
* [ HyperLogLog++ functions  ](/bigquery/docs/reference/standard-sql/hll_functions)
* [ Interval functions  ](/bigquery/docs/reference/standard-sql/interval_functions)
* [ JSON functions  ](/bigquery/docs/reference/standard-sql/json_functions)
* [ Mathematical functions  ](/bigquery/docs/reference/standard-sql/mathematical_functions)
* [ Navigation functions  ](/bigquery/docs/reference/standard-sql/navigation_functions)
* [ Net functions  ](/bigquery/docs/reference/standard-sql/net_functions)
* [ Numbering functions  ](/bigquery/docs/reference/standard-sql/numbering_functions)
* [ Range functions  ](/bigquery/docs/reference/standard-sql/range-functions)
* [ Search functions  ](/bigquery/docs/reference/standard-sql/search_functions)
* [ Security functions  ](/bigquery/docs/reference/standard-sql/security_functions)
* [ Statistical aggregate functions  ](/bigquery/docs/reference/standard-sql/statistical_aggregate_functions)
* [ String functions  ](/bigquery/docs/reference/standard-sql/string_functions)
* [ Table functions (built-in)  ](/bigquery/docs/reference/standard-sql/table-functions-built-in)
* [ Text analysis functions  ](/bigquery/docs/reference/standard-sql/text-analysis-functions)
* [ Time functions  ](/bigquery/docs/reference/standard-sql/time_functions)
* [ Time series functions  ](/bigquery/docs/reference/standard-sql/time-series-functions)
* [ Timestamp functions  ](/bigquery/docs/reference/standard-sql/timestamp_functions)
* [ Utility functions  ](/bigquery/docs/reference/standard-sql/utility-functions)

* Statements

* [ Data definition language (DDL)  ](/bigquery/docs/reference/standard-sql/data-definition-language)
* [ Data manipulation language (DML)  ](/bigquery/docs/reference/standard-sql/dml-syntax)
* [ Data control language (DCL)  ](/bigquery/docs/reference/standard-sql/data-control-language)
* [ Procedural language  ](/bigquery/docs/reference/standard-sql/procedural-language)
* [ Export and load statements  ](/bigquery/docs/reference/standard-sql/other-statements)
* [ Debugging statements  ](/bigquery/docs/reference/standard-sql/debugging-statements)

* BigQuery ML SQL reference

* Creating and training models

* [ CREATE MODEL statement overview  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create)
* Regression and classification

* [ Linear and logistic regression  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-glm)
* [ Boosted trees  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-boosted-tree)
* [ Random forest  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-random-forest)
* [ Deep neural networks  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-dnn-models)
* [ Wide & Deep networks  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-wnd-models)
* [ AutoML models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-automl)

* Clustering

* [ K-means  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-kmeans)

* Dimensionality reduction

* [ Principal component analysis  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-pca)
* [ Autoencoder  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-autoencoder)

* Collaborative filtering

* [ Matrix factorization  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-matrix-factorization)

* Time series forecasting

* [ Univariate forecasting with ARIMA_PLUS models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-time-series)
* [ Multivariate forecasting with ARIMA_PLUS_XREG models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-multivariate-time-series)

* Importing models

* [ Open Neural Network Exchange (ONNX)  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-onnx)
* [ TensorFlow  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-tensorflow)
* [ TensorFlow Lite  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-tflite)
* [ XGBoost  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-xgboost)

* Remote models

* [ LLMs  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-remote-model)
* [ Cloud AI services  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-remote-model-service)
* [ Vertex AI hosted models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-remote-model-https)

* Feature engineering

* [ Feature transformation  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-transform)
* [ ML.TRANSFORM  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-transform)
* [ ML.FEATURE_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-feature)
* General functions

* [ ML.IMPUTER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-imputer)

* Numerical functions

* [ ML.BUCKETIZE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-bucketize)
* [ ML.MAX_ABS_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-max-abs-scaler)
* [ ML.MIN_MAX_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-min-max-scaler)
* [ ML.NORMALIZER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-normalizer)
* [ ML.POLYNOMIAL_EXPAND  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-polynomial-expand)
* [ ML.QUANTILE_BUCKETIZE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-quantile-bucketize)
* [ ML.ROBUST_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-robust-scaler)
* [ ML.STANDARD_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-standard-scaler)

* Categorical functions

* [ ML.FEATURE_CROSS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-feature-cross)
* [ ML.HASH_BUCKETIZE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-hash-bucketize)
* [ ML.LABEL_ENCODER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-label-encoder)
* [ ML.MULTI_HOT_ENCODER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-multi-hot-encoder)
* [ ML.ONE_HOT_ENCODER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-one-hot-encoder)

* Text functions

* [ ML.NGRAMS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-ngrams)
* [ ML.BAG_OF_WORDS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-bag-of-words)
* [ ML.TF_IDF  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-tf-idf)

* Image functions

* [ ML.CONVERT_COLOR_SPACE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-convert-color-space)
* [ ML.CONVERT_IMAGE_TYPE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-convert-image-type)
* [ ML.DECODE_IMAGE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-decode-image)
* [ ML.RESIZE_IMAGE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-resize-image)

* Point-in-time lookup functions

* [ ML.FEATURES_AT_TIME  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-feature-time)
* [ ML.ENTITY_FEATURES_AT_TIME  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-entity-feature-time)

* Hyperparameter tuning functions

* [ ML.TRIAL_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-trial-info)

* Evaluation functions

* [ ML.EVALUATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-evaluate)
* [ ML.ROC_CURVE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-roc)
* [ ML.CONFUSION_MATRIX  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-confusion)
* [ ML.ARIMA_EVALUATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-arima-evaluate)
* [ ML.TRAINING_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-train)
* [ ML.RECONSTRUCTION_LOSS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-reconstruction-loss)
* [ ML.HOLIDAY_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-holiday-info)

* Inference functions

* [ ML.PREDICT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-predict)
* [ ML.FORECAST  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-forecast)
* [ ML.RECOMMEND  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-recommend)
* [ ML.DETECT_ANOMALIES  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-detect-anomalies)

* Generative AI functions

* [ ML.GENERATE_TEXT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-text)
* [ ML.GENERATE_EMBEDDING  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-embedding)

* AI functions

* [ ML.UNDERSTAND_TEXT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-understand-text)
* [ ML.TRANSLATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-translate)
* [ ML.PROCESS_DOCUMENT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-process-document)
* [ ML.TRANSCRIBE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-transcribe)
* [ ML.ANNOTATE_IMAGE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-annotate-image)

* AI Explanation functions

* [ ML.EXPLAIN_PREDICT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-explain-predict)
* [ ML.EXPLAIN_FORECAST  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-explain-forecast)
* [ ML.GLOBAL_EXPLAIN  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-global-explain)
* [ ML.FEATURE_IMPORTANCE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-importance)
* [ ML.ADVANCED_WEIGHTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-advanced-weights)

* Model weights functions

* [ ML.WEIGHTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-weights)
* [ ML.CENTROIDS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-centroids)
* [ ML.PRINCIPAL_COMPONENTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-principal-components)
* [ ML.PRINCIPAL_COMPONENT_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-principal-component-info)
* [ ML.ARIMA_COEFFICIENTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-arima-coefficients)

* Model monitoring functions

* [ ML.DESCRIBE_DATA  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-describe-data)
* [ ML.VALIDATE_DATA_DRIFT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-validate-data-drift)
* [ ML.VALIDATE_DATA_SKEW  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-validate-data-skew)
* [ ML.TFDV_DESCRIBE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-tfdv-describe)
* [ ML.TFDV_VALIDATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-tfdv-validate)

* Math utility functions

* [ ML.DISTANCE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-distance)
* [ ML.LP_NORM  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-lp-norm)

* Model management statements

* [ EXPORT MODEL statement  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-export-model)
* [ ALTER MODEL statement  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-alter-model)
* [ DROP MODEL statement  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-drop-model)

* INFORMATION SCHEMA views

* [ Introduction  ](/bigquery/docs/information-schema-intro)
* Access control

* [ OBJECT_PRIVILEGES view  ](/bigquery/docs/information-schema-object-privileges)

* BI Engine

* [ BI_CAPACITIES  ](/bigquery/docs/information-schema-bi-capacities)
* [ BI_CAPACITY_CHANGES  ](/bigquery/docs/information-schema-bi-capacity-changes)

* Configurations

* [ EFFECTIVE_PROJECT_OPTIONS view  ](/bigquery/docs/information-schema-effective-project-options)
* [ ORGANIZATION_OPTIONS view  ](/bigquery/docs/information-schema-organization-options)
* [ ORGANIZATION_OPTIONS_CHANGES view  ](/bigquery/docs/information-schema-organization-options-changes)
* [ PROJECT_OPTIONS view  ](/bigquery/docs/information-schema-project-options)
* [ PROJECT_OPTIONS_CHANGES view  ](/bigquery/docs/information-schema-project-options-changes)

* Datasets

* [ SCHEMATA view  ](/bigquery/docs/information-schema-datasets-schemata)
* [ SCHEMATA_LINKS view  ](/bigquery/docs/information-schema-datasets-schemata-links)
* [ SCHEMATA_OPTIONS view  ](/bigquery/docs/information-schema-datasets-schemata-options)
* [ SHARED_DATASET_USAGE view  ](/bigquery/docs/information-schema-shared-dataset-usage)
* [ SCHEMATA_REPLICAS view  ](/bigquery/docs/information-schema-schemata-replicas)

* Jobs

* [ JOBS view  ](/bigquery/docs/information-schema-jobs)
* [ JOBS_BY_USER view  ](/bigquery/docs/information-schema-jobs-by-user)
* [ JOBS_BY_FOLDER view  ](/bigquery/docs/information-schema-jobs-by-folder)
* [ JOBS_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-jobs-by-organization)

* Jobs by timeslice

* [ JOBS_TIMELINE view  ](/bigquery/docs/information-schema-jobs-timeline)
* [ JOBS_TIMELINE_BY_USER view  ](/bigquery/docs/information-schema-jobs-timeline-by-user)
* [ JOBS_TIMELINE_BY_FOLDER view  ](/bigquery/docs/information-schema-jobs-timeline-by-folder)
* [ JOBS_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-jobs-timeline-by-organization)

* Reservations

* [ ASSIGNMENTS view  ](/bigquery/docs/information-schema-assignments)
* [ ASSIGNMENT_CHANGES view  ](/bigquery/docs/information-schema-assignments-changes)
* [ CAPACITY_COMMITMENTS view  ](/bigquery/docs/information-schema-capacity-commitments)
* [ CAPACITY_COMMITMENT_CHANGES view  ](/bigquery/docs/information-schema-capacity-commitment-changes)
* [ RESERVATIONS view  ](/bigquery/docs/information-schema-reservations)
* [ RESERVATION_CHANGES view  ](/bigquery/docs/information-schema-reservation-changes)
* [ RESERVATIONS_TIMELINE view  ](/bigquery/docs/information-schema-reservation-timeline)

* Routines

* [ PARAMETERS view  ](/bigquery/docs/information-schema-parameters)
* [ ROUTINES view  ](/bigquery/docs/information-schema-routines)
* [ ROUTINE_OPTIONS view  ](/bigquery/docs/information-schema-routine-options)

* Search indexes

* [ SEARCH_INDEXES view  ](/bigquery/docs/information-schema-indexes)
* [ SEARCH_INDEX_COLUMNS view  ](/bigquery/docs/information-schema-index-columns)

* Sessions

* [ SESSIONS_BY_PROJECT view  ](/bigquery/docs/information-schema-sessions-by-project)
* [ SESSIONS_BY_USER view  ](/bigquery/docs/information-schema-sessions-by-user)

* Streaming

* [ STREAMING_TIMELINE view  ](/bigquery/docs/information-schema-streaming)
* [ STREAMING_TIMELINE_BY_FOLDER view  ](/bigquery/docs/information-schema-streaming-by-folder)
* [ STREAMING_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-streaming-by-organization)

* Tables

* [ COLUMNS view  ](/bigquery/docs/information-schema-columns)
* [ COLUMN_FIELD_PATHS view  ](/bigquery/docs/information-schema-column-field-paths)
* [ CONSTRAINT_COLUMN_USAGE view  ](/bigquery/docs/information-schema-constraint-column-usage)
* [ KEY_COLUMN_USAGE view  ](/bigquery/docs/information-schema-key-column-usage)
* [ PARTITIONS view  ](/bigquery/docs/information-schema-partitions)
* [ TABLES view  ](/bigquery/docs/information-schema-tables)
* [ TABLE_OPTIONS view  ](/bigquery/docs/information-schema-table-options)
* [ TABLE_CONSTRAINTS view  ](/bigquery/docs/information-schema-table-constraints)
* [ TABLE_SNAPSHOTS view  ](/bigquery/docs/information-schema-snapshots)
* [ TABLE_STORAGE view  ](/bigquery/docs/information-schema-table-storage)
* [ TABLE_STORAGE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-table-storage-by-organization)
* [ TABLE_STORAGE_USAGE_TIMELINE view  ](/bigquery/docs/information-schema-table-storage-usage)
* [ TABLE_STORAGE_USAGE_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-table-storage-usage-by-organization)

* Vector indexes

* [ VECTOR_INDEXES view  ](/bigquery/docs/information-schema-vector-indexes)
* [ VECTOR_INDEX_COLUMNS view  ](/bigquery/docs/information-schema-vector-index-columns)
* [ VECTOR_INDEX_OPTIONS view  ](/bigquery/docs/information-schema-vector-index-options)

* Views

* [ VIEWS view  ](/bigquery/docs/information-schema-views)
* [ MATERIALIZED_VIEWS view  ](/bigquery/docs/information-schema-materialized-views)

* Write API

* [ WRITE_API_TIMELINE view  ](/bigquery/docs/information-schema-write-api)
* [ WRITE_API_TIMELINE_BY_FOLDER view  ](/bigquery/docs/information-schema-write-api-by-folder)
* [ WRITE_API_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-write-api-by-organization)

* Legacy SQL reference

* [ Migrating to GoogleSQL  ](/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql)
* [ Functions and operators  ](/bigquery/docs/reference/legacy-sql)
* [ Data types  ](/bigquery/docs/data-types)
* [ Querying nested and repeated fields  ](/bigquery/docs/legacy-nested-repeated)
* [ User-defined functions  ](/bigquery/docs/user-defined-functions-legacy)
* [ Table decorators  ](/bigquery/docs/table-decorators)

* BigQuery DataFrames Python API

* [ BigQuery DataFrames  ](/bigquery/docs/reference/bigquery-dataframes)
* BigQuery APIs

* BigQuery API reference

* [ BigQuery APIs and libraries overview  ](/bigquery/docs/reference/libraries-overview)
* BigQuery API reference

* [ BigQuery client libraries  ](/bigquery/docs/reference/libraries)
* [ BigQuery REST API  ](/bigquery/docs/reference/rest)
* REST reference (v2)

* REST Resources

* datasets

* [ Overview  ](/bigquery/docs/reference/rest/v2/datasets)
* [ delete  ](/bigquery/docs/reference/rest/v2/datasets/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/datasets/get)
* [ insert  ](/bigquery/docs/reference/rest/v2/datasets/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/datasets/list)
* [ patch  ](/bigquery/docs/reference/rest/v2/datasets/patch)
* [ undelete  ](/bigquery/docs/reference/rest/v2/datasets/undelete)
* [ update  ](/bigquery/docs/reference/rest/v2/datasets/update)

* jobs

* [ Overview  ](/bigquery/docs/reference/rest/v2/jobs)
* [ cancel  ](/bigquery/docs/reference/rest/v2/jobs/cancel)
* [ delete  ](/bigquery/docs/reference/rest/v2/jobs/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/jobs/get)
* [ getQueryResults  ](/bigquery/docs/reference/rest/v2/jobs/getQueryResults)
* [ insert  ](/bigquery/docs/reference/rest/v2/jobs/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/jobs/list)
* [ query  ](/bigquery/docs/reference/rest/v2/jobs/query)

* models

* [ Overview  ](/bigquery/docs/reference/rest/v2/models)
* [ delete  ](/bigquery/docs/reference/rest/v2/models/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/models/get)
* [ list  ](/bigquery/docs/reference/rest/v2/models/list)
* [ patch  ](/bigquery/docs/reference/rest/v2/models/patch)

* projects

* [ Overview  ](/bigquery/docs/reference/rest/v2/projects)
* [ getServiceAccount  ](/bigquery/docs/reference/rest/v2/projects/getServiceAccount)
* [ list  ](/bigquery/docs/reference/rest/v2/projects/list)

* routines

* [ Overview  ](/bigquery/docs/reference/rest/v2/routines)
* [ delete  ](/bigquery/docs/reference/rest/v2/routines/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/routines/get)
* [ insert  ](/bigquery/docs/reference/rest/v2/routines/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/routines/list)
* [ update  ](/bigquery/docs/reference/rest/v2/routines/update)

* rowAccessPolicies

* [ Overview  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies)
* [ getIamPolicy  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies/getIamPolicy)
* [ list  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies/list)
* [ testIamPermissions  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies/testIamPermissions)

* tabledata

* [ Overview  ](/bigquery/docs/reference/rest/v2/tabledata)
* [ insertAll  ](/bigquery/docs/reference/rest/v2/tabledata/insertAll)
* [ list  ](/bigquery/docs/reference/rest/v2/tabledata/list)

* tables

* [ Overview  ](/bigquery/docs/reference/rest/v2/tables)
* [ delete  ](/bigquery/docs/reference/rest/v2/tables/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/tables/get)
* [ getIamPolicy  ](/bigquery/docs/reference/rest/v2/tables/getIamPolicy)
* [ insert  ](/bigquery/docs/reference/rest/v2/tables/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/tables/list)
* [ patch  ](/bigquery/docs/reference/rest/v2/tables/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/rest/v2/tables/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/rest/v2/tables/testIamPermissions)
* [ update  ](/bigquery/docs/reference/rest/v2/tables/update)

* Types

* [ ConnectionProperty  ](/bigquery/docs/reference/rest/v2/ConnectionProperty)
* [ DataFormatOptions  ](/bigquery/docs/reference/rest/v2/DataFormatOptions)
* [ DatasetAccessEntry  ](/bigquery/docs/reference/rest/v2/DatasetAccessEntry)
* [ DmlStats  ](/bigquery/docs/reference/rest/v2/DmlStats)
* [ EncryptionConfiguration  ](/bigquery/docs/reference/rest/v2/EncryptionConfiguration)
* [ GetPolicyOptions  ](/bigquery/docs/reference/rest/v2/GetPolicyOptions)
* [ Job  ](/bigquery/docs/reference/rest/v2/Job)
* [ JobReference  ](/bigquery/docs/reference/rest/v2/JobReference)
* [ Policy  ](/bigquery/docs/reference/rest/v2/Policy)
* [ ProjectReference  ](/bigquery/docs/reference/rest/v2/ProjectReference)
* [ QueryParameter  ](/bigquery/docs/reference/rest/v2/QueryParameter)
* [ RoundingMode  ](/bigquery/docs/reference/rest/v2/RoundingMode)
* [ RowAccessPolicyReference  ](/bigquery/docs/reference/rest/v2/RowAccessPolicyReference)
* [ SessionInfo  ](/bigquery/docs/reference/rest/v2/SessionInfo)
* [ StandardSqlDataType  ](/bigquery/docs/reference/rest/v2/StandardSqlDataType)
* [ StandardSqlField  ](/bigquery/docs/reference/rest/v2/StandardSqlField)
* [ TableReference  ](/bigquery/docs/reference/rest/v2/TableReference)
* [ TargetType  ](/bigquery/docs/reference/rest/v2/TargetType)
* [ TestIamPermissionsResponse  ](/bigquery/docs/reference/rest/v2/TestIamPermissionsResponse)

* [ API uploads  ](/bigquery/docs/reference/api-uploads)

* BigQuery Data Policy API reference

* [ Data Policy REST reference  ](/bigquery/docs/reference/bigquerydatapolicy/rest)
* v1

* REST Resources

* projects.locations.dataPolicies

* [ Overview  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies)
* [ create  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/create)
* [ delete  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/delete)
* [ get  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/list)
* [ patch  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/patch)
* [ rename  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/rename)
* [ setIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/testIamPermissions)

* v1beta1

* REST Resources

* projects.locations.dataPolicies

* [ Overview  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies)
* [ create  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/create)
* [ delete  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/delete)
* [ get  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/list)
* [ patch  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/testIamPermissions)

* BigQuery Connections API reference

* [ BigQuery Connection client libraries  ](/bigquery/docs/reference/bigqueryconnection)
* [ BigQuery Connection REST API  ](/bigquery/docs/reference/bigqueryconnection/rest)
* RPC reference

* [ Overview  ](/bigquery/docs/reference/bigqueryconnection/rpc)
* [ google.cloud.bigquery.connection.v1  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.cloud.bigquery.connection.v1)
* [ google.cloud.bigquery.connection.v1beta1  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.cloud.bigquery.connection.v1beta1)
* [ google.iam.v1  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.iam.v1)
* [ google.type  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.type)

* REST reference (v1)

* REST Resources

* projects.locations.connections

* [ Overview  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections)
* [ create  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/create)
* [ delete  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/delete)
* [ get  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/list)
* [ patch  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/testIamPermissions)

* REST reference (v1beta1)

* REST Resources

* projects.locations.connections

* [ Overview  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections)
* [ create  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/create)
* [ delete  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/delete)
* [ get  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/list)
* [ patch  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/testIamPermissions)
* [ updateCredential  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/updateCredential)

* BigQuery Migration API reference

* [ BigQuery Migration client libraries  ](/bigquery/docs/reference/migration)
* [ BigQuery Migration REST API  ](/bigquery/docs/reference/migration/rest)
* REST reference (v2)

* REST Resources

* projects.locations.workflows

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows)
* [ create  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/create)
* [ delete  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/delete)
* [ get  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/list)
* [ start  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/start)

* projects.locations.workflows.subtasks

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows.subtasks)
* [ get  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows.subtasks/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows.subtasks/list)

* Types

* [ Distribution  ](/bigquery/docs/reference/migration/rest/Shared.Types/Distribution)
* [ ErrorInfo  ](/bigquery/docs/reference/migration/rest/Shared.Types/ErrorInfo)
* [ MetricKind  ](/bigquery/docs/reference/migration/rest/Shared.Types/MetricKind)
* [ ResourceInfo  ](/bigquery/docs/reference/migration/rest/Shared.Types/ResourceInfo)
* [ ValueType  ](/bigquery/docs/reference/migration/rest/Shared.Types/ValueType)

* REST reference (v2alpha)

* REST Resources

* projects.locations.workflows

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows)
* [ create  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/create)
* [ delete  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/delete)
* [ get  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/list)
* [ start  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/start)

* projects.locations.workflows.subtasks

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows.subtasks)
* [ get  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows.subtasks/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows.subtasks/list)

* RPC reference

* [ Overview  ](/bigquery/docs/reference/migration/rpc)
* [ google.api  ](/bigquery/docs/reference/migration/rpc/google.api)
* [ google.cloud.bigquery.migration.tasks.assessment.v2alpha  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.tasks.assessment.v2alpha)
* [ google.cloud.bigquery.migration.tasks.translation.v2alpha  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.tasks.translation.v2alpha)
* [ google.cloud.bigquery.migration.v2  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.v2)
* [ google.cloud.bigquery.migration.v2alpha  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.v2alpha)
* [ google.rpc  ](/bigquery/docs/reference/migration/rpc/google.rpc)

* BigQuery Storage API reference

* [ Storage API client libraries  ](/bigquery/docs/reference/storage/libraries)
* RPC reference

* [ Overview  ](/bigquery/docs/reference/storage/rpc)
* [ google.cloud.bigquery.storage.v1  ](/bigquery/docs/reference/storage/rpc/google.cloud.bigquery.storage.v1)
* [ google.cloud.bigquery.storage.v1beta1  ](/bigquery/docs/reference/storage/rpc/google.cloud.bigquery.storage.v1beta1)
* [ google.cloud.bigquery.storage.v1beta2  ](/bigquery/docs/reference/storage/rpc/google.cloud.bigquery.storage.v1beta2)
* [ google.rpc  ](/bigquery/docs/reference/storage/rpc/google.rpc)

* BigQuery Reservation API reference

* [ BigQuery Reservation API client libraries  ](/bigquery/docs/reference/reservations)
* [ BigQuery Reservation REST API  ](/bigquery/docs/reference/reservations/rest)
* RPC reference

* [ Overview  ](/bigquery/docs/reference/reservations/rpc)
* [ google.cloud.bigquery.reservation.v1  ](/bigquery/docs/reference/reservations/rpc/google.cloud.bigquery.reservation.v1)
* [ google.rpc  ](/bigquery/docs/reference/reservations/rpc/google.rpc)

* REST reference (v1)

* REST Resources

* projects.locations

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations)
* [ getBiReservation  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/getBiReservation)
* [ searchAllAssignments  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/searchAllAssignments)
* [ searchAssignments  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/searchAssignments)
* [ updateBiReservation  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/updateBiReservation)

* projects.locations.capacityCommitments

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments)
* [ create  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/create)
* [ delete  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/delete)
* [ get  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/get)
* [ list  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/list)
* [ merge  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/merge)
* [ patch  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/patch)
* [ split  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/split)

* projects.locations.reservations

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations)
* [ create  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/create)
* [ delete  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/delete)
* [ get  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/get)
* [ list  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/list)
* [ patch  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/patch)

* projects.locations.reservations.assignments

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments)
* [ create  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/create)
* [ delete  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/delete)
* [ list  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/list)
* [ move  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/move)
* [ patch  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/patch)

* Types

* [ BiReservation  ](/bigquery/docs/reference/reservations/rest/v1/BiReservation)
* [ Edition  ](/bigquery/docs/reference/reservations/rest/v1/Edition)

* BigQuery Analytics Hub API reference

* [ Analytics Hub client libraries  ](/bigquery/docs/reference/analytics-hub)
* [ Analytics Hub REST API  ](/bigquery/docs/reference/analytics-hub/rest)
* REST reference (v1)

* REST Resources

* organizations.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/organizations.locations.dataExchanges)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/organizations.locations.dataExchanges/list)

* projects.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/list)
* [ listSubscriptions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/listSubscriptions)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/setIamPolicy)
* [ subscribe  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/subscribe)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/testIamPermissions)

* projects.locations.dataExchanges.listings

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/list)
* [ listSubscriptions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/listSubscriptions)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/setIamPolicy)
* [ subscribe  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/subscribe)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/testIamPermissions)

* projects.locations.subscriptions

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/get)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/list)
* [ refresh  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/refresh)
* [ revoke  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/revoke)

* Types

* [ ListSharedResourceSubscriptionsResponse  ](/bigquery/docs/reference/analytics-hub/rest/v1/ListSharedResourceSubscriptionsResponse)
* [ Operation  ](/bigquery/docs/reference/analytics-hub/rest/v1/Operation)

* REST reference (v1beta1)

* REST Resources

* organizations.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/organizations.locations.dataExchanges)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/organizations.locations.dataExchanges/list)

* projects.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/list)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/testIamPermissions)

* projects.locations.dataExchanges.listings

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/list)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/setIamPolicy)
* [ subscribe  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/subscribe)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/testIamPermissions)

* BigQuery Data Transfer Service API reference

* [ BigQuery Data Transfer Service client libraries  ](/bigquery/docs/reference/datatransfer/libraries)
* [ BigQuery Data Transfer Service REST API  ](/bigquery/docs/reference/datatransfer/rest)
* REST reference

* REST Resources

* projects

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects)
* [ enrollDataSources  ](/bigquery/docs/reference/datatransfer/rest/v1/projects/enrollDataSources)

* projects.dataSources

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources)
* [ checkValidCreds  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources/checkValidCreds)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources/list)

* projects.locations

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations)
* [ enrollDataSources  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/enrollDataSources)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/list)
* [ unenrollDataSources  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/unenrollDataSources)

* projects.locations.dataSources

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources)
* [ checkValidCreds  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/checkValidCreds)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list)

* projects.locations.transferConfigs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs)
* [ create  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/create)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/list)
* [ patch  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/patch)
* [ scheduleRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/scheduleRuns)
* [ startManualRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/startManualRuns)

* projects.locations.transferConfigs.runs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs/list)

* projects.locations.transferConfigs.runs.transferLogs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs.transferLogs)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs.transferLogs/list)

* projects.transferConfigs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs)
* [ create  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/create)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/list)
* [ patch  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/patch)
* [ scheduleRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/scheduleRuns)
* [ startManualRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/startManualRuns)

* projects.transferConfigs.runs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs/list)

* projects.transferConfigs.runs.transferLogs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs.transferLogs)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs.transferLogs/list)

* Types

* [ CheckValidCredsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/CheckValidCredsResponse)
* [ Code  ](/bigquery/docs/reference/datatransfer/rest/v1/Code)
* [ EmailPreferences  ](/bigquery/docs/reference/datatransfer/rest/v1/EmailPreferences)
* [ ListDataSourcesResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListDataSourcesResponse)
* [ ListTransferConfigsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListTransferConfigsResponse)
* [ ListTransferLogsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListTransferLogsResponse)
* [ ListTransferRunsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListTransferRunsResponse)
* [ RunAttempt  ](/bigquery/docs/reference/datatransfer/rest/v1/RunAttempt)
* [ ScheduleTransferRunsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ScheduleTransferRunsResponse)
* [ StartManualTransferRunsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/StartManualTransferRunsResponse)
* [ TimeRange  ](/bigquery/docs/reference/datatransfer/rest/v1/TimeRange)
* [ TransferState  ](/bigquery/docs/reference/datatransfer/rest/v1/TransferState)

* RPC reference

* [ Overview  ](/bigquery/docs/reference/datatransfer/rpc)
* [ google.cloud.bigquery.datatransfer.v1  ](/bigquery/docs/reference/datatransfer/rpc/google.cloud.bigquery.datatransfer.v1)
* [ google.cloud.location  ](/bigquery/docs/reference/datatransfer/rpc/google.cloud.location)
* [ google.rpc  ](/bigquery/docs/reference/datatransfer/rpc/google.rpc)

* BigQuery BigLake API reference

* [ BigLake REST API  ](/bigquery/docs/reference/biglake/rest)
* REST reference (v1)

* REST Resources

* projects.locations.catalogs

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/list)

* projects.locations.catalogs.databases

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/patch)

* projects.locations.catalogs.databases.tables

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/patch)
* [ rename  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/rename)

* REST reference (v1alpha1)

* REST Resources

* projects.locations.catalogs

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/list)

* projects.locations.catalogs.databases

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/patch)

* projects.locations.catalogs.databases.locks

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks)
* [ check  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/check)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/delete)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/list)

* projects.locations.catalogs.databases.tables

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/patch)
* [ rename  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/rename)

* BigQuery routines

* [ System procedures reference  ](/bigquery/docs/reference/system-procedures)
* [ System variables reference  ](/bigquery/docs/reference/system-variables)
* BigQuery audit logging

* BigQuery audit logging reference

* [ Overview  ](/bigquery/docs/reference/auditlogs)
* Types

* [ AuditData  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/AuditData)
* [ AuditLogConfig.LogType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/AuditLogConfig.LogType)
* [ BigQueryAuditMetadata  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata)
* [ BigQueryAuditMetadata.AccessChange.Action  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.AccessChange.Action)
* [ BigQueryAuditMetadata.ConnectionChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ConnectionChange.Reason)
* [ BigQueryAuditMetadata.CreateDisposition  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.CreateDisposition)
* [ BigQueryAuditMetadata.DatasetChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.DatasetChange.Reason)
* [ BigQueryAuditMetadata.DatasetCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.DatasetCreation.Reason)
* [ BigQueryAuditMetadata.DatasetDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.DatasetDeletion.Reason)
* [ BigQueryAuditMetadata.JobConfig.Query.Priority  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobConfig.Query.Priority)
* [ BigQueryAuditMetadata.JobConfig.Type  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobConfig.Type)
* [ BigQueryAuditMetadata.JobDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobDeletion.Reason)
* [ BigQueryAuditMetadata.JobInsertion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobInsertion.Reason)
* [ BigQueryAuditMetadata.JobState  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobState)
* [ BigQueryAuditMetadata.ModelCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelCreation.Reason)
* [ BigQueryAuditMetadata.ModelDataChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelDataChange.Reason)
* [ BigQueryAuditMetadata.ModelDataRead.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelDataRead.Reason)
* [ BigQueryAuditMetadata.ModelDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelDeletion.Reason)
* [ BigQueryAuditMetadata.ModelMetadataChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelMetadataChange.Reason)
* [ BigQueryAuditMetadata.OperationType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.OperationType)
* [ BigQueryAuditMetadata.QueryStatementType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.QueryStatementType)
* [ BigQueryAuditMetadata.RoutineChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.RoutineChange.Reason)
* [ BigQueryAuditMetadata.RoutineCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.RoutineCreation.Reason)
* [ BigQueryAuditMetadata.RoutineDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.RoutineDeletion.Reason)
* [ BigQueryAuditMetadata.SearchIndexCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.SearchIndexCreation.Reason)
* [ BigQueryAuditMetadata.SearchIndexDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.SearchIndexDeletion.Reason)
* [ BigQueryAuditMetadata.TableChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableChange.Reason)
* [ BigQueryAuditMetadata.TableCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableCreation.Reason)
* [ BigQueryAuditMetadata.TableDataChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableDataChange.Reason)
* [ BigQueryAuditMetadata.TableDataRead.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableDataRead.Reason)
* [ BigQueryAuditMetadata.TableDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableDeletion.Reason)
* [ BigQueryAuditMetadata.UnlinkDataset.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.UnlinkDataset.Reason)
* [ BigQueryAuditMetadata.WriteDisposition  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.WriteDisposition)
* [ BindingDelta.Action  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BindingDelta.Action)
* [ DatasetAccessEntry  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/DatasetAccessEntry)
* [ DatasetAccessEntry.TargetType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/DatasetAccessEntry.TargetType)
* [ Expr  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/Expr)
* [ JoinRestrictionPolicy.JoinCondition  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/JoinRestrictionPolicy.JoinCondition)
* [ Policy  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/Policy)
* [ RoutineReference  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/RoutineReference)
* [ Status  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/Status)
* [ TableReference  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/TableReference)

* [ AI solutions, generative AI, and ML  ](/docs/ai-ml)
* [ Application development  ](/docs/application-development)
* [ Application hosting  ](/docs/application-hosting)
* [ Compute  ](/docs/compute-area)
* [ Data analytics and pipelines  ](/docs/data)
* [ Databases  ](/docs/databases)
* [ Distributed, hybrid, and multicloud  ](/docs/dhm-cloud)
* [ Industry solutions  ](/docs/industry)
* [ Networking  ](/docs/networking)
* [ Observability and monitoring  ](/docs/observability)
* [ Security  ](/docs/security)
* [ Storage  ](/docs/storage)

* [ Access and resources management  ](/docs/access-resources)
* [ Cloud SDK, languages, frameworks, and tools  ](/docs/devtools)
* [ Costs and usage management  ](/docs/costs-usage)
* [ Infrastructure as code  ](/docs/iac)
* [ Migration  ](/docs/migration)

* [ Google Cloud Home  ](/)
* [ Free Trial and Free Tier  ](/free)
* [ Architecture Center  ](/architecture)
* [ Blog  ](https://cloud.google.com/blog)
* [ Contact Sales  ](/contact)
* [ Google Cloud Developer Center  ](/developers)
* [ Google Developer Center  ](https://developers.google.com/)
* [ Google Cloud Marketplace (in console)  ](https://console.cloud.google.com/marketplace)
* [ Google Cloud Marketplace Documentation  ](/marketplace/docs)
* [ Google Cloud Skills Boost  ](https://www.cloudskillsboost.google/paths)
* [ Google Cloud Solution Center  ](/solutions)
* [ Google Cloud Support  ](/support-hub)
* [ Google Cloud Tech Youtube Channel  ](https://www.youtube.com/@googlecloudtech)

* [ Home ](https://cloud.google.com/)
* [ BigQuery ](https://cloud.google.com/bigquery)
* [ Documentation ](https://cloud.google.com/bigquery/docs)
* [ Reference ](https://cloud.google.com/bigquery/quotas)

Send feedback

#  JSON functions

Stay organized with collections  Save and categorize content based on your
preferences.

GoogleSQL for BigQuery supports the following functions, which can retrieve
and transform JSON data.

###  Categories

The JSON functions are grouped into the following categories based on their
behavior:

Category  |  Functions  |  Description
---|---|---
Standard extractors  |  ` JSON_QUERY `
` JSON_VALUE `
` JSON_QUERY_ARRAY `
` JSON_VALUE_ARRAY `
|  Functions that extract JSON data.
Legacy extractors  |  ` JSON_EXTRACT `
` JSON_EXTRACT_SCALAR `
` JSON_EXTRACT_ARRAY `
` JSON_EXTRACT_STRING_ARRAY `
|  Functions that extract JSON data.
While these functions are supported by GoogleSQL, we recommend using the
standard extractor functions  .
Lax converters  |  ` LAX_BOOL `
` LAX_FLOAT64 `
` LAX_INT64 `
` LAX_STRING `
|  Functions that flexibly convert a JSON value to an SQL value without
returning errors.
Converters  |  ` BOOL `
` FLOAT64 `
` INT64 `
` STRING `
|  Functions that convert a JSON value to a SQL value.
Other converters  |  ` PARSE_JSON `
` TO_JSON `
` TO_JSON_STRING `
|  Other conversion functions from or to JSON.
Constructors  |  ` JSON_ARRAY `
` JSON_OBJECT `
|  Functions that create JSON.
Mutators  |  ` JSON_ARRAY_APPEND `
` JSON_ARRAY_INSERT `
` JSON_REMOVE `
` JSON_SET `
` JSON_STRIP_NULLS `
|  Functions that mutate existing JSON.
Accessors  |  ` JSON_TYPE `
|  Functions that provide access to JSON properties.

###  Function list

Name  |  Summary
---|---
` BOOL ` |  Converts a JSON boolean to a SQL ` BOOL ` value.
` FLOAT64 ` |  Converts a JSON number to a SQL ` FLOAT64 ` value.
` INT64 ` |  Converts a JSON number to a SQL ` INT64 ` value.
` JSON_ARRAY ` |  Creates a JSON array.
` JSON_ARRAY_APPEND ` |  Appends JSON data to the end of a JSON array.
` JSON_ARRAY_INSERT ` |  Inserts JSON data into a JSON array.
` JSON_EXTRACT ` |  (Deprecated) Extracts a JSON value and converts it to a
SQL JSON-formatted ` STRING ` or ` JSON ` value.
` JSON_EXTRACT_ARRAY ` |  (Deprecated) Extracts a JSON array and converts it
to a SQL ` ARRAY<JSON-formatted STRING> ` or ` ARRAY<JSON> ` value.
` JSON_EXTRACT_SCALAR ` |  (Deprecated) Extracts a JSON scalar value and
converts it to a SQL ` STRING ` value.
` JSON_EXTRACT_STRING_ARRAY ` |  (Deprecated) Extracts a JSON array of scalar
values and converts it to a SQL ` ARRAY<STRING> ` value.
` JSON_OBJECT ` |  Creates a JSON object.
` JSON_QUERY ` |  Extracts a JSON value and converts it to a SQL JSON-
formatted ` STRING ` or ` JSON ` value.
` JSON_QUERY_ARRAY ` |  Extracts a JSON array and converts it to a SQL `
ARRAY<JSON-formatted STRING> ` or ` ARRAY<JSON> ` value.
` JSON_REMOVE ` |  Produces JSON with the specified JSON data removed.
` JSON_SET ` |  Inserts or replaces JSON data.
` JSON_STRIP_NULLS ` |  Removes JSON nulls from JSON objects and JSON arrays.
` JSON_TYPE ` |  Gets the JSON type of the outermost JSON value and converts
the name of this type to a SQL ` STRING ` value.
` JSON_VALUE ` |  Extracts a JSON scalar value and converts it to a SQL `
STRING ` value.
` JSON_VALUE_ARRAY ` |  Extracts a JSON array of scalar values and converts it
to a SQL ` ARRAY<STRING> ` value.
` LAX_BOOL ` |  Attempts to convert a JSON value to a SQL ` BOOL ` value.
` LAX_FLOAT64 ` |  Attempts to convert a JSON value to a SQL ` FLOAT64 `
value.
` LAX_INT64 ` |  Attempts to convert a JSON value to a SQL ` INT64 ` value.
` LAX_STRING ` |  Attempts to convert a JSON value to a SQL ` STRING ` value.
` PARSE_JSON ` |  Converts a JSON-formatted ` STRING ` value to a ` JSON `
value.
` STRING ` |  Converts a JSON string to a SQL ` STRING ` value.
` TO_JSON ` |  Converts a SQL value to a JSON value.
` TO_JSON_STRING ` |  Converts a SQL value to a JSON-formatted ` STRING `
value.

###  ` BOOL `



BOOL(json_expr)


**Description**

Converts a JSON boolean to a SQL ` BOOL ` value.

Arguments:

* ` json_expr ` : JSON. For example:

JSON 'true'


If the JSON value is not a boolean, an error is produced. If the expression is
SQL ` NULL ` , the function returns SQL ` NULL ` .

**Return type**

` BOOL `

**Examples**



SELECT BOOL(JSON 'true') AS vacancy;

/*---------*
| vacancy |
+---------+
| true    |
*---------*/



SELECT BOOL(JSON_QUERY(JSON '{"hotel class": "5-star", "vacancy": true}', "$.vacancy")) AS vacancy;

/*---------*
| vacancy |
+---------+
| true    |
*---------*/


The following examples show how invalid requests are handled:



-- An error is thrown if JSON is not of type bool.
SELECT BOOL(JSON '123') AS result; -- Throws an error
SELECT BOOL(JSON 'null') AS result; -- Throws an error
SELECT SAFE.BOOL(JSON '123') AS result; -- Returns a SQL NULL


###  ` FLOAT64 `



FLOAT64(json_expr[, wide_number_mode=>{ 'exact' | 'round' }])


**Description**

Converts a JSON number to a SQL ` FLOAT64 ` value.

Arguments:

* ` json_expr ` : JSON. For example:

JSON '9.8'


If the JSON value is not a number, an error is produced. If the expression is
a SQL ` NULL ` , the function returns SQL ` NULL ` .

* ` wide_number_mode ` : Optional mandatory-named argument, which defines what happens with a number that cannot be represented as a ` FLOAT64 ` without loss of precision. This argument accepts one of the two case-sensitive values:

* ` exact ` : The function fails if the result cannot be represented as a ` FLOAT64 ` without loss of precision.
* ` round ` (default): The numeric value stored in JSON will be rounded to ` FLOAT64 ` . If such rounding is not possible, the function fails.

**Return type**

` FLOAT64 `

**Examples**



SELECT FLOAT64(JSON '9.8') AS velocity;

/*----------*
| velocity |
+----------+
| 9.8      |
*----------*/



SELECT FLOAT64(JSON_QUERY(JSON '{"vo2_max": 39.1, "age": 18}', "$.vo2_max")) AS vo2_max;

/*---------*
| vo2_max |
+---------+
| 39.1    |
*---------*/



SELECT FLOAT64(JSON '18446744073709551615', wide_number_mode=>'round') as result;

/*------------------------*
| result                 |
+------------------------+
| 1.8446744073709552e+19 |
*------------------------*/



SELECT FLOAT64(JSON '18446744073709551615') as result;

/*------------------------*
| result                 |
+------------------------+
| 1.8446744073709552e+19 |
*------------------------*/


The following examples show how invalid requests are handled:



-- An error is thrown if JSON is not of type FLOAT64.
SELECT FLOAT64(JSON '"strawberry"') AS result;
SELECT FLOAT64(JSON 'null') AS result;

-- An error is thrown because `wide_number_mode` is case-sensitive and not "exact" or "round".
SELECT FLOAT64(JSON '123.4', wide_number_mode=>'EXACT') as result;
SELECT FLOAT64(JSON '123.4', wide_number_mode=>'exac') as result;

-- An error is thrown because the number cannot be converted to DOUBLE without loss of precision
SELECT FLOAT64(JSON '18446744073709551615', wide_number_mode=>'exact') as result;

-- Returns a SQL NULL
SELECT SAFE.FLOAT64(JSON '"strawberry"') AS result;


###  ` INT64 `



INT64(json_expr)


**Description**

Converts a JSON number to a SQL ` INT64 ` value.

Arguments:

* ` json_expr ` : JSON. For example:

JSON '999'


If the JSON value is not a number, or the JSON number is not in the SQL `
INT64 ` domain, an error is produced. If the expression is SQL ` NULL ` , the
function returns SQL ` NULL ` .

**Return type**

` INT64 `

**Examples**



SELECT INT64(JSON '2005') AS flight_number;

/*---------------*
| flight_number |
+---------------+
| 2005          |
*---------------*/



SELECT INT64(JSON_QUERY(JSON '{"gate": "A4", "flight_number": 2005}', "$.flight_number")) AS flight_number;

/*---------------*
| flight_number |
+---------------+
| 2005          |
*---------------*/



SELECT INT64(JSON '10.0') AS score;

/*-------*
| score |
+-------+
| 10    |
*-------*/


The following examples show how invalid requests are handled:



-- An error is thrown if JSON is not a number or cannot be converted to a 64-bit integer.
SELECT INT64(JSON '10.1') AS result;  -- Throws an error
SELECT INT64(JSON '"strawberry"') AS result; -- Throws an error
SELECT INT64(JSON 'null') AS result; -- Throws an error
SELECT SAFE.INT64(JSON '"strawberry"') AS result;  -- Returns a SQL NULL


###  ` JSON_ARRAY `



JSON_ARRAY([value][, ...])


**Description**

Creates a JSON array from zero or more SQL values.

Arguments:

* ` value ` : A  JSON encoding-supported  value to add to a JSON array.

**Return type**

` JSON `

**Examples**

You can create an empty JSON array. For example:



SELECT JSON_ARRAY() AS json_data

/*-----------*
| json_data |
+-----------+
| []        |
*-----------*/


The following query creates a JSON array with one value in it:



SELECT JSON_ARRAY(10) AS json_data

/*-----------*
| json_data |
+-----------+
| [10]      |
*-----------*/


You can create a JSON array with an empty JSON array in it. For example:



SELECT JSON_ARRAY([]) AS json_data

/*-----------*
| json_data |
+-----------+
| [[]]      |
*-----------*/



SELECT JSON_ARRAY(10, 'foo', NULL) AS json_data

/*-----------------*
| json_data       |
+-----------------+
| [10,"foo",null] |
*-----------------*/



SELECT JSON_ARRAY(STRUCT(10 AS a, 'foo' AS b)) AS json_data

/*----------------------*
| json_data            |
+----------------------+
| [{"a":10,"b":"foo"}] |
*----------------------*/



SELECT JSON_ARRAY(10, ['foo', 'bar'], [20, 30]) AS json_data

/*----------------------------*
| json_data                  |
+----------------------------+
| [10,["foo","bar"],[20,30]] |
*----------------------------*/



SELECT JSON_ARRAY(10, [JSON '20', JSON '"foo"']) AS json_data

/*-----------------*
| json_data       |
+-----------------+
| [10,[20,"foo"]] |
*-----------------*/


###  ` JSON_ARRAY_APPEND `



JSON_ARRAY_APPEND(
json_expr,
json_path_value_pair[, ...]
[, append_each_element=>{ TRUE | FALSE }]
)

json_path_value_pair:
json_path, value


Appends JSON data to the end of a JSON array.

Arguments:

* ` json_expr ` : JSON. For example:

JSON '["a", "b", "c"]'


* ` json_path_value_pair ` : A value and the  JSONPath  for that value. This includes:

* ` json_path ` : Append ` value ` at this  JSONPath  in ` json_expr ` .

* ` value ` : A  JSON encoding-supported  value to append.

* ` append_each_element ` : An optional, mandatory named argument.

* If ` TRUE ` (default), and ` value ` is a SQL array, appends each element individually.

* If ` FALSE, ` and ` value ` is a SQL array, appends the array as one element.

Details:

* Path value pairs are evaluated left to right. The JSON produced by evaluating one pair becomes the JSON against which the next pair is evaluated.
* The operation is ignored if the path points to a JSON non-array value that is not a JSON null.
* If ` json_path ` points to a JSON null, the JSON null is replaced by a JSON array that contains ` value ` .
* If the path exists but has an incompatible type at any given path token, the path value pair operation is ignored.
* The function applies all path value pair append operations even if an individual path value pair operation is invalid. For invalid operations, the operation is ignored and the function continues to process the rest of the path value pairs.
* If any ` json_path ` is an invalid  JSONPath  , an error is produced.
* If ` json_expr ` is SQL ` NULL ` , the function returns SQL ` NULL ` .
* If ` append_each_element ` is SQL ` NULL ` , the function returns ` json_expr ` .
* If ` json_path ` is SQL ` NULL ` , the ` json_path_value_pair ` operation is ignored.

**Return type**

` JSON `

**Examples**

In the following example, path ` $ ` is matched and appends ` 1 ` .



SELECT JSON_ARRAY_APPEND(JSON '["a", "b", "c"]', '$', 1) AS json_data

/*-----------------*
| json_data       |
+-----------------+
| ["a","b","c",1] |
*-----------------*/


In the following example, ` append_each_element ` defaults to ` TRUE ` , so `
[1, 2] ` is appended as individual elements.



SELECT JSON_ARRAY_APPEND(JSON '["a", "b", "c"]', '$', [1, 2]) AS json_data

/*-------------------*
| json_data         |
+-------------------+
| ["a","b","c",1,2] |
*-------------------*/


In the following example, ` append_each_element ` is ` FALSE ` , so ` [1, 2] `
is appended as one element.



SELECT JSON_ARRAY_APPEND(
JSON '["a", "b", "c"]',
'$', [1, 2],
append_each_element=>FALSE) AS json_data

/*---------------------*
| json_data           |
+---------------------+
| ["a","b","c",[1,2]] |
*---------------------*/


In the following example, ` append_each_element ` is ` FALSE ` , so ` [1, 2] `
and ` [3, 4] ` are each appended as one element.



SELECT JSON_ARRAY_APPEND(
JSON '["a", ["b"], "c"]',
'$[1]', [1, 2],
'$[1][1]', [3, 4],
append_each_element=>FALSE) AS json_data

/*-----------------------------*
| json_data                   |
+-----------------------------+
| ["a",["b",[1,2,[3,4]]],"c"] |
*-----------------------------*/


In the following example, the first path ` $[1] ` appends ` [1, 2] ` as single
elements, and then the second path ` $[1][1] ` is not a valid path to an
array, so the second operation is ignored.



SELECT JSON_ARRAY_APPEND(
JSON '["a", ["b"], "c"]',
'$[1]', [1, 2],
'$[1][1]', [3, 4]) AS json_data

/*---------------------*
| json_data           |
+---------------------+
| ["a",["b",1,2],"c"] |
*---------------------*/


In the following example, path ` $.a ` is matched and appends ` 2 ` .



SELECT JSON_ARRAY_APPEND(JSON '{"a": [1]}', '$.a', 2) AS json_data

/*-------------*
| json_data   |
+-------------+
| {"a":[1,2]} |
*-------------*/


In the following example, a value is appended into a JSON null.



SELECT JSON_ARRAY_APPEND(JSON '{"a": null}', '$.a', 10)

/*------------*
| json_data  |
+------------+
| {"a":[10]} |
*------------*/


In the following example, path ` $.a ` is not an array, so the operation is
ignored.



SELECT JSON_ARRAY_APPEND(JSON '{"a": 1}', '$.a', 2) AS json_data

/*-----------*
| json_data |
+-----------+
| {"a":1}   |
*-----------*/


In the following example, path ` $.b ` does not exist, so the operation is
ignored.



SELECT JSON_ARRAY_APPEND(JSON '{"a": 1}', '$.b', 2) AS json_data

/*-----------*
| json_data |
+-----------+
| {"a":1}   |
*-----------*/


###  ` JSON_ARRAY_INSERT `



JSON_ARRAY_INSERT(
json_expr,
json_path_value_pair[, ...]
[, insert_each_element=>{ TRUE | FALSE }]
)

json_path_value_pair:
json_path, value


Produces a new JSON value that is created by inserting JSON data into a JSON
array.

Arguments:

* ` json_expr ` : JSON. For example:

JSON '["a", "b", "c"]'


* ` json_path_value_pair ` : A value and the  JSONPath  for that value. This includes:

* ` json_path ` : Insert ` value ` at this  JSONPath  in ` json_expr ` .

* ` value ` : A  JSON encoding-supported  value to insert.

* ` insert_each_element ` : An optional, mandatory named argument.

* If ` TRUE ` (default), and ` value ` is a SQL array, inserts each element individually.

* If ` FALSE, ` and ` value ` is a SQL array, inserts the array as one element.

Details:

* Path value pairs are evaluated left to right. The JSON produced by evaluating one pair becomes the JSON against which the next pair is evaluated.
* The operation is ignored if the path points to a JSON non-array value that is not a JSON null.
* If ` json_path ` points to a JSON null, the JSON null is replaced by a JSON array of the appropriate size and padded on the left with JSON nulls.
* If the path exists but has an incompatible type at any given path token, the path value pair operator is ignored.
* The function applies all path value pair append operations even if an individual path value pair operation is invalid. For invalid operations, the operation is ignored and the function continues to process the rest of the path value pairs.
* If the array index in ` json_path ` is larger than the size of the array, the function extends the length of the array to the index, fills in the array with JSON nulls, then adds ` value ` at the index.
* If any ` json_path ` is an invalid  JSONPath  , an error is produced.
* If ` json_expr ` is SQL ` NULL ` , the function returns SQL ` NULL ` .
* If ` insert_each_element ` is SQL ` NULL ` , the function returns ` json_expr ` .
* If ` json_path ` is SQL ` NULL ` , the ` json_path_value_pair ` operation is ignored.

**Return type**

` JSON `

**Examples**

In the following example, path ` $[1] ` is matched and inserts ` 1 ` .



SELECT JSON_ARRAY_INSERT(JSON '["a", ["b", "c"], "d"]', '$[1]', 1) AS json_data

/*-----------------------*
| json_data             |
+-----------------------+
| ["a",1,["b","c"],"d"] |
*-----------------------*/


In the following example, path ` $[1][0] ` is matched and inserts ` 1 ` .



SELECT JSON_ARRAY_INSERT(JSON '["a", ["b", "c"], "d"]', '$[1][0]', 1) AS json_data

/*-----------------------*
| json_data             |
+-----------------------+
| ["a",[1,"b","c"],"d"] |
*-----------------------*/


In the following example, ` insert_each_element ` defaults to ` TRUE ` , so `
[1, 2] ` is inserted as individual elements.



SELECT JSON_ARRAY_INSERT(JSON '["a", "b", "c"]', '$[1]', [1, 2]) AS json_data

/*-------------------*
| json_data         |
+-------------------+
| ["a",1,2,"b","c"] |
*-------------------*/


In the following example, ` insert_each_element ` is ` FALSE ` , so ` [1, 2] `
is inserted as one element.



SELECT JSON_ARRAY_INSERT(
JSON '["a", "b", "c"]',
'$[1]', [1, 2],
insert_each_element=>FALSE) AS json_data

/*---------------------*
| json_data           |
+---------------------+
| ["a",[1,2],"b","c"] |
*---------------------*/


In the following example, path ` $[7] ` is larger than the length of the
matched array, so the array is extended with JSON nulls and ` "e" ` is
inserted at the end of the array.



SELECT JSON_ARRAY_INSERT(JSON '["a", "b", "c", "d"]', '$[7]', "e") AS json_data

/*--------------------------------------*
| json_data                            |
+--------------------------------------+
| ["a","b","c","d",null,null,null,"e"] |
*--------------------------------------*/


In the following example, path ` $.a ` is an object, so the operation is
ignored.



SELECT JSON_ARRAY_INSERT(JSON '{"a": {}}', '$.a[0]', 2) AS json_data

/*-----------*
| json_data |
+-----------+
| {"a":{}}  |
*-----------*/


In the following example, path ` $ ` does not specify a valid array position,
so the operation is ignored.



SELECT JSON_ARRAY_INSERT(JSON '[1, 2]', '$', 3) AS json_data

/*-----------*
| json_data |
+-----------+
| [1,2]     |
*-----------*/


In the following example, a value is inserted into a JSON null.



SELECT JSON_ARRAY_INSERT(JSON '{"a": null}', '$.a[2]', 10) AS json_data

/*----------------------*
| json_data            |
+----------------------+
| {"a":[null,null,10]} |
*----------------------*/


In the following example, the operation is ignored because you can't insert
data into a JSON number.



SELECT JSON_ARRAY_INSERT(JSON '1', '$[0]', 'r1') AS json_data

/*-----------*
| json_data |
+-----------+
| 1         |
*-----------*/


###  ` JSON_EXTRACT `



JSON_EXTRACT(json_string_expr, json_path)



JSON_EXTRACT(json_expr, json_path)


**Description**

Extracts a JSON value and converts it to a SQL JSON-formatted ` STRING ` or `
JSON ` value. This function uses single quotes and brackets to escape invalid
JSONPath  characters in JSON keys. For example: ` ['a.b'] ` .

Arguments:

* ` json_string_expr ` : A JSON-formatted string. For example:

'{"class": {"students": [{"name": "Jane"}]}}'


Extracts a SQL ` NULL ` when a JSON-formatted string ` null ` is encountered.
For example:


SELECT JSON_EXTRACT("null", "$") -- Returns a SQL NULL


* ` json_expr ` : JSON. For example:

JSON '{"class": {"students": [{"name": "Jane"}]}}'


Extracts a JSON ` null ` when a JSON ` null ` is encountered.


SELECT JSON_EXTRACT(JSON 'null', "$") -- Returns a JSON 'null'


* ` json_path ` : The  JSONPath  . This identifies the data that you want to obtain from the input.

There are differences between the JSON-formatted string and JSON input types.
For details, see  Differences between the JSON and JSON-formatted STRING types
.

**Return type**

* ` json_string_expr ` : A JSON-formatted ` STRING `
* ` json_expr ` : ` JSON `

**Examples**

In the following example, JSON data is extracted and returned as JSON.



SELECT
JSON_EXTRACT(JSON '{"class": {"students": [{"id": 5}, {"id": 12}]}}', '$.class')
AS json_data;

/*-----------------------------------*
| json_data                         |
+-----------------------------------+
| {"students":[{"id":5},{"id":12}]} |
*-----------------------------------*/


In the following examples, JSON data is extracted and returned as JSON-
formatted strings.



SELECT JSON_EXTRACT(json_text, '$') AS json_text_string
FROM UNNEST([
'{"class": {"students": [{"name": "Jane"}]}}',
'{"class": {"students": []}}',
'{"class": {"students": [{"name": "John"}, {"name": "Jamie"}]}}'
]) AS json_text;

/*-----------------------------------------------------------*
| json_text_string                                          |
+-----------------------------------------------------------+
| {"class":{"students":[{"name":"Jane"}]}}                  |
| {"class":{"students":[]}}                                 |
| {"class":{"students":[{"name":"John"},{"name":"Jamie"}]}} |
*-----------------------------------------------------------*/



SELECT JSON_EXTRACT(json_text, '$.class.students[0]') AS first_student
FROM UNNEST([
'{"class": {"students": [{"name": "Jane"}]}}',
'{"class": {"students": []}}',
'{"class": {"students": [{"name": "John"}, {"name": "Jamie"}]}}'
]) AS json_text;

/*-----------------*
| first_student   |
+-----------------+
| {"name":"Jane"} |
| NULL            |
| {"name":"John"} |
*-----------------*/



SELECT JSON_EXTRACT(json_text, '$.class.students[1].name') AS second_student_name
FROM UNNEST([
'{"class": {"students": [{"name": "Jane"}]}}',
'{"class": {"students": []}}',
'{"class": {"students": [{"name": "John"}, {"name": null}]}}',
'{"class": {"students": [{"name": "John"}, {"name": "Jamie"}]}}'
]) AS json_text;

/*----------------*
| second_student |
+----------------+
| NULL           |
| NULL           |
| NULL           |
| "Jamie"        |
*----------------*/



SELECT JSON_EXTRACT(json_text, "$.class['students']") AS student_names
FROM UNNEST([
'{"class": {"students": [{"name": "Jane"}]}}',
'{"class": {"students": []}}',
'{"class": {"students": [{"name": "John"}, {"name": "Jamie"}]}}'
]) AS json_text;

/*------------------------------------*
| student_names                      |
+------------------------------------+
| [{"name":"Jane"}]                  |
| []                                 |
| [{"name":"John"},{"name":"Jamie"}] |
*------------------------------------*/



SELECT JSON_EXTRACT('{"a": null}', "$.a"); -- Returns a SQL NULL
SELECT JSON_EXTRACT('{"a": null}', "$.b"); -- Returns a SQL NULL



SELECT JSON_EXTRACT(JSON '{"a": null}', "$.a"); -- Returns a JSON 'null'
SELECT JSON_EXTRACT(JSON '{"a": null}', "$.b"); -- Returns a SQL NULL


###  ` JSON_EXTRACT_ARRAY `



JSON_EXTRACT_ARRAY(json_string_expr[, json_path])



JSON_EXTRACT_ARRAY(json_expr[, json_path])


**Description**

Extracts a JSON array and converts it to a SQL ` ARRAY<JSON-formatted STRING>
` or ` ARRAY<JSON> ` value. This function uses single quotes and brackets to
escape invalid  JSONPath  characters in JSON keys. For example: ` ['a.b'] ` .

Arguments:

* ` json_string_expr ` : A JSON-formatted string. For example:

'["a", "b", {"key": "c"}]'


* ` json_expr ` : JSON. For example:

JSON '["a", "b", {"key": "c"}]'


* ` json_path ` : The  JSONPath  . This identifies the data that you want to obtain from the input. If this optional parameter is not provided, then the JSONPath ` $ ` symbol is applied, which means that all of the data is analyzed.

There are differences between the JSON-formatted string and JSON input types.
For details, see  Differences between the JSON and JSON-formatted STRING types
.

**Return type**

* ` json_string_expr ` : ` ARRAY<JSON-formatted STRING> `
* ` json_expr ` : ` ARRAY<JSON> `

**Examples**

This extracts items in JSON to an array of ` JSON ` values:



SELECT JSON_EXTRACT_ARRAY(
JSON '{"fruits":["apples","oranges","grapes"]}','$.fruits'
) AS json_array;

/*---------------------------------*
| json_array                      |
+---------------------------------+
| ["apples", "oranges", "grapes"] |
*---------------------------------*/


This extracts the items in a JSON-formatted string to a string array:



SELECT JSON_EXTRACT_ARRAY('[1,2,3]') AS string_array;

/*--------------*
| string_array |
+--------------+
| [1, 2, 3]    |
*--------------*/


This extracts a string array and converts it to an integer array:



SELECT ARRAY(
SELECT CAST(integer_element AS INT64)
FROM UNNEST(
JSON_EXTRACT_ARRAY('[1,2,3]','$')
) AS integer_element
) AS integer_array;

/*---------------*
| integer_array |
+---------------+
| [1, 2, 3]     |
*---------------*/


This extracts string values in a JSON-formatted string to an array:



-- Doesn't strip the double quotes
SELECT JSON_EXTRACT_ARRAY('["apples", "oranges", "grapes"]', '$') AS string_array;

/*---------------------------------*
| string_array                    |
+---------------------------------+
| ["apples", "oranges", "grapes"] |
*---------------------------------*/

-- Strips the double quotes
SELECT ARRAY(
SELECT JSON_EXTRACT_SCALAR(string_element, '$')
FROM UNNEST(JSON_EXTRACT_ARRAY('["apples","oranges","grapes"]','$')) AS string_element
) AS string_array;

/*---------------------------*
| string_array              |
+---------------------------+
| [apples, oranges, grapes] |
*---------------------------*/


This extracts only the items in the ` fruit ` property to an array:



SELECT JSON_EXTRACT_ARRAY(
'{"fruit": [{"apples": 5, "oranges": 10}, {"apples": 2, "oranges": 4}], "vegetables": [{"lettuce": 7, "kale": 8}]}',
'$.fruit'
) AS string_array;

/*-------------------------------------------------------*
| string_array                                          |
+-------------------------------------------------------+
| [{"apples":5,"oranges":10}, {"apples":2,"oranges":4}] |
*-------------------------------------------------------*/


These are equivalent:



SELECT JSON_EXTRACT_ARRAY('{"fruits": ["apples", "oranges", "grapes"]}', '$[fruits]') AS string_array;

SELECT JSON_EXTRACT_ARRAY('{"fruits": ["apples", "oranges", "grapes"]}', '$.fruits') AS string_array;

-- The queries above produce the following result:
/*---------------------------------*
| string_array                    |
+---------------------------------+
| ["apples", "oranges", "grapes"] |
*---------------------------------*/


In cases where a JSON key uses invalid JSONPath characters, you can escape
those characters using single quotes and brackets, ` [' '] ` . For example:



SELECT JSON_EXTRACT_ARRAY('{"a.b": {"c": ["world"]}}', "$['a.b'].c") AS hello;

/*-----------*
| hello     |
+-----------+
| ["world"] |
*-----------*/


The following examples explore how invalid requests and empty arrays are
handled:

* If a JSONPath is invalid, an error is thrown.
* If a JSON-formatted string is invalid, the output is NULL.
* It is okay to have empty arrays in the JSON-formatted string.



-- An error is thrown if you provide an invalid JSONPath.
SELECT JSON_EXTRACT_ARRAY('["foo", "bar", "baz"]', 'INVALID_JSONPath') AS result;

-- If the JSONPath does not refer to an array, then NULL is returned.
SELECT JSON_EXTRACT_ARRAY('{"a": "foo"}', '$.a') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- If a key that does not exist is specified, then the result is NULL.
SELECT JSON_EXTRACT_ARRAY('{"a": "foo"}', '$.b') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- Empty arrays in JSON-formatted strings are supported.
SELECT JSON_EXTRACT_ARRAY('{"a": "foo", "b": []}', '$.b') AS result;

/*--------*
| result |
+--------+
| []     |
*--------*/


###  ` JSON_EXTRACT_SCALAR `



JSON_EXTRACT_SCALAR(json_string_expr[, json_path])



JSON_EXTRACT_SCALAR(json_expr[, json_path])


**Description**

Extracts a JSON scalar value and converts it to a SQL ` STRING ` value. In
addition, this function:

* Removes the outermost quotes and unescapes the return values.
* Returns a SQL ` NULL ` if a non-scalar value is selected.
* Uses single quotes and brackets to escape invalid  JSONPath  characters in JSON keys. For example: ` ['a.b'] ` .

Arguments:

* ` json_string_expr ` : A JSON-formatted string. For example:

'{"name": "Jane", "age": "6"}'


* ` json_expr ` : JSON. For example:

JSON '{"name": "Jane", "age": "6"}'


* ` json_path ` : The  JSONPath  . This identifies the data that you want to obtain from the input. If this optional parameter is not provided, then the JSONPath ` $ ` symbol is applied, which means that all of the data is analyzed.

If ` json_path ` returns a JSON ` null ` or a non-scalar value (in other
words, if ` json_path ` refers to an object or an array), then a SQL ` NULL `
is returned.

There are differences between the JSON-formatted string and JSON input types.
For details, see  Differences between the JSON and JSON-formatted STRING types
.

**Return type**

` STRING `

**Examples**

In the following example, ` age ` is extracted.



SELECT JSON_EXTRACT_SCALAR(JSON '{"name": "Jakob", "age": "6" }', '$.age') AS scalar_age;

/*------------*
| scalar_age |
+------------+
| 6          |
*------------*/


The following example compares how results are returned for the ` JSON_EXTRACT
` and ` JSON_EXTRACT_SCALAR ` functions.



SELECT JSON_EXTRACT('{"name": "Jakob", "age": "6" }', '$.name') AS json_name,
JSON_EXTRACT_SCALAR('{"name": "Jakob", "age": "6" }', '$.name') AS scalar_name,
JSON_EXTRACT('{"name": "Jakob", "age": "6" }', '$.age') AS json_age,
JSON_EXTRACT_SCALAR('{"name": "Jakob", "age": "6" }', '$.age') AS scalar_age;

/*-----------+-------------+----------+------------*
| json_name | scalar_name | json_age | scalar_age |
+-----------+-------------+----------+------------+
| "Jakob"   | Jakob       | "6"      | 6          |
*-----------+-------------+----------+------------*/



SELECT JSON_EXTRACT('{"fruits": ["apple", "banana"]}', '$.fruits') AS json_extract,
JSON_EXTRACT_SCALAR('{"fruits": ["apple", "banana"]}', '$.fruits') AS json_extract_scalar;

/*--------------------+---------------------*
| json_extract       | json_extract_scalar |
+--------------------+---------------------+
| ["apple","banana"] | NULL                |
*--------------------+---------------------*/


In cases where a JSON key uses invalid JSONPath characters, you can escape
those characters using single quotes and brackets, ` [' '] ` . For example:



SELECT JSON_EXTRACT_SCALAR('{"a.b": {"c": "world"}}', "$['a.b'].c") AS hello;

/*-------*
| hello |
+-------+
| world |
*-------*/


###  ` JSON_EXTRACT_STRING_ARRAY `



JSON_EXTRACT_STRING_ARRAY(json_string_expr[, json_path])



JSON_EXTRACT_STRING_ARRAY(json_expr[, json_path])


**Description**

Extracts a JSON array of scalar values and converts it to a SQL `
ARRAY<STRING> ` value. In addition, this function:

* Removes the outermost quotes and unescapes the values.
* Returns a SQL ` NULL ` if the selected value is not an array or not an array containing only scalar values.
* Uses single quotes and brackets to escape invalid  JSONPath  characters in JSON keys. For example: ` ['a.b'] ` .

Arguments:

* ` json_string_expr ` : A JSON-formatted string. For example:

'["apples", "oranges", "grapes"]'


* ` json_expr ` : JSON. For example:

JSON '["apples", "oranges", "grapes"]'


* ` json_path ` : The  JSONPath  . This identifies the data that you want to obtain from the input. If this optional parameter is not provided, then the JSONPath ` $ ` symbol is applied, which means that all of the data is analyzed.

There are differences between the JSON-formatted string and JSON input types.
For details, see  Differences between the JSON and JSON-formatted STRING types
.

Caveats:

* A JSON ` null ` in the input array produces a SQL ` NULL ` as the output for that JSON ` null ` . If the output contains a ` NULL ` array element, an error is produced because the final output cannot be an array with ` NULL ` values.
* If a JSONPath matches an array that contains scalar objects and a JSON ` null ` , then the output of the function must be transformed because the final output cannot be an array with ` NULL ` values.

**Return type**

` ARRAY<STRING> `

**Examples**

This extracts items in JSON to a string array:



SELECT JSON_EXTRACT_STRING_ARRAY(
JSON '{"fruits": ["apples", "oranges", "grapes"]}', '$.fruits'
) AS string_array;

/*---------------------------*
| string_array              |
+---------------------------+
| [apples, oranges, grapes] |
*---------------------------*/


The following example compares how results are returned for the `
JSON_EXTRACT_ARRAY ` and ` JSON_EXTRACT_STRING_ARRAY ` functions.



SELECT JSON_EXTRACT_ARRAY('["apples", "oranges"]') AS json_array,
JSON_EXTRACT_STRING_ARRAY('["apples", "oranges"]') AS string_array;

/*-----------------------+-------------------*
| json_array            | string_array      |
+-----------------------+-------------------+
| ["apples", "oranges"] | [apples, oranges] |
*-----------------------+-------------------*/


This extracts the items in a JSON-formatted string to a string array:



-- Strips the double quotes
SELECT JSON_EXTRACT_STRING_ARRAY('["foo", "bar", "baz"]', '$') AS string_array;

/*-----------------*
| string_array    |
+-----------------+
| [foo, bar, baz] |
*-----------------*/


This extracts a string array and converts it to an integer array:



SELECT ARRAY(
SELECT CAST(integer_element AS INT64)
FROM UNNEST(
JSON_EXTRACT_STRING_ARRAY('[1, 2, 3]', '$')
) AS integer_element
) AS integer_array;

/*---------------*
| integer_array |
+---------------+
| [1, 2, 3]     |
*---------------*/


These are equivalent:



SELECT JSON_EXTRACT_STRING_ARRAY('{"fruits": ["apples", "oranges", "grapes"]}', '$[fruits]') AS string_array;

SELECT JSON_EXTRACT_STRING_ARRAY('{"fruits": ["apples", "oranges", "grapes"]}', '$.fruits') AS string_array;

-- The queries above produce the following result:
/*---------------------------*
| string_array              |
+---------------------------+
| [apples, oranges, grapes] |
*---------------------------*/


In cases where a JSON key uses invalid JSONPath characters, you can escape
those characters using single quotes and brackets: ` [' '] ` . For example:



SELECT JSON_EXTRACT_STRING_ARRAY('{"a.b": {"c": ["world"]}}', "$['a.b'].c") AS hello;

/*---------*
| hello   |
+---------+
| [world] |
*---------*/


The following examples explore how invalid requests and empty arrays are
handled:



-- An error is thrown if you provide an invalid JSONPath.
SELECT JSON_EXTRACT_STRING_ARRAY('["foo", "bar", "baz"]', 'INVALID_JSONPath') AS result;

-- If the JSON formatted string is invalid, then NULL is returned.
SELECT JSON_EXTRACT_STRING_ARRAY('}}', '$') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- If the JSON document is NULL, then NULL is returned.
SELECT JSON_EXTRACT_STRING_ARRAY(NULL, '$') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- If a JSONPath does not match anything, then the output is NULL.
SELECT JSON_EXTRACT_STRING_ARRAY('{"a": ["foo", "bar", "baz"]}', '$.b') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- If a JSONPath matches an object that is not an array, then the output is NULL.
SELECT JSON_EXTRACT_STRING_ARRAY('{"a": "foo"}', '$') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- If a JSONPath matches an array of non-scalar objects, then the output is NULL.
SELECT JSON_EXTRACT_STRING_ARRAY('{"a": [{"b": "foo", "c": 1}, {"b": "bar", "c":2}], "d": "baz"}', '$.a') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- If a JSONPath matches an array of mixed scalar and non-scalar objects, then the output is NULL.
SELECT JSON_EXTRACT_STRING_ARRAY('{"a": [10, {"b": 20}]', '$.a') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- If a JSONPath matches an empty JSON array, then the output is an empty array instead of NULL.
SELECT JSON_EXTRACT_STRING_ARRAY('{"a": "foo", "b": []}', '$.b') AS result;

/*--------*
| result |
+--------+
| []     |
*--------*/

-- The following query produces and error because the final output cannot be an
-- array with NULLs.
SELECT JSON_EXTRACT_STRING_ARRAY('["world", 1, null]') AS result;



###  ` JSON_OBJECT `

* Signature 1  : ` JSON_OBJECT([json_key, json_value][, ...]) `
* Signature 2  : ` JSON_OBJECT(json_key_array, json_value_array) `

####  Signature 1



JSON_OBJECT([json_key, json_value][, ...])


**Description**

Creates a JSON object, using key-value pairs.

Arguments:

* ` json_key ` : A ` STRING ` value that represents a key.
* ` json_value ` : A  JSON encoding-supported  value.

Details:

* If two keys are passed in with the same name, only the first key-value pair is preserved.
* The order of key-value pairs is not preserved.
* If ` json_key ` is ` NULL ` , an error is produced.

**Return type**

` JSON `

**Examples**

You can create an empty JSON object by passing in no JSON keys and values. For
example:



SELECT JSON_OBJECT() AS json_data

/*-----------*
| json_data |
+-----------+
| {}        |
*-----------*/


You can create a JSON object by passing in key-value pairs. For example:



SELECT JSON_OBJECT('foo', 10, 'bar', TRUE) AS json_data

/*-----------------------*
| json_data             |
+-----------------------+
| {"bar":true,"foo":10} |
*-----------------------*/



SELECT JSON_OBJECT('foo', 10, 'bar', ['a', 'b']) AS json_data

/*----------------------------*
| json_data                  |
+----------------------------+
| {"bar":["a","b"],"foo":10} |
*----------------------------*/



SELECT JSON_OBJECT('a', NULL, 'b', JSON 'null') AS json_data

/*---------------------*
| json_data           |
+---------------------+
| {"a":null,"b":null} |
*---------------------*/



SELECT JSON_OBJECT('a', 10, 'a', 'foo') AS json_data

/*-----------*
| json_data |
+-----------+
| {"a":10}  |
*-----------*/



WITH Items AS (SELECT 'hello' AS key, 'world' AS value)
SELECT JSON_OBJECT(key, value) AS json_data FROM Items

/*-------------------*
| json_data         |
+-------------------+
| {"hello":"world"} |
*-------------------*/


An error is produced if a SQL ` NULL ` is passed in for a JSON key.



-- Error: A key cannot be NULL.
SELECT JSON_OBJECT(NULL, 1) AS json_data


An error is produced if the number of JSON keys and JSON values don't match:



-- Error: No matching signature for function JSON_OBJECT for argument types:
-- STRING, INT64, STRING
SELECT JSON_OBJECT('a', 1, 'b') AS json_data


####  Signature 2



JSON_OBJECT(json_key_array, json_value_array)


Creates a JSON object, using an array of keys and values.

Arguments:

* ` json_key_array ` : An array of zero or more ` STRING ` keys.
* ` json_value_array ` : An array of zero or more  JSON encoding-supported  values.

Details:

* If two keys are passed in with the same name, only the first key-value pair is preserved.
* The order of key-value pairs is not preserved.
* The number of keys must match the number of values, otherwise an error is produced.
* If any argument is ` NULL ` , an error is produced.
* If a key in ` json_key_array ` is ` NULL ` , an error is produced.

**Return type**

` JSON `

**Examples**

You can create an empty JSON object by passing in an empty array of keys and
values. For example:



SELECT JSON_OBJECT(CAST([] AS ARRAY<STRING>), []) AS json_data

/*-----------*
| json_data |
+-----------+
| {}        |
*-----------*/


You can create a JSON object by passing in an array of keys and an array of
values. For example:



SELECT JSON_OBJECT(['a', 'b'], [10, NULL]) AS json_data

/*-------------------*
| json_data         |
+-------------------+
| {"a":10,"b":null} |
*-------------------*/



SELECT JSON_OBJECT(['a', 'b'], [JSON '10', JSON '"foo"']) AS json_data

/*--------------------*
| json_data          |
+--------------------+
| {"a":10,"b":"foo"} |
*--------------------*/



SELECT
JSON_OBJECT(
['a', 'b'],
[STRUCT(10 AS id, 'Red' AS color), STRUCT(20 AS id, 'Blue' AS color)])
AS json_data

/*------------------------------------------------------------*
| json_data                                                  |
+------------------------------------------------------------+
| {"a":{"color":"Red","id":10},"b":{"color":"Blue","id":20}} |
*------------------------------------------------------------*/



SELECT
JSON_OBJECT(
['a', 'b'],
[TO_JSON(10), TO_JSON(['foo', 'bar'])])
AS json_data

/*----------------------------*
| json_data                  |
+----------------------------+
| {"a":10,"b":["foo","bar"]} |
*----------------------------*/


The following query groups by ` id ` and then creates an array of keys and
values from the rows with the same ` id ` :



WITH
Fruits AS (
SELECT 0 AS id, 'color' AS json_key, 'red' AS json_value UNION ALL
SELECT 0, 'fruit', 'apple' UNION ALL
SELECT 1, 'fruit', 'banana' UNION ALL
SELECT 1, 'ripe', 'true'
)
SELECT JSON_OBJECT(ARRAY_AGG(json_key), ARRAY_AGG(json_value)) AS json_data
FROM Fruits
GROUP BY id

/*----------------------------------*
| json_data                        |
+----------------------------------+
| {"color":"red","fruit":"apple"}  |
| {"fruit":"banana","ripe":"true"} |
*----------------------------------*/


An error is produced if the size of the JSON keys and values arrays don't
match:



-- Error: The number of keys and values must match.
SELECT JSON_OBJECT(['a', 'b'], [10]) AS json_data


An error is produced if the array of JSON keys or JSON values is a SQL ` NULL
` .



-- Error: The keys array cannot be NULL.
SELECT JSON_OBJECT(CAST(NULL AS ARRAY<STRING>), [10, 20]) AS json_data



-- Error: The values array cannot be NULL.
SELECT JSON_OBJECT(['a', 'b'], CAST(NULL AS ARRAY<INT64>)) AS json_data


###  ` JSON_QUERY `



JSON_QUERY(json_string_expr, json_path)



JSON_QUERY(json_expr, json_path)


**Description**

Extracts a JSON value and converts it to a SQL JSON-formatted ` STRING ` or `
JSON ` value. This function uses double quotes to escape invalid  JSONPath
characters in JSON keys. For example: ` "a.b" ` .

Arguments:

* ` json_string_expr ` : A JSON-formatted string. For example:

'{"class": {"students": [{"name": "Jane"}]}}'


Extracts a SQL ` NULL ` when a JSON-formatted string ` null ` is encountered.
For example:


SELECT JSON_QUERY("null", "$") -- Returns a SQL NULL


* ` json_expr ` : JSON. For example:

JSON '{"class": {"students": [{"name": "Jane"}]}}'


Extracts a JSON ` null ` when a JSON ` null ` is encountered.


SELECT JSON_QUERY(JSON 'null', "$") -- Returns a JSON 'null'


* ` json_path ` : The  JSONPath  . This identifies the data that you want to obtain from the input.

There are differences between the JSON-formatted string and JSON input types.
For details, see  Differences between the JSON and JSON-formatted STRING types
.

**Return type**

* ` json_string_expr ` : A JSON-formatted ` STRING `
* ` json_expr ` : ` JSON `

**Examples**

In the following example, JSON data is extracted and returned as JSON.



SELECT
JSON_QUERY(JSON '{"class": {"students": [{"id": 5}, {"id": 12}]}}', '$.class')
AS json_data;

/*-----------------------------------*
| json_data                         |
+-----------------------------------+
| {"students":[{"id":5},{"id":12}]} |
*-----------------------------------*/


In the following examples, JSON data is extracted and returned as JSON-
formatted strings.



SELECT JSON_QUERY(json_text, '$') AS json_text_string
FROM UNNEST([
'{"class": {"students": [{"name": "Jane"}]}}',
'{"class": {"students": []}}',
'{"class": {"students": [{"name": "John"}, {"name": "Jamie"}]}}'
]) AS json_text;

/*-----------------------------------------------------------*
| json_text_string                                          |
+-----------------------------------------------------------+
| {"class":{"students":[{"name":"Jane"}]}}                  |
| {"class":{"students":[]}}                                 |
| {"class":{"students":[{"name":"John"},{"name":"Jamie"}]}} |
*-----------------------------------------------------------*/



SELECT JSON_QUERY(json_text, '$.class.students[0]') AS first_student
FROM UNNEST([
'{"class": {"students": [{"name": "Jane"}]}}',
'{"class": {"students": []}}',
'{"class": {"students": [{"name": "John"}, {"name": "Jamie"}]}}'
]) AS json_text;

/*-----------------*
| first_student   |
+-----------------+
| {"name":"Jane"} |
| NULL            |
| {"name":"John"} |
*-----------------*/



SELECT JSON_QUERY(json_text, '$.class.students[1].name') AS second_student_name
FROM UNNEST([
'{"class": {"students": [{"name": "Jane"}]}}',
'{"class": {"students": []}}',
'{"class": {"students": [{"name": "John"}, {"name": null}]}}',
'{"class": {"students": [{"name": "John"}, {"name": "Jamie"}]}}'
]) AS json_text;

/*----------------*
| second_student |
+----------------+
| NULL           |
| NULL           |
| NULL           |
| "Jamie"        |
*----------------*/



SELECT JSON_QUERY(json_text, '$.class."students"') AS student_names
FROM UNNEST([
'{"class": {"students": [{"name": "Jane"}]}}',
'{"class": {"students": []}}',
'{"class": {"students": [{"name": "John"}, {"name": "Jamie"}]}}'
]) AS json_text;

/*------------------------------------*
| student_names                      |
+------------------------------------+
| [{"name":"Jane"}]                  |
| []                                 |
| [{"name":"John"},{"name":"Jamie"}] |
*------------------------------------*/



SELECT JSON_QUERY('{"a": null}', "$.a"); -- Returns a SQL NULL
SELECT JSON_QUERY('{"a": null}', "$.b"); -- Returns a SQL NULL



SELECT JSON_QUERY(JSON '{"a": null}', "$.a"); -- Returns a JSON 'null'
SELECT JSON_QUERY(JSON '{"a": null}', "$.b"); -- Returns a SQL NULL


###  ` JSON_QUERY_ARRAY `



JSON_QUERY_ARRAY(json_string_expr[, json_path])



JSON_QUERY_ARRAY(json_expr[, json_path])


**Description**

Extracts a JSON array and converts it to a SQL ` ARRAY<JSON-formatted STRING>
` or ` ARRAY<JSON> ` value. In addition, this function uses double quotes to
escape invalid  JSONPath  characters in JSON keys. For example: ` "a.b" ` .

Arguments:

* ` json_string_expr ` : A JSON-formatted string. For example:

'["a", "b", {"key": "c"}]'


* ` json_expr ` : JSON. For example:

JSON '["a", "b", {"key": "c"}]'


* ` json_path ` : The  JSONPath  . This identifies the data that you want to obtain from the input. If this optional parameter is not provided, then the JSONPath ` $ ` symbol is applied, which means that all of the data is analyzed.

There are differences between the JSON-formatted string and JSON input types.
For details, see  Differences between the JSON and JSON-formatted STRING types
.

**Return type**

* ` json_string_expr ` : ` ARRAY<JSON-formatted STRING> `
* ` json_expr ` : ` ARRAY<JSON> `

**Examples**

This extracts items in JSON to an array of ` JSON ` values:



SELECT JSON_QUERY_ARRAY(
JSON '{"fruits": ["apples", "oranges", "grapes"]}', '$.fruits'
) AS json_array;

/*---------------------------------*
| json_array                      |
+---------------------------------+
| ["apples", "oranges", "grapes"] |
*---------------------------------*/


This extracts the items in a JSON-formatted string to a string array:



SELECT JSON_QUERY_ARRAY('[1, 2, 3]') AS string_array;

/*--------------*
| string_array |
+--------------+
| [1, 2, 3]    |
*--------------*/


This extracts a string array and converts it to an integer array:



SELECT ARRAY(
SELECT CAST(integer_element AS INT64)
FROM UNNEST(
JSON_QUERY_ARRAY('[1, 2, 3]','$')
) AS integer_element
) AS integer_array;

/*---------------*
| integer_array |
+---------------+
| [1, 2, 3]     |
*---------------*/


This extracts string values in a JSON-formatted string to an array:



-- Doesn't strip the double quotes
SELECT JSON_QUERY_ARRAY('["apples", "oranges", "grapes"]', '$') AS string_array;

/*---------------------------------*
| string_array                    |
+---------------------------------+
| ["apples", "oranges", "grapes"] |
*---------------------------------*/

-- Strips the double quotes
SELECT ARRAY(
SELECT JSON_VALUE(string_element, '$')
FROM UNNEST(JSON_QUERY_ARRAY('["apples", "oranges", "grapes"]', '$')) AS string_element
) AS string_array;

/*---------------------------*
| string_array              |
+---------------------------+
| [apples, oranges, grapes] |
*---------------------------*/


This extracts only the items in the ` fruit ` property to an array:



SELECT JSON_QUERY_ARRAY(
'{"fruit": [{"apples": 5, "oranges": 10}, {"apples": 2, "oranges": 4}], "vegetables": [{"lettuce": 7, "kale": 8}]}',
'$.fruit'
) AS string_array;

/*-------------------------------------------------------*
| string_array                                          |
+-------------------------------------------------------+
| [{"apples":5,"oranges":10}, {"apples":2,"oranges":4}] |
*-------------------------------------------------------*/


These are equivalent:



SELECT JSON_QUERY_ARRAY('{"fruits": ["apples", "oranges", "grapes"]}', '$.fruits') AS string_array;

SELECT JSON_QUERY_ARRAY('{"fruits": ["apples", "oranges", "grapes"]}', '$."fruits"') AS string_array;

-- The queries above produce the following result:
/*---------------------------------*
| string_array                    |
+---------------------------------+
| ["apples", "oranges", "grapes"] |
*---------------------------------*/


In cases where a JSON key uses invalid JSONPath characters, you can escape
those characters using double quotes: ` " " ` . For example:



SELECT JSON_QUERY_ARRAY('{"a.b": {"c": ["world"]}}', '$."a.b".c') AS hello;

/*-----------*
| hello     |
+-----------+
| ["world"] |
*-----------*/


The following examples show how invalid requests and empty arrays are handled:



-- An error is returned if you provide an invalid JSONPath.
SELECT JSON_QUERY_ARRAY('["foo", "bar", "baz"]', 'INVALID_JSONPath') AS result;

-- If the JSONPath does not refer to an array, then NULL is returned.
SELECT JSON_QUERY_ARRAY('{"a": "foo"}', '$.a') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- If a key that does not exist is specified, then the result is NULL.
SELECT JSON_QUERY_ARRAY('{"a": "foo"}', '$.b') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- Empty arrays in JSON-formatted strings are supported.
SELECT JSON_QUERY_ARRAY('{"a": "foo", "b": []}', '$.b') AS result;

/*--------*
| result |
+--------+
| []     |
*--------*/


###  ` JSON_REMOVE `



JSON_REMOVE(json_expr, json_path[, ...])


Produces a new SQL ` JSON ` value with the specified JSON data removed.

Arguments:

* ` json_expr ` : JSON. For example:

JSON '{"class": {"students": [{"name": "Jane"}]}}'


* ` json_path ` : Remove data at this  JSONPath  in ` json_expr ` .

Details:

* Paths are evaluated left to right. The JSON produced by evaluating the first path is the JSON for the next path.
* The operation ignores non-existent paths and continue processing the rest of the paths.
* For each path, the entire matched JSON subtree is deleted.
* If the path matches a JSON object key, this function deletes the key-value pair.
* If the path matches an array element, this function deletes the specific element from the matched array.
* If removing the path results in an empty JSON object or empty JSON array, the empty structure is preserved.
* If ` json_path ` is ` $ ` or an invalid  JSONPath  , an error is produced.
* If ` json_path ` is SQL ` NULL ` , the path operation is ignored.

**Return type**

` JSON `

**Examples**

In the following example, the path ` $[1] ` is matched and removes ` ["b",
"c"] ` .



SELECT JSON_REMOVE(JSON '["a", ["b", "c"], "d"]', '$[1]') AS json_data

/*-----------*
| json_data |
+-----------+
| ["a","d"] |
*-----------*/


You can use the field access operator to pass JSON data into this function.
For example:



WITH T AS (SELECT JSON '{"a": {"b": 10, "c": 20}}' AS data)
SELECT JSON_REMOVE(data.a, '$.b') AS json_data FROM T

/*-----------*
| json_data |
+-----------+
| {"c":20}  |
*-----------*/


In the following example, the first path ` $[1] ` is matched and removes `
["b", "c"] ` . Then, the second path ` $[1] ` is matched and removes ` "d" ` .



SELECT JSON_REMOVE(JSON '["a", ["b", "c"], "d"]', '$[1]', '$[1]') AS json_data

/*-----------*
| json_data |
+-----------+
| ["a"]     |
*-----------*/


The structure of an empty array is preserved when all elements are deleted
from it. For example:



SELECT JSON_REMOVE(JSON '["a", ["b", "c"], "d"]', '$[1]', '$[1]', '$[0]') AS json_data

/*-----------*
| json_data |
+-----------+
| []        |
*-----------*/


In the following example, the path ` $.a.b.c ` is matched and removes the `
"c":"d" ` key-value pair from the JSON object.



SELECT JSON_REMOVE(JSON '{"a": {"b": {"c": "d"}}}', '$.a.b.c') AS json_data

/*----------------*
| json_data      |
+----------------+
| {"a":{"b":{}}} |
*----------------*/


In the following example, the path ` $.a.b ` is matched and removes the ` "b":
{"c":"d"} ` key-value pair from the JSON object.



SELECT JSON_REMOVE(JSON '{"a": {"b": {"c": "d"}}}', '$.a.b') AS json_data

/*-----------*
| json_data |
+-----------+
| {"a":{}}  |
*-----------*/


In the following example, the path ` $.b ` is not valid, so the operation
makes no changes.



SELECT JSON_REMOVE(JSON '{"a": 1}', '$.b') AS json_data

/*-----------*
| json_data |
+-----------+
| {"a":1}   |
*-----------*/


In the following example, path ` $.a.b ` and ` $.b ` don't exist, so those
operations are ignored, but the others are processed.



SELECT JSON_REMOVE(JSON '{"a": [1, 2, 3]}', '$.a[0]', '$.a.b', '$.b', '$.a[0]') AS json_data

/*-----------*
| json_data |
+-----------+
| {"a":[3]} |
*-----------*/


If you pass in ` $ ` as the path, an error is produced. For example:



-- Error: The JSONPath cannot be '$'
SELECT JSON_REMOVE(JSON '{}', '$') AS json_data


In the following example, the operation is ignored because you can't remove
data from a JSON null.



SELECT JSON_REMOVE(JSON 'null', '$.a.b') AS json_data

/*-----------*
| json_data |
+-----------+
| null      |
*-----------*/


###  ` JSON_SET `



JSON_SET(
json_expr,
json_path_value_pair[, ...]
[, create_if_missing=> { TRUE | FALSE }]
)

json_path_value_pair:
json_path, value


Produces a new SQL ` JSON ` value with the specified JSON data inserted or
replaced.

Arguments:

* ` json_expr ` : JSON. For example:

JSON '{"class": {"students": [{"name": "Jane"}]}}'


* ` json_path_value_pair ` : A value and the  JSONPath  for that value. This includes:

* ` json_path ` : Insert or replace ` value ` at this  JSONPath  in ` json_expr ` .

* ` value ` : A  JSON encoding-supported  value to insert.

* ` create_if_missing ` : An optional, mandatory named argument.

* If TRUE (default), replaces or inserts data if the path does not exist.

* If FALSE, only _existing_ JSONPath values are replaced. If the path doesn't exist, the set operation is ignored.

Details:

* Path value pairs are evaluated left to right. The JSON produced by evaluating one pair becomes the JSON against which the next pair is evaluated.
* If a matched path has an existing value, it overwrites the existing data with ` value ` .
* If ` create_if_missing ` is ` TRUE ` :

* If a path doesn't exist, the remainder of the path is recursively created.
* If the matched path prefix points to a JSON null, the remainder of the path is recursively created, and ` value ` is inserted.
* If a path token points to a JSON array and the specified index is _larger_ than the size of the array, pads the JSON array with JSON nulls, recursively creates the remainder of the path at the specified index, and inserts the path value pair.
* This function applies all path value pair set operations even if an individual path value pair operation is invalid. For invalid operations, the operation is ignored and the function continues to process the rest of the path value pairs.

* If the path exists but has an incompatible type at any given path token, no update happens for that specific path value pair.

* If any ` json_path ` is an invalid  JSONPath  , an error is produced.

* If ` json_expr ` is SQL ` NULL ` , the function returns SQL ` NULL ` .

* If ` json_path ` is SQL ` NULL ` , the ` json_path_value_pair ` operation is ignored.

* If ` create_if_missing ` is SQL ` NULL ` , the set operation is ignored.

**Return type**

` JSON `

**Examples**

In the following example, the path ` $ ` matches the entire ` JSON ` value and
replaces it with ` {"b": 2, "c": 3} ` .



SELECT JSON_SET(JSON '{"a": 1}', '$', JSON '{"b": 2, "c": 3}') AS json_data

/*---------------*
| json_data     |
+---------------+
| {"b":2,"c":3} |
*---------------*/


In the following example, ` create_if_missing ` is ` FALSE ` and the path `
$.b ` doesn't exist, so the set operation is ignored.



SELECT JSON_SET(
JSON '{"a": 1}',
"$.b", 999,
create_if_missing => false) AS json_data

/*------------*
| json_data  |
+------------+
| '{"a": 1}' |
*------------*/


In the following example, ` create_if_missing ` is ` TRUE ` and the path ` $.a
` exists, so the value is replaced.



SELECT JSON_SET(
JSON '{"a": 1}',
"$.a", 999,
create_if_missing => false) AS json_data

/*--------------*
| json_data    |
+--------------+
| '{"a": 999}' |
*--------------*/


In the following example, the path ` $.a ` is matched, but ` $.a.b ` does not
exist, so the new path and the value are inserted.



SELECT JSON_SET(JSON '{"a": {}}', '$.a.b', 100) AS json_data

/*-----------------*
| json_data       |
+-----------------+
| {"a":{"b":100}} |
*-----------------*/


In the following example, the path prefix ` $ ` points to a JSON null, so the
remainder of the path is created for the value ` 100 ` .



SELECT JSON_SET(JSON 'null', '$.a.b', 100) AS json_data

/*-----------------*
| json_data       |
+-----------------+
| {"a":{"b":100}} |
*-----------------*/


In the following example, the path ` $.a.c ` implies that the value at ` $.a `
is a JSON object but it's not. This part of the operation is ignored, but the
other parts of the operation are completed successfully.



SELECT JSON_SET(
JSON '{"a": 1}',
'$.b', 2,
'$.a.c', 100,
'$.d', 3) AS json_data

/*---------------------*
| json_data           |
+---------------------+
| {"a":1,"b":2,"d":3} |
*---------------------*/


In the following example, the path ` $.a[2] ` implies that the value for ` $.a
` is an array, but it's not, so the operation is ignored for that value.



SELECT JSON_SET(
JSON '{"a": 1}',
'$.a[2]', 100,
'$.b', 2) AS json_data

/*---------------*
| json_data     |
+---------------+
| {"a":1,"b":2} |
*---------------*/


In the following example, the path ` $[1] ` is matched and replaces the array
element value with ` foo ` .



SELECT JSON_SET(JSON '["a", ["b", "c"], "d"]', '$[1]', "foo") AS json_data

/*-----------------*
| json_data       |
+-----------------+
| ["a","foo","d"] |
*-----------------*/


In the following example, the path ` $[1][0] ` is matched and replaces the
array element value with ` foo ` .



SELECT JSON_SET(JSON '["a", ["b", "c"], "d"]', '$[1][0]', "foo") AS json_data

/*-----------------------*
| json_data             |
+-----------------------+
| ["a",["foo","c"],"d"] |
*-----------------------*/


In the following example, the path prefix ` $ ` points to a JSON null, so the
remainder of the path is created. The resulting array is padded with JSON
nulls and appended with ` foo ` .



SELECT JSON_SET(JSON 'null', '$[0][3]', "foo")

/*--------------------------*
| json_data                |
+--------------------------+
| [[null,null,null,"foo"]] |
*--------------------------*/


In the following example, the path ` $[1] ` is matched, the matched array is
extended since ` $[1][4] ` is larger than the existing array, and then ` foo `
is inserted in the array.



SELECT JSON_SET(JSON '["a", ["b", "c"], "d"]', '$[1][4]', "foo") AS json_data

/*-------------------------------------*
| json_data                           |
+-------------------------------------+
| ["a",["b","c",null,null,"foo"],"d"] |
*-------------------------------------*/


In the following example, the path ` $[1][0][0] ` implies that the value of `
$[1][0] ` is an array, but it is not, so the operation is ignored.



SELECT JSON_SET(JSON '["a", ["b", "c"], "d"]', '$[1][0][0]', "foo") AS json_data

/*---------------------*
| json_data           |
+---------------------+
| ["a",["b","c"],"d"] |
*---------------------*/


In the following example, the path ` $[1][2] ` is larger than the length of
the matched array. The array length is extended and the remainder of the path
is recursively created. The operation continues to the path ` $[1][2][1] ` and
inserts ` foo ` .



SELECT JSON_SET(JSON '["a", ["b", "c"], "d"]', '$[1][2][1]', "foo") AS json_data

/*----------------------------------*
| json_data                        |
+----------------------------------+
| ["a",["b","c",[null,"foo"]],"d"] |
*----------------------------------*/


In the following example, because the ` JSON ` object is empty, key ` b ` is
inserted, and the remainder of the path is recursively created.



SELECT JSON_SET(JSON '{}', '$.b[2].d', 100) AS json_data

/*-----------------------------*
| json_data                   |
+-----------------------------+
| {"b":[null,null,{"d":100}]} |
*-----------------------------*/


In the following example, multiple values are set.



SELECT JSON_SET(
JSON '{"a": 1, "b": {"c":3}, "d": [4]}',
'$.a', 'v1',
'$.b.e', 'v2',
'$.d[2]', 'v3') AS json_data

/*---------------------------------------------------*
| json_data                                         |
+---------------------------------------------------+
| {"a":"v1","b":{"c":3,"e":"v2"},"d":[4,null,"v3"]} |
*---------------------------------------------------*/


###  ` JSON_STRIP_NULLS `



JSON_STRIP_NULLS(
json_expr
[, json_path]
[, include_arrays => { TRUE | FALSE }]
[, remove_empty => { TRUE | FALSE }]
)


Recursively removes JSON nulls from JSON objects and JSON arrays.

Arguments:

* ` json_expr ` : JSON. For example:

JSON '{"a": null, "b": "c"}'


* ` json_path ` : Remove JSON nulls at this  JSONPath  for ` json_expr ` .

* ` include_arrays ` : An optional, mandatory named argument that is either ` TRUE ` (default) or ` FALSE ` . If ` TRUE ` or omitted, the function removes JSON nulls from JSON arrays. If ` FALSE ` , does not.

* ` remove_empty ` : An optional, mandatory named argument that is either ` TRUE ` or ` FALSE ` (default). If ` TRUE ` , the function removes empty JSON objects after JSON nulls are removed. If ` FALSE ` or omitted, does not.

If ` remove_empty ` is ` TRUE ` and ` include_arrays ` is ` TRUE ` or omitted,
the function additionally removes empty JSON arrays.

Details:

* If a value is a JSON null, the associated key-value pair is removed.
* If ` remove_empty ` is set to ` TRUE ` , the function recursively removes empty containers after JSON nulls are removed.
* If the function generates JSON with nothing in it, the function returns a JSON null.
* If ` json_path ` is an invalid  JSONPath  , an error is produced.
* If ` json_expr ` is SQL ` NULL ` , the function returns SQL ` NULL ` .
* If ` json_path ` , ` include_arrays ` , or ` remove_empty ` is SQL ` NULL ` , the function returns ` json_expr ` .

**Return type**

` JSON `

**Examples**

In the following example, all JSON nulls are removed.



SELECT JSON_STRIP_NULLS(JSON '{"a": null, "b": "c"}') AS json_data

/*-----------*
| json_data |
+-----------+
| {"b":"c"} |
*-----------*/


In the following example, all JSON nulls are removed from a JSON array.



SELECT JSON_STRIP_NULLS(JSON '[1, null, 2, null]') AS json_data

/*-----------*
| json_data |
+-----------+
| [1,2]     |
*-----------*/


In the following example, ` include_arrays ` is set as ` FALSE ` so that JSON
nulls are not removed from JSON arrays.



SELECT JSON_STRIP_NULLS(JSON '[1, null, 2, null]', include_arrays=>FALSE) AS json_data

/*-----------------*
| json_data       |
+-----------------+
| [1,null,2,null] |
*-----------------*/


In the following example, ` remove_empty ` is omitted and defaults to ` FALSE
` , and the empty structures are retained.



SELECT JSON_STRIP_NULLS(JSON '[1, null, 2, null, [null]]') AS json_data

/*-----------*
| json_data |
+-----------+
| [1,2,[]]  |
*-----------*/


In the following example, ` remove_empty ` is set as ` TRUE ` , and the empty
structures are removed.



SELECT JSON_STRIP_NULLS(
JSON '[1, null, 2, null, [null]]',
remove_empty=>TRUE) AS json_data

/*-----------*
| json_data |
+-----------+
| [1,2]     |
*-----------*/


In the following examples, ` remove_empty ` is set as ` TRUE ` , and the empty
structures are removed. Because no JSON data is left the function returns JSON
null.



SELECT JSON_STRIP_NULLS(JSON '{"a": null}', remove_empty=>TRUE) AS json_data

/*-----------*
| json_data |
+-----------+
| null      |
*-----------*/



SELECT JSON_STRIP_NULLS(JSON '{"a": [null]}', remove_empty=>TRUE) AS json_data

/*-----------*
| json_data |
+-----------+
| null      |
*-----------*/


In the following example, empty structures are removed for JSON objects, but
not JSON arrays.



SELECT JSON_STRIP_NULLS(
JSON '{"a": {"b": {"c": null}}, "d": [null], "e": [], "f": 1}',
include_arrays=>FALSE,
remove_empty=>TRUE) AS json_data

/*---------------------------*
| json_data                 |
+---------------------------+
| {"d":[null],"e":[],"f":1} |
*---------------------------*/


In the following example, empty structures are removed for both JSON objects,
and JSON arrays.



SELECT JSON_STRIP_NULLS(
JSON '{"a": {"b": {"c": null}}, "d": [null], "e": [], "f": 1}',
remove_empty=>TRUE) AS json_data

/*-----------*
| json_data |
+-----------+
| {"f":1}   |
*-----------*/


In the following example, because no JSON data is left, the function returns a
JSON null.



SELECT JSON_STRIP_NULLS(JSON 'null') AS json_data

/*-----------*
| json_data |
+-----------+
| null      |
*-----------*/


###  ` JSON_TYPE `



JSON_TYPE(json_expr)


**Description**

Gets the JSON type of the outermost JSON value and converts the name of this
type to a SQL ` STRING ` value. The names of these JSON types can be returned:
` object ` , ` array ` , ` string ` , ` number ` , ` boolean ` , ` null `

Arguments:

* ` json_expr ` : JSON. For example:

JSON '{"name": "sky", "color": "blue"}'


If this expression is SQL ` NULL ` , the function returns SQL ` NULL ` . If
the extracted JSON value is not a valid JSON type, an error is produced.

**Return type**

` STRING `

**Examples**



SELECT json_val, JSON_TYPE(json_val) AS type
FROM
UNNEST(
[
JSON '"apple"',
JSON '10',
JSON '3.14',
JSON 'null',
JSON '{"city": "New York", "State": "NY"}',
JSON '["apple", "banana"]',
JSON 'false'
]
) AS json_val;

/*----------------------------------+---------*
| json_val                         | type    |
+----------------------------------+---------+
| "apple"                          | string  |
| 10                               | number  |
| 3.14                             | number  |
| null                             | null    |
| {"State":"NY","city":"New York"} | object  |
| ["apple","banana"]               | array   |
| false                            | boolean |
*----------------------------------+---------*/


###  ` JSON_VALUE `



JSON_VALUE(json_string_expr[, json_path])



JSON_VALUE(json_expr[, json_path])


**Description**

Extracts a JSON scalar value and converts it to a SQL ` STRING ` value. In
addition, this function:

* Removes the outermost quotes and unescapes the values.
* Returns a SQL ` NULL ` if a non-scalar value is selected.
* Uses double quotes to escape invalid  JSONPath  characters in JSON keys. For example: ` "a.b" ` .

Arguments:

* ` json_string_expr ` : A JSON-formatted string. For example:

'{"name": "Jakob", "age": "6"}'


* ` json_expr ` : JSON. For example:

JSON '{"name": "Jane", "age": "6"}'


* ` json_path ` : The  JSONPath  . This identifies the data that you want to obtain from the input. If this optional parameter is not provided, then the JSONPath ` $ ` symbol is applied, which means that all of the data is analyzed.

If ` json_path ` returns a JSON ` null ` or a non-scalar value (in other
words, if ` json_path ` refers to an object or an array), then a SQL ` NULL `
is returned.

There are differences between the JSON-formatted string and JSON input types.
For details, see  Differences between the JSON and JSON-formatted STRING types
.

**Return type**

` STRING `

**Examples**

In the following example, JSON data is extracted and returned as a scalar
value.



SELECT JSON_VALUE(JSON '{"name": "Jakob", "age": "6" }', '$.age') AS scalar_age;

/*------------*
| scalar_age |
+------------+
| 6          |
*------------*/


The following example compares how results are returned for the ` JSON_QUERY `
and ` JSON_VALUE ` functions.



SELECT JSON_QUERY('{"name": "Jakob", "age": "6"}', '$.name') AS json_name,
JSON_VALUE('{"name": "Jakob", "age": "6"}', '$.name') AS scalar_name,
JSON_QUERY('{"name": "Jakob", "age": "6"}', '$.age') AS json_age,
JSON_VALUE('{"name": "Jakob", "age": "6"}', '$.age') AS scalar_age;

/*-----------+-------------+----------+------------*
| json_name | scalar_name | json_age | scalar_age |
+-----------+-------------+----------+------------+
| "Jakob"   | Jakob       | "6"      | 6          |
*-----------+-------------+----------+------------*/



SELECT JSON_QUERY('{"fruits": ["apple", "banana"]}', '$.fruits') AS json_query,
JSON_VALUE('{"fruits": ["apple", "banana"]}', '$.fruits') AS json_value;

/*--------------------+------------*
| json_query         | json_value |
+--------------------+------------+
| ["apple","banana"] | NULL       |
*--------------------+------------*/


In cases where a JSON key uses invalid JSONPath characters, you can escape
those characters using double quotes. For example:



SELECT JSON_VALUE('{"a.b": {"c": "world"}}', '$."a.b".c') AS hello;

/*-------*
| hello |
+-------+
| world |
*-------*/


###  ` JSON_VALUE_ARRAY `



JSON_VALUE_ARRAY(json_string_expr[, json_path])



JSON_VALUE_ARRAY(json_expr[, json_path])


**Description**

Extracts a JSON array of scalar values and converts it to a SQL `
ARRAY<STRING> ` value. In addition, this function:

* Removes the outermost quotes and unescapes the values.
* Returns a SQL ` NULL ` if the selected value is not an array or not an array containing only scalar values.
* Uses double quotes to escape invalid  JSONPath  characters in JSON keys. For example: ` "a.b" ` .

Arguments:

* ` json_string_expr ` : A JSON-formatted string. For example:

'["apples", "oranges", "grapes"]'


* ` json_expr ` : JSON. For example:

JSON '["apples", "oranges", "grapes"]'


* ` json_path ` : The  JSONPath  . This identifies the data that you want to obtain from the input. If this optional parameter is not provided, then the JSONPath ` $ ` symbol is applied, which means that all of the data is analyzed.

There are differences between the JSON-formatted string and JSON input types.
For details, see  Differences between the JSON and JSON-formatted STRING types
.

Caveats:

* A JSON ` null ` in the input array produces a SQL ` NULL ` as the output for JSON ` null ` . If the output contains a ` NULL ` array element, an error is produced because the final output cannot be an array with ` NULL ` values.
* If a JSONPath matches an array that contains scalar objects and a JSON ` null ` , then the output of the function must be transformed because the final output cannot be an array with ` NULL ` values.

**Return type**

` ARRAY<STRING> `

**Examples**

This extracts items in JSON to a string array:



SELECT JSON_VALUE_ARRAY(
JSON '{"fruits": ["apples", "oranges", "grapes"]}', '$.fruits'
) AS string_array;

/*---------------------------*
| string_array              |
+---------------------------+
| [apples, oranges, grapes] |
*---------------------------*/


The following example compares how results are returned for the `
JSON_QUERY_ARRAY ` and ` JSON_VALUE_ARRAY ` functions.



SELECT JSON_QUERY_ARRAY('["apples", "oranges"]') AS json_array,
JSON_VALUE_ARRAY('["apples", "oranges"]') AS string_array;

/*-----------------------+-------------------*
| json_array            | string_array      |
+-----------------------+-------------------+
| ["apples", "oranges"] | [apples, oranges] |
*-----------------------+-------------------*/


This extracts the items in a JSON-formatted string to a string array:



-- Strips the double quotes
SELECT JSON_VALUE_ARRAY('["foo", "bar", "baz"]', '$') AS string_array;

/*-----------------*
| string_array    |
+-----------------+
| [foo, bar, baz] |
*-----------------*/


This extracts a string array and converts it to an integer array:



SELECT ARRAY(
SELECT CAST(integer_element AS INT64)
FROM UNNEST(
JSON_VALUE_ARRAY('[1, 2, 3]', '$')
) AS integer_element
) AS integer_array;

/*---------------*
| integer_array |
+---------------+
| [1, 2, 3]     |
*---------------*/


These are equivalent:



SELECT JSON_VALUE_ARRAY('{"fruits": ["apples", "oranges", "grapes"]}', '$.fruits') AS string_array;
SELECT JSON_VALUE_ARRAY('{"fruits": ["apples", "oranges", "grapes"]}', '$."fruits"') AS string_array;

-- The queries above produce the following result:
/*---------------------------*
| string_array              |
+---------------------------+
| [apples, oranges, grapes] |
*---------------------------*/


In cases where a JSON key uses invalid JSONPath characters, you can escape
those characters using double quotes: ` " " ` . For example:



SELECT JSON_VALUE_ARRAY('{"a.b": {"c": ["world"]}}', '$."a.b".c') AS hello;

/*---------*
| hello   |
+---------+
| [world] |
*---------*/


The following examples explore how invalid requests and empty arrays are
handled:



-- An error is thrown if you provide an invalid JSONPath.
SELECT JSON_VALUE_ARRAY('["foo", "bar", "baz"]', 'INVALID_JSONPath') AS result;

-- If the JSON-formatted string is invalid, then NULL is returned.
SELECT JSON_VALUE_ARRAY('}}', '$') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- If the JSON document is NULL, then NULL is returned.
SELECT JSON_VALUE_ARRAY(NULL, '$') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- If a JSONPath does not match anything, then the output is NULL.
SELECT JSON_VALUE_ARRAY('{"a": ["foo", "bar", "baz"]}', '$.b') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- If a JSONPath matches an object that is not an array, then the output is NULL.
SELECT JSON_VALUE_ARRAY('{"a": "foo"}', '$') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- If a JSONPath matches an array of non-scalar objects, then the output is NULL.
SELECT JSON_VALUE_ARRAY('{"a": [{"b": "foo", "c": 1}, {"b": "bar", "c": 2}], "d": "baz"}', '$.a') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- If a JSONPath matches an array of mixed scalar and non-scalar objects,
-- then the output is NULL.
SELECT JSON_VALUE_ARRAY('{"a": [10, {"b": 20}]', '$.a') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/

-- If a JSONPath matches an empty JSON array, then the output is an empty array instead of NULL.
SELECT JSON_VALUE_ARRAY('{"a": "foo", "b": []}', '$.b') AS result;

/*--------*
| result |
+--------+
| []     |
*--------*/

-- The following query produces and error because the final output cannot be an
-- array with NULLs.
SELECT JSON_VALUE_ARRAY('["world", 1, null]') AS result;



###  ` LAX_BOOL `



LAX_BOOL(json_expr)


**Description**

Attempts to convert a JSON value to a SQL ` BOOL ` value.

Arguments:

* ` json_expr ` : JSON. For example:

JSON 'true'


Details:

* If ` json_expr ` is SQL ` NULL ` , the function returns SQL ` NULL ` .
* See the conversion rules in the next section for additional ` NULL ` handling.

**Conversion rules**

From JSON type  |  To SQL ` BOOL `
---|---
boolean  |  If the JSON boolean is ` true ` , returns ` TRUE ` . Otherwise,
returns ` FALSE ` .
string  |  If the JSON string is ` 'true' ` , returns ` TRUE ` . If the JSON
string is ` 'false' ` , returns ` FALSE ` . If the JSON string is any other
value or has whitespace in it, returns ` NULL ` . This conversion is case-
insensitive.
number  |  If the JSON number is a representation of ` 0 ` , returns ` FALSE `
. Otherwise, returns ` TRUE ` .
other type or null  |  ` NULL `

**Return type**

` BOOL `

**Examples**

Example with input that is a JSON boolean:



SELECT LAX_BOOL(JSON 'true') AS result;

/*--------*
| result |
+--------+
| true   |
*--------*/


Examples with inputs that are JSON strings:



SELECT LAX_BOOL(JSON '"true"') AS result;

/*--------*
| result |
+--------+
| TRUE   |
*--------*/



SELECT LAX_BOOL(JSON '"true "') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/



SELECT LAX_BOOL(JSON '"foo"') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/


Examples with inputs that are JSON numbers:



SELECT LAX_BOOL(JSON '10') AS result;

/*--------*
| result |
+--------+
| TRUE   |
*--------*/



SELECT LAX_BOOL(JSON '0') AS result;

/*--------*
| result |
+--------+
| FALSE  |
*--------*/



SELECT LAX_BOOL(JSON '0.0') AS result;

/*--------*
| result |
+--------+
| FALSE  |
*--------*/



SELECT LAX_BOOL(JSON '-1.1') AS result;

/*--------*
| result |
+--------+
| TRUE   |
*--------*/


###  ` LAX_FLOAT64 `



LAX_FLOAT64(json_expr)


**Description**

Attempts to convert a JSON value to a SQL ` FLOAT64 ` value.

Arguments:

* ` json_expr ` : JSON. For example:

JSON '9.8'


Details:

* If ` json_expr ` is SQL ` NULL ` , the function returns SQL ` NULL ` .
* See the conversion rules in the next section for additional ` NULL ` handling.

**Conversion rules**

From JSON type  |  To SQL ` FLOAT64 `
---|---
boolean  |  ` NULL `
string  |  If the JSON string represents a JSON number, parses it as a `
BIGNUMERIC ` value, and then safe casts the result as a ` FLOAT64 ` value. If
the JSON string can't be converted, returns ` NULL ` .
number  |  Casts the JSON number as a ` FLOAT64 ` value. Large JSON numbers
are rounded.
other type or null  |  ` NULL `

**Return type**

` FLOAT64 `

**Examples**

Examples with inputs that are JSON numbers:



SELECT LAX_FLOAT64(JSON '9.8') AS result;

/*--------*
| result |
+--------+
| 9.8    |
*--------*/



SELECT LAX_FLOAT64(JSON '9') AS result;

/*--------*
| result |
+--------+
| 9.0    |
*--------*/



SELECT LAX_FLOAT64(JSON '9007199254740993') AS result;

/*--------------------*
| result             |
+--------------------+
| 9007199254740992.0 |
*--------------------*/



SELECT LAX_FLOAT64(JSON '1e100') AS result;

/*--------*
| result |
+--------+
| 1e+100 |
*--------*/


Examples with inputs that are JSON booleans:



SELECT LAX_FLOAT64(JSON 'true') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/



SELECT LAX_FLOAT64(JSON 'false') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/


Examples with inputs that are JSON strings:



SELECT LAX_FLOAT64(JSON '"10"') AS result;

/*--------*
| result |
+--------+
| 10.0   |
*--------*/



SELECT LAX_FLOAT64(JSON '"1.1"') AS result;

/*--------*
| result |
+--------+
| 1.1    |
*--------*/



SELECT LAX_FLOAT64(JSON '"1.1e2"') AS result;

/*--------*
| result |
+--------+
| 110.0  |
*--------*/



SELECT LAX_FLOAT64(JSON '"9007199254740993"') AS result;

/*--------------------*
| result             |
+--------------------+
| 9007199254740992.0 |
*--------------------*/



SELECT LAX_FLOAT64(JSON '"+1.5"') AS result;

/*--------*
| result |
+--------+
| 1.5    |
*--------*/



SELECT LAX_FLOAT64(JSON '"NaN"') AS result;

/*--------*
| result |
+--------+
| NaN    |
*--------*/



SELECT LAX_FLOAT64(JSON '"Inf"') AS result;

/*----------*
| result   |
+----------+
| Infinity |
*----------*/



SELECT LAX_FLOAT64(JSON '"-InfiNiTY"') AS result;

/*-----------*
| result    |
+-----------+
| -Infinity |
*-----------*/



SELECT LAX_FLOAT64(JSON '"foo"') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/


###  ` LAX_INT64 `



LAX_INT64(json_expr)


**Description**

Attempts to convert a JSON value to a SQL ` INT64 ` value.

Arguments:

* ` json_expr ` : JSON. For example:

JSON '999'


Details:

* If ` json_expr ` is SQL ` NULL ` , the function returns SQL ` NULL ` .
* See the conversion rules in the next section for additional ` NULL ` handling.

**Conversion rules**

From JSON type  |  To SQL ` INT64 `
---|---
boolean  |  If the JSON boolean is ` true ` , returns ` 1 ` . If ` false ` ,
returns ` 0 ` .
string  |  If the JSON string represents a JSON number, parses it as a `
BIGNUMERIC ` value, and then safe casts the results as an ` INT64 ` value. If
the JSON string can't be converted, returns ` NULL ` .
number  |  Casts the JSON number as an ` INT64 ` value. If the JSON number
can't be converted, returns ` NULL ` .
other type or null  |  ` NULL `

**Return type**

` INT64 `

**Examples**

Examples with inputs that are JSON numbers:



SELECT LAX_INT64(JSON '10') AS result;

/*--------*
| result |
+--------+
| 10     |
*--------*/



SELECT LAX_INT64(JSON '10.0') AS result;

/*--------*
| result |
+--------+
| 10     |
*--------*/



SELECT LAX_INT64(JSON '1.1') AS result;

/*--------*
| result |
+--------+
| 1      |
*--------*/



SELECT LAX_INT64(JSON '3.5') AS result;

/*--------*
| result |
+--------+
| 4      |
*--------*/



SELECT LAX_INT64(JSON '1.1e2') AS result;

/*--------*
| result |
+--------+
| 110    |
*--------*/



SELECT LAX_INT64(JSON '1e100') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/


Examples with inputs that are JSON booleans:



SELECT LAX_INT64(JSON 'true') AS result;

/*--------*
| result |
+--------+
| 1      |
*--------*/



SELECT LAX_INT64(JSON 'false') AS result;

/*--------*
| result |
+--------+
| 0      |
*--------*/


Examples with inputs that are JSON strings:



SELECT LAX_INT64(JSON '"10"') AS result;

/*--------*
| result |
+--------+
| 10     |
*--------*/



SELECT LAX_INT64(JSON '"1.1"') AS result;

/*--------*
| result |
+--------+
| 1      |
*--------*/



SELECT LAX_INT64(JSON '"1.1e2"') AS result;

/*--------*
| result |
+--------+
| 110    |
*--------*/



SELECT LAX_INT64(JSON '"+1.5"') AS result;

/*--------*
| result |
+--------+
| 2      |
*--------*/



SELECT LAX_INT64(JSON '"1e100"') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/



SELECT LAX_INT64(JSON '"foo"') AS result;

/*--------*
| result |
+--------+
| NULL   |
*--------*/


###  ` LAX_STRING `



LAX_STRING(json_expr)


**Description**

Attempts to convert a JSON value to a SQL ` STRING ` value.

Arguments:

* ` json_expr ` : JSON. For example:

JSON '"name"'


Details:

* If ` json_expr ` is SQL ` NULL ` , the function returns SQL ` NULL ` .
* See the conversion rules in the next section for additional ` NULL ` handling.

**Conversion rules**

From JSON type  |  To SQL ` STRING `
---|---
boolean  |  If the JSON boolean is ` true ` , returns ` 'true' ` . If ` false
` , returns ` 'false' ` .
string  |  Returns the JSON string as a ` STRING ` value.
number  |  Returns the JSON number as a ` STRING ` value.
other type or null  |  ` NULL `

**Return type**

` STRING `

**Examples**

Examples with inputs that are JSON strings:



SELECT LAX_STRING(JSON '"purple"') AS result;

/*--------*
| result |
+--------+
| purple |
*--------*/



SELECT LAX_STRING(JSON '"10"') AS result;

/*--------*
| result |
+--------+
| 10     |
*--------*/


Examples with inputs that are JSON booleans:



SELECT LAX_STRING(JSON 'true') AS result;

/*--------*
| result |
+--------+
| true   |
*--------*/



SELECT LAX_STRING(JSON 'false') AS result;

/*--------*
| result |
+--------+
| false  |
*--------*/


Examples with inputs that are JSON numbers:



SELECT LAX_STRING(JSON '10.0') AS result;

/*--------*
| result |
+--------+
| 10     |
*--------*/



SELECT LAX_STRING(JSON '10') AS result;

/*--------*
| result |
+--------+
| 10     |
*--------*/



SELECT LAX_STRING(JSON '1e100') AS result;

/*--------*
| result |
+--------+
| 1e+100 |
*--------*/


###  ` PARSE_JSON `



PARSE_JSON(json_string_expr[, wide_number_mode=>{ 'exact' | 'round' }])


**Description**

Converts a JSON-formatted ` STRING ` value to a ` JSON ` value.

Arguments:

* ` json_string_expr ` : A JSON-formatted string. For example:

'{"class": {"students": [{"name": "Jane"}]}}'


* ` wide_number_mode ` : Optional mandatory-named argument that determines how to handle numbers that cannot be stored in a ` JSON ` value without the loss of precision. If used, ` wide_number_mode ` must include one of these values:

* ` exact ` (default): Only accept numbers that can be stored without loss of precision. If a number that cannot be stored without loss of precision is encountered, the function throws an error.
* ` round ` : If a number that cannot be stored without loss of precision is encountered, attempt to round it to a number that can be stored without loss of precision. If the number cannot be rounded, the function throws an error.

If a number appears in a JSON object or array, the ` wide_number_mode `
argument is applied to the number in the object or array.

Numbers from the following domains can be stored in JSON without loss of
precision:

* 64-bit signed/unsigned integers, such as ` INT64 `
* ` FLOAT64 `

**Return type**

` JSON `

**Examples**

In the following example, a JSON-formatted string is converted to ` JSON ` .



SELECT PARSE_JSON('{"coordinates": [10, 20], "id": 1}') AS json_data;

/*--------------------------------*
| json_data                      |
+--------------------------------+
| {"coordinates":[10,20],"id":1} |
*--------------------------------*/


The following queries fail because:

* The number that was passed in cannot be stored without loss of precision.
* ` wide_number_mode=>'exact' ` is used implicitly in the first query and explicitly in the second query.



SELECT PARSE_JSON('{"id": 922337203685477580701}') AS json_data; -- fails
SELECT PARSE_JSON('{"id": 922337203685477580701}', wide_number_mode=>'exact') AS json_data; -- fails


The following query rounds the number to a number that can be stored in JSON.



SELECT PARSE_JSON('{"id": 922337203685477580701}', wide_number_mode=>'round') AS json_data;

/*------------------------------*
| json_data                    |
+------------------------------+
| {"id":9.223372036854776e+20} |
*------------------------------*/


###  ` STRING `



STRING(json_expr)


**Description**

Converts a JSON string to a SQL ` STRING ` value.

Arguments:

* ` json_expr ` : JSON. For example:

JSON '"purple"'


If the JSON value is not a string, an error is produced. If the expression is
SQL ` NULL ` , the function returns SQL ` NULL ` .

**Return type**

` STRING `

**Examples**



SELECT STRING(JSON '"purple"') AS color;

/*--------*
| color  |
+--------+
| purple |
*--------*/



SELECT STRING(JSON_QUERY(JSON '{"name": "sky", "color": "blue"}', "$.color")) AS color;

/*-------*
| color |
+-------+
| blue  |
*-------*/


The following examples show how invalid requests are handled:



-- An error is thrown if the JSON is not of type string.
SELECT STRING(JSON '123') AS result; -- Throws an error
SELECT STRING(JSON 'null') AS result; -- Throws an error
SELECT SAFE.STRING(JSON '123') AS result; -- Returns a SQL NULL


###  ` TO_JSON `



TO_JSON(sql_value[, stringify_wide_numbers=>{ TRUE | FALSE }])


**Description**

Converts a SQL value to a JSON value.

Arguments:

* ` sql_value ` : The SQL value to convert to a JSON value. You can review the GoogleSQL data types that this function supports and their JSON encodings  here  .
* ` stringify_wide_numbers ` : Optional mandatory-named argument that is either ` TRUE ` or ` FALSE ` (default).

* If ` TRUE ` , numeric values outside of the ` FLOAT64 ` type domain are encoded as strings.
* If ` FALSE ` (default), numeric values outside of the ` FLOAT64 ` type domain are not encoded as strings, but are stored as JSON numbers. If a numerical value cannot be stored in JSON without loss of precision, an error is thrown.

The following numerical data types are affected by the `
stringify_wide_numbers ` argument:

* ` INT64 `

* ` NUMERIC `

* ` BIGNUMERIC `

If one of these numerical data types appears in a container data type such as
an ` ARRAY ` or ` STRUCT ` , the ` stringify_wide_numbers ` argument is
applied to the numerical data types in the container data type.

**Return type**

` JSON `

**Examples**

In the following example, the query converts rows in a table to JSON values.



With CoordinatesTable AS (
(SELECT 1 AS id, [10, 20] AS coordinates) UNION ALL
(SELECT 2 AS id, [30, 40] AS coordinates) UNION ALL
(SELECT 3 AS id, [50, 60] AS coordinates))
SELECT TO_JSON(t) AS json_objects
FROM CoordinatesTable AS t;

/*--------------------------------*
| json_objects                   |
+--------------------------------+
| {"coordinates":[10,20],"id":1} |
| {"coordinates":[30,40],"id":2} |
| {"coordinates":[50,60],"id":3} |
*--------------------------------*/


In the following example, the query returns a large numerical value as a JSON
string.



SELECT TO_JSON(9007199254740993, stringify_wide_numbers=>TRUE) as stringify_on;

/*--------------------*
| stringify_on       |
+--------------------+
| "9007199254740993" |
*--------------------*/


In the following example, both queries return a large numerical value as a
JSON number.



SELECT TO_JSON(9007199254740993, stringify_wide_numbers=>FALSE) as stringify_off;
SELECT TO_JSON(9007199254740993) as stringify_off;

/*------------------*
| stringify_off    |
+------------------+
| 9007199254740993 |
*------------------*/


In the following example, only large numeric values are converted to JSON
strings.



With T1 AS (
(SELECT 9007199254740993 AS id) UNION ALL
(SELECT 2 AS id))
SELECT TO_JSON(t, stringify_wide_numbers=>TRUE) AS json_objects
FROM T1 AS t;

/*---------------------------*
| json_objects              |
+---------------------------+
| {"id":"9007199254740993"} |
| {"id":2}                  |
*---------------------------*/


In this example, the values ` 9007199254740993 ` ( ` INT64 ` ) and ` 2.1 ` ( `
FLOAT64 ` ) are converted to the common supertype ` FLOAT64 ` , which is not
affected by the ` stringify_wide_numbers ` argument.



With T1 AS (
(SELECT 9007199254740993 AS id) UNION ALL
(SELECT 2.1 AS id))
SELECT TO_JSON(t, stringify_wide_numbers=>TRUE) AS json_objects
FROM T1 AS t;

/*------------------------------*
| json_objects                 |
+------------------------------+
| {"id":9.007199254740992e+15} |
| {"id":2.1}                   |
*------------------------------*/


###  ` TO_JSON_STRING `



TO_JSON_STRING(value[, pretty_print])


**Description**

Converts a SQL value to a JSON-formatted ` STRING ` value.

Arguments:

* ` value ` : A SQL value. You can review the GoogleSQL data types that this function supports and their JSON encodings  here  .
* ` pretty_print ` : Optional boolean parameter. If ` pretty_print ` is ` true ` , the `returned value is formatted for easy readability.

**Return type**

A JSON-formatted ` STRING `

**Examples**

Convert rows in a table to JSON-formatted strings.



With CoordinatesTable AS (
(SELECT 1 AS id, [10, 20] AS coordinates) UNION ALL
(SELECT 2 AS id, [30, 40] AS coordinates) UNION ALL
(SELECT 3 AS id, [50, 60] AS coordinates))
SELECT id, coordinates, TO_JSON_STRING(t) AS json_data
FROM CoordinatesTable AS t;

/*----+-------------+--------------------------------*
| id | coordinates | json_data                      |
+----+-------------+--------------------------------+
| 1  | [10, 20]    | {"id":1,"coordinates":[10,20]} |
| 2  | [30, 40]    | {"id":2,"coordinates":[30,40]} |
| 3  | [50, 60]    | {"id":3,"coordinates":[50,60]} |
*----+-------------+--------------------------------*/


Convert rows in a table to JSON-formatted strings that are easy to read.



With CoordinatesTable AS (
(SELECT 1 AS id, [10, 20] AS coordinates) UNION ALL
(SELECT 2 AS id, [30, 40] AS coordinates))
SELECT id, coordinates, TO_JSON_STRING(t, true) AS json_data
FROM CoordinatesTable AS t;

/*----+-------------+--------------------*
| id | coordinates | json_data          |
+----+-------------+--------------------+
| 1  | [10, 20]    | {                  |
|    |             |   "id": 1,         |
|    |             |   "coordinates": [ |
|    |             |     10,            |
|    |             |     20             |
|    |             |   ]                |
|    |             | }                  |
+----+-------------+--------------------+
| 2  | [30, 40]    | {                  |
|    |             |   "id": 2,         |
|    |             |   "coordinates": [ |
|    |             |     30,            |
|    |             |     40             |
|    |             |   ]                |
|    |             | }                  |
*----+-------------+--------------------*/


###  JSON encodings

You can encode a SQL value as a JSON value with the following functions:

* ` TO_JSON_STRING `
* ` TO_JSON `
* ` JSON_SET ` (uses ` TO_JSON ` encoding)
* ` JSON_ARRAY ` (uses ` TO_JSON ` encoding)
* ` JSON_ARRAY_APPEND ` (uses ` TO_JSON ` encoding)
* ` JSON_ARRAY_INSERT ` (uses ` TO_JSON ` encoding)
* ` JSON_OBJECT ` (uses ` TO_JSON ` encoding)

The following SQL to JSON encodings are supported:

From SQL  |  To JSON  |  Examples
---|---|---
NULL  |

null

|  SQL input: ` NULL `
JSON output: ` null `
BOOL  |  boolean  |  SQL input: ` TRUE `
JSON output: ` true `

* * *

SQL input: ` FALSE `
JSON output: ` false `

INT64  |

(TO_JSON_STRING only)

number or string

Encoded as a number when the value is in the range of [-2  53  , 2  53  ],
which is the range of integers that can be represented losslessly as IEEE 754
double-precision floating point numbers. A value outside of this range is
encoded as a string.

|  SQL input: ` 9007199254740992 `
JSON output: ` 9007199254740992 `

* * *

SQL input: ` 9007199254740993 `
JSON output: ` "9007199254740993" `

INT64  |

(TO_JSON only)

number or string

If the ` stringify_wide_numbers ` argument is ` TRUE ` and the value is
outside of the FLOAT64 type domain, the value is encoded as a string. If the
value cannot be stored in JSON without loss of precision, the function fails.
Otherwise, the value is encoded as a number.

If the ` stringify_wide_numbers ` is not used or is ` FALSE ` , numeric values
outside of the `FLOAT64` type domain are not encoded as strings, but are
stored as JSON numbers. If a numerical value cannot be stored in JSON without
loss of precision, an error is thrown.

|  SQL input: ` 9007199254740992 `
JSON output: ` 9007199254740992 `

* * *

SQL input: ` 9007199254740993 `
JSON output: ` 9007199254740993 `

* * *

SQL input with stringify_wide_numbers=>TRUE: ` 9007199254740992 `
JSON output: ` 9007199254740992 `

* * *

SQL input with stringify_wide_numbers=>TRUE: ` 9007199254740993 `
JSON output: ` "9007199254740993" `

NUMERIC
BIGNUMERIC  |

(TO_JSON_STRING only)

number or string

Encoded as a number when the value is in the range of [-2  53  , 2  53  ] and
has no fractional part. A value outside of this range is encoded as a string.

|  SQL input: ` -1 `
JSON output: ` -1 `

* * *

SQL input: ` 0 `
JSON output: ` 0 `

* * *

SQL input: ` 9007199254740993 `
JSON output: ` "9007199254740993" `

* * *

SQL input: ` 123.56 `
JSON output: ` "123.56" `

NUMERIC
BIGNUMERIC  |

(TO_JSON only)

number or string

If the ` stringify_wide_numbers ` argument is ` TRUE ` and the value is
outside of the FLOAT64 type domain, it is encoded as a string. Otherwise, it's
encoded as a number.

|  SQL input: ` -1 `
JSON output: ` -1 `

* * *

SQL input: ` 0 `
JSON output: ` 0 `

* * *

SQL input: ` 9007199254740993 `
JSON output: ` 9007199254740993 `

* * *

SQL input: ` 123.56 `
JSON output: ` 123.56 `

* * *

SQL input with stringify_wide_numbers=>TRUE: ` 9007199254740993 `
JSON output: ` "9007199254740993" `

* * *

SQL input with stringify_wide_numbers=>TRUE: ` 123.56 `
JSON output: ` 123.56 `

FLOAT64  |

number or string

` +/-inf ` and ` NaN ` are encoded as ` Infinity ` , ` -Infinity ` , and ` NaN
` . Otherwise, this value is encoded as a number.

|  SQL input: ` 1.0 `
JSON output: ` 1 `

* * *

SQL input: ` 9007199254740993 `
JSON output: ` 9007199254740993 `

* * *

SQL input: ` "+inf" `
JSON output: ` "Infinity" `

* * *

SQL input: ` "-inf" `
JSON output: ` "-Infinity" `

* * *

SQL input: ` "NaN" `
JSON output: ` "NaN" `

STRING  |

string

Encoded as a string, escaped according to the JSON standard. Specifically, ` "
` , ` \ ` , and the control characters from ` U+0000 ` to ` U+001F ` are
escaped.

|  SQL input: ` "abc" `
JSON output: ` "abc" `

* * *

SQL input: ` "\"abc\"" `
JSON output: ` "\"abc\"" `

BYTES  |

string

Uses RFC 4648 Base64 data encoding.

|  SQL input: ` b"Google" `
JSON output: ` "R29vZ2xl" `

DATE  |  string  |  SQL input: ` DATE '2017-03-06' `
JSON output: ` "2017-03-06" `

TIMESTAMP  |

string

Encoded as ISO 8601 date and time, where T separates the date and time and Z
(Zulu/UTC) represents the time zone.

|  SQL input: ` TIMESTAMP '2017-03-06 12:34:56.789012' `
JSON output: ` "2017-03-06T12:34:56.789012Z" `

DATETIME  |

string

Encoded as ISO 8601 date and time, where T separates the date and time.

|  SQL input: ` DATETIME '2017-03-06 12:34:56.789012' `
JSON output: ` "2017-03-06T12:34:56.789012" `

TIME  |

string

Encoded as ISO 8601 time.

|  SQL input: ` TIME '12:34:56.789012' `
JSON output: ` "12:34:56.789012" `

JSON  |

data of the input JSON

|  SQL input: ` JSON '{"item": "pen", "price": 10}' `
JSON output: ` {"item":"pen", "price":10} `

* * *

SQL input: ` [1, 2, 3] `
JSON output: ` [1, 2, 3] `

ARRAY  |

array

Can contain zero or more elements.

|  SQL input: ` ["red", "blue", "green"] `
JSON output: ` ["red","blue","green"] `

* * *

SQL input: ` [1, 2, 3] `
JSON output: ` [1,2,3] `

STRUCT  |

object

The object can contain zero or more key/value pairs. Each value is formatted
according to its type.

For ` TO_JSON ` , a field is included in the output string and any duplicates
of this field are omitted. For ` TO_JSON_STRING ` , a field and any duplicates
of this field are included in the output string.

Anonymous fields are represented with ` "" ` .

Invalid UTF-8 field names might result in unparseable JSON. String values are
escaped according to the JSON standard. Specifically, ` " ` , ` \ ` , and the
control characters from ` U+0000 ` to ` U+001F ` are escaped.

|  SQL input: ` STRUCT(12 AS purchases, TRUE AS inStock) `
JSON output: ` {"inStock": true,"purchases":12} `


###  JSONPath format

With the JSONPath format, you can identify the values you want to obtain from
a JSON-formatted string. The JSONPath format supports these operators:

Operator  |  Description  |  Examples
---|---|---
` $ ` |  Root object or element. The JSONPath format must start with this
operator, which refers to the outermost level of the JSON-formatted string.  |

JSON-formatted string:
` '{"class" : {"students" : [{"name" : "Jane"}]}}' `

JSON path:
` "$" `

JSON result:
` {"class":{"students":[{"name":"Jane"}]}} `


` . ` |  Child operator. You can identify child values using dot-notation.  |

JSON-formatted string:
` '{"class" : {"students" : [{"name" : "Jane"}]}}' `

JSON path:
` "$.class.students" `

JSON result:
` [{"name":"Jane"}] `

` [] ` |  Subscript operator. If the object is a JSON array, you can use
brackets to specify the array index.  |

JSON-formatted string:
` '{"class" : {"students" : [{"name" : "Jane"}]}}' `

JSON path:
` "$.class.students[0]" `

JSON result:
` {"name":"Jane"} `

` [][] `
` [][][]... ` |  Child subscript operator. If the object is a JSON array
within an array, you can use as many additional brackets as you need to
specify the child array index.  |

JSON-formatted string:
` '{"a": [["b", "c"], "d"], "e":"f"}' `

JSON path:
` "$.a[0][1]" `

JSON result:
` "c" `

If a key in a JSON functions contains a JSON format operator, refer to each
JSON function for how to escape them.

A JSON function returns ` NULL ` if the JSONPath format does not match a value
in a JSON-formatted string. If the selected value for a scalar function is not
scalar, such as an object or an array, the function returns ` NULL ` . If the
JSONPath format is invalid, an error is produced.

###  Differences between the JSON and JSON-formatted STRING types

Many JSON functions accept two input types:

* [ ` JSON ` ](/bigquery/docs/reference/standard-sql/data-types#json_type) type
* ` STRING ` type

The ` STRING ` version of the extraction functions behaves differently than
the ` JSON ` version, mainly because ` JSON ` type values are always validated
whereas JSON-formatted ` STRING ` type values are not.

####  Non-validation of ` STRING ` inputs

The following ` STRING ` is invalid JSON because it is missing a trailing ` }
` :



{"hello": "world"


The JSON function reads the input from the beginning and stops as soon as the
field to extract is found, without reading the remainder of the input. A
parsing error is not produced.

With the ` JSON ` type, however, ` JSON '{"hello": "world"' ` returns a
parsing error.

For example:



SELECT JSON_VALUE('{"hello": "world"', "$.hello") AS hello;

/*-------*
| hello |
+-------+
| world |
*-------*/



SELECT JSON_VALUE(JSON '{"hello": "world"', "$.hello") AS hello;
-- An error is returned: Invalid JSON literal: syntax error while parsing
-- object - unexpected end of input; expected '}'


####  No strict validation of extracted values

In the following examples, duplicated keys are not removed when using a JSON-
formatted string. Similarly, keys order is preserved. For the ` JSON ` type, `
JSON '{"key": 1, "key": 2}' ` will result in ` JSON '{"key":1}' ` during
parsing.



SELECT JSON_QUERY('{"key": 1, "key": 2}', "$") AS string;

/*-------------------*
| string            |
+-------------------+
| {"key":1,"key":2} |
*-------------------*/



SELECT JSON_QUERY(JSON '{"key": 1, "key": 2}', "$") AS json;

/*-----------*
| json      |
+-----------+
| {"key":1} |
*-----------*/


####  JSON ` null `

When using a JSON-formatted ` STRING ` type in a JSON function, a JSON ` null
` value is extracted as a SQL ` NULL ` value.

When using a JSON type in a JSON function, a JSON ` null ` value returns a
JSON ` null ` value.



WITH t AS (
SELECT '{"name": null}' AS json_string, JSON '{"name": null}' AS json)
SELECT JSON_QUERY(json_string, "$.name") AS name_string,
JSON_QUERY(json_string, "$.name") IS NULL AS name_string_is_null,
JSON_QUERY(json, "$.name") AS name_json,
JSON_QUERY(json, "$.name") IS NULL AS name_json_is_null
FROM t;

/*-------------+---------------------+-----------+-------------------*
| name_string | name_string_is_null | name_json | name_json_is_null |
+-------------+---------------------+-----------+-------------------+
| NULL        | true                | null      | false             |
*-------------+---------------------+-----------+-------------------*/


Send feedback

Except as otherwise noted, the content of this page is licensed under the [
Creative Commons Attribution 4.0 License
](https://creativecommons.org/licenses/by/4.0/) , and code samples are
licensed under the [ Apache 2.0 License
](https://www.apache.org/licenses/LICENSE-2.0) . For details, see the [ Google
Developers Site Policies ](https://developers.google.com/site-policies) . Java
is a registered trademark of Oracle and/or its affiliates.

Last updated 2024-04-30 UTC.

[{ "type": "thumb-down", "id": "hardToUnderstand", "label":"Hard to
understand" },{ "type": "thumb-down", "id":
"incorrectInformationOrSampleCode", "label":"Incorrect information or sample
code" },{ "type": "thumb-down", "id": "missingTheInformationSamplesINeed",
"label":"Missing the information/samples I need" },{ "type": "thumb-down",
"id": "otherDown", "label":"Other" }]  [{ "type": "thumb-up", "id":
"easyToUnderstand", "label":"Easy to understand" },{ "type": "thumb-up", "id":
"solvedMyProblem", "label":"Solved my problem" },{ "type": "thumb-up", "id":
"otherUp", "label":"Other" }]  Need to tell us more?

* ###  Why Google

* [ Choosing Google Cloud ](/why-google-cloud/)
* [ Trust and security ](/trust-center/)
* [ Open cloud ](/open-cloud/)
* [ Multicloud ](/multicloud/)
* [ Global infrastructure ](/infrastructure/)
* [ Customers and case studies ](/customers/)
* [ Analyst reports ](/analyst-reports/)
* [ Whitepapers ](/whitepapers/)
* [ Blog ](//cloud.google.com/blog/)
* ###  Products and pricing

* [ Google Cloud pricing ](/pricing/)
* [ Google Workspace pricing ](//workspace.google.com/pricing.html)
* [ See all products ](/products/)
* ###  Solutions

* [ Infrastructure modernization ](/solutions/infrastructure-modernization/)
* [ Databases ](/solutions/databases/)
* [ Application modernization ](/solutions/application-modernization/)
* [ Smart analytics ](/solutions/smart-analytics/)
* [ Artificial Intelligence ](/solutions/ai/)
* [ Security ](/solutions/security/)
* [ Productivity & work transformation ](https://workspace.google.com/enterprise/)
* [ Industry solutions ](/solutions/#industry-solutions)
* [ DevOps solutions ](/solutions/devops/)
* [ Small business solutions ](/solutions/#section-14)
* [ See all solutions ](/solutions/)
* ###  Resources

* [ Google Cloud documentation ](/docs/)
* [ Google Cloud quickstarts ](/docs/get-started/)
* [ Google Cloud Marketplace ](/marketplace/)
* [ Learn about cloud computing ](/discover/)
* [ Support ](/support-hub/)
* [ Code samples ](/docs/samples)
* [ Cloud Architecture Center ](/architecture/)
* [ Training ](/learn/training/)
* [ Certifications ](/learn/certification/)
* [ Google for Developers ](//developers.google.com)
* [ Google Cloud for Startups ](/startup/)
* [ System status ](//status.cloud.google.com)
* [ Release Notes ](/release-notes)
* ###  Engage

* [ Contact sales ](/contact/)
* [ Find a Partner ](//cloud.google.com/find-a-partner)
* [ Become a Partner ](/partners/become-a-partner/)
* [ Events ](/events/)
* [ Podcasts ](/podcasts/)
* [ Developer Center ](/developers/)
* [ Press Corner ](https://www.googlecloudpresscorner.com/)
* [ Google Cloud on YouTube ](//www.youtube.com/googlecloud)
* [ Google Cloud Tech on YouTube ](//www.youtube.com/googlecloudplatform)
* [ Follow on X ](//x.com/googlecloud)
* [ Join User Research ](//userresearch.google.com/?reserved=1&utm_source=website&Q_Language=en&utm_medium=own_srch&utm_campaign=CloudWebFooter&utm_term=0&utm_content=0&productTag=clou&campaignDate=jul19&pType=devel&referral_code=jk212693)
* [ We're hiring. Join Google Cloud! ](//careers.google.com/cloud)
* [ Google Cloud Community ](https://www.googlecloudcommunity.com/)

* [ About Google ](//about.google/)
* [ Privacy ](//policies.google.com/privacy)
* [ Site terms ](//www.google.com/intl/en/policies/terms/regional.html)
* [ Google Cloud terms ](/product-terms/)
* Manage cookies
* [ Our third decade of climate action: join us ](/sustainability)
* Sign up for the Google Cloud newsletter  [ Subscribe ](/newsletter/)

* English
* Deutsch
* Español – América Latina
* Français
* Português – Brasil
* 中文 – 简体
* 日本語
* 한국어

