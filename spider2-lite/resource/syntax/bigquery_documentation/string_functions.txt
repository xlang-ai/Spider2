[ ![Google Cloud](https://www.gstatic.com/devrel-
devsite/prod/vc851b65627ca98cc752c9ae13e5f506cd6dbb7ed1bb4c8df6090c5f9130ed83c/cloud/images/cloud-
logo.svg) ](/)

*

[ Documentation ](https://cloud.google.com/docs) [ Technology areas
](https://cloud.google.com/docs/tech-area-overviews)

close

* [ AI solutions, generative AI, and ML  ](https://cloud.google.com/docs/ai-ml)
* [ Application development  ](https://cloud.google.com/docs/application-development)
* [ Application hosting  ](https://cloud.google.com/docs/application-hosting)
* [ Compute  ](https://cloud.google.com/docs/compute-area)
* [ Data analytics and pipelines  ](https://cloud.google.com/docs/data)
* [ Databases  ](https://cloud.google.com/docs/databases)
* [ Distributed, hybrid, and multicloud  ](https://cloud.google.com/docs/dhm-cloud)
* [ Industry solutions  ](https://cloud.google.com/docs/industry)
* [ Networking  ](https://cloud.google.com/docs/networking)
* [ Observability and monitoring  ](https://cloud.google.com/docs/observability)
* [ Security  ](https://cloud.google.com/docs/security)
* [ Storage  ](https://cloud.google.com/docs/storage)

[ Cross-product tools ](https://cloud.google.com/docs/cross-product-overviews)

close

* [ Access and resources management  ](https://cloud.google.com/docs/access-resources)
* [ Cloud SDK, languages, frameworks, and tools  ](https://cloud.google.com/docs/devtools)
* [ Costs and usage management  ](https://cloud.google.com/docs/costs-usage)
* [ Infrastructure as code  ](https://cloud.google.com/docs/iac)
* [ Migration  ](https://cloud.google.com/docs/migration)

[ Related sites ](https://cloud.google.com/)

close

* [ Google Cloud Home  ](https://cloud.google.com/)
* [ Free Trial and Free Tier  ](https://cloud.google.com/free)
* [ Architecture Center  ](https://cloud.google.com/architecture)
* [ Blog  ](https://cloud.google.com/blog)
* [ Contact Sales  ](https://cloud.google.com/contact)
* [ Google Cloud Developer Center  ](https://cloud.google.com/developers)
* [ Google Developer Center  ](https://developers.google.com/)
* [ Google Cloud Marketplace (in console)  ](https://console.cloud.google.com/marketplace)
* [ Google Cloud Marketplace Documentation  ](https://cloud.google.com/marketplace/docs)
* [ Google Cloud Skills Boost  ](https://www.cloudskillsboost.google/paths)
* [ Google Cloud Solution Center  ](https://cloud.google.com/solutions)
* [ Google Cloud Support  ](https://cloud.google.com/support-hub)
* [ Google Cloud Tech Youtube Channel  ](https://www.youtube.com/@googlecloudtech)

* English
* Deutsch
* Español – América Latina
* Français
* Português – Brasil
* 中文 – 简体
* 日本語
* 한국어

Sign in

* [ BigQuery ](https://cloud.google.com/bigquery)

[ Guides ](https://cloud.google.com/bigquery/docs/introduction) [ Reference
](https://cloud.google.com/bigquery/quotas) [ Samples
](https://cloud.google.com/bigquery/docs/samples) [ Resources
](https://cloud.google.com/bigquery/docs/release-notes)

[ Contact Us ](https://cloud.google.com/contact) [ Start free
](//console.cloud.google.com/freetrial)

[ ![Google Cloud](https://www.gstatic.com/devrel-
devsite/prod/vc851b65627ca98cc752c9ae13e5f506cd6dbb7ed1bb4c8df6090c5f9130ed83c/cloud/images/cloud-
logo.svg) ](/)

*

* [ Documentation  ](/docs)
* [ Guides  ](/bigquery/docs/introduction)
* [ Reference  ](/bigquery/quotas)
* [ Samples  ](/bigquery/docs/samples)
* [ Resources  ](/bigquery/docs/release-notes)
* [ Technology areas  ](/docs/tech-area-overviews)
* More
* [ Cross-product tools  ](/docs/cross-product-overviews)
* More
* [ Related sites  ](/)
* More
* [ Console  ](//console.cloud.google.com/)
* [ Contact Us  ](/contact)
* [ Start free  ](//console.cloud.google.com/freetrial)

* Quotas and limits

* [ Quotas and limits reference  ](/bigquery/quotas)
* [ Troubleshoot quota errors  ](/bigquery/docs/troubleshoot-quotas)
* BigQuery command-line tool

* [ bq command-line tool reference  ](/bigquery/docs/reference/bq-cli-reference)
* SQL in BigQuery

* GoogleSQL reference

* [ Query syntax  ](/bigquery/docs/reference/standard-sql/query-syntax)
* General reference

* [ Data types  ](/bigquery/docs/reference/standard-sql/data-types)
* [ Lexical structure and syntax  ](/bigquery/docs/reference/standard-sql/lexical)
* [ Conversion rules  ](/bigquery/docs/reference/standard-sql/conversion_rules)
* [ Format elements  ](/bigquery/docs/reference/standard-sql/format-elements)
* [ Collation  ](/bigquery/docs/reference/standard-sql/collation-concepts)
* [ Text analysis  ](/bigquery/docs/reference/standard-sql/text-analysis)
* [ BI Engine optimized functions  ](/bigquery/docs/bi-engine-optimized-sql)

* Expressions

* [ Function calls  ](/bigquery/docs/reference/standard-sql/functions-reference)
* [ Aggregate function calls  ](/bigquery/docs/reference/standard-sql/aggregate-function-calls)
* [ Window function calls  ](/bigquery/docs/reference/standard-sql/window-function-calls)
* [ Operators  ](/bigquery/docs/reference/standard-sql/operators)
* [ Conditional expressions  ](/bigquery/docs/reference/standard-sql/conditional_expressions)
* [ Subqueries  ](/bigquery/docs/reference/standard-sql/subqueries)

* Functions

* [ All functions and operators  ](/bigquery/docs/reference/standard-sql/functions-and-operators)
* [ AEAD encryption functions  ](/bigquery/docs/reference/standard-sql/aead_encryption_functions)
* [ Aggregate functions  ](/bigquery/docs/reference/standard-sql/aggregate_functions)
* [ Approximate aggregate functions  ](/bigquery/docs/reference/standard-sql/approximate_aggregate_functions)
* [ Array functions  ](/bigquery/docs/reference/standard-sql/array_functions)
* [ Bit functions  ](/bigquery/docs/reference/standard-sql/bit_functions)
* [ Conversion functions  ](/bigquery/docs/reference/standard-sql/conversion_functions)
* [ Date functions  ](/bigquery/docs/reference/standard-sql/date_functions)
* [ Datetime functions  ](/bigquery/docs/reference/standard-sql/datetime_functions)
* [ Debugging functions  ](/bigquery/docs/reference/standard-sql/debugging_functions)
* [ Differentially private aggregate functions  ](/bigquery/docs/reference/standard-sql/aggregate-dp-functions)
* [ Federated query functions  ](/bigquery/docs/reference/standard-sql/federated_query_functions)
* [ DLP encryption functions  ](/bigquery/docs/reference/standard-sql/dlp_functions)
* [ Geography functions  ](/bigquery/docs/reference/standard-sql/geography_functions)
* [ Hash functions  ](/bigquery/docs/reference/standard-sql/hash_functions)
* [ HyperLogLog++ functions  ](/bigquery/docs/reference/standard-sql/hll_functions)
* [ Interval functions  ](/bigquery/docs/reference/standard-sql/interval_functions)
* [ JSON functions  ](/bigquery/docs/reference/standard-sql/json_functions)
* [ Mathematical functions  ](/bigquery/docs/reference/standard-sql/mathematical_functions)
* [ Navigation functions  ](/bigquery/docs/reference/standard-sql/navigation_functions)
* [ Net functions  ](/bigquery/docs/reference/standard-sql/net_functions)
* [ Numbering functions  ](/bigquery/docs/reference/standard-sql/numbering_functions)
* [ Range functions  ](/bigquery/docs/reference/standard-sql/range-functions)
* [ Search functions  ](/bigquery/docs/reference/standard-sql/search_functions)
* [ Security functions  ](/bigquery/docs/reference/standard-sql/security_functions)
* [ Statistical aggregate functions  ](/bigquery/docs/reference/standard-sql/statistical_aggregate_functions)
* [ String functions  ](/bigquery/docs/reference/standard-sql/string_functions)
* [ Table functions (built-in)  ](/bigquery/docs/reference/standard-sql/table-functions-built-in)
* [ Text analysis functions  ](/bigquery/docs/reference/standard-sql/text-analysis-functions)
* [ Time functions  ](/bigquery/docs/reference/standard-sql/time_functions)
* [ Time series functions  ](/bigquery/docs/reference/standard-sql/time-series-functions)
* [ Timestamp functions  ](/bigquery/docs/reference/standard-sql/timestamp_functions)
* [ Utility functions  ](/bigquery/docs/reference/standard-sql/utility-functions)

* Statements

* [ Data definition language (DDL)  ](/bigquery/docs/reference/standard-sql/data-definition-language)
* [ Data manipulation language (DML)  ](/bigquery/docs/reference/standard-sql/dml-syntax)
* [ Data control language (DCL)  ](/bigquery/docs/reference/standard-sql/data-control-language)
* [ Procedural language  ](/bigquery/docs/reference/standard-sql/procedural-language)
* [ Export and load statements  ](/bigquery/docs/reference/standard-sql/other-statements)
* [ Debugging statements  ](/bigquery/docs/reference/standard-sql/debugging-statements)

* BigQuery ML SQL reference

* Creating and training models

* [ CREATE MODEL statement overview  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create)
* Regression and classification

* [ Linear and logistic regression  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-glm)
* [ Boosted trees  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-boosted-tree)
* [ Random forest  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-random-forest)
* [ Deep neural networks  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-dnn-models)
* [ Wide & Deep networks  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-wnd-models)
* [ AutoML models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-automl)

* Clustering

* [ K-means  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-kmeans)

* Dimensionality reduction

* [ Principal component analysis  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-pca)
* [ Autoencoder  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-autoencoder)

* Collaborative filtering

* [ Matrix factorization  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-matrix-factorization)

* Time series forecasting

* [ Univariate forecasting with ARIMA_PLUS models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-time-series)
* [ Multivariate forecasting with ARIMA_PLUS_XREG models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-multivariate-time-series)

* Importing models

* [ Open Neural Network Exchange (ONNX)  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-onnx)
* [ TensorFlow  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-tensorflow)
* [ TensorFlow Lite  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-tflite)
* [ XGBoost  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-xgboost)

* Remote models

* [ LLMs  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-remote-model)
* [ Cloud AI services  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-remote-model-service)
* [ Vertex AI hosted models  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-remote-model-https)

* Feature engineering

* [ Feature transformation  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-transform)
* [ ML.TRANSFORM  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-transform)
* [ ML.FEATURE_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-feature)
* General functions

* [ ML.IMPUTER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-imputer)

* Numerical functions

* [ ML.BUCKETIZE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-bucketize)
* [ ML.MAX_ABS_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-max-abs-scaler)
* [ ML.MIN_MAX_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-min-max-scaler)
* [ ML.NORMALIZER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-normalizer)
* [ ML.POLYNOMIAL_EXPAND  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-polynomial-expand)
* [ ML.QUANTILE_BUCKETIZE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-quantile-bucketize)
* [ ML.ROBUST_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-robust-scaler)
* [ ML.STANDARD_SCALER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-standard-scaler)

* Categorical functions

* [ ML.FEATURE_CROSS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-feature-cross)
* [ ML.HASH_BUCKETIZE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-hash-bucketize)
* [ ML.LABEL_ENCODER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-label-encoder)
* [ ML.MULTI_HOT_ENCODER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-multi-hot-encoder)
* [ ML.ONE_HOT_ENCODER  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-one-hot-encoder)

* Text functions

* [ ML.NGRAMS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-ngrams)
* [ ML.BAG_OF_WORDS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-bag-of-words)
* [ ML.TF_IDF  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-tf-idf)

* Image functions

* [ ML.CONVERT_COLOR_SPACE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-convert-color-space)
* [ ML.CONVERT_IMAGE_TYPE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-convert-image-type)
* [ ML.DECODE_IMAGE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-decode-image)
* [ ML.RESIZE_IMAGE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-resize-image)

* Point-in-time lookup functions

* [ ML.FEATURES_AT_TIME  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-feature-time)
* [ ML.ENTITY_FEATURES_AT_TIME  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-entity-feature-time)

* Hyperparameter tuning functions

* [ ML.TRIAL_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-trial-info)

* Evaluation functions

* [ ML.EVALUATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-evaluate)
* [ ML.ROC_CURVE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-roc)
* [ ML.CONFUSION_MATRIX  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-confusion)
* [ ML.ARIMA_EVALUATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-arima-evaluate)
* [ ML.TRAINING_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-train)
* [ ML.RECONSTRUCTION_LOSS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-reconstruction-loss)
* [ ML.HOLIDAY_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-holiday-info)

* Inference functions

* [ ML.PREDICT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-predict)
* [ ML.FORECAST  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-forecast)
* [ ML.RECOMMEND  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-recommend)
* [ ML.DETECT_ANOMALIES  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-detect-anomalies)

* Generative AI functions

* [ ML.GENERATE_TEXT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-text)
* [ ML.GENERATE_EMBEDDING  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-embedding)

* AI functions

* [ ML.UNDERSTAND_TEXT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-understand-text)
* [ ML.TRANSLATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-translate)
* [ ML.PROCESS_DOCUMENT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-process-document)
* [ ML.TRANSCRIBE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-transcribe)
* [ ML.ANNOTATE_IMAGE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-annotate-image)

* AI Explanation functions

* [ ML.EXPLAIN_PREDICT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-explain-predict)
* [ ML.EXPLAIN_FORECAST  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-explain-forecast)
* [ ML.GLOBAL_EXPLAIN  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-global-explain)
* [ ML.FEATURE_IMPORTANCE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-importance)
* [ ML.ADVANCED_WEIGHTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-advanced-weights)

* Model weights functions

* [ ML.WEIGHTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-weights)
* [ ML.CENTROIDS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-centroids)
* [ ML.PRINCIPAL_COMPONENTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-principal-components)
* [ ML.PRINCIPAL_COMPONENT_INFO  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-principal-component-info)
* [ ML.ARIMA_COEFFICIENTS  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-arima-coefficients)

* Model monitoring functions

* [ ML.DESCRIBE_DATA  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-describe-data)
* [ ML.VALIDATE_DATA_DRIFT  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-validate-data-drift)
* [ ML.VALIDATE_DATA_SKEW  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-validate-data-skew)
* [ ML.TFDV_DESCRIBE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-tfdv-describe)
* [ ML.TFDV_VALIDATE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-tfdv-validate)

* Math utility functions

* [ ML.DISTANCE  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-distance)
* [ ML.LP_NORM  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-lp-norm)

* Model management statements

* [ EXPORT MODEL statement  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-export-model)
* [ ALTER MODEL statement  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-alter-model)
* [ DROP MODEL statement  ](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-drop-model)

* INFORMATION SCHEMA views

* [ Introduction  ](/bigquery/docs/information-schema-intro)
* Access control

* [ OBJECT_PRIVILEGES view  ](/bigquery/docs/information-schema-object-privileges)

* BI Engine

* [ BI_CAPACITIES  ](/bigquery/docs/information-schema-bi-capacities)
* [ BI_CAPACITY_CHANGES  ](/bigquery/docs/information-schema-bi-capacity-changes)

* Configurations

* [ EFFECTIVE_PROJECT_OPTIONS view  ](/bigquery/docs/information-schema-effective-project-options)
* [ ORGANIZATION_OPTIONS view  ](/bigquery/docs/information-schema-organization-options)
* [ ORGANIZATION_OPTIONS_CHANGES view  ](/bigquery/docs/information-schema-organization-options-changes)
* [ PROJECT_OPTIONS view  ](/bigquery/docs/information-schema-project-options)
* [ PROJECT_OPTIONS_CHANGES view  ](/bigquery/docs/information-schema-project-options-changes)

* Datasets

* [ SCHEMATA view  ](/bigquery/docs/information-schema-datasets-schemata)
* [ SCHEMATA_LINKS view  ](/bigquery/docs/information-schema-datasets-schemata-links)
* [ SCHEMATA_OPTIONS view  ](/bigquery/docs/information-schema-datasets-schemata-options)
* [ SHARED_DATASET_USAGE view  ](/bigquery/docs/information-schema-shared-dataset-usage)
* [ SCHEMATA_REPLICAS view  ](/bigquery/docs/information-schema-schemata-replicas)

* Jobs

* [ JOBS view  ](/bigquery/docs/information-schema-jobs)
* [ JOBS_BY_USER view  ](/bigquery/docs/information-schema-jobs-by-user)
* [ JOBS_BY_FOLDER view  ](/bigquery/docs/information-schema-jobs-by-folder)
* [ JOBS_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-jobs-by-organization)

* Jobs by timeslice

* [ JOBS_TIMELINE view  ](/bigquery/docs/information-schema-jobs-timeline)
* [ JOBS_TIMELINE_BY_USER view  ](/bigquery/docs/information-schema-jobs-timeline-by-user)
* [ JOBS_TIMELINE_BY_FOLDER view  ](/bigquery/docs/information-schema-jobs-timeline-by-folder)
* [ JOBS_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-jobs-timeline-by-organization)

* Reservations

* [ ASSIGNMENTS view  ](/bigquery/docs/information-schema-assignments)
* [ ASSIGNMENT_CHANGES view  ](/bigquery/docs/information-schema-assignments-changes)
* [ CAPACITY_COMMITMENTS view  ](/bigquery/docs/information-schema-capacity-commitments)
* [ CAPACITY_COMMITMENT_CHANGES view  ](/bigquery/docs/information-schema-capacity-commitment-changes)
* [ RESERVATIONS view  ](/bigquery/docs/information-schema-reservations)
* [ RESERVATION_CHANGES view  ](/bigquery/docs/information-schema-reservation-changes)
* [ RESERVATIONS_TIMELINE view  ](/bigquery/docs/information-schema-reservation-timeline)

* Routines

* [ PARAMETERS view  ](/bigquery/docs/information-schema-parameters)
* [ ROUTINES view  ](/bigquery/docs/information-schema-routines)
* [ ROUTINE_OPTIONS view  ](/bigquery/docs/information-schema-routine-options)

* Search indexes

* [ SEARCH_INDEXES view  ](/bigquery/docs/information-schema-indexes)
* [ SEARCH_INDEX_COLUMNS view  ](/bigquery/docs/information-schema-index-columns)

* Sessions

* [ SESSIONS_BY_PROJECT view  ](/bigquery/docs/information-schema-sessions-by-project)
* [ SESSIONS_BY_USER view  ](/bigquery/docs/information-schema-sessions-by-user)

* Streaming

* [ STREAMING_TIMELINE view  ](/bigquery/docs/information-schema-streaming)
* [ STREAMING_TIMELINE_BY_FOLDER view  ](/bigquery/docs/information-schema-streaming-by-folder)
* [ STREAMING_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-streaming-by-organization)

* Tables

* [ COLUMNS view  ](/bigquery/docs/information-schema-columns)
* [ COLUMN_FIELD_PATHS view  ](/bigquery/docs/information-schema-column-field-paths)
* [ CONSTRAINT_COLUMN_USAGE view  ](/bigquery/docs/information-schema-constraint-column-usage)
* [ KEY_COLUMN_USAGE view  ](/bigquery/docs/information-schema-key-column-usage)
* [ PARTITIONS view  ](/bigquery/docs/information-schema-partitions)
* [ TABLES view  ](/bigquery/docs/information-schema-tables)
* [ TABLE_OPTIONS view  ](/bigquery/docs/information-schema-table-options)
* [ TABLE_CONSTRAINTS view  ](/bigquery/docs/information-schema-table-constraints)
* [ TABLE_SNAPSHOTS view  ](/bigquery/docs/information-schema-snapshots)
* [ TABLE_STORAGE view  ](/bigquery/docs/information-schema-table-storage)
* [ TABLE_STORAGE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-table-storage-by-organization)
* [ TABLE_STORAGE_USAGE_TIMELINE view  ](/bigquery/docs/information-schema-table-storage-usage)
* [ TABLE_STORAGE_USAGE_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-table-storage-usage-by-organization)

* Vector indexes

* [ VECTOR_INDEXES view  ](/bigquery/docs/information-schema-vector-indexes)
* [ VECTOR_INDEX_COLUMNS view  ](/bigquery/docs/information-schema-vector-index-columns)
* [ VECTOR_INDEX_OPTIONS view  ](/bigquery/docs/information-schema-vector-index-options)

* Views

* [ VIEWS view  ](/bigquery/docs/information-schema-views)
* [ MATERIALIZED_VIEWS view  ](/bigquery/docs/information-schema-materialized-views)

* Write API

* [ WRITE_API_TIMELINE view  ](/bigquery/docs/information-schema-write-api)
* [ WRITE_API_TIMELINE_BY_FOLDER view  ](/bigquery/docs/information-schema-write-api-by-folder)
* [ WRITE_API_TIMELINE_BY_ORGANIZATION view  ](/bigquery/docs/information-schema-write-api-by-organization)

* Legacy SQL reference

* [ Migrating to GoogleSQL  ](/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql)
* [ Functions and operators  ](/bigquery/docs/reference/legacy-sql)
* [ Data types  ](/bigquery/docs/data-types)
* [ Querying nested and repeated fields  ](/bigquery/docs/legacy-nested-repeated)
* [ User-defined functions  ](/bigquery/docs/user-defined-functions-legacy)
* [ Table decorators  ](/bigquery/docs/table-decorators)

* BigQuery DataFrames Python API

* [ BigQuery DataFrames  ](/bigquery/docs/reference/bigquery-dataframes)
* BigQuery APIs

* BigQuery API reference

* [ BigQuery APIs and libraries overview  ](/bigquery/docs/reference/libraries-overview)
* BigQuery API reference

* [ BigQuery client libraries  ](/bigquery/docs/reference/libraries)
* [ BigQuery REST API  ](/bigquery/docs/reference/rest)
* REST reference (v2)

* REST Resources

* datasets

* [ Overview  ](/bigquery/docs/reference/rest/v2/datasets)
* [ delete  ](/bigquery/docs/reference/rest/v2/datasets/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/datasets/get)
* [ insert  ](/bigquery/docs/reference/rest/v2/datasets/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/datasets/list)
* [ patch  ](/bigquery/docs/reference/rest/v2/datasets/patch)
* [ undelete  ](/bigquery/docs/reference/rest/v2/datasets/undelete)
* [ update  ](/bigquery/docs/reference/rest/v2/datasets/update)

* jobs

* [ Overview  ](/bigquery/docs/reference/rest/v2/jobs)
* [ cancel  ](/bigquery/docs/reference/rest/v2/jobs/cancel)
* [ delete  ](/bigquery/docs/reference/rest/v2/jobs/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/jobs/get)
* [ getQueryResults  ](/bigquery/docs/reference/rest/v2/jobs/getQueryResults)
* [ insert  ](/bigquery/docs/reference/rest/v2/jobs/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/jobs/list)
* [ query  ](/bigquery/docs/reference/rest/v2/jobs/query)

* models

* [ Overview  ](/bigquery/docs/reference/rest/v2/models)
* [ delete  ](/bigquery/docs/reference/rest/v2/models/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/models/get)
* [ list  ](/bigquery/docs/reference/rest/v2/models/list)
* [ patch  ](/bigquery/docs/reference/rest/v2/models/patch)

* projects

* [ Overview  ](/bigquery/docs/reference/rest/v2/projects)
* [ getServiceAccount  ](/bigquery/docs/reference/rest/v2/projects/getServiceAccount)
* [ list  ](/bigquery/docs/reference/rest/v2/projects/list)

* routines

* [ Overview  ](/bigquery/docs/reference/rest/v2/routines)
* [ delete  ](/bigquery/docs/reference/rest/v2/routines/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/routines/get)
* [ insert  ](/bigquery/docs/reference/rest/v2/routines/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/routines/list)
* [ update  ](/bigquery/docs/reference/rest/v2/routines/update)

* rowAccessPolicies

* [ Overview  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies)
* [ getIamPolicy  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies/getIamPolicy)
* [ list  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies/list)
* [ testIamPermissions  ](/bigquery/docs/reference/rest/v2/rowAccessPolicies/testIamPermissions)

* tabledata

* [ Overview  ](/bigquery/docs/reference/rest/v2/tabledata)
* [ insertAll  ](/bigquery/docs/reference/rest/v2/tabledata/insertAll)
* [ list  ](/bigquery/docs/reference/rest/v2/tabledata/list)

* tables

* [ Overview  ](/bigquery/docs/reference/rest/v2/tables)
* [ delete  ](/bigquery/docs/reference/rest/v2/tables/delete)
* [ get  ](/bigquery/docs/reference/rest/v2/tables/get)
* [ getIamPolicy  ](/bigquery/docs/reference/rest/v2/tables/getIamPolicy)
* [ insert  ](/bigquery/docs/reference/rest/v2/tables/insert)
* [ list  ](/bigquery/docs/reference/rest/v2/tables/list)
* [ patch  ](/bigquery/docs/reference/rest/v2/tables/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/rest/v2/tables/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/rest/v2/tables/testIamPermissions)
* [ update  ](/bigquery/docs/reference/rest/v2/tables/update)

* Types

* [ ConnectionProperty  ](/bigquery/docs/reference/rest/v2/ConnectionProperty)
* [ DataFormatOptions  ](/bigquery/docs/reference/rest/v2/DataFormatOptions)
* [ DatasetAccessEntry  ](/bigquery/docs/reference/rest/v2/DatasetAccessEntry)
* [ DmlStats  ](/bigquery/docs/reference/rest/v2/DmlStats)
* [ EncryptionConfiguration  ](/bigquery/docs/reference/rest/v2/EncryptionConfiguration)
* [ GetPolicyOptions  ](/bigquery/docs/reference/rest/v2/GetPolicyOptions)
* [ Job  ](/bigquery/docs/reference/rest/v2/Job)
* [ JobReference  ](/bigquery/docs/reference/rest/v2/JobReference)
* [ Policy  ](/bigquery/docs/reference/rest/v2/Policy)
* [ ProjectReference  ](/bigquery/docs/reference/rest/v2/ProjectReference)
* [ QueryParameter  ](/bigquery/docs/reference/rest/v2/QueryParameter)
* [ RoundingMode  ](/bigquery/docs/reference/rest/v2/RoundingMode)
* [ RowAccessPolicyReference  ](/bigquery/docs/reference/rest/v2/RowAccessPolicyReference)
* [ SessionInfo  ](/bigquery/docs/reference/rest/v2/SessionInfo)
* [ StandardSqlDataType  ](/bigquery/docs/reference/rest/v2/StandardSqlDataType)
* [ StandardSqlField  ](/bigquery/docs/reference/rest/v2/StandardSqlField)
* [ TableReference  ](/bigquery/docs/reference/rest/v2/TableReference)
* [ TargetType  ](/bigquery/docs/reference/rest/v2/TargetType)
* [ TestIamPermissionsResponse  ](/bigquery/docs/reference/rest/v2/TestIamPermissionsResponse)

* [ API uploads  ](/bigquery/docs/reference/api-uploads)

* BigQuery Data Policy API reference

* [ Data Policy REST reference  ](/bigquery/docs/reference/bigquerydatapolicy/rest)
* v1

* REST Resources

* projects.locations.dataPolicies

* [ Overview  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies)
* [ create  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/create)
* [ delete  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/delete)
* [ get  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/list)
* [ patch  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/patch)
* [ rename  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/rename)
* [ setIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1/projects.locations.dataPolicies/testIamPermissions)

* v1beta1

* REST Resources

* projects.locations.dataPolicies

* [ Overview  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies)
* [ create  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/create)
* [ delete  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/delete)
* [ get  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/list)
* [ patch  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigquerydatapolicy/rest/v1beta1/projects.locations.dataPolicies/testIamPermissions)

* BigQuery Connections API reference

* [ BigQuery Connection client libraries  ](/bigquery/docs/reference/bigqueryconnection)
* [ BigQuery Connection REST API  ](/bigquery/docs/reference/bigqueryconnection/rest)
* RPC reference

* [ Overview  ](/bigquery/docs/reference/bigqueryconnection/rpc)
* [ google.cloud.bigquery.connection.v1  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.cloud.bigquery.connection.v1)
* [ google.cloud.bigquery.connection.v1beta1  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.cloud.bigquery.connection.v1beta1)
* [ google.iam.v1  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.iam.v1)
* [ google.type  ](/bigquery/docs/reference/bigqueryconnection/rpc/google.type)

* REST reference (v1)

* REST Resources

* projects.locations.connections

* [ Overview  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections)
* [ create  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/create)
* [ delete  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/delete)
* [ get  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/list)
* [ patch  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigqueryconnection/rest/v1/projects.locations.connections/testIamPermissions)

* REST reference (v1beta1)

* REST Resources

* projects.locations.connections

* [ Overview  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections)
* [ create  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/create)
* [ delete  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/delete)
* [ get  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/get)
* [ getIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/getIamPolicy)
* [ list  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/list)
* [ patch  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/testIamPermissions)
* [ updateCredential  ](/bigquery/docs/reference/bigqueryconnection/rest/v1beta1/projects.locations.connections/updateCredential)

* BigQuery Migration API reference

* [ BigQuery Migration client libraries  ](/bigquery/docs/reference/migration)
* [ BigQuery Migration REST API  ](/bigquery/docs/reference/migration/rest)
* REST reference (v2)

* REST Resources

* projects.locations.workflows

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows)
* [ create  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/create)
* [ delete  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/delete)
* [ get  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/list)
* [ start  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows/start)

* projects.locations.workflows.subtasks

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows.subtasks)
* [ get  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows.subtasks/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2/projects.locations.workflows.subtasks/list)

* Types

* [ Distribution  ](/bigquery/docs/reference/migration/rest/Shared.Types/Distribution)
* [ ErrorInfo  ](/bigquery/docs/reference/migration/rest/Shared.Types/ErrorInfo)
* [ MetricKind  ](/bigquery/docs/reference/migration/rest/Shared.Types/MetricKind)
* [ ResourceInfo  ](/bigquery/docs/reference/migration/rest/Shared.Types/ResourceInfo)
* [ ValueType  ](/bigquery/docs/reference/migration/rest/Shared.Types/ValueType)

* REST reference (v2alpha)

* REST Resources

* projects.locations.workflows

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows)
* [ create  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/create)
* [ delete  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/delete)
* [ get  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/list)
* [ start  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows/start)

* projects.locations.workflows.subtasks

* [ Overview  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows.subtasks)
* [ get  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows.subtasks/get)
* [ list  ](/bigquery/docs/reference/migration/rest/v2alpha/projects.locations.workflows.subtasks/list)

* RPC reference

* [ Overview  ](/bigquery/docs/reference/migration/rpc)
* [ google.api  ](/bigquery/docs/reference/migration/rpc/google.api)
* [ google.cloud.bigquery.migration.tasks.assessment.v2alpha  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.tasks.assessment.v2alpha)
* [ google.cloud.bigquery.migration.tasks.translation.v2alpha  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.tasks.translation.v2alpha)
* [ google.cloud.bigquery.migration.v2  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.v2)
* [ google.cloud.bigquery.migration.v2alpha  ](/bigquery/docs/reference/migration/rpc/google.cloud.bigquery.migration.v2alpha)
* [ google.rpc  ](/bigquery/docs/reference/migration/rpc/google.rpc)

* BigQuery Storage API reference

* [ Storage API client libraries  ](/bigquery/docs/reference/storage/libraries)
* RPC reference

* [ Overview  ](/bigquery/docs/reference/storage/rpc)
* [ google.cloud.bigquery.storage.v1  ](/bigquery/docs/reference/storage/rpc/google.cloud.bigquery.storage.v1)
* [ google.cloud.bigquery.storage.v1beta1  ](/bigquery/docs/reference/storage/rpc/google.cloud.bigquery.storage.v1beta1)
* [ google.cloud.bigquery.storage.v1beta2  ](/bigquery/docs/reference/storage/rpc/google.cloud.bigquery.storage.v1beta2)
* [ google.rpc  ](/bigquery/docs/reference/storage/rpc/google.rpc)

* BigQuery Reservation API reference

* [ BigQuery Reservation API client libraries  ](/bigquery/docs/reference/reservations)
* [ BigQuery Reservation REST API  ](/bigquery/docs/reference/reservations/rest)
* RPC reference

* [ Overview  ](/bigquery/docs/reference/reservations/rpc)
* [ google.cloud.bigquery.reservation.v1  ](/bigquery/docs/reference/reservations/rpc/google.cloud.bigquery.reservation.v1)
* [ google.rpc  ](/bigquery/docs/reference/reservations/rpc/google.rpc)

* REST reference (v1)

* REST Resources

* projects.locations

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations)
* [ getBiReservation  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/getBiReservation)
* [ searchAllAssignments  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/searchAllAssignments)
* [ searchAssignments  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/searchAssignments)
* [ updateBiReservation  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations/updateBiReservation)

* projects.locations.capacityCommitments

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments)
* [ create  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/create)
* [ delete  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/delete)
* [ get  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/get)
* [ list  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/list)
* [ merge  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/merge)
* [ patch  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/patch)
* [ split  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments/split)

* projects.locations.reservations

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations)
* [ create  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/create)
* [ delete  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/delete)
* [ get  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/get)
* [ list  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/list)
* [ patch  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/patch)

* projects.locations.reservations.assignments

* [ Overview  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments)
* [ create  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/create)
* [ delete  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/delete)
* [ list  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/list)
* [ move  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/move)
* [ patch  ](/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations.assignments/patch)

* Types

* [ BiReservation  ](/bigquery/docs/reference/reservations/rest/v1/BiReservation)
* [ Edition  ](/bigquery/docs/reference/reservations/rest/v1/Edition)

* BigQuery Analytics Hub API reference

* [ Analytics Hub client libraries  ](/bigquery/docs/reference/analytics-hub)
* [ Analytics Hub REST API  ](/bigquery/docs/reference/analytics-hub/rest)
* REST reference (v1)

* REST Resources

* organizations.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/organizations.locations.dataExchanges)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/organizations.locations.dataExchanges/list)

* projects.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/list)
* [ listSubscriptions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/listSubscriptions)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/setIamPolicy)
* [ subscribe  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/subscribe)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges/testIamPermissions)

* projects.locations.dataExchanges.listings

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/list)
* [ listSubscriptions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/listSubscriptions)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/setIamPolicy)
* [ subscribe  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/subscribe)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings/testIamPermissions)

* projects.locations.subscriptions

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/get)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/list)
* [ refresh  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/refresh)
* [ revoke  ](/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.subscriptions/revoke)

* Types

* [ ListSharedResourceSubscriptionsResponse  ](/bigquery/docs/reference/analytics-hub/rest/v1/ListSharedResourceSubscriptionsResponse)
* [ Operation  ](/bigquery/docs/reference/analytics-hub/rest/v1/Operation)

* REST reference (v1beta1)

* REST Resources

* organizations.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/organizations.locations.dataExchanges)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/organizations.locations.dataExchanges/list)

* projects.locations.dataExchanges

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/list)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/setIamPolicy)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges/testIamPermissions)

* projects.locations.dataExchanges.listings

* [ Overview  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings)
* [ create  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/create)
* [ delete  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/delete)
* [ get  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/get)
* [ getIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/getIamPolicy)
* [ list  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/list)
* [ patch  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/patch)
* [ setIamPolicy  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/setIamPolicy)
* [ subscribe  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/subscribe)
* [ testIamPermissions  ](/bigquery/docs/reference/analytics-hub/rest/v1beta1/projects.locations.dataExchanges.listings/testIamPermissions)

* BigQuery Data Transfer Service API reference

* [ BigQuery Data Transfer Service client libraries  ](/bigquery/docs/reference/datatransfer/libraries)
* [ BigQuery Data Transfer Service REST API  ](/bigquery/docs/reference/datatransfer/rest)
* REST reference

* REST Resources

* projects

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects)
* [ enrollDataSources  ](/bigquery/docs/reference/datatransfer/rest/v1/projects/enrollDataSources)

* projects.dataSources

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources)
* [ checkValidCreds  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources/checkValidCreds)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.dataSources/list)

* projects.locations

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations)
* [ enrollDataSources  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/enrollDataSources)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/list)
* [ unenrollDataSources  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations/unenrollDataSources)

* projects.locations.dataSources

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources)
* [ checkValidCreds  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/checkValidCreds)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list)

* projects.locations.transferConfigs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs)
* [ create  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/create)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/list)
* [ patch  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/patch)
* [ scheduleRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/scheduleRuns)
* [ startManualRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs/startManualRuns)

* projects.locations.transferConfigs.runs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs/list)

* projects.locations.transferConfigs.runs.transferLogs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs.transferLogs)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.locations.transferConfigs.runs.transferLogs/list)

* projects.transferConfigs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs)
* [ create  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/create)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/list)
* [ patch  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/patch)
* [ scheduleRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/scheduleRuns)
* [ startManualRuns  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs/startManualRuns)

* projects.transferConfigs.runs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs)
* [ delete  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs/delete)
* [ get  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs/get)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs/list)

* projects.transferConfigs.runs.transferLogs

* [ Overview  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs.transferLogs)
* [ list  ](/bigquery/docs/reference/datatransfer/rest/v1/projects.transferConfigs.runs.transferLogs/list)

* Types

* [ CheckValidCredsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/CheckValidCredsResponse)
* [ Code  ](/bigquery/docs/reference/datatransfer/rest/v1/Code)
* [ EmailPreferences  ](/bigquery/docs/reference/datatransfer/rest/v1/EmailPreferences)
* [ ListDataSourcesResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListDataSourcesResponse)
* [ ListTransferConfigsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListTransferConfigsResponse)
* [ ListTransferLogsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListTransferLogsResponse)
* [ ListTransferRunsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ListTransferRunsResponse)
* [ RunAttempt  ](/bigquery/docs/reference/datatransfer/rest/v1/RunAttempt)
* [ ScheduleTransferRunsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/ScheduleTransferRunsResponse)
* [ StartManualTransferRunsResponse  ](/bigquery/docs/reference/datatransfer/rest/v1/StartManualTransferRunsResponse)
* [ TimeRange  ](/bigquery/docs/reference/datatransfer/rest/v1/TimeRange)
* [ TransferState  ](/bigquery/docs/reference/datatransfer/rest/v1/TransferState)

* RPC reference

* [ Overview  ](/bigquery/docs/reference/datatransfer/rpc)
* [ google.cloud.bigquery.datatransfer.v1  ](/bigquery/docs/reference/datatransfer/rpc/google.cloud.bigquery.datatransfer.v1)
* [ google.cloud.location  ](/bigquery/docs/reference/datatransfer/rpc/google.cloud.location)
* [ google.rpc  ](/bigquery/docs/reference/datatransfer/rpc/google.rpc)

* BigQuery BigLake API reference

* [ BigLake REST API  ](/bigquery/docs/reference/biglake/rest)
* REST reference (v1)

* REST Resources

* projects.locations.catalogs

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs/list)

* projects.locations.catalogs.databases

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases/patch)

* projects.locations.catalogs.databases.tables

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/patch)
* [ rename  ](/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables/rename)

* REST reference (v1alpha1)

* REST Resources

* projects.locations.catalogs

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs/list)

* projects.locations.catalogs.databases

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases/patch)

* projects.locations.catalogs.databases.locks

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks)
* [ check  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/check)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/delete)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.locks/list)

* projects.locations.catalogs.databases.tables

* [ Overview  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables)
* [ create  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/create)
* [ delete  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/delete)
* [ get  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/get)
* [ list  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/list)
* [ patch  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/patch)
* [ rename  ](/bigquery/docs/reference/biglake/rest/v1alpha1/projects.locations.catalogs.databases.tables/rename)

* BigQuery routines

* [ System procedures reference  ](/bigquery/docs/reference/system-procedures)
* [ System variables reference  ](/bigquery/docs/reference/system-variables)
* BigQuery audit logging

* BigQuery audit logging reference

* [ Overview  ](/bigquery/docs/reference/auditlogs)
* Types

* [ AuditData  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/AuditData)
* [ AuditLogConfig.LogType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/AuditLogConfig.LogType)
* [ BigQueryAuditMetadata  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata)
* [ BigQueryAuditMetadata.AccessChange.Action  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.AccessChange.Action)
* [ BigQueryAuditMetadata.ConnectionChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ConnectionChange.Reason)
* [ BigQueryAuditMetadata.CreateDisposition  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.CreateDisposition)
* [ BigQueryAuditMetadata.DatasetChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.DatasetChange.Reason)
* [ BigQueryAuditMetadata.DatasetCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.DatasetCreation.Reason)
* [ BigQueryAuditMetadata.DatasetDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.DatasetDeletion.Reason)
* [ BigQueryAuditMetadata.JobConfig.Query.Priority  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobConfig.Query.Priority)
* [ BigQueryAuditMetadata.JobConfig.Type  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobConfig.Type)
* [ BigQueryAuditMetadata.JobDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobDeletion.Reason)
* [ BigQueryAuditMetadata.JobInsertion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobInsertion.Reason)
* [ BigQueryAuditMetadata.JobState  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.JobState)
* [ BigQueryAuditMetadata.ModelCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelCreation.Reason)
* [ BigQueryAuditMetadata.ModelDataChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelDataChange.Reason)
* [ BigQueryAuditMetadata.ModelDataRead.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelDataRead.Reason)
* [ BigQueryAuditMetadata.ModelDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelDeletion.Reason)
* [ BigQueryAuditMetadata.ModelMetadataChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.ModelMetadataChange.Reason)
* [ BigQueryAuditMetadata.OperationType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.OperationType)
* [ BigQueryAuditMetadata.QueryStatementType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.QueryStatementType)
* [ BigQueryAuditMetadata.RoutineChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.RoutineChange.Reason)
* [ BigQueryAuditMetadata.RoutineCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.RoutineCreation.Reason)
* [ BigQueryAuditMetadata.RoutineDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.RoutineDeletion.Reason)
* [ BigQueryAuditMetadata.SearchIndexCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.SearchIndexCreation.Reason)
* [ BigQueryAuditMetadata.SearchIndexDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.SearchIndexDeletion.Reason)
* [ BigQueryAuditMetadata.TableChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableChange.Reason)
* [ BigQueryAuditMetadata.TableCreation.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableCreation.Reason)
* [ BigQueryAuditMetadata.TableDataChange.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableDataChange.Reason)
* [ BigQueryAuditMetadata.TableDataRead.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableDataRead.Reason)
* [ BigQueryAuditMetadata.TableDeletion.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.TableDeletion.Reason)
* [ BigQueryAuditMetadata.UnlinkDataset.Reason  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.UnlinkDataset.Reason)
* [ BigQueryAuditMetadata.WriteDisposition  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BigQueryAuditMetadata.WriteDisposition)
* [ BindingDelta.Action  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/BindingDelta.Action)
* [ DatasetAccessEntry  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/DatasetAccessEntry)
* [ DatasetAccessEntry.TargetType  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/DatasetAccessEntry.TargetType)
* [ Expr  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/Expr)
* [ JoinRestrictionPolicy.JoinCondition  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/JoinRestrictionPolicy.JoinCondition)
* [ Policy  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/Policy)
* [ RoutineReference  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/RoutineReference)
* [ Status  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/Status)
* [ TableReference  ](/bigquery/docs/reference/auditlogs/rest/Shared.Types/TableReference)

* [ AI solutions, generative AI, and ML  ](/docs/ai-ml)
* [ Application development  ](/docs/application-development)
* [ Application hosting  ](/docs/application-hosting)
* [ Compute  ](/docs/compute-area)
* [ Data analytics and pipelines  ](/docs/data)
* [ Databases  ](/docs/databases)
* [ Distributed, hybrid, and multicloud  ](/docs/dhm-cloud)
* [ Industry solutions  ](/docs/industry)
* [ Networking  ](/docs/networking)
* [ Observability and monitoring  ](/docs/observability)
* [ Security  ](/docs/security)
* [ Storage  ](/docs/storage)

* [ Access and resources management  ](/docs/access-resources)
* [ Cloud SDK, languages, frameworks, and tools  ](/docs/devtools)
* [ Costs and usage management  ](/docs/costs-usage)
* [ Infrastructure as code  ](/docs/iac)
* [ Migration  ](/docs/migration)

* [ Google Cloud Home  ](/)
* [ Free Trial and Free Tier  ](/free)
* [ Architecture Center  ](/architecture)
* [ Blog  ](https://cloud.google.com/blog)
* [ Contact Sales  ](/contact)
* [ Google Cloud Developer Center  ](/developers)
* [ Google Developer Center  ](https://developers.google.com/)
* [ Google Cloud Marketplace (in console)  ](https://console.cloud.google.com/marketplace)
* [ Google Cloud Marketplace Documentation  ](/marketplace/docs)
* [ Google Cloud Skills Boost  ](https://www.cloudskillsboost.google/paths)
* [ Google Cloud Solution Center  ](/solutions)
* [ Google Cloud Support  ](/support-hub)
* [ Google Cloud Tech Youtube Channel  ](https://www.youtube.com/@googlecloudtech)

* [ Home ](https://cloud.google.com/)
* [ BigQuery ](https://cloud.google.com/bigquery)
* [ Documentation ](https://cloud.google.com/bigquery/docs)
* [ Reference ](https://cloud.google.com/bigquery/quotas)

Send feedback

#  String functions

Stay organized with collections  Save and categorize content based on your
preferences.

GoogleSQL for BigQuery supports string functions. These string functions work
on two different values: ` STRING ` and ` BYTES ` data types. ` STRING `
values must be well-formed UTF-8.

Functions that return position values, such as  STRPOS  , encode those
positions as ` INT64 ` . The value ` 1 ` refers to the first character (or
byte), ` 2 ` refers to the second, and so on. The value ` 0 ` indicates an
invalid position. When working on ` STRING ` types, the returned positions
refer to character positions.

All string comparisons are done byte-by-byte, without regard to Unicode
canonical equivalence.

###  Function list

Name  |  Summary
---|---
` ASCII ` |  Gets the ASCII code for the first character or byte in a ` STRING
` or ` BYTES ` value.
` BYTE_LENGTH ` |  Gets the number of ` BYTES ` in a ` STRING ` or ` BYTES `
value.
` CHAR_LENGTH ` |  Gets the number of characters in a ` STRING ` value.
` CHARACTER_LENGTH ` |  Synonym for ` CHAR_LENGTH ` .
` CHR ` |  Converts a Unicode code point to a character.
` CODE_POINTS_TO_BYTES ` |  Converts an array of extended ASCII code points to
a ` BYTES ` value.
` CODE_POINTS_TO_STRING ` |  Converts an array of extended ASCII code points
to a ` STRING ` value.
` COLLATE ` |  Combines a ` STRING ` value and a collation specification into
a collation specification-supported ` STRING ` value.
` CONCAT ` |  Concatenates one or more ` STRING ` or ` BYTES ` values into a
single result.
` CONTAINS_SUBSTR ` |  Performs a normalized, case-insensitive search to see
if a value exists as a substring in an expression.
` EDIT_DISTANCE ` |  Computes the Levenshtein distance between two ` STRING `
or ` BYTES ` values.
` ENDS_WITH ` |  Checks if a ` STRING ` or ` BYTES ` value is the suffix of
another value.
` FORMAT ` |  Formats data and produces the results as a ` STRING ` value.
` FROM_BASE32 ` |  Converts a base32-encoded ` STRING ` value into a ` BYTES `
value.
` FROM_BASE64 ` |  Converts a base64-encoded ` STRING ` value into a ` BYTES `
value.
` FROM_HEX ` |  Converts a hexadecimal-encoded ` STRING ` value into a ` BYTES
` value.
` INITCAP ` |  Formats a ` STRING ` as proper case, which means that the first
character in each word is uppercase and all other characters are lowercase.
` INSTR ` |  Finds the position of a subvalue inside another value, optionally
starting the search at a given offset or occurrence.
` LEFT ` |  Gets the specified leftmost portion from a ` STRING ` or ` BYTES `
value.
` LENGTH ` |  Gets the length of a ` STRING ` or ` BYTES ` value.
` LOWER ` |  Formats alphabetic characters in a ` STRING ` value as lowercase.

Formats ASCII characters in a ` BYTES ` value as lowercase.
` LPAD ` |  Prepends a ` STRING ` or ` BYTES ` value with a pattern.
` LTRIM ` |  Identical to the ` TRIM ` function, but only removes leading
characters.
` NORMALIZE ` |  Case-sensitively normalizes the characters in a ` STRING `
value.
` NORMALIZE_AND_CASEFOLD ` |  Case-insensitively normalizes the characters in
a ` STRING ` value.
` OCTET_LENGTH ` |  Alias for ` BYTE_LENGTH ` .
` REGEXP_CONTAINS ` |  Checks if a value is a partial match for a regular
expression.
` REGEXP_EXTRACT ` |  Produces a substring that matches a regular expression.
` REGEXP_EXTRACT_ALL ` |  Produces an array of all substrings that match a
regular expression.
` REGEXP_INSTR ` |  Finds the position of a regular expression match in a
value, optionally starting the search at a given offset or occurrence.
` REGEXP_REPLACE ` |  Produces a ` STRING ` value where all substrings that
match a regular expression are replaced with a specified value.
` REGEXP_SUBSTR ` |  Synonym for ` REGEXP_EXTRACT ` .
` REPEAT ` |  Produces a ` STRING ` or ` BYTES ` value that consists of an
original value, repeated.
` REPLACE ` |  Replaces all occurrences of a pattern with another pattern in a
` STRING ` or ` BYTES ` value.
` REVERSE ` |  Reverses a ` STRING ` or ` BYTES ` value.
` RIGHT ` |  Gets the specified rightmost portion from a ` STRING ` or ` BYTES
` value.
` RPAD ` |  Appends a ` STRING ` or ` BYTES ` value with a pattern.
` RTRIM ` |  Identical to the ` TRIM ` function, but only removes trailing
characters.
` SAFE_CONVERT_BYTES_TO_STRING ` |  Converts a ` BYTES ` value to a ` STRING `
value and replace any invalid UTF-8 characters with the Unicode replacement
character, ` U+FFFD ` .
` SOUNDEX ` |  Gets the Soundex codes for words in a ` STRING ` value.
` SPLIT ` |  Splits a ` STRING ` or ` BYTES ` value, using a delimiter.
` STARTS_WITH ` |  Checks if a ` STRING ` or ` BYTES ` value is a prefix of
another value.
` STRPOS ` |  Finds the position of the first occurrence of a subvalue inside
another value.
` SUBSTR ` |  Gets a portion of a ` STRING ` or ` BYTES ` value.
` SUBSTRING ` |  Alias for ` SUBSTR `
` TO_BASE32 ` |  Converts a ` BYTES ` value to a base32-encoded ` STRING `
value.
` TO_BASE64 ` |  Converts a ` BYTES ` value to a base64-encoded ` STRING `
value.
` TO_CODE_POINTS ` |  Converts a ` STRING ` or ` BYTES ` value into an array
of extended ASCII code points.
` TO_HEX ` |  Converts a ` BYTES ` value to a hexadecimal ` STRING ` value.
` TRANSLATE ` |  Within a value, replaces each source character with the
corresponding target character.
` TRIM ` |  Removes the specified leading and trailing Unicode code points or
bytes from a ` STRING ` or ` BYTES ` value.
` UNICODE ` |  Gets the Unicode code point for the first character in a value.
` UPPER ` |  Formats alphabetic characters in a ` STRING ` value as uppercase.

Formats ASCII characters in a ` BYTES ` value as uppercase.

###  ` ASCII `



ASCII(value)


**Description**

Returns the ASCII code for the first character or byte in ` value ` . Returns
` 0 ` if ` value ` is empty or the ASCII code is ` 0 ` for the first character
or byte.

**Return type**

` INT64 `

**Examples**



SELECT ASCII('abcd') as A, ASCII('a') as B, ASCII('') as C, ASCII(NULL) as D;

/*-------+-------+-------+-------*
| A     | B     | C     | D     |
+-------+-------+-------+-------+
| 97    | 97    | 0     | NULL  |
*-------+-------+-------+-------*/


###  ` BYTE_LENGTH `



BYTE_LENGTH(value)


**Description**

Gets the number of ` BYTES ` in a ` STRING ` or ` BYTES ` value, regardless of
whether the value is a ` STRING ` or ` BYTES ` type.

**Return type**

` INT64 `

**Examples**



WITH example AS
(SELECT 'абвгд' AS characters, b'абвгд' AS bytes)

SELECT
characters,
BYTE_LENGTH(characters) AS string_example,
bytes,
BYTE_LENGTH(bytes) AS bytes_example
FROM example;

/*------------+----------------+-------+---------------*
| characters | string_example | bytes | bytes_example |
+------------+----------------+-------+---------------+
| абвгд      | 10             | абвгд | 10            |
*------------+----------------+-------+---------------*/


###  ` CHAR_LENGTH `



CHAR_LENGTH(value)


**Description**

Gets the number of characters in a ` STRING ` value.

**Return type**

` INT64 `

**Examples**



WITH example AS
(SELECT 'абвгд' AS characters)

SELECT
characters,
CHAR_LENGTH(characters) AS char_length_example
FROM example;

/*------------+---------------------*
| characters | char_length_example |
+------------+---------------------+
| абвгд      |                   5 |
*------------+---------------------*/


###  ` CHARACTER_LENGTH `



CHARACTER_LENGTH(value)


**Description**

Synonym for  CHAR_LENGTH  .

**Return type**

` INT64 `

**Examples**



WITH example AS
(SELECT 'абвгд' AS characters)

SELECT
characters,
CHARACTER_LENGTH(characters) AS char_length_example
FROM example;

/*------------+---------------------*
| characters | char_length_example |
+------------+---------------------+
| абвгд      |                   5 |
*------------+---------------------*/


###  ` CHR `



CHR(value)


**Description**

Takes a Unicode [ code point ](https://en.wikipedia.org/wiki/Code_point) and
returns the character that matches the code point. Each valid code point
should fall within the range of [0, 0xD7FF] and [0xE000, 0x10FFFF]. Returns an
empty string if the code point is ` 0 ` . If an invalid Unicode code point is
specified, an error is returned.

To work with an array of Unicode code points, see  ` CODE_POINTS_TO_STRING `

**Return type**

` STRING `

**Examples**



SELECT CHR(65) AS A, CHR(255) AS B, CHR(513) AS C, CHR(1024)  AS D;

/*-------+-------+-------+-------*
| A     | B     | C     | D     |
+-------+-------+-------+-------+
| A     | ÿ     | ȁ     | Ѐ     |
*-------+-------+-------+-------*/



SELECT CHR(97) AS A, CHR(0xF9B5) AS B, CHR(0) AS C, CHR(NULL) AS D;

/*-------+-------+-------+-------*
| A     | B     | C     | D     |
+-------+-------+-------+-------+
| a     | 例    |       | NULL  |
*-------+-------+-------+-------*/


###  ` CODE_POINTS_TO_BYTES `



CODE_POINTS_TO_BYTES(ascii_code_points)


**Description**

Takes an array of extended ASCII [ code points
](https://en.wikipedia.org/wiki/Code_point) as ` ARRAY<INT64> ` and returns `
BYTES ` .

To convert from ` BYTES ` to an array of code points, see  TO_CODE_POINTS  .

**Return type**

` BYTES `

**Examples**

The following is a basic example using ` CODE_POINTS_TO_BYTES ` .



SELECT CODE_POINTS_TO_BYTES([65, 98, 67, 100]) AS bytes;

-- Note that the result of CODE_POINTS_TO_BYTES is of type BYTES, displayed as a base64-encoded string.
-- In BYTES format, b'AbCd' is the result.
/*----------*
| bytes    |
+----------+
| QWJDZA== |
*----------*/


The following example uses a rotate-by-13 places (ROT13) algorithm to encode a
string.



SELECT CODE_POINTS_TO_BYTES(ARRAY_AGG(
(SELECT
CASE
WHEN chr BETWEEN b'a' and b'z'
THEN TO_CODE_POINTS(b'a')[offset(0)] +
MOD(code+13-TO_CODE_POINTS(b'a')[offset(0)],26)
WHEN chr BETWEEN b'A' and b'Z'
THEN TO_CODE_POINTS(b'A')[offset(0)] +
MOD(code+13-TO_CODE_POINTS(b'A')[offset(0)],26)
ELSE code
END
FROM
(SELECT code, CODE_POINTS_TO_BYTES([code]) chr)
) ORDER BY OFFSET)) AS encoded_string
FROM UNNEST(TO_CODE_POINTS(b'Test String!')) code WITH OFFSET;

-- Note that the result of CODE_POINTS_TO_BYTES is of type BYTES, displayed as a base64-encoded string.
-- In BYTES format, b'Grfg Fgevat!' is the result.
/*------------------*
| encoded_string   |
+------------------+
| R3JmZyBGZ2V2YXQh |
*------------------*/


###  ` CODE_POINTS_TO_STRING `



CODE_POINTS_TO_STRING(unicode_code_points)


**Description**

Takes an array of Unicode [ code points
](https://en.wikipedia.org/wiki/Code_point) as ` ARRAY<INT64> ` and returns a
` STRING ` .

To convert from a string to an array of code points, see  TO_CODE_POINTS  .

**Return type**

` STRING `

**Examples**

The following are basic examples using ` CODE_POINTS_TO_STRING ` .



SELECT CODE_POINTS_TO_STRING([65, 255, 513, 1024]) AS string;

/*--------*
| string |
+--------+
| AÿȁЀ   |
*--------*/



SELECT CODE_POINTS_TO_STRING([97, 0, 0xF9B5]) AS string;

/*--------*
| string |
+--------+
| a例    |
*--------*/



SELECT CODE_POINTS_TO_STRING([65, 255, NULL, 1024]) AS string;

/*--------*
| string |
+--------+
| NULL   |
*--------*/


The following example computes the frequency of letters in a set of words.



WITH Words AS (
SELECT word
FROM UNNEST(['foo', 'bar', 'baz', 'giraffe', 'llama']) AS word
)
SELECT
CODE_POINTS_TO_STRING([code_point]) AS letter,
COUNT(*) AS letter_count
FROM Words,
UNNEST(TO_CODE_POINTS(word)) AS code_point
GROUP BY 1
ORDER BY 2 DESC;

/*--------+--------------*
| letter | letter_count |
+--------+--------------+
| a      | 5            |
| f      | 3            |
| r      | 2            |
| b      | 2            |
| l      | 2            |
| o      | 2            |
| g      | 1            |
| z      | 1            |
| e      | 1            |
| m      | 1            |
| i      | 1            |
*--------+--------------*/


###  ` COLLATE `



COLLATE(value, collate_specification)


Takes a ` STRING ` and a [ collation specification
](/bigquery/docs/reference/standard-sql/collation-
concepts#collate_spec_details) . Returns a ` STRING ` with a collation
specification. If ` collate_specification ` is empty, returns a value with
collation removed from the ` STRING ` .

The collation specification defines how the resulting ` STRING ` can be
compared and sorted. To learn more, see [ Working with collation
](/bigquery/docs/reference/standard-sql/collation-
concepts#working_with_collation) .

* ` collation_specification ` must be a string literal, otherwise an error is thrown.
* Returns ` NULL ` if ` value ` is ` NULL ` .

**Return type**

` STRING `

**Examples**

In this example, the weight of ` a ` is less than the weight of ` Z ` . This
is because the collate specification, ` und:ci ` assigns more weight to ` Z `
.



WITH Words AS (
SELECT
COLLATE('a', 'und:ci') AS char1,
COLLATE('Z', 'und:ci') AS char2
)
SELECT ( Words.char1 < Words.char2 ) AS a_less_than_Z
FROM Words;

/*----------------*
| a_less_than_Z  |
+----------------+
| TRUE           |
*----------------*/


In this example, the weight of ` a ` is greater than the weight of ` Z ` .
This is because the default collate specification assigns more weight to ` a `
.



WITH Words AS (
SELECT
'a' AS char1,
'Z' AS char2
)
SELECT ( Words.char1 < Words.char2 ) AS a_less_than_Z
FROM Words;

/*----------------*
| a_less_than_Z  |
+----------------+
| FALSE          |
*----------------*/


###  ` CONCAT `



CONCAT(value1[, ...])


**Description**

Concatenates one or more values into a single result. All values must be `
BYTES ` or data types that can be cast to ` STRING ` .

The function returns ` NULL ` if any input argument is ` NULL ` .

**Note:** You can also use the [ || concatenation operator
](/bigquery/docs/reference/standard-sql/operators) to concatenate values into
a string.

**Return type**

` STRING ` or ` BYTES `

**Examples**



SELECT CONCAT('T.P.', ' ', 'Bar') as author;

/*---------------------*
| author              |
+---------------------+
| T.P. Bar            |
*---------------------*/



SELECT CONCAT('Summer', ' ', 1923) as release_date;

/*---------------------*
| release_date        |
+---------------------+
| Summer 1923         |
*---------------------*/



With Employees AS
(SELECT
'John' AS first_name,
'Doe' AS last_name
UNION ALL
SELECT
'Jane' AS first_name,
'Smith' AS last_name
UNION ALL
SELECT
'Joe' AS first_name,
'Jackson' AS last_name)

SELECT
CONCAT(first_name, ' ', last_name)
AS full_name
FROM Employees;

/*---------------------*
| full_name           |
+---------------------+
| John Doe            |
| Jane Smith          |
| Joe Jackson         |
*---------------------*/


###  ` CONTAINS_SUBSTR `



CONTAINS_SUBSTR(expression, search_value_literal[, json_scope=>json_scope_value])

json_scope_value:
{ 'JSON_VALUES' | 'JSON_KEYS' | 'JSON_KEYS_AND_VALUES' }


**Description**

Performs a normalized, case-insensitive search to see if a value exists as a
substring in an expression. Returns ` TRUE ` if the value exists, otherwise
returns ` FALSE ` .

Before values are compared, they are  normalized and case folded with ` NFKC `
normalization  . Wildcard searches are not supported.

**Arguments**

* ` search_value_literal ` : The value to search for. It must be a ` STRING ` literal or a ` STRING ` constant expression.
* ` expression ` : The data to search over. The expression can be a column or table reference. A table reference is evaluated as a ` STRUCT ` whose fields are the columns of the table. A column reference is evaluated as one the following data types:

* ` STRING `
* ` INT64 `
* ` BOOL `
* ` NUMERIC `
* ` BIGNUMERIC `
* ` TIMESTAMP `
* ` TIME `
* ` DATE `
* ` DATETIME `
* ` ARRAY `
* ` STRUCT `

When the expression is evaluated, the result is cast to a ` STRING ` , and
then the function looks for the search value in the result.

You can perform a cross-field search on an expression that evaluates to a `
STRUCT ` or ` ARRAY ` . If the expression evaluates to a ` STRUCT ` , the
cross-field search is recursive and includes all subfields inside the ` STRUCT
` .

In a cross-field search, each field and subfield is individually converted to
a string and searched for the value. The function returns ` TRUE ` if at least
one field includes the search value; otherwise, if at least one field is `
NULL ` , it returns ` NULL ` ; otherwise, if the search value is not found and
all fields are non- ` NULL ` , it returns ` FALSE ` .

If the expression is ` NULL ` , the return value is ` NULL ` .

* ` json_scope ` : This optional [ mandatory-named argument ](/bigquery/docs/reference/standard-sql/functions-reference#named_arguments) takes one of the following values to indicate the scope of ` JSON ` data to be searched. It has no effect if ` expression ` is not ` JSON ` or does not contain a ` JSON ` field.

* ` 'JSON_VALUES' ` : Only the ` JSON ` values are searched. If ` json_scope ` is not provided, this is used by default.
* ` 'JSON_KEYS' ` : Only the ` JSON ` keys are searched.
* ` 'JSON_KEYS_AND_VALUES' ` : The ` JSON ` keys and values are searched.

**Return type**

` BOOL `

**Examples**

The following query returns ` TRUE ` because this case-insensitive match was
found: ` blue house ` and ` Blue house ` .



SELECT CONTAINS_SUBSTR('the blue house', 'Blue house') AS result;

/*--------*
| result |
+--------+
| true   |
*--------*/


The following query returns ` TRUE ` similar to the above example, but in this
case the search value is a constant expression with CONCAT function.



SELECT CONTAINS_SUBSTR('the blue house', CONCAT('Blue ', 'house')) AS result;

/*--------*
| result |
+--------+
| true   |
*--------*/


The following query returns ` FALSE ` because ` blue ` was not found in ` the
red house ` .



SELECT CONTAINS_SUBSTR('the red house', 'blue') AS result;

/*--------*
| result |
+--------+
| false  |
*--------*/


The following query returns ` TRUE ` because ` Ⅸ ` and ` IX ` represent the
same normalized value.



SELECT '\u2168 day' AS a, 'IX' AS b, CONTAINS_SUBSTR('\u2168', 'IX') AS result;

/*----------------------*
| a      | b  | result |
+----------------------+
| Ⅸ day | IX | true   |
*----------------------*/


The following query returns ` TRUE ` because ` 35 ` was found inside a `
STRUCT ` field.



SELECT CONTAINS_SUBSTR((23, 35, 41), '35') AS result;

/*--------*
| result |
+--------+
| true   |
*--------*/


The following query returns ` TRUE ` because ` jk ` was found during a
recursive search inside a ` STRUCT ` .



SELECT CONTAINS_SUBSTR(('abc', ['def', 'ghi', 'jkl'], 'mno'), 'jk');

/*--------*
| result |
+--------+
| true   |
*--------*/


The following query returns ` TRUE ` because ` NULL ` s are ignored when a
match is found found inside a ` STRUCT ` or ` ARRAY ` .



SELECT CONTAINS_SUBSTR((23, NULL, 41), '41') AS result;

/*--------*
| result |
+--------+
| true   |
*--------*/


The following query returns ` NULL ` because a ` NULL ` existed in a ` STRUCT
` that did not result in a match.



SELECT CONTAINS_SUBSTR((23, NULL, 41), '35') AS result;

/*--------*
| result |
+--------+
| null   |
*--------*/


In the following query, an error is thrown because the search value cannot be
a literal ` NULL ` .



SELECT CONTAINS_SUBSTR('hello', NULL) AS result;
-- Throws an error


The following examples reference a table called ` Recipes ` that you can
emulate with a ` WITH ` clause like this:



WITH Recipes AS
(SELECT 'Blueberry pancakes' as Breakfast, 'Egg salad sandwich' as Lunch, 'Potato dumplings' as Dinner UNION ALL
SELECT 'Potato pancakes', 'Toasted cheese sandwich', 'Beef stroganoff' UNION ALL
SELECT 'Ham scramble', 'Steak avocado salad', 'Tomato pasta' UNION ALL
SELECT 'Avocado toast', 'Tomato soup', 'Blueberry salmon' UNION ALL
SELECT 'Corned beef hash', 'Lentil potato soup', 'Glazed ham')
SELECT * FROM Recipes;

/*-------------------+-------------------------+------------------*
| Breakfast         | Lunch                   | Dinner           |
+-------------------+-------------------------+------------------+
| Bluberry pancakes | Egg salad sandwich      | Potato dumplings |
| Potato pancakes   | Toasted cheese sandwich | Beef stroganoff  |
| Ham scramble      | Steak avocado salad     | Tomato pasta     |
| Avocado toast     | Tomato soup             | Blueberry samon  |
| Corned beef hash  | Lentil potato soup      | Glazed ham       |
*-------------------+-------------------------+------------------*/


The following query searches across all columns of the ` Recipes ` table for
the value ` toast ` and returns the rows that contain this value.



SELECT * FROM Recipes WHERE CONTAINS_SUBSTR(Recipes, 'toast');

/*-------------------+-------------------------+------------------*
| Breakfast         | Lunch                   | Dinner           |
+-------------------+-------------------------+------------------+
| Potato pancakes   | Toasted cheese sandwich | Beef stroganoff  |
| Avocado toast     | Tomato soup             | Blueberry samon  |
*-------------------+-------------------------+------------------*/


The following query searches the ` Lunch ` and ` Dinner ` columns of the `
Recipe ` table for the value ` potato ` and returns the row if either column
contains this value.



SELECT * FROM Recipes WHERE CONTAINS_SUBSTR((Lunch, Dinner), 'potato');

/*-------------------+-------------------------+------------------*
| Breakfast         | Lunch                   | Dinner           |
+-------------------+-------------------------+------------------+
| Bluberry pancakes | Egg salad sandwich      | Potato dumplings |
| Corned beef hash  | Lentil potato soup      | Glazed ham       |
*-------------------+-------------------------+------------------*/


The following query searches across all columns of the ` Recipes ` table
except for the ` Lunch ` and ` Dinner ` columns. It returns the rows of any
columns other than ` Lunch ` or ` Dinner ` that contain the value ` potato ` .



SELECT *
FROM Recipes
WHERE CONTAINS_SUBSTR(
(SELECT AS STRUCT Recipes.* EXCEPT (Lunch, Dinner)),
'potato'
);

/*-------------------+-------------------------+------------------*
| Breakfast         | Lunch                   | Dinner           |
+-------------------+-------------------------+------------------+
| Potato pancakes   | Toasted cheese sandwich | Beef stroganoff  |
*-------------------+-------------------------+------------------*/


The following query searches for the value ` lunch ` in the JSON `
{"lunch":"soup"} ` and returns ` FALSE ` because the default ` json_scope ` is
` "JSON_VALUES" ` , and ` lunch ` is a ` JSON ` key, not a ` JSON ` value.



SELECT CONTAINS_SUBSTR(JSON '{"lunch":"soup"}',"lunch") AS result;

/*--------*
| result |
+--------+
| FALSE  |
*--------*/


The following query searches for the value ` lunch ` in the values of the JSON
` {"lunch":"soup"} ` and returns ` FALSE ` because ` lunch ` is a ` JSON `
key, not a ` JSON ` value.



SELECT CONTAINS_SUBSTR(JSON '{"lunch":"soup"}',
"lunch",
json_scope=>"JSON_VALUES") AS result;

/*--------*
| result |
+--------+
| FALSE  |
*--------*/


The following query searches for the value ` lunch ` in the keys and values of
the JSON ` {"lunch":"soup"} ` and returns ` TRUE ` because ` lunch ` is a `
JSON ` key.



SELECT CONTAINS_SUBSTR(JSON '{"lunch":"soup"}',
"lunch",
json_scope=>"JSON_KEYS_AND_VALUES") AS result;

/*--------*
| result |
+--------+
| TRUE   |
*--------*/


The following query searches for the value ` lunch ` in the keys of the JSON `
{"lunch":"soup"} ` and returns ` TRUE ` because ` lunch ` is a ` JSON ` key.



SELECT CONTAINS_SUBSTR(JSON '{"lunch":"soup"}',
"lunch",
json_scope=>"JSON_KEYS") AS result;

/*--------*
| result |
+--------+
| TRUE   |
*--------*/


###  ` EDIT_DISTANCE `



EDIT_DISTANCE(value1, value2, [max_distance => max_distance_value])


**Description**

Computes the [ Levenshtein distance
](https://en.wikipedia.org/wiki/Levenshtein_distance) between two ` STRING `
or ` BYTES ` values.

**Definitions**

* ` value1 ` : The first ` STRING ` or ` BYTES ` value to compare.
* ` value2 ` : The second ` STRING ` or ` BYTES ` value to compare.
* ` max_distance ` : Optional mandatory-named argument. Takes a non-negative ` INT64 ` value that represents the maximum distance between the two values to compute.

If this distance is exceeded, the function returns this value. The default
value for this argument is the maximum size of ` value1 ` and ` value2 ` .

**Details**

If ` value1 ` or ` value2 ` is ` NULL ` , ` NULL ` is returned.

You can only compare values of the same type. Otherwise, an error is produced.

**Return type**

` INT64 `

**Examples**

In the following example, the first character in both strings is different:



SELECT EDIT_DISTANCE('a', 'b') AS results;

/*---------*
| results |
+---------+
| 1       |
*---------*/


In the following example, the first and second characters in both strings are
different:



SELECT EDIT_DISTANCE('aa', 'b') AS results;

/*---------*
| results |
+---------+
| 2       |
*---------*/


In the following example, only the first character in both strings is
different:



SELECT EDIT_DISTANCE('aa', 'ba') AS results;

/*---------*
| results |
+---------+
| 1       |
*---------*/


In the following example, the last six characters are different, but because
the maximum distance is ` 2 ` , this function exits early and returns ` 2 ` ,
the maximum distance:



SELECT EDIT_DISTANCE('abcdefg', 'a', max_distance => 2) AS results;

/*---------*
| results |
+---------+
| 2       |
*---------*/


###  ` ENDS_WITH `



ENDS_WITH(value, suffix)


**Description**

Takes two ` STRING ` or ` BYTES ` values. Returns ` TRUE ` if ` suffix ` is a
suffix of ` value ` .

This function supports specifying [ collation
](/bigquery/docs/reference/standard-sql/collation-concepts#collate_about) .

**Return type**

` BOOL `

**Examples**



WITH items AS
(SELECT 'apple' as item
UNION ALL
SELECT 'banana' as item
UNION ALL
SELECT 'orange' as item)

SELECT
ENDS_WITH(item, 'e') as example
FROM items;

/*---------*
| example |
+---------+
|    True |
|   False |
|    True |
*---------*/


###  ` FORMAT `



FORMAT(format_string_expression, data_type_expression[, ...])


**Description**

` FORMAT ` formats a data type expression as a string.

* ` format_string_expression ` : Can contain zero or more  format specifiers  . Each format specifier is introduced by the ` % ` symbol, and must map to one or more of the remaining arguments. In general, this is a one-to-one mapping, except when the ` * ` specifier is present. For example, ` %.*i ` maps to two arguments—a length argument and a signed integer argument. If the number of arguments related to the format specifiers is not the same as the number of arguments, an error occurs.
* ` data_type_expression ` : The value to format as a string. This can be any GoogleSQL data type.

**Return type**

` STRING `

**Examples**

Description  |  Statement  |  Result
---|---|---
Simple integer  |  FORMAT('%d', 10)  |  10
Integer with left blank padding  |  FORMAT('|%10d|', 11)  |  | 11|
Integer with left zero padding  |  FORMAT('+%010d+', 12)  |  +0000000012+
Integer with commas  |  FORMAT("%'d", 123456789)  |  123,456,789
STRING  |  FORMAT('-%s-', 'abcd efg')  |  -abcd efg-
FLOAT64  |  FORMAT('%f %E', 1.1, 2.2)  |  1.100000 2.200000E+00
DATE  |  FORMAT('%t', date '2015-09-01')  |  2015-09-01
TIMESTAMP  |  FORMAT('%t', timestamp '2015-09-01 12:34:56
America/Los_Angeles')  |  2015‑09‑01 19:34:56+00

The ` FORMAT() ` function does not provide fully customizable formatting for
all types and values, nor formatting that is sensitive to locale.

If custom formatting is necessary for a type, you must first format it using
type-specific format functions, such as ` FORMAT_DATE() ` or `
FORMAT_TIMESTAMP() ` . For example:



SELECT FORMAT('date: %s!', FORMAT_DATE('%B %d, %Y', date '2015-01-02'));


Returns



date: January 02, 2015!


####  Supported format specifiers



%[flags][width][.precision]specifier


A  format specifier  adds formatting when casting a value to a string. It can
optionally contain these sub-specifiers:

* Flags
* Width
* Precision

Additional information about format specifiers:

* %g and %G behavior
* %p and %P behavior
* %t and %T behavior
* Error conditions
* NULL argument handling
* Additional semantic rules

#####  Format specifiers

Specifier  |  Description  |  Examples  |  Types
---|---|---|---
` d ` or ` i ` |  Decimal integer  |  392  |  ` INT64 `

` o ` |  Octal

Note: If an ` INT64 ` value is negative, an error is produced.  |  610  |  `
INT64 `

` x ` |  Hexadecimal integer

Note: If an ` INT64 ` value is negative, an error is produced.  |  7fa  |  `
INT64 `

` X ` |  Hexadecimal integer (uppercase)

Note: If an ` INT64 ` value is negative, an error is produced.  |  7FA  |  `
INT64 `

` f ` |  Decimal notation, in [-](integer part).(fractional part) for finite
values, and in lowercase for non-finite values  |  392.650000
inf
nan  |  ` NUMERIC `
` BIGNUMERIC `
` FLOAT64 `

` F ` |  Decimal notation, in [-](integer part).(fractional part) for finite
values, and in uppercase for non-finite values  |  392.650000
INF
NAN  |  ` NUMERIC `
` BIGNUMERIC `
` FLOAT64 `

` e ` |  Scientific notation (mantissa/exponent), lowercase  |  3.926500e+02
inf
nan  |  ` NUMERIC `
` BIGNUMERIC `
` FLOAT64 `

` E ` |  Scientific notation (mantissa/exponent), uppercase  |  3.926500E+02
INF
NAN  |  ` NUMERIC `
` BIGNUMERIC `
` FLOAT64 `

` g ` |  Either decimal notation or scientific notation, depending on the
input value's exponent and the specified precision. Lowercase. See  %g and %G
behavior  for details.  |  392.65
3.9265e+07
inf
nan  |  ` NUMERIC `
` BIGNUMERIC `
` FLOAT64 `

` G ` |  Either decimal notation or scientific notation, depending on the
input value's exponent and the specified precision. Uppercase. See  %g and %G
behavior  for details.  |  392.65
3.9265E+07
INF
NAN  |  ` NUMERIC `
` BIGNUMERIC `
` FLOAT64 `

` p ` |  Produces a one-line printable string representing JSON. See  %p and
%P behavior  .  |



{"month":10,"year":2019}

|  ` JSON `

` P ` |  Produces a multi-line printable string representing JSON. See  %p and
%P behavior  .  |



{
"month": 10,
"year": 2019
}


|  ` JSON `

` s ` |  String of characters  |  sample  |  ` STRING `

` t ` |  Returns a printable string representing the value. Often looks
similar to casting the argument to ` STRING ` . See  %t and %T behavior  .  |
sample
2014‑01‑01  |  Any type
` T ` |  Produces a string that is a valid GoogleSQL constant with a similar
type to the value's type (maybe wider, or maybe string). See  %t and %T
behavior  .  |  'sample'
b'bytes sample'
1234
2.3
date '2014‑01‑01'  |  Any type
` % ` |  '%%' produces a single '%'  |  %  |  n/a

The format specifier can optionally contain the sub-specifiers identified
above in the specifier prototype.

These sub-specifiers must comply with the following specifications.

#####  Flags

Flags  |  Description
---|---
` - ` |  Left-justify within the given field width; Right justification is the
default (see width sub-specifier)
` + ` |  Forces to precede the result with a plus or minus sign ( ` + ` or ` -
` ) even for positive numbers. By default, only negative numbers are preceded
with a ` - ` sign
<space> |  If no sign is going to be written, a blank space is inserted before
the value
` # ` |

* For `%o`, `%x`, and `%X`, this flag means to precede the value with 0, 0x or 0X respectively for values different than zero.
* For `%f`, `%F`, `%e`, and `%E`, this flag means to add the decimal point even when there is no fractional part, unless the value is non-finite.
* For `%g` and `%G`, this flag means to add the decimal point even when there is no fractional part unless the value is non-finite, and never remove the trailing zeros after the decimal point.


` 0 ` |  Left-pads the number with zeroes (0) instead of spaces when padding
is specified (see width sub-specifier)
` ' ` |

Formats integers using the appropriating grouping character. For example:

* ` FORMAT("%'d", 12345678) ` returns ` 12,345,678 `
* ` FORMAT("%'x", 12345678) ` returns ` bc:614e `
* ` FORMAT("%'o", 55555) ` returns ` 15,4403 `

This flag is only relevant for decimal, hex, and octal values.



Flags may be specified in any order. Duplicate flags are not an error. When
flags are not relevant for some element type, they are ignored.

#####  Width

Width  |  Description
---|---
<number> |  Minimum number of characters to be printed. If the value to be
printed is shorter than this number, the result is padded with blank spaces.
The value is not truncated even if the result is larger
` * ` |  The width is not specified in the format string, but as an additional
integer value argument preceding the argument that has to be formatted

#####  Precision

Precision  |  Description
---|---
` . ` <number> |

* For integer specifiers `%d`, `%i`, `%o`, `%u`, `%x`, and `%X`: precision specifies the minimum number of digits to be written. If the value to be written is shorter than this number, the result is padded with trailing zeros. The value is not truncated even if the result is longer. A precision of 0 means that no character is written for the value 0.
* For specifiers `%a`, `%A`, `%e`, `%E`, `%f`, and `%F`: this is the number of digits to be printed after the decimal point. The default value is 6.
* For specifiers `%g` and `%G`: this is the number of significant digits to be printed, before the removal of the trailing zeros after the decimal point. The default value is 6.


` .* ` |  The precision is not specified in the format string, but as an
additional integer value argument preceding the argument that has to be
formatted

#####  %g and %G behavior

The ` %g ` and ` %G ` format specifiers choose either the decimal notation
(like the ` %f ` and ` %F ` specifiers) or the scientific notation (like the `
%e ` and ` %E ` specifiers), depending on the input value's exponent and the
specified  precision  .

Let p stand for the specified  precision  (defaults to 6; 1 if the specified
precision is less than 1). The input value is first converted to scientific
notation with precision = (p - 1). If the resulting exponent part x is less
than -4 or no less than p, the scientific notation with precision = (p - 1) is
used; otherwise the decimal notation with precision = (p - 1 - x) is used.

Unless  ` # ` flag  is present, the trailing zeros after the decimal point are
removed, and the decimal point is also removed if there is no digit after it.

#####  %p and %P behavior

The ` %p ` format specifier produces a one-line printable string. The ` %P `
format specifier produces a multi-line printable string. You can use these
format specifiers with the following data types:

**Type** |  **%p** |  **%P**
---|---|---
JSON  |

JSON input:



JSON '
{
"month": 10,
"year": 2019
}
'

Produces a one-line printable string representing JSON:



{"month":10,"year":2019}

|

JSON input:



JSON '
{
"month": 10,
"year": 2019
}
'

Produces a multi-line printable string representing JSON:



{
"month": 10,
"year": 2019
}


#####  %t and %T behavior

The ` %t ` and ` %T ` format specifiers are defined for all types. The  width
,  precision  , and  flags  act as they do for ` %s ` : the  width  is the
minimum width and the ` STRING ` will be padded to that size, and  precision
is the maximum width of content to show and the ` STRING ` will be truncated
to that size, prior to padding to width.

The ` %t ` specifier is always meant to be a readable form of the value.

The ` %T ` specifier is always a valid SQL literal of a similar type, such as
a wider numeric type. The literal will not include casts or a type name,
except for the special case of non-finite floating point values.

The ` STRING ` is formatted as follows:

**Type** |  **%t** |  **%T**
---|---|---
` NULL ` of any type  |  NULL  |  NULL
` INT64 `
|  123  |  123
NUMERIC  |  123.0 _(always with .0)_ |  NUMERIC "123.0"
FLOAT64  |  123.0 _(always with .0)_
123e+10
` inf `
` -inf `
` NaN ` |  123.0 _(always with .0)_
123e+10
CAST("inf" AS <type>)
CAST("-inf" AS <type>)
CAST("nan" AS <type>)
STRING  |  unquoted string value  |  quoted string literal
BYTES  |  unquoted escaped bytes
e.g., abc\x01\x02  |  quoted bytes literal
e.g., b"abc\x01\x02"
BOOL  |  boolean value  |  boolean value
DATE  |  2011-02-03  |  DATE "2011-02-03"
TIMESTAMP  |  2011-02-03 04:05:06+00  |  TIMESTAMP "2011-02-03 04:05:06+00"
INTERVAL  |  1-2 3 4:5:6.789  |  INTERVAL "1-2 3 4:5:6.789" YEAR TO SECOND
ARRAY  |  [value, value, ...]
where values are formatted with %t  |  [value, value, ...]
where values are formatted with %T
STRUCT  |  (value, value, ...)
where fields are formatted with %t  |  (value, value, ...)
where fields are formatted with %T

Special cases:
Zero fields: STRUCT()
One field: STRUCT(value)
JSON  |  one-line printable string representing JSON.



{"name":"apple","stock":3}

|  one-line printable string representing a JSON literal.



JSON '{"name":"apple","stock":3}'

#####  Error conditions

If a format specifier is invalid, or is not compatible with the related
argument type, or the wrong number or arguments are provided, then an error is
produced. For example, the following ` <format_string> ` expressions are
invalid:



FORMAT('%s', 1)



FORMAT('%')


#####  NULL argument handling

A ` NULL ` format string results in a ` NULL ` output ` STRING ` . Any other
arguments are ignored in this case.

The function generally produces a ` NULL ` value if a ` NULL ` argument is
present. For example, ` FORMAT('%i', NULL_expression) ` produces a ` NULL
STRING ` as output.

However, there are some exceptions: if the format specifier is %t or %T (both
of which produce ` STRING ` s that effectively match CAST and literal value
semantics), a ` NULL ` value produces 'NULL' (without the quotes) in the
result ` STRING ` . For example, the function:



FORMAT('00-%t-00', NULL_expression);


Returns



00-NULL-00


#####  Additional semantic rules

` FLOAT64 ` values can be ` +/-inf ` or ` NaN ` . When an argument has one of
those values, the result of the format specifiers ` %f ` , ` %F ` , ` %e ` , `
%E ` , ` %g ` , ` %G ` , and ` %t ` are ` inf ` , ` -inf ` , or ` nan ` (or
the same in uppercase) as appropriate. This is consistent with how GoogleSQL
casts these values to ` STRING ` . For ` %T ` , GoogleSQL returns quoted
strings for ` FLOAT64 ` values that don't have non-string literal
representations.

###  ` FROM_BASE32 `



FROM_BASE32(string_expr)


**Description**

Converts the base32-encoded input ` string_expr ` into ` BYTES ` format. To
convert ` BYTES ` to a base32-encoded ` STRING ` , use  TO_BASE32  .

**Return type**

` BYTES `

**Example**



SELECT FROM_BASE32('MFRGGZDF74======') AS byte_data;

-- Note that the result of FROM_BASE32 is of type BYTES, displayed as a base64-encoded string.
/*-----------*
| byte_data |
+-----------+
| YWJjZGX/  |
*-----------*/


###  ` FROM_BASE64 `



FROM_BASE64(string_expr)


**Description**

Converts the base64-encoded input ` string_expr ` into ` BYTES ` format. To
convert ` BYTES ` to a base64-encoded ` STRING ` , use [TO_BASE64][string-
link-to-base64].

There are several base64 encodings in common use that vary in exactly which
alphabet of 65 ASCII characters are used to encode the 64 digits and padding.
See [ RFC 4648 ](https://tools.ietf.org/html/rfc4648#section-4) for details.
This function expects the alphabet ` [A-Za-z0-9+/=] ` .

**Return type**

` BYTES `

**Example**



SELECT FROM_BASE64('/+A=') AS byte_data;

-- Note that the result of FROM_BASE64 is of type BYTES, displayed as a base64-encoded string.
/*-----------*
| byte_data |
+-----------+
| /+A=      |
*-----------*/


To work with an encoding using a different base64 alphabet, you might need to
compose ` FROM_BASE64 ` with the ` REPLACE ` function. For instance, the `
base64url ` url-safe and filename-safe encoding commonly used in web
programming uses ` -_= ` as the last characters rather than ` +/= ` . To
decode a ` base64url ` -encoded string, replace ` - ` and ` _ ` with ` + ` and
` / ` respectively.



SELECT FROM_BASE64(REPLACE(REPLACE('_-A=', '-', '+'), '_', '/')) AS binary;

-- Note that the result of FROM_BASE64 is of type BYTES, displayed as a base64-encoded string.
/*--------*
| binary |
+--------+
| /+A=   |
*--------*/


###  ` FROM_HEX `



FROM_HEX(string)


**Description**

Converts a hexadecimal-encoded ` STRING ` into ` BYTES ` format. Returns an
error if the input ` STRING ` contains characters outside the range ` (0..9,
A..F, a..f) ` . The lettercase of the characters does not matter. If the input
` STRING ` has an odd number of characters, the function acts as if the input
has an additional leading ` 0 ` . To convert ` BYTES ` to a hexadecimal-
encoded ` STRING ` , use  TO_HEX  .

**Return type**

` BYTES `

**Example**



WITH Input AS (
SELECT '00010203aaeeefff' AS hex_str UNION ALL
SELECT '0AF' UNION ALL
SELECT '666f6f626172'
)
SELECT hex_str, FROM_HEX(hex_str) AS bytes_str
FROM Input;

-- Note that the result of FROM_HEX is of type BYTES, displayed as a base64-encoded string.
/*------------------+--------------*
| hex_str          | bytes_str    |
+------------------+--------------+
| 0AF              | AAECA6ru7/8= |
| 00010203aaeeefff | AK8=         |
| 666f6f626172     | Zm9vYmFy     |
*------------------+--------------*/


###  ` INITCAP `



INITCAP(value[, delimiters])


**Description**

Takes a ` STRING ` and returns it with the first character in each word in
uppercase and all other characters in lowercase. Non-alphabetic characters
remain the same.

` delimiters ` is an optional string argument that is used to override the
default set of characters used to separate words. If ` delimiters ` is not
specified, it defaults to the following characters:
` <whitespace> [ ] ( ) { } / | \ < > ! ? @ " ^ # $ & ~ _ , . : ; * % + - `

If ` value ` or ` delimiters ` is ` NULL ` , the function returns ` NULL ` .

**Return type**

` STRING `

**Examples**



WITH example AS
(
SELECT 'Hello World-everyone!' AS value UNION ALL
SELECT 'tHe dog BARKS loudly+friendly' AS value UNION ALL
SELECT 'apples&oranges;&pears' AS value UNION ALL
SELECT 'καθίσματα ταινιών' AS value
)
SELECT value, INITCAP(value) AS initcap_value FROM example

/*-------------------------------+-------------------------------*
| value                         | initcap_value                 |
+-------------------------------+-------------------------------+
| Hello World-everyone!         | Hello World-Everyone!         |
| tHe dog BARKS loudly+friendly | The Dog Barks Loudly+Friendly |
| apples&oranges;&pears         | Apples&Oranges;&Pears         |
| καθίσματα ταινιών             | Καθίσματα Ταινιών             |
*-------------------------------+-------------------------------*/

WITH example AS
(
SELECT 'hello WORLD!' AS value, '' AS delimiters UNION ALL
SELECT 'καθίσματα ταιντιώ@ν' AS value, 'τ@' AS delimiters UNION ALL
SELECT 'Apples1oranges2pears' AS value, '12' AS delimiters UNION ALL
SELECT 'tHisEisEaESentence' AS value, 'E' AS delimiters
)
SELECT value, delimiters, INITCAP(value, delimiters) AS initcap_value FROM example;

/*----------------------+------------+----------------------*
| value                | delimiters | initcap_value        |
+----------------------+------------+----------------------+
| hello WORLD!         |            | Hello world!         |
| καθίσματα ταιντιώ@ν  | τ@         | ΚαθίσματΑ τΑιντΙώ@Ν  |
| Apples1oranges2pears | 12         | Apples1Oranges2Pears |
| tHisEisEaESentence   | E          | ThisEIsEAESentence   |
*----------------------+------------+----------------------*/


###  ` INSTR `



INSTR(value, subvalue[, position[, occurrence]])


**Description**

Returns the lowest 1-based position of ` subvalue ` in ` value ` . ` value `
and ` subvalue ` must be the same type, either ` STRING ` or ` BYTES ` .

If ` position ` is specified, the search starts at this position in ` value `
, otherwise it starts at ` 1 ` , which is the beginning of ` value ` . If `
position ` is negative, the function searches backwards from the end of `
value ` , with ` -1 ` indicating the last character. ` position ` is of type `
INT64 ` and cannot be ` 0 ` .

If ` occurrence ` is specified, the search returns the position of a specific
instance of ` subvalue ` in ` value ` . If not specified, ` occurrence `
defaults to ` 1 ` and returns the position of the first occurrence. For `
occurrence ` > ` 1 ` , the function includes overlapping occurrences. `
occurrence ` is of type ` INT64 ` and must be positive.

This function supports specifying [ collation
](/bigquery/docs/reference/standard-sql/collation-concepts#collate_about) .

Returns ` 0 ` if:

* No match is found.
* If ` occurrence ` is greater than the number of matches found.
* If ` position ` is greater than the length of ` value ` .

Returns ` NULL ` if:

* Any input argument is ` NULL ` .

Returns an error if:

* ` position ` is ` 0 ` .
* ` occurrence ` is ` 0 ` or negative.

**Return type**

` INT64 `

**Examples**



WITH example AS
(SELECT 'banana' as value, 'an' as subvalue, 1 as position, 1 as
occurrence UNION ALL
SELECT 'banana' as value, 'an' as subvalue, 1 as position, 2 as
occurrence UNION ALL
SELECT 'banana' as value, 'an' as subvalue, 1 as position, 3 as
occurrence UNION ALL
SELECT 'banana' as value, 'an' as subvalue, 3 as position, 1 as
occurrence UNION ALL
SELECT 'banana' as value, 'an' as subvalue, -1 as position, 1 as
occurrence UNION ALL
SELECT 'banana' as value, 'an' as subvalue, -3 as position, 1 as
occurrence UNION ALL
SELECT 'banana' as value, 'ann' as subvalue, 1 as position, 1 as
occurrence UNION ALL
SELECT 'helloooo' as value, 'oo' as subvalue, 1 as position, 1 as
occurrence UNION ALL
SELECT 'helloooo' as value, 'oo' as subvalue, 1 as position, 2 as
occurrence
)
SELECT value, subvalue, position, occurrence, INSTR(value,
subvalue, position, occurrence) AS instr
FROM example;

/*--------------+--------------+----------+------------+-------*
| value        | subvalue     | position | occurrence | instr |
+--------------+--------------+----------+------------+-------+
| banana       | an           | 1        | 1          | 2     |
| banana       | an           | 1        | 2          | 4     |
| banana       | an           | 1        | 3          | 0     |
| banana       | an           | 3        | 1          | 4     |
| banana       | an           | -1       | 1          | 4     |
| banana       | an           | -3       | 1          | 4     |
| banana       | ann          | 1        | 1          | 0     |
| helloooo     | oo           | 1        | 1          | 5     |
| helloooo     | oo           | 1        | 2          | 6     |
*--------------+--------------+----------+------------+-------*/


###  ` LEFT `



LEFT(value, length)


**Description**

Returns a ` STRING ` or ` BYTES ` value that consists of the specified number
of leftmost characters or bytes from ` value ` . The ` length ` is an ` INT64
` that specifies the length of the returned value. If ` value ` is of type `
BYTES ` , ` length ` is the number of leftmost bytes to return. If ` value `
is ` STRING ` , ` length ` is the number of leftmost characters to return.

If ` length ` is 0, an empty ` STRING ` or ` BYTES ` value will be returned.
If ` length ` is negative, an error will be returned. If ` length ` exceeds
the number of characters or bytes from ` value ` , the original ` value ` will
be returned.

**Return type**

` STRING ` or ` BYTES `

**Examples**



WITH examples AS
(SELECT 'apple' as example
UNION ALL
SELECT 'banana' as example
UNION ALL
SELECT 'абвгд' as example
)
SELECT example, LEFT(example, 3) AS left_example
FROM examples;

/*---------+--------------*
| example | left_example |
+---------+--------------+
| apple   | app          |
| banana  | ban          |
| абвгд   | абв          |
*---------+--------------*/



WITH examples AS
(SELECT b'apple' as example
UNION ALL
SELECT b'banana' as example
UNION ALL
SELECT b'\xab\xcd\xef\xaa\xbb' as example
)
SELECT example, LEFT(example, 3) AS left_example
FROM examples;

-- Note that the result of LEFT is of type BYTES, displayed as a base64-encoded string.
/*----------+--------------*
| example  | left_example |
+----------+--------------+
| YXBwbGU= | YXBw         |
| YmFuYW5h | YmFu         |
| q83vqrs= | q83v         |
*----------+--------------*/


###  ` LENGTH `



LENGTH(value)


**Description**

Returns the length of the ` STRING ` or ` BYTES ` value. The returned value is
in characters for ` STRING ` arguments and in bytes for the ` BYTES `
argument.

**Return type**

` INT64 `

**Examples**



WITH example AS
(SELECT 'абвгд' AS characters)

SELECT
characters,
LENGTH(characters) AS string_example,
LENGTH(CAST(characters AS BYTES)) AS bytes_example
FROM example;

/*------------+----------------+---------------*
| characters | string_example | bytes_example |
+------------+----------------+---------------+
| абвгд      |              5 |            10 |
*------------+----------------+---------------*/


###  ` LOWER `



LOWER(value)


**Description**

For ` STRING ` arguments, returns the original string with all alphabetic
characters in lowercase. Mapping between lowercase and uppercase is done
according to the [ Unicode Character Database ](http://unicode.org/ucd/)
without taking into account language-specific mappings.

For ` BYTES ` arguments, the argument is treated as ASCII text, with all bytes
greater than 127 left intact.

**Return type**

` STRING ` or ` BYTES `

**Examples**



WITH items AS
(SELECT
'FOO' as item
UNION ALL
SELECT
'BAR' as item
UNION ALL
SELECT
'BAZ' as item)

SELECT
LOWER(item) AS example
FROM items;

/*---------*
| example |
+---------+
| foo     |
| bar     |
| baz     |
*---------*/


###  ` LPAD `



LPAD(original_value, return_length[, pattern])


**Description**

Returns a ` STRING ` or ` BYTES ` value that consists of ` original_value `
prepended with ` pattern ` . The ` return_length ` is an ` INT64 ` that
specifies the length of the returned value. If ` original_value ` is of type `
BYTES ` , ` return_length ` is the number of bytes. If ` original_value ` is
of type ` STRING ` , ` return_length ` is the number of characters.

The default value of ` pattern ` is a blank space.

Both ` original_value ` and ` pattern ` must be the same data type.

If ` return_length ` is less than or equal to the ` original_value ` length,
this function returns the ` original_value ` value, truncated to the value of
` return_length ` . For example, ` LPAD('hello world', 7); ` returns ` 'hello
w' ` .

If ` original_value ` , ` return_length ` , or ` pattern ` is ` NULL ` , this
function returns ` NULL ` .

This function returns an error if:

* ` return_length ` is negative
* ` pattern ` is empty

**Return type**

` STRING ` or ` BYTES `

**Examples**



SELECT t, len, FORMAT('%T', LPAD(t, len)) AS LPAD FROM UNNEST([
STRUCT('abc' AS t, 5 AS len),
('abc', 2),
('例子', 4)
]);

/*------+-----+----------*
| t    | len | LPAD     |
|------|-----|----------|
| abc  | 5   | "  abc"  |
| abc  | 2   | "ab"     |
| 例子  | 4   | "  例子" |
*------+-----+----------*/



SELECT t, len, pattern, FORMAT('%T', LPAD(t, len, pattern)) AS LPAD FROM UNNEST([
STRUCT('abc' AS t, 8 AS len, 'def' AS pattern),
('abc', 5, '-'),
('例子', 5, '中文')
]);

/*------+-----+---------+--------------*
| t    | len | pattern | LPAD         |
|------|-----|---------|--------------|
| abc  | 8   | def     | "defdeabc"   |
| abc  | 5   | -       | "--abc"      |
| 例子  | 5   | 中文    | "中文中例子"   |
*------+-----+---------+--------------*/



SELECT FORMAT('%T', t) AS t, len, FORMAT('%T', LPAD(t, len)) AS LPAD FROM UNNEST([
STRUCT(b'abc' AS t, 5 AS len),
(b'abc', 2),
(b'\xab\xcd\xef', 4)
]);

/*-----------------+-----+------------------*
| t               | len | LPAD             |
|-----------------|-----|------------------|
| b"abc"          | 5   | b"  abc"         |
| b"abc"          | 2   | b"ab"            |
| b"\xab\xcd\xef" | 4   | b" \xab\xcd\xef" |
*-----------------+-----+------------------*/



SELECT
FORMAT('%T', t) AS t,
len,
FORMAT('%T', pattern) AS pattern,
FORMAT('%T', LPAD(t, len, pattern)) AS LPAD
FROM UNNEST([
STRUCT(b'abc' AS t, 8 AS len, b'def' AS pattern),
(b'abc', 5, b'-'),
(b'\xab\xcd\xef', 5, b'\x00')
]);

/*-----------------+-----+---------+-------------------------*
| t               | len | pattern | LPAD                    |
|-----------------|-----|---------|-------------------------|
| b"abc"          | 8   | b"def"  | b"defdeabc"             |
| b"abc"          | 5   | b"-"    | b"--abc"                |
| b"\xab\xcd\xef" | 5   | b"\x00" | b"\x00\x00\xab\xcd\xef" |
*-----------------+-----+---------+-------------------------*/


###  ` LTRIM `



LTRIM(value1[, value2])


**Description**

Identical to  TRIM  , but only removes leading characters.

**Return type**

` STRING ` or ` BYTES `

**Examples**



WITH items AS
(SELECT '   apple   ' as item
UNION ALL
SELECT '   banana   ' as item
UNION ALL
SELECT '   orange   ' as item)

SELECT
CONCAT('#', LTRIM(item), '#') as example
FROM items;

/*-------------*
| example     |
+-------------+
| #apple   #  |
| #banana   # |
| #orange   # |
*-------------*/



WITH items AS
(SELECT '***apple***' as item
UNION ALL
SELECT '***banana***' as item
UNION ALL
SELECT '***orange***' as item)

SELECT
LTRIM(item, '*') as example
FROM items;

/*-----------*
| example   |
+-----------+
| apple***  |
| banana*** |
| orange*** |
*-----------*/



WITH items AS
(SELECT 'xxxapplexxx' as item
UNION ALL
SELECT 'yyybananayyy' as item
UNION ALL
SELECT 'zzzorangezzz' as item
UNION ALL
SELECT 'xyzpearxyz' as item)

SELECT
LTRIM(item, 'xyz') as example
FROM items;

/*-----------*
| example   |
+-----------+
| applexxx  |
| bananayyy |
| orangezzz |
| pearxyz   |
*-----------*/


###  ` NORMALIZE `



NORMALIZE(value[, normalization_mode])


**Description**

Takes a string value and returns it as a normalized string. If you do not
provide a normalization mode, ` NFC ` is used.

[ Normalization
](https://en.wikipedia.org/wiki/Unicode_equivalence#Normalization) is used to
ensure that two strings are equivalent. Normalization is often used in
situations in which two strings render the same on the screen but have
different Unicode code points.

` NORMALIZE ` supports four optional normalization modes:

Value  |  Name  |  Description
---|---|---
` NFC ` |  Normalization Form Canonical Composition  |  Decomposes and
recomposes characters by canonical equivalence.
` NFKC ` |  Normalization Form Compatibility Composition  |  Decomposes
characters by compatibility, then recomposes them by canonical equivalence.
` NFD ` |  Normalization Form Canonical Decomposition  |  Decomposes
characters by canonical equivalence, and multiple combining characters are
arranged in a specific order.
` NFKD ` |  Normalization Form Compatibility Decomposition  |  Decomposes
characters by compatibility, and multiple combining characters are arranged in
a specific order.

**Return type**

` STRING `

**Examples**



SELECT a, b, a = b as normalized
FROM (SELECT NORMALIZE('\u00ea') as a, NORMALIZE('\u0065\u0302') as b);

/*---+---+------------*
| a | b | normalized |
+---+---+------------+
| ê | ê | true       |
*---+---+------------*/


The following example normalizes different space characters.



WITH EquivalentNames AS (
SELECT name
FROM UNNEST([
'Jane\u2004Doe',
'John\u2004Smith',
'Jane\u2005Doe',
'Jane\u2006Doe',
'John Smith']) AS name
)
SELECT
NORMALIZE(name, NFKC) AS normalized_name,
COUNT(*) AS name_count
FROM EquivalentNames
GROUP BY 1;

/*-----------------+------------*
| normalized_name | name_count |
+-----------------+------------+
| John Smith      | 2          |
| Jane Doe        | 3          |
*-----------------+------------*/


###  ` NORMALIZE_AND_CASEFOLD `



NORMALIZE_AND_CASEFOLD(value[, normalization_mode])


**Description**

Takes a string value and returns it as a normalized string. If you do not
provide a normalization mode, ` NFC ` is used.

[ Normalization
](https://en.wikipedia.org/wiki/Unicode_equivalence#Normalization) is used to
ensure that two strings are equivalent. Normalization is often used in
situations in which two strings render the same on the screen but have
different Unicode code points.

[ Case folding ](https://en.wikipedia.org/wiki/Letter_case#Case_folding) is
used for the caseless comparison of strings. If you need to compare strings
and case should not be considered, use ` NORMALIZE_AND_CASEFOLD ` , otherwise
use  ` NORMALIZE ` .

` NORMALIZE_AND_CASEFOLD ` supports four optional normalization modes:

Value  |  Name  |  Description
---|---|---
` NFC ` |  Normalization Form Canonical Composition  |  Decomposes and
recomposes characters by canonical equivalence.
` NFKC ` |  Normalization Form Compatibility Composition  |  Decomposes
characters by compatibility, then recomposes them by canonical equivalence.
` NFD ` |  Normalization Form Canonical Decomposition  |  Decomposes
characters by canonical equivalence, and multiple combining characters are
arranged in a specific order.
` NFKD ` |  Normalization Form Compatibility Decomposition  |  Decomposes
characters by compatibility, and multiple combining characters are arranged in
a specific order.

**Return type**

` STRING `

**Examples**



SELECT
a, b,
NORMALIZE(a) = NORMALIZE(b) as normalized,
NORMALIZE_AND_CASEFOLD(a) = NORMALIZE_AND_CASEFOLD(b) as normalized_with_case_folding
FROM (SELECT 'The red barn' AS a, 'The Red Barn' AS b);

/*--------------+--------------+------------+------------------------------*
| a            | b            | normalized | normalized_with_case_folding |
+--------------+--------------+------------+------------------------------+
| The red barn | The Red Barn | false      | true                         |
*--------------+--------------+------------+------------------------------*/



WITH Strings AS (
SELECT '\u2168' AS a, 'IX' AS b UNION ALL
SELECT '\u0041\u030A', '\u00C5'
)
SELECT a, b,
NORMALIZE_AND_CASEFOLD(a, NFD)=NORMALIZE_AND_CASEFOLD(b, NFD) AS nfd,
NORMALIZE_AND_CASEFOLD(a, NFC)=NORMALIZE_AND_CASEFOLD(b, NFC) AS nfc,
NORMALIZE_AND_CASEFOLD(a, NFKD)=NORMALIZE_AND_CASEFOLD(b, NFKD) AS nkfd,
NORMALIZE_AND_CASEFOLD(a, NFKC)=NORMALIZE_AND_CASEFOLD(b, NFKC) AS nkfc
FROM Strings;

/*---+----+-------+-------+------+------*
| a | b  | nfd   | nfc   | nkfd | nkfc |
+---+----+-------+-------+------+------+
| Ⅸ | IX | false | false | true | true |
| Å | Å  | true  | true  | true | true |
*---+----+-------+-------+------+------*/


###  ` OCTET_LENGTH `



OCTET_LENGTH(value)


Alias for  ` BYTE_LENGTH ` .

###  ` REGEXP_CONTAINS `



REGEXP_CONTAINS(value, regexp)


**Description**

Returns ` TRUE ` if ` value ` is a partial match for the regular expression, `
regexp ` .

If the ` regexp ` argument is invalid, the function returns an error.

You can search for a full match by using ` ^ ` (beginning of text) and ` $ `
(end of text). Due to regular expression operator precedence, it is good
practice to use parentheses around everything between ` ^ ` and ` $ ` .

**Note:** GoogleSQL provides regular expression support using the [ re2
](https://github.com/google/re2/wiki/Syntax) library; see that documentation
for its regular expression syntax.

**Return type**

` BOOL `

**Examples**



SELECT
email,
REGEXP_CONTAINS(email, r'@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+') AS is_valid
FROM
(SELECT
['foo@example.com', 'bar@example.org', 'www.example.net']
AS addresses),
UNNEST(addresses) AS email;

/*-----------------+----------*
| email           | is_valid |
+-----------------+----------+
| foo@example.com | true     |
| bar@example.org | true     |
| www.example.net | false    |
*-----------------+----------*/

-- Performs a full match, using ^ and $. Due to regular expression operator
-- precedence, it is good practice to use parentheses around everything between ^
-- and $.
SELECT
email,
REGEXP_CONTAINS(email, r'^([\w.+-]+@foo\.com|[\w.+-]+@bar\.org)$')
AS valid_email_address,
REGEXP_CONTAINS(email, r'^[\w.+-]+@foo\.com|[\w.+-]+@bar\.org$')
AS without_parentheses
FROM
(SELECT
['a@foo.com', 'a@foo.computer', 'b@bar.org', '!b@bar.org', 'c@buz.net']
AS addresses),
UNNEST(addresses) AS email;

/*----------------+---------------------+---------------------*
| email          | valid_email_address | without_parentheses |
+----------------+---------------------+---------------------+
| a@foo.com      | true                | true                |
| a@foo.computer | false               | true                |
| b@bar.org      | true                | true                |
| !b@bar.org     | false               | true                |
| c@buz.net      | false               | false               |
*----------------+---------------------+---------------------*/


###  ` REGEXP_EXTRACT `



REGEXP_EXTRACT(value, regexp[, position[, occurrence]])


**Description**

Returns the substring in ` value ` that matches the [ re2 regular expression
](https://github.com/google/re2/wiki/Syntax) , ` regexp ` . Returns ` NULL `
if there is no match.

If the regular expression contains a capturing group ( ` (...) ` ), and there
is a match for that capturing group, that match is returned. If there are
multiple matches for a capturing group, the first match is returned.

If ` position ` is specified, the search starts at this position in ` value `
, otherwise it starts at the beginning of ` value ` . The ` position ` must be
a positive integer and cannot be 0. If ` position ` is greater than the length
of ` value ` , ` NULL ` is returned.

If ` occurrence ` is specified, the search returns a specific occurrence of
the ` regexp ` in ` value ` , otherwise returns the first match. If `
occurrence ` is greater than the number of matches found, ` NULL ` is
returned. For ` occurrence ` > 1, the function searches for additional
occurrences beginning with the character following the previous occurrence.

Returns an error if:

* The regular expression is invalid
* The regular expression has more than one capturing group
* The ` position ` is not a positive integer
* The ` occurrence ` is not a positive integer

**Return type**

` STRING ` or ` BYTES `

**Examples**



WITH email_addresses AS
(SELECT 'foo@example.com' as email
UNION ALL
SELECT 'bar@example.org' as email
UNION ALL
SELECT 'baz@example.net' as email)

SELECT
REGEXP_EXTRACT(email, r'^[a-zA-Z0-9_.+-]+')
AS user_name
FROM email_addresses;

/*-----------*
| user_name |
+-----------+
| foo       |
| bar       |
| baz       |
*-----------*/



WITH email_addresses AS
(SELECT 'foo@example.com' as email
UNION ALL
SELECT 'bar@example.org' as email
UNION ALL
SELECT 'baz@example.net' as email)

SELECT
REGEXP_EXTRACT(email, r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.([a-zA-Z0-9-.]+$)')
AS top_level_domain
FROM email_addresses;

/*------------------*
| top_level_domain |
+------------------+
| com              |
| org              |
| net              |
*------------------*/



WITH
characters AS (
SELECT 'ab' AS value, '.b' AS regex UNION ALL
SELECT 'ab' AS value, '(.)b' AS regex UNION ALL
SELECT 'xyztb' AS value, '(.)+b' AS regex UNION ALL
SELECT 'ab' AS value, '(z)?b' AS regex
)
SELECT value, regex, REGEXP_EXTRACT(value, regex) AS result FROM characters;

/*-------+---------+----------*
| value | regex   | result   |
+-------+---------+----------+
| ab    | .b      | ab       |
| ab    | (.)b    | a        |
| xyztb | (.)+b   | t        |
| ab    | (z)?b   | NULL     |
*-------+---------+----------*/



WITH example AS
(SELECT 'Hello Helloo and Hellooo' AS value, 'H?ello+' AS regex, 1 as position,
1 AS occurrence UNION ALL
SELECT 'Hello Helloo and Hellooo', 'H?ello+', 1, 2 UNION ALL
SELECT 'Hello Helloo and Hellooo', 'H?ello+', 1, 3 UNION ALL
SELECT 'Hello Helloo and Hellooo', 'H?ello+', 1, 4 UNION ALL
SELECT 'Hello Helloo and Hellooo', 'H?ello+', 2, 1 UNION ALL
SELECT 'Hello Helloo and Hellooo', 'H?ello+', 3, 1 UNION ALL
SELECT 'Hello Helloo and Hellooo', 'H?ello+', 3, 2 UNION ALL
SELECT 'Hello Helloo and Hellooo', 'H?ello+', 3, 3 UNION ALL
SELECT 'Hello Helloo and Hellooo', 'H?ello+', 20, 1 UNION ALL
SELECT 'cats&dogs&rabbits' ,'\\w+&', 1, 2 UNION ALL
SELECT 'cats&dogs&rabbits', '\\w+&', 2, 3
)
SELECT value, regex, position, occurrence, REGEXP_EXTRACT(value, regex,
position, occurrence) AS regexp_value FROM example;

/*--------------------------+---------+----------+------------+--------------*
| value                    | regex   | position | occurrence | regexp_value |
+--------------------------+---------+----------+------------+--------------+
| Hello Helloo and Hellooo | H?ello+ | 1        | 1          | Hello        |
| Hello Helloo and Hellooo | H?ello+ | 1        | 2          | Helloo       |
| Hello Helloo and Hellooo | H?ello+ | 1        | 3          | Hellooo      |
| Hello Helloo and Hellooo | H?ello+ | 1        | 4          | NULL         |
| Hello Helloo and Hellooo | H?ello+ | 2        | 1          | ello         |
| Hello Helloo and Hellooo | H?ello+ | 3        | 1          | Helloo       |
| Hello Helloo and Hellooo | H?ello+ | 3        | 2          | Hellooo      |
| Hello Helloo and Hellooo | H?ello+ | 3        | 3          | NULL         |
| Hello Helloo and Hellooo | H?ello+ | 20       | 1          | NULL         |
| cats&dogs&rabbits        | \w+&    | 1        | 2          | dogs&        |
| cats&dogs&rabbits        | \w+&    | 2        | 3          | NULL         |
*--------------------------+---------+----------+------------+--------------*/


###  ` REGEXP_EXTRACT_ALL `



REGEXP_EXTRACT_ALL(value, regexp)


**Description**

Returns an array of all substrings of ` value ` that match the [ re2 regular
expression ](https://github.com/google/re2/wiki/Syntax) , ` regexp ` . Returns
an empty array if there is no match.

If the regular expression contains a capturing group ( ` (...) ` ), and there
is a match for that capturing group, that match is added to the results.

The ` REGEXP_EXTRACT_ALL ` function only returns non-overlapping matches. For
example, using this function to extract ` ana ` from ` banana ` returns only
one substring, not two.

Returns an error if:

* The regular expression is invalid
* The regular expression has more than one capturing group

**Return type**

` ARRAY<STRING> ` or ` ARRAY<BYTES> `

**Examples**



WITH code_markdown AS
(SELECT 'Try `function(x)` or `function(y)`' as code)

SELECT
REGEXP_EXTRACT_ALL(code, '`(.+?)`') AS example
FROM code_markdown;

/*----------------------------*
| example                    |
+----------------------------+
| [function(x), function(y)] |
*----------------------------*/


###  ` REGEXP_INSTR `



REGEXP_INSTR(source_value, regexp [, position[, occurrence, [occurrence_position]]])


**Description**

Returns the lowest 1-based position of a regular expression, ` regexp ` , in `
source_value ` . ` source_value ` and ` regexp ` must be the same type, either
` STRING ` or ` BYTES ` .

If ` position ` is specified, the search starts at this position in `
source_value ` , otherwise it starts at ` 1 ` , which is the beginning of `
source_value ` . ` position ` is of type ` INT64 ` and must be positive.

If ` occurrence ` is specified, the search returns the position of a specific
instance of ` regexp ` in ` source_value ` . If not specified, ` occurrence `
defaults to ` 1 ` and returns the position of the first occurrence. For `
occurrence ` > 1, the function searches for the next, non-overlapping
occurrence. ` occurrence ` is of type ` INT64 ` and must be positive.

You can optionally use ` occurrence_position ` to specify where a position in
relation to an ` occurrence ` starts. Your choices are:

* ` 0 ` : Returns the start position of ` occurrence ` .
* ` 1 ` : Returns the end position of ` occurrence ` \+ ` 1 ` . If the end of the occurrence is at the end of ` source_value ` , ` LENGTH(source_value) + 1 ` is returned.

Returns ` 0 ` if:

* No match is found.
* If ` occurrence ` is greater than the number of matches found.
* If ` position ` is greater than the length of ` source_value ` .
* The regular expression is empty.

Returns ` NULL ` if:

* ` position ` is ` NULL ` .
* ` occurrence ` is ` NULL ` .

Returns an error if:

* ` position ` is ` 0 ` or negative.
* ` occurrence ` is ` 0 ` or negative.
* ` occurrence_position ` is neither ` 0 ` nor ` 1 ` .
* The regular expression is invalid.
* The regular expression has more than one capturing group.

**Return type**

` INT64 `

**Examples**



WITH example AS (
SELECT 'ab@cd-ef' AS source_value, '@[^-]*' AS regexp UNION ALL
SELECT 'ab@d-ef', '@[^-]*' UNION ALL
SELECT 'abc@cd-ef', '@[^-]*' UNION ALL
SELECT 'abc-ef', '@[^-]*')
SELECT source_value, regexp, REGEXP_INSTR(source_value, regexp) AS instr
FROM example;

/*--------------+--------+-------*
| source_value | regexp | instr |
+--------------+--------+-------+
| ab@cd-ef     | @[^-]* | 3     |
| ab@d-ef      | @[^-]* | 3     |
| abc@cd-ef    | @[^-]* | 4     |
| abc-ef       | @[^-]* | 0     |
*--------------+--------+-------*/



WITH example AS (
SELECT 'a@cd-ef b@cd-ef' AS source_value, '@[^-]*' AS regexp, 1 AS position UNION ALL
SELECT 'a@cd-ef b@cd-ef', '@[^-]*', 2 UNION ALL
SELECT 'a@cd-ef b@cd-ef', '@[^-]*', 3 UNION ALL
SELECT 'a@cd-ef b@cd-ef', '@[^-]*', 4)
SELECT
source_value, regexp, position,
REGEXP_INSTR(source_value, regexp, position) AS instr
FROM example;

/*-----------------+--------+----------+-------*
| source_value    | regexp | position | instr |
+-----------------+--------+----------+-------+
| a@cd-ef b@cd-ef | @[^-]* | 1        | 2     |
| a@cd-ef b@cd-ef | @[^-]* | 2        | 2     |
| a@cd-ef b@cd-ef | @[^-]* | 3        | 10    |
| a@cd-ef b@cd-ef | @[^-]* | 4        | 10    |
*-----------------+--------+----------+-------*/



WITH example AS (
SELECT 'a@cd-ef b@cd-ef c@cd-ef' AS source_value,
'@[^-]*' AS regexp, 1 AS position, 1 AS occurrence UNION ALL
SELECT 'a@cd-ef b@cd-ef c@cd-ef', '@[^-]*', 1, 2 UNION ALL
SELECT 'a@cd-ef b@cd-ef c@cd-ef', '@[^-]*', 1, 3)
SELECT
source_value, regexp, position, occurrence,
REGEXP_INSTR(source_value, regexp, position, occurrence) AS instr
FROM example;

/*-------------------------+--------+----------+------------+-------*
| source_value            | regexp | position | occurrence | instr |
+-------------------------+--------+----------+------------+-------+
| a@cd-ef b@cd-ef c@cd-ef | @[^-]* | 1        | 1          | 2     |
| a@cd-ef b@cd-ef c@cd-ef | @[^-]* | 1        | 2          | 10    |
| a@cd-ef b@cd-ef c@cd-ef | @[^-]* | 1        | 3          | 18    |
*-------------------------+--------+----------+------------+-------*/



WITH example AS (
SELECT 'a@cd-ef' AS source_value, '@[^-]*' AS regexp,
1 AS position, 1 AS occurrence, 0 AS o_position UNION ALL
SELECT 'a@cd-ef', '@[^-]*', 1, 1, 1)
SELECT
source_value, regexp, position, occurrence, o_position,
REGEXP_INSTR(source_value, regexp, position, occurrence, o_position) AS instr
FROM example;

/*--------------+--------+----------+------------+------------+-------*
| source_value | regexp | position | occurrence | o_position | instr |
+--------------+--------+----------+------------+------------+-------+
| a@cd-ef      | @[^-]* | 1        | 1          | 0          | 2     |
| a@cd-ef      | @[^-]* | 1        | 1          | 1          | 5     |
*--------------+--------+----------+------------+------------+-------*/


###  ` REGEXP_REPLACE `



REGEXP_REPLACE(value, regexp, replacement)


**Description**

Returns a ` STRING ` where all substrings of ` value ` that match regular
expression ` regexp ` are replaced with ` replacement ` .

You can use backslashed-escaped digits (\1 to \9) within the ` replacement `
argument to insert text matching the corresponding parenthesized group in the
` regexp ` pattern. Use \0 to refer to the entire matching text.

To add a backslash in your regular expression, you must first escape it. For
example, ` SELECT REGEXP_REPLACE('abc', 'b(.)', 'X\\1'); ` returns ` aXc ` .
You can also use [ raw strings ](/bigquery/docs/reference/standard-
sql/lexical#string_and_bytes_literals) to remove one layer of escaping, for
example ` SELECT REGEXP_REPLACE('abc', 'b(.)', r'X\1'); ` .

The ` REGEXP_REPLACE ` function only replaces non-overlapping matches. For
example, replacing ` ana ` within ` banana ` results in only one replacement,
not two.

If the ` regexp ` argument is not a valid regular expression, this function
returns an error.

**Note:** GoogleSQL provides regular expression support using the [ re2
](https://github.com/google/re2/wiki/Syntax) library; see that documentation
for its regular expression syntax.

**Return type**

` STRING ` or ` BYTES `

**Examples**



WITH markdown AS
(SELECT '# Heading' as heading
UNION ALL
SELECT '# Another heading' as heading)

SELECT
REGEXP_REPLACE(heading, r'^# ([a-zA-Z0-9\s]+$)', '<h1>\\1</h1>')
AS html
FROM markdown;

/*--------------------------*
| html                     |
+--------------------------+
| <h1>Heading</h1>         |
| <h1>Another heading</h1> |
*--------------------------*/


###  ` REGEXP_SUBSTR `



REGEXP_SUBSTR(value, regexp[, position[, occurrence]])


**Description**

Synonym for  REGEXP_EXTRACT  .

**Return type**

` STRING ` or ` BYTES `

**Examples**



WITH example AS
(SELECT 'Hello World Helloo' AS value, 'H?ello+' AS regex, 1 AS position, 1 AS
occurrence
)
SELECT value, regex, position, occurrence, REGEXP_SUBSTR(value, regex,
position, occurrence) AS regexp_value FROM example;

/*--------------------+---------+----------+------------+--------------*
| value              | regex   | position | occurrence | regexp_value |
+--------------------+---------+----------+------------+--------------+
| Hello World Helloo | H?ello+ | 1        | 1          | Hello        |
*--------------------+---------+----------+------------+--------------*/


###  ` REPEAT `



REPEAT(original_value, repetitions)


**Description**

Returns a ` STRING ` or ` BYTES ` value that consists of ` original_value ` ,
repeated. The ` repetitions ` parameter specifies the number of times to
repeat ` original_value ` . Returns ` NULL ` if either ` original_value ` or `
repetitions ` are ` NULL ` .

This function returns an error if the ` repetitions ` value is negative.

**Return type**

` STRING ` or ` BYTES `

**Examples**



SELECT t, n, REPEAT(t, n) AS REPEAT FROM UNNEST([
STRUCT('abc' AS t, 3 AS n),
('例子', 2),
('abc', null),
(null, 3)
]);

/*------+------+-----------*
| t    | n    | REPEAT    |
|------|------|-----------|
| abc  | 3    | abcabcabc |
| 例子 | 2    | 例子例子  |
| abc  | NULL | NULL      |
| NULL | 3    | NULL      |
*------+------+-----------*/


###  ` REPLACE `



REPLACE(original_value, from_pattern, to_pattern)


**Description**

Replaces all occurrences of ` from_pattern ` with ` to_pattern ` in `
original_value ` . If ` from_pattern ` is empty, no replacement is made.

This function supports specifying [ collation
](/bigquery/docs/reference/standard-sql/collation-concepts#collate_about) .

**Return type**

` STRING ` or ` BYTES `

**Examples**



WITH desserts AS
(SELECT 'apple pie' as dessert
UNION ALL
SELECT 'blackberry pie' as dessert
UNION ALL
SELECT 'cherry pie' as dessert)

SELECT
REPLACE (dessert, 'pie', 'cobbler') as example
FROM desserts;

/*--------------------*
| example            |
+--------------------+
| apple cobbler      |
| blackberry cobbler |
| cherry cobbler     |
*--------------------*/


###  ` REVERSE `



REVERSE(value)


**Description**

Returns the reverse of the input ` STRING ` or ` BYTES ` .

**Return type**

` STRING ` or ` BYTES `

**Examples**



WITH example AS (
SELECT 'foo' AS sample_string, b'bar' AS sample_bytes UNION ALL
SELECT 'абвгд' AS sample_string, b'123' AS sample_bytes
)
SELECT
sample_string,
REVERSE(sample_string) AS reverse_string,
sample_bytes,
REVERSE(sample_bytes) AS reverse_bytes
FROM example;

/*---------------+----------------+--------------+---------------*
| sample_string | reverse_string | sample_bytes | reverse_bytes |
+---------------+----------------+--------------+---------------+
| foo           | oof            | bar          | rab           |
| абвгд         | дгвба          | 123          | 321           |
*---------------+----------------+--------------+---------------*/


###  ` RIGHT `



RIGHT(value, length)


**Description**

Returns a ` STRING ` or ` BYTES ` value that consists of the specified number
of rightmost characters or bytes from ` value ` . The ` length ` is an ` INT64
` that specifies the length of the returned value. If ` value ` is ` BYTES ` ,
` length ` is the number of rightmost bytes to return. If ` value ` is `
STRING ` , ` length ` is the number of rightmost characters to return.

If ` length ` is 0, an empty ` STRING ` or ` BYTES ` value will be returned.
If ` length ` is negative, an error will be returned. If ` length ` exceeds
the number of characters or bytes from ` value ` , the original ` value ` will
be returned.

**Return type**

` STRING ` or ` BYTES `

**Examples**



WITH examples AS
(SELECT 'apple' as example
UNION ALL
SELECT 'banana' as example
UNION ALL
SELECT 'абвгд' as example
)
SELECT example, RIGHT(example, 3) AS right_example
FROM examples;

/*---------+---------------*
| example | right_example |
+---------+---------------+
| apple   | ple           |
| banana  | ana           |
| абвгд   | вгд           |
*---------+---------------*/



WITH examples AS
(SELECT b'apple' as example
UNION ALL
SELECT b'banana' as example
UNION ALL
SELECT b'\xab\xcd\xef\xaa\xbb' as example
)
SELECT example, RIGHT(example, 3) AS right_example
FROM examples;

-- Note that the result of RIGHT is of type BYTES, displayed as a base64-encoded string.
/*----------+---------------*
| example  | right_example |
+----------+---------------+
| YXBwbGU= | cGxl          |
| YmFuYW5h | YW5h          |
| q83vqrs= | 76q7          |
*----------+---------------*/


###  ` RPAD `



RPAD(original_value, return_length[, pattern])


**Description**

Returns a ` STRING ` or ` BYTES ` value that consists of ` original_value `
appended with ` pattern ` . The ` return_length ` parameter is an ` INT64 `
that specifies the length of the returned value. If ` original_value ` is `
BYTES ` , ` return_length ` is the number of bytes. If ` original_value ` is `
STRING ` , ` return_length ` is the number of characters.

The default value of ` pattern ` is a blank space.

Both ` original_value ` and ` pattern ` must be the same data type.

If ` return_length ` is less than or equal to the ` original_value ` length,
this function returns the ` original_value ` value, truncated to the value of
` return_length ` . For example, ` RPAD('hello world', 7); ` returns ` 'hello
w' ` .

If ` original_value ` , ` return_length ` , or ` pattern ` is ` NULL ` , this
function returns ` NULL ` .

This function returns an error if:

* ` return_length ` is negative
* ` pattern ` is empty

**Return type**

` STRING ` or ` BYTES `

**Examples**



SELECT t, len, FORMAT('%T', RPAD(t, len)) AS RPAD FROM UNNEST([
STRUCT('abc' AS t, 5 AS len),
('abc', 2),
('例子', 4)
]);

/*------+-----+----------*
| t    | len | RPAD     |
+------+-----+----------+
| abc  | 5   | "abc  "  |
| abc  | 2   | "ab"     |
| 例子  | 4   | "例子  " |
*------+-----+----------*/



SELECT t, len, pattern, FORMAT('%T', RPAD(t, len, pattern)) AS RPAD FROM UNNEST([
STRUCT('abc' AS t, 8 AS len, 'def' AS pattern),
('abc', 5, '-'),
('例子', 5, '中文')
]);

/*------+-----+---------+--------------*
| t    | len | pattern | RPAD         |
+------+-----+---------+--------------+
| abc  | 8   | def     | "abcdefde"   |
| abc  | 5   | -       | "abc--"      |
| 例子  | 5   | 中文     | "例子中文中"  |
*------+-----+---------+--------------*/



SELECT FORMAT('%T', t) AS t, len, FORMAT('%T', RPAD(t, len)) AS RPAD FROM UNNEST([
STRUCT(b'abc' AS t, 5 AS len),
(b'abc', 2),
(b'\xab\xcd\xef', 4)
]);

/*-----------------+-----+------------------*
| t               | len | RPAD             |
+-----------------+-----+------------------+
| b"abc"          | 5   | b"abc  "         |
| b"abc"          | 2   | b"ab"            |
| b"\xab\xcd\xef" | 4   | b"\xab\xcd\xef " |
*-----------------+-----+------------------*/



SELECT
FORMAT('%T', t) AS t,
len,
FORMAT('%T', pattern) AS pattern,
FORMAT('%T', RPAD(t, len, pattern)) AS RPAD
FROM UNNEST([
STRUCT(b'abc' AS t, 8 AS len, b'def' AS pattern),
(b'abc', 5, b'-'),
(b'\xab\xcd\xef', 5, b'\x00')
]);

/*-----------------+-----+---------+-------------------------*
| t               | len | pattern | RPAD                    |
+-----------------+-----+---------+-------------------------+
| b"abc"          | 8   | b"def"  | b"abcdefde"             |
| b"abc"          | 5   | b"-"    | b"abc--"                |
| b"\xab\xcd\xef" | 5   | b"\x00" | b"\xab\xcd\xef\x00\x00" |
*-----------------+-----+---------+-------------------------*/


###  ` RTRIM `



RTRIM(value1[, value2])


**Description**

Identical to  TRIM  , but only removes trailing characters.

**Return type**

` STRING ` or ` BYTES `

**Examples**



WITH items AS
(SELECT '***apple***' as item
UNION ALL
SELECT '***banana***' as item
UNION ALL
SELECT '***orange***' as item)

SELECT
RTRIM(item, '*') as example
FROM items;

/*-----------*
| example   |
+-----------+
| ***apple  |
| ***banana |
| ***orange |
*-----------*/



WITH items AS
(SELECT 'applexxx' as item
UNION ALL
SELECT 'bananayyy' as item
UNION ALL
SELECT 'orangezzz' as item
UNION ALL
SELECT 'pearxyz' as item)

SELECT
RTRIM(item, 'xyz') as example
FROM items;

/*---------*
| example |
+---------+
| apple   |
| banana  |
| orange  |
| pear    |
*---------*/


###  ` SAFE_CONVERT_BYTES_TO_STRING `



SAFE_CONVERT_BYTES_TO_STRING(value)


**Description**

Converts a sequence of ` BYTES ` to a ` STRING ` . Any invalid UTF-8
characters are replaced with the Unicode replacement character, ` U+FFFD ` .

**Return type**

` STRING `

**Examples**

The following statement returns the Unicode replacement character, �.



SELECT SAFE_CONVERT_BYTES_TO_STRING(b'\xc2') as safe_convert;


###  ` SOUNDEX `



SOUNDEX(value)


**Description**

Returns a ` STRING ` that represents the [ Soundex
](https://en.wikipedia.org/wiki/Soundex) code for ` value ` .

SOUNDEX produces a phonetic representation of a string. It indexes words by
sound, as pronounced in English. It is typically used to help determine
whether two strings, such as the family names _Levine_ and _Lavine_ , or the
words _to_ and _too_ , have similar English-language pronunciation.

The result of the SOUNDEX consists of a letter followed by 3 digits. Non-latin
characters are ignored. If the remaining string is empty after removing non-
Latin characters, an empty ` STRING ` is returned.

**Return type**

` STRING `

**Examples**



WITH example AS (
SELECT 'Ashcraft' AS value UNION ALL
SELECT 'Raven' AS value UNION ALL
SELECT 'Ribbon' AS value UNION ALL
SELECT 'apple' AS value UNION ALL
SELECT 'Hello world!' AS value UNION ALL
SELECT '  H3##!@llo w00orld!' AS value UNION ALL
SELECT '#1' AS value UNION ALL
SELECT NULL AS value
)
SELECT value, SOUNDEX(value) AS soundex
FROM example;

/*----------------------+---------*
| value                | soundex |
+----------------------+---------+
| Ashcraft             | A261    |
| Raven                | R150    |
| Ribbon               | R150    |
| apple                | a140    |
| Hello world!         | H464    |
|   H3##!@llo w00orld! | H464    |
| #1                   |         |
| NULL                 | NULL    |
*----------------------+---------*/


###  ` SPLIT `



SPLIT(value[, delimiter])


**Description**

Splits ` value ` using the ` delimiter ` argument.

For ` STRING ` , the default delimiter is the comma ` , ` .

For ` BYTES ` , you must specify a delimiter.

Splitting on an empty delimiter produces an array of UTF-8 characters for `
STRING ` values, and an array of ` BYTES ` for ` BYTES ` values.

Splitting an empty ` STRING ` returns an ` ARRAY ` with a single empty `
STRING ` .

This function supports specifying [ collation
](/bigquery/docs/reference/standard-sql/collation-concepts#collate_about) .

**Return type**

` ARRAY<STRING> ` or ` ARRAY<BYTES> `

**Examples**



WITH letters AS
(SELECT '' as letter_group
UNION ALL
SELECT 'a' as letter_group
UNION ALL
SELECT 'b c d' as letter_group)

SELECT SPLIT(letter_group, ' ') as example
FROM letters;

/*----------------------*
| example              |
+----------------------+
| []                   |
| [a]                  |
| [b, c, d]            |
*----------------------*/


###  ` STARTS_WITH `



STARTS_WITH(value, prefix)


**Description**

Takes two ` STRING ` or ` BYTES ` values. Returns ` TRUE ` if ` prefix ` is a
prefix of ` value ` .

This function supports specifying [ collation
](/bigquery/docs/reference/standard-sql/collation-concepts#collate_about) .

**Return type**

` BOOL `

**Examples**



WITH items AS
(SELECT 'foo' as item
UNION ALL
SELECT 'bar' as item
UNION ALL
SELECT 'baz' as item)

SELECT
STARTS_WITH(item, 'b') as example
FROM items;

/*---------*
| example |
+---------+
|   False |
|    True |
|    True |
*---------*/


###  ` STRPOS `



STRPOS(value, subvalue)


**Description**

Takes two ` STRING ` or ` BYTES ` values. Returns the 1-based position of the
first occurrence of ` subvalue ` inside ` value ` . Returns ` 0 ` if `
subvalue ` is not found.

This function supports specifying [ collation
](/bigquery/docs/reference/standard-sql/collation-concepts#collate_about) .

**Return type**

` INT64 `

**Examples**



WITH email_addresses AS
(SELECT
'foo@example.com' AS email_address
UNION ALL
SELECT
'foobar@example.com' AS email_address
UNION ALL
SELECT
'foobarbaz@example.com' AS email_address
UNION ALL
SELECT
'quxexample.com' AS email_address)

SELECT
STRPOS(email_address, '@') AS example
FROM email_addresses;

/*---------*
| example |
+---------+
|       4 |
|       7 |
|      10 |
|       0 |
*---------*/


###  ` SUBSTR `



SUBSTR(value, position[, length])


**Description**

Gets a portion (substring) of the supplied ` STRING ` or ` BYTES ` value.

The ` position ` argument is an integer specifying the starting position of
the substring.

* If ` position ` is ` 1 ` , the substring starts from the first character or byte.
* If ` position ` is ` 0 ` or less than ` -LENGTH(value) ` , ` position ` is set to ` 1 ` , and the substring starts from the first character or byte.
* If ` position ` is greater than the length of ` value ` , the function produces an empty substring.
* If ` position ` is negative, the function counts from the end of ` value ` , with ` -1 ` indicating the last character or byte.

The ` length ` argument specifies the maximum number of characters or bytes to
return.

* If ` length ` is not specified, the function produces a substring that starts at the specified position and ends at the last character or byte of ` value ` .
* If ` length ` is ` 0 ` , the function produces an empty substring.
* If ` length ` is negative, the function produces an error.
* The returned substring may be shorter than ` length ` , for example, when ` length ` exceeds the length of ` value ` , or when the starting position of the substring plus ` length ` is greater than the length of ` value ` .

**Return type**

` STRING ` or ` BYTES `

**Examples**



WITH items AS
(SELECT 'apple' as item
UNION ALL
SELECT 'banana' as item
UNION ALL
SELECT 'orange' as item)

SELECT
SUBSTR(item, 2) as example
FROM items;

/*---------*
| example |
+---------+
| pple    |
| anana   |
| range   |
*---------*/



WITH items AS
(SELECT 'apple' as item
UNION ALL
SELECT 'banana' as item
UNION ALL
SELECT 'orange' as item)

SELECT
SUBSTR(item, 2, 2) as example
FROM items;

/*---------*
| example |
+---------+
| pp      |
| an      |
| ra      |
*---------*/



WITH items AS
(SELECT 'apple' as item
UNION ALL
SELECT 'banana' as item
UNION ALL
SELECT 'orange' as item)

SELECT
SUBSTR(item, -2) as example
FROM items;

/*---------*
| example |
+---------+
| le      |
| na      |
| ge      |
*---------*/



WITH items AS
(SELECT 'apple' as item
UNION ALL
SELECT 'banana' as item
UNION ALL
SELECT 'orange' as item)

SELECT
SUBSTR(item, 1, 123) as example
FROM items;

/*---------*
| example |
+---------+
| apple   |
| banana  |
| orange  |
*---------*/



WITH items AS
(SELECT 'apple' as item
UNION ALL
SELECT 'banana' as item
UNION ALL
SELECT 'orange' as item)

SELECT
SUBSTR(item, 123) as example
FROM items;

/*---------*
| example |
+---------+
|         |
|         |
|         |
*---------*/



WITH items AS
(SELECT 'apple' as item
UNION ALL
SELECT 'banana' as item
UNION ALL
SELECT 'orange' as item)

SELECT
SUBSTR(item, 123, 5) as example
FROM items;

/*---------*
| example |
+---------+
|         |
|         |
|         |
*---------*/


###  ` SUBSTRING `



SUBSTRING(value, position[, length])


Alias for  ` SUBSTR ` .

###  ` TO_BASE32 `



TO_BASE32(bytes_expr)


**Description**

Converts a sequence of ` BYTES ` into a base32-encoded ` STRING ` . To convert
a base32-encoded ` STRING ` into ` BYTES ` , use  FROM_BASE32  .

**Return type**

` STRING `

**Example**



SELECT TO_BASE32(b'abcde\xFF') AS base32_string;

/*------------------*
| base32_string    |
+------------------+
| MFRGGZDF74====== |
*------------------*/


###  ` TO_BASE64 `



TO_BASE64(bytes_expr)


**Description**

Converts a sequence of ` BYTES ` into a base64-encoded ` STRING ` . To convert
a base64-encoded ` STRING ` into ` BYTES ` , use  FROM_BASE64  .

There are several base64 encodings in common use that vary in exactly which
alphabet of 65 ASCII characters are used to encode the 64 digits and padding.
See [ RFC 4648 ](https://tools.ietf.org/html/rfc4648#section-4) for details.
This function adds padding and uses the alphabet ` [A-Za-z0-9+/=] ` .

**Return type**

` STRING `

**Example**



SELECT TO_BASE64(b'\377\340') AS base64_string;

/*---------------*
| base64_string |
+---------------+
| /+A=          |
*---------------*/


To work with an encoding using a different base64 alphabet, you might need to
compose ` TO_BASE64 ` with the ` REPLACE ` function. For instance, the `
base64url ` url-safe and filename-safe encoding commonly used in web
programming uses ` -_= ` as the last characters rather than ` +/= ` . To
encode a ` base64url ` -encoded string, replace ` + ` and ` / ` with ` - ` and
` _ ` respectively.



SELECT REPLACE(REPLACE(TO_BASE64(b'\377\340'), '+', '-'), '/', '_') as websafe_base64;

/*----------------*
| websafe_base64 |
+----------------+
| _-A=           |
*----------------*/


###  ` TO_CODE_POINTS `



TO_CODE_POINTS(value)


**Description**

Takes a ` STRING ` or ` BYTES ` value and returns an array of ` INT64 ` values
that represent code points or extended ASCII character values.

* If ` value ` is a ` STRING ` , each element in the returned array represents a [ code point ](https://en.wikipedia.org/wiki/Code_point) . Each code point falls within the range of [0, 0xD7FF] and [0xE000, 0x10FFFF].
* If ` value ` is ` BYTES ` , each element in the array is an extended ASCII character value in the range of [0, 255].

To convert from an array of code points to a ` STRING ` or ` BYTES ` , see
CODE_POINTS_TO_STRING  or  CODE_POINTS_TO_BYTES  .

**Return type**

` ARRAY<INT64> `

**Examples**

The following example gets the code points for each element in an array of
words.



SELECT word, TO_CODE_POINTS(word) AS code_points
FROM UNNEST(['foo', 'bar', 'baz', 'giraffe', 'llama']) AS word;

/*---------+------------------------------------*
| word    | code_points                        |
+---------+------------------------------------+
| foo     | [102, 111, 111]                    |
| bar     | [98, 97, 114]                      |
| baz     | [98, 97, 122]                      |
| giraffe | [103, 105, 114, 97, 102, 102, 101] |
| llama   | [108, 108, 97, 109, 97]            |
*---------+------------------------------------*/


The following example converts integer representations of ` BYTES ` to their
corresponding ASCII character values.



SELECT word, TO_CODE_POINTS(word) AS bytes_value_as_integer
FROM UNNEST([b'\x00\x01\x10\xff', b'\x66\x6f\x6f']) AS word;

/*------------------+------------------------*
| word             | bytes_value_as_integer |
+------------------+------------------------+
| \x00\x01\x10\xff | [0, 1, 16, 255]        |
| foo              | [102, 111, 111]        |
*------------------+------------------------*/


The following example demonstrates the difference between a ` BYTES ` result
and a ` STRING ` result.



SELECT TO_CODE_POINTS(b'Ā') AS b_result, TO_CODE_POINTS('Ā') AS s_result;

/*------------+----------*
| b_result   | s_result |
+------------+----------+
| [196, 128] | [256]    |
*------------+----------*/


Notice that the character, Ā, is represented as a two-byte Unicode sequence.
As a result, the ` BYTES ` version of ` TO_CODE_POINTS ` returns an array with
two elements, while the ` STRING ` version returns an array with a single
element.

###  ` TO_HEX `



TO_HEX(bytes)


**Description**

Converts a sequence of ` BYTES ` into a hexadecimal ` STRING ` . Converts each
byte in the ` STRING ` as two hexadecimal characters in the range ` (0..9,
a..f) ` . To convert a hexadecimal-encoded ` STRING ` to ` BYTES ` , use
FROM_HEX  .

**Return type**

` STRING `

**Example**



WITH Input AS (
SELECT b'\x00\x01\x02\x03\xAA\xEE\xEF\xFF' AS byte_str UNION ALL
SELECT b'foobar'
)
SELECT byte_str, TO_HEX(byte_str) AS hex_str
FROM Input;

/*----------------------------------+------------------*
| byte_string                      | hex_string       |
+----------------------------------+------------------+
| \x00\x01\x02\x03\xaa\xee\xef\xff | 00010203aaeeefff |
| foobar                           | 666f6f626172     |
*----------------------------------+------------------*/


###  ` TRANSLATE `



TRANSLATE(expression, source_characters, target_characters)


**Description**

In ` expression ` , replaces each character in ` source_characters ` with the
corresponding character in ` target_characters ` . All inputs must be the same
type, either ` STRING ` or ` BYTES ` .

* Each character in ` expression ` is translated at most once.
* A character in ` expression ` that is not present in ` source_characters ` is left unchanged in ` expression ` .
* A character in ` source_characters ` without a corresponding character in ` target_characters ` is omitted from the result.
* A duplicate character in ` source_characters ` results in an error.

**Return type**

` STRING ` or ` BYTES `

**Examples**



WITH example AS (
SELECT 'This is a cookie' AS expression, 'sco' AS source_characters, 'zku' AS
target_characters UNION ALL
SELECT 'A coaster' AS expression, 'co' AS source_characters, 'k' as
target_characters
)
SELECT expression, source_characters, target_characters, TRANSLATE(expression,
source_characters, target_characters) AS translate
FROM example;

/*------------------+-------------------+-------------------+------------------*
| expression       | source_characters | target_characters | translate        |
+------------------+-------------------+-------------------+------------------+
| This is a cookie | sco               | zku               | Thiz iz a kuukie |
| A coaster        | co                | k                 | A kaster         |
*------------------+-------------------+-------------------+------------------*/


###  ` TRIM `



TRIM(value_to_trim[, set_of_characters_to_remove])


**Description**

Takes a ` STRING ` or ` BYTES ` value to trim.

If the value to trim is a ` STRING ` , removes from this value all leading and
trailing Unicode code points in ` set_of_characters_to_remove ` . The set of
code points is optional. If it is not specified, all whitespace characters are
removed from the beginning and end of the value to trim.

If the value to trim is ` BYTES ` , removes from this value all leading and
trailing bytes in ` set_of_characters_to_remove ` . The set of bytes is
required.

**Return type**

* ` STRING ` if ` value_to_trim ` is a ` STRING ` value.
* ` BYTES ` if ` value_to_trim ` is a ` BYTES ` value.

**Examples**

In the following example, all leading and trailing whitespace characters are
removed from ` item ` because ` set_of_characters_to_remove ` is not
specified.



WITH items AS
(SELECT '   apple   ' as item
UNION ALL
SELECT '   banana   ' as item
UNION ALL
SELECT '   orange   ' as item)

SELECT
CONCAT('#', TRIM(item), '#') as example
FROM items;

/*----------*
| example  |
+----------+
| #apple#  |
| #banana# |
| #orange# |
*----------*/


In the following example, all leading and trailing ` * ` characters are
removed from ` item ` .



WITH items AS
(SELECT '***apple***' as item
UNION ALL
SELECT '***banana***' as item
UNION ALL
SELECT '***orange***' as item)

SELECT
TRIM(item, '*') as example
FROM items;

/*---------*
| example |
+---------+
| apple   |
| banana  |
| orange  |
*---------*/


In the following example, all leading and trailing ` x ` , ` y ` , and ` z `
characters are removed from ` item ` .



WITH items AS
(SELECT 'xxxapplexxx' as item
UNION ALL
SELECT 'yyybananayyy' as item
UNION ALL
SELECT 'zzzorangezzz' as item
UNION ALL
SELECT 'xyzpearxyz' as item)

SELECT
TRIM(item, 'xyz') as example
FROM items;

/*---------*
| example |
+---------+
| apple   |
| banana  |
| orange  |
| pear    |
*---------*/


In the following example, examine how ` TRIM ` interprets characters as
Unicode code-points. If your trailing character set contains a combining
diacritic mark over a particular letter, ` TRIM ` might strip the same
diacritic mark from a different letter.



SELECT
TRIM('abaW̊', 'Y̊') AS a,
TRIM('W̊aba', 'Y̊') AS b,
TRIM('abaŪ̊', 'Y̊') AS c,
TRIM('Ū̊aba', 'Y̊') AS d;

/*------+------+------+------*
| a    | b    | c    | d    |
+------+------+------+------+
| abaW | W̊aba | abaŪ | Ūaba |
*------+------+------+------*/


In the following example, all leading and trailing ` b'n' ` , ` b'a' ` , `
b'\xab' ` bytes are removed from ` item ` .



WITH items AS
(
SELECT b'apple' as item UNION ALL
SELECT b'banana' as item UNION ALL
SELECT b'\xab\xcd\xef\xaa\xbb' as item
)
SELECT item, TRIM(item, b'na\xab') AS examples
FROM items;

-- Note that the result of TRIM is of type BYTES, displayed as a base64-encoded string.
/*----------------------+------------------*
| item                 | example          |
+----------------------+------------------+
| YXBwbGU=             | cHBsZQ==         |
| YmFuYW5h             | Yg==             |
| q83vqrs=             | ze+quw==         |
*----------------------+------------------*/


###  ` UNICODE `



UNICODE(value)


**Description**

Returns the Unicode [ code point ](https://en.wikipedia.org/wiki/Code_point)
for the first character in ` value ` . Returns ` 0 ` if ` value ` is empty, or
if the resulting Unicode code point is ` 0 ` .

**Return type**

` INT64 `

**Examples**



SELECT UNICODE('âbcd') as A, UNICODE('â') as B, UNICODE('') as C, UNICODE(NULL) as D;

/*-------+-------+-------+-------*
| A     | B     | C     | D     |
+-------+-------+-------+-------+
| 226   | 226   | 0     | NULL  |
*-------+-------+-------+-------*/


###  ` UPPER `



UPPER(value)


**Description**

For ` STRING ` arguments, returns the original string with all alphabetic
characters in uppercase. Mapping between uppercase and lowercase is done
according to the [ Unicode Character Database ](http://unicode.org/ucd/)
without taking into account language-specific mappings.

For ` BYTES ` arguments, the argument is treated as ASCII text, with all bytes
greater than 127 left intact.

**Return type**

` STRING ` or ` BYTES `

**Examples**



WITH items AS
(SELECT
'foo' as item
UNION ALL
SELECT
'bar' as item
UNION ALL
SELECT
'baz' as item)

SELECT
UPPER(item) AS example
FROM items;

/*---------*
| example |
+---------+
| FOO     |
| BAR     |
| BAZ     |
*---------*/


Send feedback

Except as otherwise noted, the content of this page is licensed under the [
Creative Commons Attribution 4.0 License
](https://creativecommons.org/licenses/by/4.0/) , and code samples are
licensed under the [ Apache 2.0 License
](https://www.apache.org/licenses/LICENSE-2.0) . For details, see the [ Google
Developers Site Policies ](https://developers.google.com/site-policies) . Java
is a registered trademark of Oracle and/or its affiliates.

Last updated 2024-04-29 UTC.

[{ "type": "thumb-down", "id": "hardToUnderstand", "label":"Hard to
understand" },{ "type": "thumb-down", "id":
"incorrectInformationOrSampleCode", "label":"Incorrect information or sample
code" },{ "type": "thumb-down", "id": "missingTheInformationSamplesINeed",
"label":"Missing the information/samples I need" },{ "type": "thumb-down",
"id": "otherDown", "label":"Other" }]  [{ "type": "thumb-up", "id":
"easyToUnderstand", "label":"Easy to understand" },{ "type": "thumb-up", "id":
"solvedMyProblem", "label":"Solved my problem" },{ "type": "thumb-up", "id":
"otherUp", "label":"Other" }]  Need to tell us more?

* ###  Why Google

* [ Choosing Google Cloud ](/why-google-cloud/)
* [ Trust and security ](/trust-center/)
* [ Open cloud ](/open-cloud/)
* [ Multicloud ](/multicloud/)
* [ Global infrastructure ](/infrastructure/)
* [ Customers and case studies ](/customers/)
* [ Analyst reports ](/analyst-reports/)
* [ Whitepapers ](/whitepapers/)
* [ Blog ](//cloud.google.com/blog/)
* ###  Products and pricing

* [ Google Cloud pricing ](/pricing/)
* [ Google Workspace pricing ](//workspace.google.com/pricing.html)
* [ See all products ](/products/)
* ###  Solutions

* [ Infrastructure modernization ](/solutions/infrastructure-modernization/)
* [ Databases ](/solutions/databases/)
* [ Application modernization ](/solutions/application-modernization/)
* [ Smart analytics ](/solutions/smart-analytics/)
* [ Artificial Intelligence ](/solutions/ai/)
* [ Security ](/solutions/security/)
* [ Productivity & work transformation ](https://workspace.google.com/enterprise/)
* [ Industry solutions ](/solutions/#industry-solutions)
* [ DevOps solutions ](/solutions/devops/)
* [ Small business solutions ](/solutions/#section-14)
* [ See all solutions ](/solutions/)
* ###  Resources

* [ Google Cloud documentation ](/docs/)
* [ Google Cloud quickstarts ](/docs/get-started/)
* [ Google Cloud Marketplace ](/marketplace/)
* [ Learn about cloud computing ](/discover/)
* [ Support ](/support-hub/)
* [ Code samples ](/docs/samples)
* [ Cloud Architecture Center ](/architecture/)
* [ Training ](/learn/training/)
* [ Certifications ](/learn/certification/)
* [ Google for Developers ](//developers.google.com)
* [ Google Cloud for Startups ](/startup/)
* [ System status ](//status.cloud.google.com)
* [ Release Notes ](/release-notes)
* ###  Engage

* [ Contact sales ](/contact/)
* [ Find a Partner ](//cloud.google.com/find-a-partner)
* [ Become a Partner ](/partners/become-a-partner/)
* [ Events ](/events/)
* [ Podcasts ](/podcasts/)
* [ Developer Center ](/developers/)
* [ Press Corner ](https://www.googlecloudpresscorner.com/)
* [ Google Cloud on YouTube ](//www.youtube.com/googlecloud)
* [ Google Cloud Tech on YouTube ](//www.youtube.com/googlecloudplatform)
* [ Follow on X ](//x.com/googlecloud)
* [ Join User Research ](//userresearch.google.com/?reserved=1&utm_source=website&Q_Language=en&utm_medium=own_srch&utm_campaign=CloudWebFooter&utm_term=0&utm_content=0&productTag=clou&campaignDate=jul19&pType=devel&referral_code=jk212693)
* [ We're hiring. Join Google Cloud! ](//careers.google.com/cloud)
* [ Google Cloud Community ](https://www.googlecloudcommunity.com/)

* [ About Google ](//about.google/)
* [ Privacy ](//policies.google.com/privacy)
* [ Site terms ](//www.google.com/intl/en/policies/terms/regional.html)
* [ Google Cloud terms ](/product-terms/)
* Manage cookies
* [ Our third decade of climate action: join us ](/sustainability)
* Sign up for the Google Cloud newsletter  [ Subscribe ](/newsletter/)

* English
* Deutsch
* Español – América Latina
* Français
* Português – Brasil
* 中文 – 简体
* 日本語
* 한국어

