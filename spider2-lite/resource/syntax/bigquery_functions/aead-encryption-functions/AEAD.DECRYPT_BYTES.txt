## AEAD.DECRYPT_BYTES

AEAD.DECRYPT_BYTES(keyset, ciphertext, additional_data)

**Description**

Uses the matching key from ` keyset ` to decrypt ` ciphertext ` and verifies the integrity of the data using ` additional_data ` . Returns an error if decryption or verification fails.

` keyset ` is a serialized ` BYTES ` value returned by one of the ` KEYS `
functions or a ` STRUCT ` returned by ` KEYS.KEYSET_CHAIN ` . ` keyset ` must contain the key that was used to encrypt ` ciphertext ` , and the key must be in an ` 'ENABLED' ` state, or else the function returns an error. `
AEAD.DECRYPT_BYTES ` identifies the matching key in ` keyset ` by finding the key with the key ID that matches the one encrypted in ` ciphertext ` .

` ciphertext ` is a ` BYTES ` value that is the result of a call to `
AEAD.ENCRYPT ` where the input ` plaintext ` was of type ` BYTES ` .

If ` ciphertext ` includes an initialization vector (IV), it should be the first bytes of ` ciphertext ` . If ` ciphertext ` includes an authentication tag, it should be the last bytes of ` ciphertext ` . If the IV and authentic tag are one (SIV), it should be the first bytes of ` ciphertext ` . The IV and authentication tag commonly require 16 bytes, but may vary in size.

` additional_data ` is a ` STRING ` or ` BYTES ` value that binds the ciphertext to its context. This forces the ciphertext to be decrypted in the same context in which it was encrypted. This function casts any ` STRING `
value to ` BYTES ` . This must be the same as the ` additional_data ` provided to ` AEAD.ENCRYPT ` to encrypt ` ciphertext ` , ignoring its type, or else the function returns an error.

**Return Data Type**

` BYTES `

**Example**

This example creates a table of unique IDs with associated plaintext values and keysets. Then it uses these keysets to encrypt the plaintext values as `
BYTES ` and store them in a new table. Finally, it uses ` AEAD.DECRYPT_BYTES `
to decrypt the encrypted values and display them as plaintext.

The following statement creates a table ` CustomerKeysets ` containing a column of unique IDs, a column of ` AEAD_AES_GCM_256 ` keysets, and a column of favorite animals.


CREATE TABLE aead.CustomerKeysets AS SELECT 1 AS customer_id,
KEYS.NEW_KEYSET('AEAD_AES_GCM_256') AS keyset,
b'jaguar' AS favorite_animal UNION ALL SELECT 2 AS customer_id,
KEYS.NEW_KEYSET('AEAD_AES_GCM_256') AS keyset,
b'zebra' AS favorite_animal UNION ALL SELECT 3 AS customer_id,
KEYS.NEW_KEYSET('AEAD_AES_GCM_256') AS keyset,
b'nautilus' AS favorite_animal;

The following statement creates a table ` EncryptedCustomerData ` containing a column of unique IDs and a column of ciphertext. The statement encrypts the plaintext ` favorite_animal ` using the keyset value from ` CustomerKeysets `
corresponding to each unique ID.


CREATE TABLE aead.EncryptedCustomerData AS SELECT customer_id,
AEAD.ENCRYPT(keyset, favorite_animal, CAST(CAST(customer_id AS STRING) AS BYTES)) AS encrypted_animal FROM aead.CustomerKeysets AS ck;

The following query uses the keysets in the ` CustomerKeysets ` table to decrypt data in the ` EncryptedCustomerData ` table.


SELECT ecd.customer_id,
AEAD.DECRYPT_BYTES( (SELECT ck.keyset FROM aead.CustomerKeysets AS ck WHERE ecd.customer_id = ck.customer_id),
ecd.encrypted_animal,
CAST(CAST(customer_id AS STRING) AS BYTES) ) AS favorite_animal FROM aead.EncryptedCustomerData AS ecd;