## KEYS.KEYSET_CHAIN

KEYS.KEYSET_CHAIN(kms_resource_name, first_level_keyset)

**Description**

Can be used in place of the ` keyset ` argument to the AEAD and deterministic encryption functions to pass a [ Tink
](https://github.com/google/tink/blob/master/docs/KEY-MANAGEMENT.md) keyset that is encrypted with a [ Cloud KMS key ](/bigquery/docs/aead-encryption-
concepts#cloud_kms_protection) . This function lets you use other AEAD functions without including plaintext keys in a query.

This function takes the following arguments:

* ` kms_resource_name ` : A ` STRING ` literal that contains the resource path to the Cloud KMS key that's used to decrypt ` first_level_keyset ` . This key must reside in the same Cloud region where this function is executed. A Cloud KMS key looks like this:

gcp-kms://projects/my-project/locations/us/keyRings/my-key-ring/cryptoKeys/my-crypto-key

* ` first_level_keyset ` : A ` BYTES ` literal that represents a [ keyset ](/bigquery/docs/aead-encryption-concepts#keysets) or [ wrapped keyset ](/bigquery/docs/aead-encryption-concepts#wrapped_keysets) .

**Return Data Type**

` STRUCT `

**Example**

This example creates a table of example data, then shows how to encrypt that data using a wrapped (encrypted) keyset. Finally it shows how to query the encrypted version of the data.

The following statement creates a table ` RawCustomerData ` containing a column of customer ids and a column of favorite animals.


CREATE TABLE aead.RawCustomerData AS SELECT 1 AS customer_id,
b'jaguar' AS favorite_animal UNION ALL SELECT 2 AS customer_id,
b'zebra' AS favorite_animal UNION ALL SELECT 3 AS customer_id,
b'zebra' AS favorite_animal;

The following statement creates a table ` EncryptedCustomerData ` containing a column of unique IDs and a column of ciphertext. The statement encrypts the plaintext ` favorite_animal ` using the first_level_keyset provided.


DECLARE kms_resource_name STRING;
DECLARE first_level_keyset BYTES;
SET kms_resource_name = 'gcp-kms://projects/my-project/locations/us/keyRings/my-key-ring/cryptoKeys/my-crypto-key';
SET first_level_keyset = b'\012\044\000\107\275\360\176\264\206\332\235\215\304...';

CREATE TABLE aead.EncryptedCustomerData AS SELECT customer_id,
AEAD.ENCRYPT( KEYS.KEYSET_CHAIN(kms_resource_name, first_level_keyset),
favorite_animal,
CAST(CAST(customer_id AS STRING) AS BYTES) ) AS encrypted_animal FROM aead.RawCustomerData;

The following query uses the first_level_keyset to decrypt data in the `
EncryptedCustomerData ` table.


DECLARE kms_resource_name STRING;
DECLARE first_level_keyset BYTES;
SET kms_resource_name = 'gcp-kms://projects/my-project/locations/us/keyRings/my-key-ring/cryptoKeys/my-crypto-key';
SET first_level_keyset = b'\012\044\000\107\275\360\176\264\206\332\235\215\304...';

SELECT customer_id,
AEAD.DECRYPT_BYTES( KEYS.KEYSET_CHAIN(kms_resource_name, first_level_keyset),
encrypted_animal,
CAST(CAST(customer_id AS STRING) AS BYTES) ) AS favorite_animal FROM aead.EncryptedCustomerData;

The previous two steps also work with the ` DETERMINISTIC_ENCRYPT ` and `
DETERMINISTIC_DECRYPT_BYTES ` functions. The wrapped keyset must be created using the ` DETERMINISTIC_AEAD_AES_SIV_CMAC_256 ` type.

The following statement creates a table ` EncryptedCustomerData ` containing a column of unique IDs and a column of ciphertext. The statement encrypts the plaintext ` favorite_animal ` using the first_level_keyset provided. You can see that the ciphertext for ` favorite_animal ` is the same for customers 2 and 3 since their plaintext ` favorite_animal ` is the same.


DECLARE kms_resource_name STRING;
DECLARE first_level_keyset BYTES;
SET kms_resource_name = 'gcp-kms://projects/my-project/locations/us/keyRings/my-key-ring/cryptoKeys/my-crypto-key';
SET first_level_keyset = b'\012\044\000\107\275\360\176\264\206\332\235\215\304...';

CREATE TABLE daead.EncryptedCustomerData AS SELECT customer_id,
DETERMINISTC_ENCRYPT( KEYS.KEYSET_CHAIN(kms_resource_name, first_level_keyset),
favorite_animal,
CAST(CAST(customer_id AS STRING) AS BYTES) ) AS encrypted_animal FROM daead.RawCustomerData;

The following query uses the first_level_keyset to decrypt data in the `
EncryptedCustomerData ` table.


DECLARE kms_resource_name STRING;
DECLARE first_level_keyset BYTES;
SET kms_resource_name = 'gcp-kms://projects/my-project/locations/us/keyRings/my-key-ring/cryptoKeys/my-crypto-key';
SET first_level_keyset = b'\012\044\000\107\275\360\176\264\206\332\235\215\304...';

SELECT customer_id,
DETERMINISTIC_DECRYPT_BYTES( KEYS.KEYSET_CHAIN(kms_resource_name, first_level_keyset),
encrypted_animal,
CAST(CAST(customer_id AS STRING) AS BYTES) ) AS favorite_animal FROM dead.EncryptedCustomerData;