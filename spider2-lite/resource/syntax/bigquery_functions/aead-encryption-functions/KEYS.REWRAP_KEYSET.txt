## KEYS.REWRAP_KEYSET

KEYS.REWRAP_KEYSET(source_kms_resource_name, target_kms_resource_name, wrapped_keyset)

**Description**

Re-encrypts a [ wrapped keyset ](/bigquery/docs/aead-encryption-
concepts#wrapped_keysets) with a new [ Cloud KMS key ](/bigquery/docs/aead-
encryption-concepts#cloud_kms_protection) . Returns the wrapped keyset as a `
BYTES ` representation of [ google.crypto.tink.Keyset
](https://github.com/google/tink/blob/master/proto/tink.proto) that contains a primary cryptographic key and no additional keys.

When this function is used, a wrapped keyset is decrypted by `
source_kms_resource_name ` and then re-encrypted by ` target_kms_resource_name
` . During this process, the decrypted keyset is never visible to customers.

This function takes the following arguments:

* ` source_kms_resource_name ` : A ` STRING ` literal representation of the Cloud KMS key you want to replace. This key must reside in the same Cloud region where this function is executed. A Cloud KMS key looks like this:

gcp-kms://projects/my-project/locations/us/keyRings/my-key-ring/cryptoKeys/my-crypto-key

* ` target_kms_resource_name ` : A ` STRING ` literal representation of the new Cloud KMS key that you want to use.

* ` wrapped_keyset ` : A ` BYTES ` literal representation of the keyset that you want to re-encrypt.

**Return Data Type**

` BYTES `

**Example**

Put the following variables above each example query that you run:


DECLARE source_kms_resource_name STRING;
DECLARE target_kms_resource_name STRING;
DECLARE wrapped_keyset BYTES;
SET source_kms_resource_name = 'gcp-kms://projects/my-project/locations/us/keyRings/my-key-ring/cryptoKeys/my-crypto-key';
SET target_kms_resource_name = 'gcp-kms://projects/my-project/locations/another-location/keyRings/my-key-ring/cryptoKeys/my-other-crypto-key';
SET wrapped_keyset = b'\012\044\000\107\275\360\176\264\206\332\235\215\304...';

The following query rewraps a wrapped keyset. If you run the query multiple times, it generates multiple wrapped keysets, and each wrapped keyset is unique to each query that is run.


SELECT KEYS.REWRAP_KEYSET(source_kms_resource_name, target_kms_resource_name, wrapped_keyset);

Multiple calls to this function with the same arguments in one query returns the same value. For example, the following query only creates one wrapped keyset and returns it for each row in a table called ` my_table ` .


SELECT
*,
KEYS.REWRAP_KEYSET(source_kms_resource_name, target_kms_resource_name, wrapped_keyset) FROM my_table