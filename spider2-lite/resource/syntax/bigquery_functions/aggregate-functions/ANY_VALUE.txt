## ANY_VALUE

ANY_VALUE( expression
[ HAVING { MAX | MIN } expression2 ]
)
[ OVER over_clause ]

over_clause:
{ named_window | ( [ window_specification ] ) }

window_specification:
[ named_window ]
[ PARTITION BY partition_expression [, ...] ]
[ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]
[ window_frame_clause ]


**Description**

Returns ` expression ` for some row chosen from the group. Which row is chosen is nondeterministic, not random. Returns ` NULL ` when the input produces no rows. Returns ` NULL ` when ` expression ` is ` NULL ` for all rows in the group.

` ANY_VALUE ` behaves as if ` IGNORE NULLS ` is specified; rows for which `
expression ` is ` NULL ` are not considered and won't be selected.

If the ` HAVING ` clause is included in the ` ANY_VALUE ` function, the ` OVER
` clause can't be used with this function.

To learn more about the optional aggregate clauses that you can pass into this function, see [ Aggregate function calls ](/bigquery/docs/reference/standard-
sql/aggregate-function-calls) .

To learn more about the ` OVER ` clause and how to use it, see [ Window function calls ](/bigquery/docs/reference/standard-sql/window-function-calls) .

**Supported Argument Types**

Any

**Returned Data Types**

Matches the input data type.

**Examples**


SELECT ANY_VALUE(fruit) as any_value FROM UNNEST(["apple", "banana", "pear"]) as fruit;

/*-----------*
| any_value |
+-----------+
| apple     |
*-----------*/


SELECT fruit,
ANY_VALUE(fruit) OVER (ORDER BY LENGTH(fruit) ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS any_value FROM UNNEST(["apple", "banana", "pear"]) as fruit;

/*--------+-----------*
| fruit  | any_value |
+--------+-----------+
| pear   | pear      |
| apple  | pear      |
| banana | apple     |
*--------+-----------*/


WITH Store AS ( SELECT 20 AS sold, "apples" AS fruit UNION ALL SELECT 30 AS sold, "pears" AS fruit UNION ALL SELECT 30 AS sold, "bananas" AS fruit UNION ALL SELECT 10 AS sold, "oranges" AS fruit ) SELECT ANY_VALUE(fruit HAVING MAX sold) AS a_highest_selling_fruit FROM Store;

/*-------------------------*
| a_highest_selling_fruit |
+-------------------------+
| pears                   |
*-------------------------*/


WITH Store AS ( SELECT 20 AS sold, "apples" AS fruit UNION ALL SELECT 30 AS sold, "pears" AS fruit UNION ALL SELECT 30 AS sold, "bananas" AS fruit UNION ALL SELECT 10 AS sold, "oranges" AS fruit ) SELECT ANY_VALUE(fruit HAVING MIN sold) AS a_lowest_selling_fruit FROM Store;

/*-------------------------*
| a_lowest_selling_fruit  |
+-------------------------+
| oranges                 |
*-------------------------*/