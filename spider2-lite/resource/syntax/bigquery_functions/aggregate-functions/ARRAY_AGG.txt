## ARRAY_AGG

ARRAY_AGG(
[ DISTINCT ]
expression
[ { IGNORE | RESPECT } NULLS ]
[ ORDER BY key [ { ASC | DESC } ] [, ... ] ]
[ LIMIT n ]
)
[ OVER over_clause ]

over_clause:
{ named_window | ( [ window_specification ] ) }

window_specification:
[ named_window ]
[ PARTITION BY partition_expression [, ...] ]
[ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]
[ window_frame_clause ]


**Description**

Returns an ARRAY of ` expression ` values.

To learn more about the optional aggregate clauses that you can pass into this function, see [ Aggregate function calls ](/bigquery/docs/reference/standard-
sql/aggregate-function-calls) .

If this function is used with the ` OVER ` clause, it's part of a window function call. In a window function call, aggregate function clauses can't be used. To learn more about the ` OVER ` clause and how to use it, see [ Window function calls ](/bigquery/docs/reference/standard-sql/window-function-calls) .

An error is raised if an array in the final query result contains a ` NULL `
element.

**Supported Argument Types**

All data types except ARRAY.

**Returned Data Types**

ARRAY

If there are zero input rows, this function returns ` NULL ` .

**Examples**


SELECT ARRAY_AGG(x) AS array_agg FROM UNNEST([2, 1,-2, 3, -2, 1, 2]) AS x;

/*-------------------------*
| array_agg               |
+-------------------------+
| [2, 1, -2, 3, -2, 1, 2] |
*-------------------------*/


SELECT ARRAY_AGG(DISTINCT x) AS array_agg FROM UNNEST([2, 1, -2, 3, -2, 1, 2]) AS x;

/*---------------*
| array_agg     |
+---------------+
| [2, 1, -2, 3] |
*---------------*/


SELECT ARRAY_AGG(x IGNORE NULLS) AS array_agg FROM UNNEST([NULL, 1, -2, 3, -2, 1, NULL]) AS x;

/*-------------------*
| array_agg         |
+-------------------+
| [1, -2, 3, -2, 1] |
*-------------------*/


SELECT ARRAY_AGG(x ORDER BY ABS(x)) AS array_agg FROM UNNEST([2, 1, -2, 3, -2, 1, 2]) AS x;

/*-------------------------*
| array_agg               |
+-------------------------+
| [1, 1, 2, -2, -2, 2, 3] |
*-------------------------*/


SELECT ARRAY_AGG(x LIMIT 5) AS array_agg FROM UNNEST([2, 1, -2, 3, -2, 1, 2]) AS x;

/*-------------------*
| array_agg         |
+-------------------+
| [2, 1, -2, 3, -2] |
*-------------------*/


WITH vals AS ( SELECT 1 x UNION ALL SELECT -2 x UNION ALL SELECT 3 x UNION ALL SELECT -2 x UNION ALL SELECT 1 x ) SELECT ARRAY_AGG(DISTINCT x ORDER BY x) as array_agg FROM vals;

/*------------*
| array_agg  |
+------------+
| [-2, 1, 3] |
*------------*/


WITH vals AS ( SELECT 1 x, 'a' y UNION ALL SELECT 1 x, 'b' y UNION ALL SELECT 2 x, 'a' y UNION ALL SELECT 2 x, 'c' y ) SELECT x, ARRAY_AGG(y) as array_agg FROM vals GROUP BY x;

/*---------------*
| x | array_agg |
+---------------+
| 1 | [a, b]    |
| 2 | [a, c]    |
*---------------*/


SELECT x,
ARRAY_AGG(x) OVER (ORDER BY ABS(x)) AS array_agg FROM UNNEST([2, 1, -2, 3, -2, 1, 2]) AS x;

/*----+-------------------------*
| x  | array_agg               |
+----+-------------------------+
| 1  | [1, 1]                  |
| 1  | [1, 1]                  |
| 2  | [1, 1, 2, -2, -2, 2]    |
| -2 | [1, 1, 2, -2, -2, 2]    |
| -2 | [1, 1, 2, -2, -2, 2]    |
| 2  | [1, 1, 2, -2, -2, 2]    |
| 3  | [1, 1, 2, -2, -2, 2, 3] |
*----+-------------------------*/