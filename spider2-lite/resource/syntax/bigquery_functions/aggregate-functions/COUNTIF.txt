## COUNTIF

COUNTIF(
[ DISTINCT ]
expression )
[ OVER over_clause ]

over_clause:
{ named_window | ( [ window_specification ] ) }

window_specification:
[ named_window ]
[ PARTITION BY partition_expression [, ...] ]
[ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]
[ window_frame_clause ]


**Description**

Returns the count of ` TRUE ` values for ` expression ` . Returns ` 0 ` if there are zero input rows, or if ` expression ` evaluates to ` FALSE ` or `
NULL ` for all rows.

Since ` expression ` must be a ` BOOL ` , the form ` COUNTIF(DISTINCT ...) `
is generally not useful: there is only one distinct value of ` TRUE ` . So `
COUNTIF(DISTINCT ...) ` will return 1 if ` expression ` evaluates to ` TRUE `
for one or more input rows, or 0 otherwise. Usually when someone wants to combine ` COUNTIF ` and ` DISTINCT ` , they want to count the number of distinct values of an expression for which a certain condition is satisfied.
One recipe to achieve this is the following:


COUNT(DISTINCT IF(condition, expression, NULL))

Note that this uses ` COUNT ` , not ` COUNTIF ` ; the ` IF ` part has been moved inside. To learn more, see the examples for  ` COUNT ` .

To learn more about the optional aggregate clauses that you can pass into this function, see [ Aggregate function calls ](/bigquery/docs/reference/standard-
sql/aggregate-function-calls) .

This function can be used with the [ ` AGGREGATION_THRESHOLD ` clause
](/bigquery/docs/reference/standard-sql/query-syntax#agg_threshold_clause) .

To learn more about the ` OVER ` clause and how to use it, see [ Window function calls ](/bigquery/docs/reference/standard-sql/window-function-calls) .

**Supported Argument Types**

BOOL

**Return Data Types**

INT64

**Examples**


SELECT COUNTIF(x<0) AS num_negative, COUNTIF(x>0) AS num_positive FROM UNNEST([5, -2, 3, 6, -10, -7, 4, 0]) AS x;

/*--------------+--------------*
| num_negative | num_positive |
+--------------+--------------+
| 3            | 4            |
*--------------+--------------*/


SELECT x,
COUNTIF(x<0) OVER (ORDER BY ABS(x) ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS num_negative FROM UNNEST([5, -2, 3, 6, -10, NULL, -7, 4, 0]) AS x;

/*------+--------------*
| x    | num_negative |
+------+--------------+
| NULL | 0            |
| 0    | 1            |
| -2   | 1            |
| 3    | 1            |
| 4    | 0            |
| 5    | 0            |
| 6    | 1            |
| -7   | 2            |
| -10  | 2            |
*------+--------------*/