## DATE_DIFF

DATE_DIFF(start_date, end_date, granularity)

**Description**

Gets the number of unit boundaries between two ` DATE ` values ( ` start_date
` \- ` end_date ` ) at a particular time granularity.

**Definitions**

* ` start_datet ` : The starting ` DATE ` value.
* ` end_date ` : The ending ` DATE ` value.
* ` granularity ` : The date part that represents the granularity. This can be:

* ` DAY `
* ` WEEK ` This date part begins on Sunday.
* ` WEEK(<WEEKDAY>) ` : This date part begins on ` WEEKDAY ` . Valid values for ` WEEKDAY ` are ` SUNDAY ` , ` MONDAY ` , ` TUESDAY ` , ` WEDNESDAY ` , ` THURSDAY ` , ` FRIDAY ` , and ` SATURDAY ` .
* ` ISOWEEK ` : Uses [ ISO 8601 week ](https://en.wikipedia.org/wiki/ISO_week_date) boundaries. ISO weeks begin on Monday.
* ` MONTH ` , except when the first two arguments are ` TIMESTAMP ` values.
* ` QUARTER `
* ` YEAR `
* ` ISOYEAR ` : Uses the [ ISO 8601 ](https://en.wikipedia.org/wiki/ISO_8601) week-numbering year boundary. The ISO year boundary is the Monday of the first week whose Thursday belongs to the corresponding Gregorian calendar year.

**Details**

If ` end_date ` is earlier than ` start_date ` , the output is negative.

**Note:** The behavior of the this function follows the type of arguments passed in. For example, ` DATE_DIFF(TIMESTAMP, TIMESTAMP, PART) ` behaves like
` TIMESTAMP_DIFF(TIMESTAMP, TIMESTAMP, PART) ` .

**Return Data Type**

` INT64 `

**Example**


SELECT DATE_DIFF(DATE '2010-07-07', DATE '2008-12-25', DAY) AS days_diff;

/*-----------*
| days_diff |
+-----------+
| 559       |
*-----------*/


SELECT DATE_DIFF(DATE '2017-10-15', DATE '2017-10-14', DAY) AS days_diff,
DATE_DIFF(DATE '2017-10-15', DATE '2017-10-14', WEEK) AS weeks_diff;

/*-----------+------------*
| days_diff | weeks_diff |
+-----------+------------+
| 1         | 1          |
*-----------+------------*/

The example above shows the result of ` DATE_DIFF ` for two days in succession. ` DATE_DIFF ` with the date part ` WEEK ` returns 1 because `
DATE_DIFF ` counts the number of date part boundaries in this range of dates.
Each ` WEEK ` begins on Sunday, so there is one date part boundary between Saturday, 2017-10-14 and Sunday, 2017-10-15.

The following example shows the result of ` DATE_DIFF ` for two dates in different years. ` DATE_DIFF ` with the date part ` YEAR ` returns 3 because it counts the number of Gregorian calendar year boundaries between the two dates. ` DATE_DIFF ` with the date part ` ISOYEAR ` returns 2 because the second date belongs to the ISO year 2015. The first Thursday of the 2015 calendar year was 2015-01-01, so the ISO year 2015 begins on the preceding Monday, 2014-12-29.


SELECT DATE_DIFF('2017-12-30', '2014-12-30', YEAR) AS year_diff,
DATE_DIFF('2017-12-30', '2014-12-30', ISOYEAR) AS isoyear_diff;

/*-----------+--------------*
| year_diff | isoyear_diff |
+-----------+--------------+
| 3         | 2            |
*-----------+--------------*/

The following example shows the result of ` DATE_DIFF ` for two days in succession. The first date falls on a Monday and the second date falls on a Sunday. ` DATE_DIFF ` with the date part ` WEEK ` returns 0 because this date part uses weeks that begin on Sunday. ` DATE_DIFF ` with the date part `
WEEK(MONDAY) ` returns 1. ` DATE_DIFF ` with the date part ` ISOWEEK ` also returns 1 because ISO weeks begin on Monday.


SELECT DATE_DIFF('2017-12-18', '2017-12-17', WEEK) AS week_diff,
DATE_DIFF('2017-12-18', '2017-12-17', WEEK(MONDAY)) AS week_weekday_diff,
DATE_DIFF('2017-12-18', '2017-12-17', ISOWEEK) AS isoweek_diff;

/*-----------+-------------------+--------------*
| week_diff | week_weekday_diff | isoweek_diff |
+-----------+-------------------+--------------+
| 0         | 1                 | 1            |
*-----------+-------------------+--------------*/