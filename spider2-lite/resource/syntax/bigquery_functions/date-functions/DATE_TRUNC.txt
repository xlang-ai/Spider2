## DATE_TRUNC

DATE_TRUNC(date_expression, date_part)

**Description**

Truncates a ` DATE ` value to the granularity of ` date_part ` . The ` DATE `
value is always rounded to the beginning of ` date_part ` , which can be one of the following:

* ` DAY ` : The day in the Gregorian calendar year that contains the ` DATE ` value.
* ` WEEK ` : The first day of the week in the week that contains the ` DATE ` value. Weeks begin on Sundays. ` WEEK ` is equivalent to ` WEEK(SUNDAY) ` .
* ` WEEK(WEEKDAY) ` : The first day of the week in the week that contains the ` DATE ` value. Weeks begin on ` WEEKDAY ` . ` WEEKDAY ` must be one of the following: ` SUNDAY ` , ` MONDAY ` , ` TUESDAY ` , ` WEDNESDAY ` , ` THURSDAY ` , ` FRIDAY ` , or ` SATURDAY ` .
* ` ISOWEEK ` : The first day of the [ ISO 8601 week ](https://en.wikipedia.org/wiki/ISO_week_date) in the ISO week that contains the ` DATE ` value. The ISO week begins on Monday. The first ISO week of each ISO year contains the first Thursday of the corresponding Gregorian calendar year.
* ` MONTH ` : The first day of the month in the month that contains the ` DATE ` value.
* ` QUARTER ` : The first day of the quarter in the quarter that contains the ` DATE ` value.
* ` YEAR ` : The first day of the year in the year that contains the ` DATE ` value.
* ` ISOYEAR ` : The first day of the [ ISO 8601 ](https://en.wikipedia.org/wiki/ISO_8601) week-numbering year in the ISO year that contains the ` DATE ` value. The ISO year is the Monday of the first week whose Thursday belongs to the corresponding Gregorian calendar year.

**Return Data Type**

DATE

**Examples**


SELECT DATE_TRUNC(DATE '2008-12-25', MONTH) AS month;

/*------------*
| month      |
+------------+
| 2008-12-01 |
*------------*/

In the following example, the original date falls on a Sunday. Because the `
date_part ` is ` WEEK(MONDAY) ` , ` DATE_TRUNC ` returns the ` DATE ` for the preceding Monday.


SELECT date AS original, DATE_TRUNC(date, WEEK(MONDAY)) AS truncated FROM (SELECT DATE('2017-11-05') AS date);

/*------------+------------*
| original   | truncated  |
+------------+------------+
| 2017-11-05 | 2017-10-30 |
*------------+------------*/

In the following example, the original ` date_expression ` is in the Gregorian calendar year 2015. However, ` DATE_TRUNC ` with the ` ISOYEAR ` date part truncates the ` date_expression ` to the beginning of the ISO year, not the Gregorian calendar year. The first Thursday of the 2015 calendar year was 2015-01-01, so the ISO year 2015 begins on the preceding Monday, 2014-12-29.
Therefore the ISO year boundary preceding the ` date_expression ` 2015-06-15 is 2014-12-29.


SELECT DATE_TRUNC('2015-06-15', ISOYEAR) AS isoyear_boundary,
EXTRACT(ISOYEAR FROM DATE '2015-06-15') AS isoyear_number;

/*------------------+----------------*
| isoyear_boundary | isoyear_number |
+------------------+----------------+
| 2014-12-29       | 2015           |
*------------------+----------------*/