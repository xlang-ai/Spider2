## DATETIME_TRUNC

DATETIME_TRUNC(datetime_expression, date_time_part)

**Description**

Truncates a ` DATETIME ` value to the granularity of ` date_time_part ` . The
` DATETIME ` value is always rounded to the beginning of ` date_time_part ` ,
which can be one of the following:

* ` MICROSECOND ` : If used, nothing is truncated from the value.
* ` MILLISECOND ` : The nearest lessor or equal millisecond.
* ` SECOND ` : The nearest lessor or equal second.
* ` MINUTE ` : The nearest lessor or equal minute.
* ` HOUR ` : The nearest lessor or equal hour.
* ` DAY ` : The day in the Gregorian calendar year that contains the ` DATETIME ` value.
* ` WEEK ` : The first day of the week in the week that contains the ` DATETIME ` value. Weeks begin on Sundays. ` WEEK ` is equivalent to ` WEEK(SUNDAY) ` .
* ` WEEK(WEEKDAY) ` : The first day of the week in the week that contains the ` DATETIME ` value. Weeks begin on ` WEEKDAY ` . ` WEEKDAY ` must be one of the following: ` SUNDAY ` , ` MONDAY ` , ` TUESDAY ` , ` WEDNESDAY ` , ` THURSDAY ` , ` FRIDAY ` , or ` SATURDAY ` .
* ` ISOWEEK ` : The first day of the [ ISO 8601 week ](https://en.wikipedia.org/wiki/ISO_week_date) in the ISO week that contains the ` DATETIME ` value. The ISO week begins on Monday. The first ISO week of each ISO year contains the first Thursday of the corresponding Gregorian calendar year.
* ` MONTH ` : The first day of the month in the month that contains the ` DATETIME ` value.
* ` QUARTER ` : The first day of the quarter in the quarter that contains the ` DATETIME ` value.
* ` YEAR ` : The first day of the year in the year that contains the ` DATETIME ` value.
* ` ISOYEAR ` : The first day of the [ ISO 8601 ](https://en.wikipedia.org/wiki/ISO_8601) week-numbering year in the ISO year that contains the ` DATETIME ` value. The ISO year is the Monday of the first week whose Thursday belongs to the corresponding Gregorian calendar year.

**Return Data Type**

` DATETIME `

**Examples**


SELECT DATETIME "2008-12-25 15:30:00" as original,
DATETIME_TRUNC(DATETIME "2008-12-25 15:30:00", DAY) as truncated;

/*----------------------------+------------------------*
| original                   | truncated              |
+----------------------------+------------------------+
| 2008-12-25T15:30:00        | 2008-12-25T00:00:00    |
*----------------------------+------------------------*/

In the following example, the original ` DATETIME ` falls on a Sunday. Because the ` part ` is ` WEEK(MONDAY) ` , ` DATE_TRUNC ` returns the ` DATETIME ` for the preceding Monday.


SELECT datetime AS original,
DATETIME_TRUNC(datetime, WEEK(MONDAY)) AS truncated FROM (SELECT DATETIME(TIMESTAMP "2017-11-05 00:00:00+00", "UTC") AS datetime);

/*---------------------+---------------------*
| original            | truncated           |
+---------------------+---------------------+
| 2017-11-05T00:00:00 | 2017-10-30T00:00:00 |
*---------------------+---------------------*/

In the following example, the original ` datetime_expression ` is in the Gregorian calendar year 2015. However, ` DATETIME_TRUNC ` with the ` ISOYEAR `
date part truncates the ` datetime_expression ` to the beginning of the ISO year, not the Gregorian calendar year. The first Thursday of the 2015 calendar year was 2015-01-01, so the ISO year 2015 begins on the preceding Monday,
2014-12-29. Therefore the ISO year boundary preceding the `
datetime_expression ` 2015-06-15 00:00:00 is 2014-12-29.


SELECT DATETIME_TRUNC('2015-06-15 00:00:00', ISOYEAR) AS isoyear_boundary,
EXTRACT(ISOYEAR FROM DATETIME '2015-06-15 00:00:00') AS isoyear_number;

/*---------------------+----------------*
| isoyear_boundary    | isoyear_number |
+---------------------+----------------+
| 2014-12-29T00:00:00 | 2015           |
*---------------------+----------------*/