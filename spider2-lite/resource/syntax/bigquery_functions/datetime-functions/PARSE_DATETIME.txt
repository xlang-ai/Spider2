## PARSE_DATETIME

PARSE_DATETIME(format_string, datetime_string)

**Description**

Converts a  string representation of a datetime  to a ` DATETIME ` object.

` format_string ` contains the [ format elements
](/bigquery/docs/reference/standard-sql/format-
elements#format_elements_date_time) that define how ` datetime_string ` is formatted. Each element in ` datetime_string ` must have a corresponding element in ` format_string ` . The location of each element in ` format_string
` must match the location of each element in ` datetime_string ` .


-- This works because elements on both sides match.
SELECT PARSE_DATETIME("%a %b %e %I:%M:%S %Y", "Thu Dec 25 07:30:00 2008");

-- This produces an error because the year element is in different locations.
SELECT PARSE_DATETIME("%a %b %e %Y %I:%M:%S", "Thu Dec 25 07:30:00 2008");

-- This produces an error because one of the year elements is missing.
SELECT PARSE_DATETIME("%a %b %e %I:%M:%S", "Thu Dec 25 07:30:00 2008");

-- This works because %c can find all matching elements in datetime_string.
SELECT PARSE_DATETIME("%c", "Thu Dec 25 07:30:00 2008");

The format string fully supports most format elements, except for ` %P ` .

` PARSE_DATETIME ` parses ` string ` according to the following rules:

* **Unspecified fields.** Any unspecified field is initialized from ` 1970-01-01 00:00:00.0 ` . For example, if the year is unspecified then it defaults to ` 1970 ` .
* **Case insensitivity.** Names, such as ` Monday ` and ` February ` , are case insensitive.
* **Whitespace.** One or more consecutive white spaces in the format string matches zero or more consecutive white spaces in the ` DATETIME ` string. Leading and trailing white spaces in the ` DATETIME ` string are always allowed, even if they are not in the format string.
* **Format precedence.** When two or more format elements have overlapping information, the last one generally overrides any earlier ones, with some exceptions. For example, both ` %F ` and ` %Y ` affect the year, so the earlier element overrides the later. See the descriptions of ` %s ` , ` %C ` , and ` %y ` in [ Supported Format Elements For DATETIME ](/bigquery/docs/reference/standard-sql/format-elements#format_elements_date_time) .
* **Format divergence.** ` %p ` can be used with ` am ` , ` AM ` , ` pm ` , and ` PM ` .

**Return Data Type**

` DATETIME `

**Examples**

The following examples parse a ` STRING ` literal as a ` DATETIME ` .


SELECT PARSE_DATETIME('%Y-%m-%d %H:%M:%S', '1998-10-18 13:45:55') AS datetime;

/*---------------------*
| datetime            |
+---------------------+
| 1998-10-18T13:45:55 |
*---------------------*/


SELECT PARSE_DATETIME('%m/%d/%Y %I:%M:%S %p', '8/30/2018 2:23:38 pm') AS datetime;

/*---------------------*
| datetime            |
+---------------------+
| 2018-08-30T14:23:38 |
*---------------------*/

The following example parses a ` STRING ` literal containing a date in a natural language format as a ` DATETIME ` .


SELECT PARSE_DATETIME('%A, %B %e, %Y','Wednesday, December 19, 2018') AS datetime;

/*---------------------*
| datetime            |
+---------------------+
| 2018-12-19T00:00:00 |
*---------------------*/