## JSON_ARRAY_APPEND

JSON_ARRAY_APPEND( json_expr,
json_path_value_pair[, ...]
[, append_each_element=>{ TRUE | FALSE }]
)

json_path_value_pair:
json_path, value

Appends JSON data to the end of a JSON array.

Arguments:

* ` json_expr ` : JSON. For example:

JSON '["a", "b", "c"]'

* ` json_path_value_pair ` : A value and the  JSONPath  for that value. This includes:

* ` json_path ` : Append ` value ` at this  JSONPath  in ` json_expr ` .

* ` value ` : A  JSON encoding-supported  value to append.

* ` append_each_element ` : An optional, mandatory named argument.

* If ` TRUE ` (default), and ` value ` is a SQL array, appends each element individually.

* If ` FALSE, ` and ` value ` is a SQL array, appends the array as one element.

Details:

* Path value pairs are evaluated left to right. The JSON produced by evaluating one pair becomes the JSON against which the next pair is evaluated.
* The operation is ignored if the path points to a JSON non-array value that is not a JSON null.
* If ` json_path ` points to a JSON null, the JSON null is replaced by a JSON array that contains ` value ` .
* If the path exists but has an incompatible type at any given path token, the path value pair operation is ignored.
* The function applies all path value pair append operations even if an individual path value pair operation is invalid. For invalid operations, the operation is ignored and the function continues to process the rest of the path value pairs.
* If any ` json_path ` is an invalid  JSONPath  , an error is produced.
* If ` json_expr ` is SQL ` NULL ` , the function returns SQL ` NULL ` .
* If ` append_each_element ` is SQL ` NULL ` , the function returns ` json_expr ` .
* If ` json_path ` is SQL ` NULL ` , the ` json_path_value_pair ` operation is ignored.

**Return type**

` JSON `

**Examples**

In the following example, path ` $ ` is matched and appends ` 1 ` .


SELECT JSON_ARRAY_APPEND(JSON '["a", "b", "c"]', '$', 1) AS json_data

/*-----------------*
| json_data       |
+-----------------+
| ["a","b","c",1] |
*-----------------*/

In the following example, ` append_each_element ` defaults to ` TRUE ` , so `
[1, 2] ` is appended as individual elements.


SELECT JSON_ARRAY_APPEND(JSON '["a", "b", "c"]', '$', [1, 2]) AS json_data

/*-------------------*
| json_data         |
+-------------------+
| ["a","b","c",1,2] |
*-------------------*/

In the following example, ` append_each_element ` is ` FALSE ` , so ` [1, 2] `
is appended as one element.


SELECT JSON_ARRAY_APPEND( JSON '["a", "b", "c"]',
'$', [1, 2],
append_each_element=>FALSE) AS json_data

/*---------------------*
| json_data           |
+---------------------+
| ["a","b","c",[1,2]] |
*---------------------*/

In the following example, ` append_each_element ` is ` FALSE ` , so ` [1, 2] `
and ` [3, 4] ` are each appended as one element.


SELECT JSON_ARRAY_APPEND( JSON '["a", ["b"], "c"]',
'$[1]', [1, 2],
'$[1][1]', [3, 4],
append_each_element=>FALSE) AS json_data

/*-----------------------------*
| json_data                   |
+-----------------------------+
| ["a",["b",[1,2,[3,4]]],"c"] |
*-----------------------------*/

In the following example, the first path ` $[1] ` appends ` [1, 2] ` as single elements, and then the second path ` $[1][1] ` is not a valid path to an array, so the second operation is ignored.


SELECT JSON_ARRAY_APPEND( JSON '["a", ["b"], "c"]',
'$[1]', [1, 2],
'$[1][1]', [3, 4]) AS json_data

/*---------------------*
| json_data           |
+---------------------+
| ["a",["b",1,2],"c"] |
*---------------------*/

In the following example, path ` $.a ` is matched and appends ` 2 ` .


SELECT JSON_ARRAY_APPEND(JSON '{"a": [1]}', '$.a', 2) AS json_data

/*-------------*
| json_data   |
+-------------+
| {"a":[1,2]} |
*-------------*/

In the following example, a value is appended into a JSON null.


SELECT JSON_ARRAY_APPEND(JSON '{"a": null}', '$.a', 10)

/*------------*
| json_data  |
+------------+
| {"a":[10]} |
*------------*/

In the following example, path ` $.a ` is not an array, so the operation is ignored.


SELECT JSON_ARRAY_APPEND(JSON '{"a": 1}', '$.a', 2) AS json_data

/*-----------*
| json_data |
+-----------+
| {"a":1}   |
*-----------*/

In the following example, path ` $.b ` does not exist, so the operation is ignored.


SELECT JSON_ARRAY_APPEND(JSON '{"a": 1}', '$.b', 2) AS json_data

/*-----------*
| json_data |
+-----------+
| {"a":1}   |
*-----------*/