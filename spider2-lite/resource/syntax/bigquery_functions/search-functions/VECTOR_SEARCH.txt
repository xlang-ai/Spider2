## VECTOR_SEARCH

**Preview**

This product or feature is subject to the "Pre-GA Offerings Terms" in the General Service Terms section of the [ Service Specific Terms
](/terms/service-terms) . Pre-GA products and features are available "as is"
and might have limited support. For more information, see the [ launch stage descriptions ](/products#product-launch-stages) .

To provide feedback or request support for this feature, send email to [ bq-
vector-search@google.com ](mailto:bq-vector-search@google.com) .


VECTOR_SEARCH( TABLE base_table,
column_to_search,
TABLE query_table
[, query_column_to_search => query_column_to_search_value]
[, top_k => top_k_value ]
[, distance_type => distance_type_value ]
[, options => options_value ]
)


VECTOR_SEARCH( TABLE base_table,
column_to_search,
(query_statement)
[, query_column_to_search => query_column_to_search_value]
[, top_k => top_k_value ]
[, distance_type => distance_type_value ]
[, options => options_value ]
)

**Description**

The ` VECTOR_SEARCH ` function lets you search embeddings to find semantically similar entities.

Embeddings are high-dimensional numerical vectors that represent a given entity, like a piece of text or an audio file. Machine learning (ML) models use embeddings to encode semantics about such entities to make it easier to reason about and compare them. For example, a common operation in clustering,
classification, and recommendation models is to measure the distance between vectors in an [ embedding space ](https://en.wikipedia.org/wiki/Latent_space) to find items that are most semantically similar.

**Definitions**

* ` base_table ` : The table to search for nearest neighbor embeddings.
* ` column_to_search ` : The name of the base table column to search for nearest neighbor embeddings. The column must have a type of ` ARRAY<FLOAT64> ` . All elements in the array must be non- ` NULL ` , and all values in the column must have the same array dimensions. If the column has a vector index, BigQuery attempts to use it. To determine if an index was used in the vector search, see [ Vector index usage ](/bigquery/docs/vector-index#vector_index_usage) .
* ` query_table ` : The table that provides the embeddings for which to find nearest neighbors. All columns are passed through as output columns.
* ` query_statement ` : A query that provides the embeddings for which to find nearest neighbors. All columns are passed through as output columns.
* ` query_column_to_search ` : An optional ` STRING ` positional-named argument. ` query_column_to_search_value ` specifies the name of the column in the query table or statement that contains the embeddings for which to find nearest neighbors. The column must have a type of ` ARRAY<FLOAT64> ` . All elements in the array must be non- ` NULL ` and all values in the column must have the same array dimensions as the values in the ` column_to_search ` column. If you don't specify ` query_column_to_search_value ` , the function uses the ` column_to_search ` value.
* ` top_k ` : An optional ` INT64 ` mandatory-named argument. ` top_k_value ` specifies the number of nearest neighbors to return. The default is ` 10 ` . A negative value is treated as infinity, meaning that all values are counted as neighbors and returned.
* ` distance_type ` : An optional ` STRING ` mandatory-named argument. ` distance_type_value ` specifies the type of metric to use to compute the distance between two vectors. Supported distance types are [ ` EUCLIDEAN ` ](https://en.wikipedia.org/wiki/Euclidean_distance) and [ ` COSINE ` ](https://en.wikipedia.org/wiki/Cosine_similarity#Cosine_Distance) . The default is ` EUCLIDEAN ` .

If you don't specify ` distance_type_value ` and the ` column_to_search `
column has a vector index that is used, ` VECTOR_SEARCH ` uses the distance type specified in the [ ` distance_type ` option
](/bigquery/docs/reference/standard-sql/data-definition-
language#vector_index_option_list) of the ` CREATE VECTOR INDEX ` statement.

* ` options ` : An optional JSON-formatted ` STRING ` mandatory-named argument. ` options_value ` is a literal that specifies the following vector search options:

* ` fraction_lists_to_search ` : A JSON number that specifies the percentage of lists to search. For example, ` options => '{"fraction_lists_to_search":0.15}' ` . The ` fraction_lists_to_search ` value must be in the range ` 0.0 ` to ` 1.0 ` , exclusive.

Specifying a higher percentage leads to higher recall and slower performance,
and the converse is true when specifying a lower percentage.

` fraction_lists_to_search ` is only used when a vector index is also used. If you don't specify a ` fraction_lists_to_search ` value but an index is matched, the default number of lists to scan is calculated as ` min(0.002 *
number_of_lists, 10) ` .

The number of available lists to search is determined by the [ ` num_lists `
option ](/bigquery/docs/reference/standard-sql/data-definition-
language#vector_index_option_list) in the ` ivf_options ` option of the `
CREATE VECTOR INDEX ` statement if that is specified. Otherwise, BigQuery calculates an appropriate number.

You can't specify ` fraction_lists_to_search ` when ` use_brute_force ` is set to ` true ` .

* ` use_brute_force ` : A JSON boolean that determines whether to use brute force search by skipping the vector index if one is available. For example, ` options => '{"use_brute_force":true}' ` . The default is ` false ` . If you specify ` use_brute_force=false ` and there is no useable vector index available, brute force is used anyway.

` options ` defaults to ` '{}' ` to denote that all underlying options use their corresponding default values.

**Details**

You can optionally use ` VECTOR_SEARCH ` with a [ vector index
](/bigquery/docs/vector-index) . When a vector index is used, ` VECTOR_SEARCH
` uses the [ Approximate Nearest Neighbor
](https://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximation_methods) search technique to help improve vector search performance, with the trade-off of reducing [ recall ](https://developers.google.com/machine-learning/crash-
course/classification/precision-and-recall#recallsearch_term_rules) and so returning more approximate results. Brute force is used to return exact results when a vector index isn't available, and you can choose to use brute force to get exact results even when a vector index is available.

**Output**

For each row in the query data, the output contains multiple rows from the base table that satisfy the search criteria. The number of results rows per query table row is either 10 or the ` top_k ` value if it is specified. The order of the output isn't guaranteed.

The output includes the following columns:

* ` query ` : A ` STRUCT ` value that contains all selected columns from the query data.
* ` base ` : A ` STRUCT ` value that contains all columns from the base table.
* ` distance ` : A ` FLOAT64 ` value that represents the distance between the base data and the query data.

**Limitations**

BigQuery data security and governance rules apply to the use of `
VECTOR_SEARCH ` , which results in the following behavior:

* If the base table has [ row-level security policies ](/bigquery/docs/row-level-security-intro) , ` VECTOR_SEARCH ` applies the row-level access policies to the query results.
* If the indexed column from the base table has [ data masking policies ](/bigquery/docs/column-data-masking-intro) , ` VECTOR_SEARCH ` succeeds only if the user running the query has the [ ` Fine-Grained Reader ` ](/iam/docs/understanding-roles#datacatalog.categoryFineGrainedReader) role on the policy tags that are used. Otherwise, ` VECTOR_SEARCH ` fails with an invalid query error.
* If any base table column or any column in the query table or statement has [ column-level security policies ](/bigquery/docs/column-level-security) and you don't have appropriate permissions to access the column, ` VECTOR_SEARCH ` fails with a permission denied error.

**Examples**

The following queries create test tables ` table1 ` and ` table2 ` to use in subsequent query examples :


CREATE OR REPLACE TABLE mydataset.table1 ( id INT64,
my_embedding ARRAY<FLOAT64>
);

INSERT mydataset.table1 (id, my_embedding) VALUES(1, [1.0, 2.0]),
(2, [2.0, 4.0]),
(3, [1.5, 7.0]),
(4, [1.0, 3.2]),
(5, [5.0, 5.4]),
(6, [3.7, 1.8]),
(7, [4.4, 2.9]);


CREATE OR REPLACE TABLE mydataset.table2 ( query_id STRING,
embedding ARRAY<FLOAT64>
);

INSERT mydataset.table2 (query_id, embedding) VALUES('dog', [1.0, 2.0]),
('cat', [3.0, 5.2]);

The following example searches the ` my_embedding ` column of ` table1 ` for the top two embeddings that match each row of data in the ` embedding ` column of ` table2 ` :


SELECT *
FROM VECTOR_SEARCH( TABLE mydataset.table1,
'my_embedding',
(SELECT query_id, embedding FROM mydataset.table2),
'embedding',
top_k => 2);

/*------  --------+-----------------+---------+----------------------------------------*
| query.query_id | query.embedding | base.id | base.my_embedding | distance           |
+----------------+-----------------+---------+-------------------+--------------------+
| dog            | 1.0             | 1       | 1.0               | 0                  |
|                | 2.0             |         | 2.0               |                    |
+----------------+-----------------+---------+-------------------+--------------------+
| dog            | 1.0             | 4       | 1.0               | 1.2000000000000002 |
|                | 2.0             |         | 3.2               |                    |
+----------------+-----------------+---------+-------------------+--------------------+
| cat            | 3.0             | 2       | 2.0               | 1.5620499351813311 |
|                | 5.2             |         | 4.0               |                    |
+----------------+-----------------+---------+-------------------+--------------------+
| cat            | 3.0             | 5       | 5.0               | 2.0099751242241779 |
|                | 5.2             |         | 5.4               |                    |
*----------------+-----------------+---------+-------------------+--------------------*/

The following example searches the ` my_embedding ` column of ` table1 ` for the top two embeddings that match each row of data in the ` embedding ` column of ` table2 ` , and uses the ` COSINE ` distance type to measure the distance between the embeddings:


SELECT *
FROM VECTOR_SEARCH( TABLE mydataset.table1,
'my_embedding',
TABLE mydataset.table2,
'embedding',
top_k => 2,
distance_type => 'COSINE');

/*------  --------+-----------------+---------+-------------------------------------------+
| query.query_id | query.embedding | base.id | base.my_embedding | distance              |
+----------------+-----------------+---------+-------------------+-----------------------+
| dog            | 1.0             | 2       | 2.0               | 0                     |
|                | 2.0             |         | 4.0               |                       |
+----------------+-----------------+---------+-------------------+-----------------------+
| dog            | 1.0             | 1       | 1.0               | 0                     |
|                | 2.0             |         | 2.0               |                       |
+----------------+-----------------+---------+-------------------+-----------------------+
| cat            | 3.0             | 2       | 2.0               | 0.0017773842088002478 |
|                | 5.2             |         | 4.0               |                       |
+----------------+-----------------+---------+-------------------+-----------------------+
| cat            | 3.0             | 1       | 1.0               | 0.0017773842088002478 |
|                | 5.2             |         | 2.0               |                       |
*----------------+-----------------+---------+-------------------+-----------------------*/