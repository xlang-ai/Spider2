## TIMESTAMP_TRUNC

TIMESTAMP_TRUNC(timestamp_expression, date_time_part[, time_zone])

**Description**

Truncates a timestamp to the granularity of ` date_time_part ` . The timestamp is always rounded to the beginning of ` date_time_part ` , which can be one of the following:

* ` MICROSECOND ` : If used, nothing is truncated from the value.
* ` MILLISECOND ` : The nearest lessor or equal millisecond.
* ` SECOND ` : The nearest lessor or equal second.
* ` MINUTE ` : The nearest lessor or equal minute.
* ` HOUR ` : The nearest lessor or equal hour.
* ` DAY ` : The day in the Gregorian calendar year that contains the ` TIMESTAMP ` value.
* ` WEEK ` : The first day of the week in the week that contains the ` TIMESTAMP ` value. Weeks begin on Sundays. ` WEEK ` is equivalent to ` WEEK(SUNDAY) ` .
* ` WEEK(WEEKDAY) ` : The first day of the week in the week that contains the ` TIMESTAMP ` value. Weeks begin on ` WEEKDAY ` . ` WEEKDAY ` must be one of the following: ` SUNDAY ` , ` MONDAY ` , ` TUESDAY ` , ` WEDNESDAY ` , ` THURSDAY ` , ` FRIDAY ` , or ` SATURDAY ` .
* ` ISOWEEK ` : The first day of the [ ISO 8601 week ](https://en.wikipedia.org/wiki/ISO_week_date) in the ISO week that contains the ` TIMESTAMP ` value. The ISO week begins on Monday. The first ISO week of each ISO year contains the first Thursday of the corresponding Gregorian calendar year.
* ` MONTH ` : The first day of the month in the month that contains the ` TIMESTAMP ` value.
* ` QUARTER ` : The first day of the quarter in the quarter that contains the ` TIMESTAMP ` value.
* ` YEAR ` : The first day of the year in the year that contains the ` TIMESTAMP ` value.
* ` ISOYEAR ` : The first day of the [ ISO 8601 ](https://en.wikipedia.org/wiki/ISO_8601) week-numbering year in the ISO year that contains the ` TIMESTAMP ` value. The ISO year is the Monday of the first week whose Thursday belongs to the corresponding Gregorian calendar year.

` TIMESTAMP_TRUNC ` function supports an optional ` time_zone ` parameter.
This parameter applies to the following ` date_time_part ` :

* ` MINUTE `
* ` HOUR `
* ` DAY `
* ` WEEK `
* ` WEEK(<WEEKDAY>) `
* ` ISOWEEK `
* ` MONTH `
* ` QUARTER `
* ` YEAR `
* ` ISOYEAR `

Use this parameter if you want to use a time zone other than the default time zone, UTC, as part of the truncate operation.

When truncating a timestamp to ` MINUTE ` or ` HOUR ` parts, ` TIMESTAMP_TRUNC
` determines the civil time of the timestamp in the specified (or default) time zone and subtracts the minutes and seconds (when truncating to ` HOUR ` ) or the seconds (when truncating to ` MINUTE ` ) from that timestamp. While this provides intuitive results in most cases, the result is non-intuitive near daylight savings transitions that are not hour-aligned.

**Return Data Type**

` TIMESTAMP `

**Examples**


SELECT TIMESTAMP_TRUNC(TIMESTAMP "2008-12-25 15:30:00+00", DAY, "UTC") AS utc,
TIMESTAMP_TRUNC(TIMESTAMP "2008-12-25 15:30:00+00", DAY, "America/Los_Angeles") AS la;

-- Display of results may differ, depending upon the environment and time zone where this query was executed.
/*-------------------------+-------------------------*
| utc                     | la                      |
+-------------------------+-------------------------+
| 2008-12-25 00:00:00 UTC | 2008-12-25 08:00:00 UTC |
*-------------------------+-------------------------*/

In the following example, ` timestamp_expression ` has a time zone offset of
+12. The first column shows the ` timestamp_expression ` in UTC time. The second column shows the output of ` TIMESTAMP_TRUNC ` using weeks that start on Monday. Because the ` timestamp_expression ` falls on a Sunday in UTC, `
TIMESTAMP_TRUNC ` truncates it to the preceding Monday. The third column shows the same function with the optional  Time zone definition  argument
'Pacific/Auckland'. Here, the function truncates the ` timestamp_expression `
using New Zealand Daylight Time, where it falls on a Monday.


SELECT timestamp_value AS timestamp_value,
TIMESTAMP_TRUNC(timestamp_value, WEEK(MONDAY), "UTC") AS utc_truncated,
TIMESTAMP_TRUNC(timestamp_value, WEEK(MONDAY), "Pacific/Auckland") AS nzdt_truncated FROM (SELECT TIMESTAMP("2017-11-06 00:00:00+12") AS timestamp_value);

-- Display of results may differ, depending upon the environment and time zone where this query was executed.
/*-------------------------+-------------------------+-------------------------*
| timestamp_value         | utc_truncated           | nzdt_truncated          |
+-------------------------+-------------------------+-------------------------+
| 2017-11-05 12:00:00 UTC | 2017-10-30 00:00:00 UTC | 2017-11-05 11:00:00 UTC |
*-------------------------+-------------------------+-------------------------*/

In the following example, the original ` timestamp_expression ` is in the Gregorian calendar year 2015. However, ` TIMESTAMP_TRUNC ` with the ` ISOYEAR
` date part truncates the ` timestamp_expression ` to the beginning of the ISO year, not the Gregorian calendar year. The first Thursday of the 2015 calendar year was 2015-01-01, so the ISO year 2015 begins on the preceding Monday,
2014-12-29. Therefore the ISO year boundary preceding the `
timestamp_expression ` 2015-06-15 00:00:00+00 is 2014-12-29.


SELECT TIMESTAMP_TRUNC("2015-06-15 00:00:00+00", ISOYEAR) AS isoyear_boundary,
EXTRACT(ISOYEAR FROM TIMESTAMP "2015-06-15 00:00:00+00") AS isoyear_number;

-- Display of results may differ, depending upon the environment and time zone where this query was executed.
/*-------------------------+----------------*
| isoyear_boundary        | isoyear_number |
+-------------------------+----------------+
| 2014-12-29 00:00:00 UTC | 2015           |
*-------------------------+----------------*/