{
    "table_name": "STACKOVERFLOW.STACKOVERFLOW_POSTS",
    "table_fullname": "STACKOVERFLOW.STACKOVERFLOW.STACKOVERFLOW_POSTS",
    "column_names": [
        "tags",
        "score",
        "last_editor_display_name",
        "comment_count",
        "last_edit_date",
        "parent_id",
        "favorite_count",
        "creation_date",
        "answer_count",
        "owner_display_name",
        "body",
        "title",
        "community_owned_date",
        "id",
        "last_activity_date",
        "last_editor_user_id",
        "owner_user_id",
        "post_type_id",
        "view_count",
        "accepted_answer_id"
    ],
    "column_types": [
        "TEXT",
        "NUMBER",
        "TEXT",
        "NUMBER",
        "NUMBER",
        "NUMBER",
        "NUMBER",
        "NUMBER",
        "NUMBER",
        "TEXT",
        "TEXT",
        "TEXT",
        "NUMBER",
        "NUMBER",
        "NUMBER",
        "NUMBER",
        "NUMBER",
        "NUMBER",
        "NUMBER",
        "NUMBER"
    ],
    "description": [
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null
    ],
    "sample_rows": [
        {
            "id": 12043418,
            "title": null,
            "body": "<pre><code>lis = ['fi' 'do' 'ca'] for item in lis: for name in glob.glob('*.html'): if item in name: with open(name) as k: </code></pre> <p>or create a list of all files first and then filter that list with every iteration of <code>list</code>:</p> <pre><code>&gt;&gt;&gt; names=glob.glob('*.html') &gt;&gt;&gt; lis=['fi''do''ca'] &gt;&gt;&gt; for item in lis: ... for name in filter(lambda x:item in xnames): ... with open('name') as k: </code></pre>",
            "accepted_answer_id": null,
            "answer_count": null,
            "comment_count": 6,
            "community_owned_date": null,
            "creation_date": 1345488922380000,
            "favorite_count": null,
            "last_activity_date": 1345489443110000,
            "last_edit_date": 1345489443110000.0,
            "last_editor_display_name": null,
            "last_editor_user_id": 846892.0,
            "owner_display_name": null,
            "owner_user_id": 846892,
            "parent_id": 12043365,
            "post_type_id": 2,
            "score": 3,
            "tags": "",
            "view_count": null
        },
        {
            "id": 19888120,
            "title": null,
            "body": "<p>it's possible using Django ORM:</p> <p>here's what you should do:</p> <pre><code>from django.db.models import Sum total = ( Task.objects .filter(your-filter-here) .aggregate( total=Sum('progress' field= progress*estimated_days ) )['total'] ) </code></pre> <p>Note: if the two fields are of different types say <code>integer</code> &amp; <code>float</code> the type you want to return should be passed as the first parameter of <code>Sum</code></p> <p>It's a late answer but I guess it'll help someone looking for the same.</p>",
            "accepted_answer_id": null,
            "answer_count": null,
            "comment_count": 6,
            "community_owned_date": null,
            "creation_date": 1384075370847000,
            "favorite_count": null,
            "last_activity_date": 1458102533000000,
            "last_edit_date": 1458102533000000.0,
            "last_editor_display_name": null,
            "last_editor_user_id": 1673391.0,
            "owner_display_name": null,
            "owner_user_id": 1232826,
            "parent_id": 12165636,
            "post_type_id": 2,
            "score": 39,
            "tags": "",
            "view_count": null
        },
        {
            "id": 11656918,
            "title": null,
            "body": "<p>Your code as-is works: <a href= http://jsfiddle.net/vWRAw/ rel= nofollow >http://jsfiddle.net/vWRAw/</a></p> <p>The json being returned from your temp-webserver however is JSON and not JSONP. If you want to request it as JSON remove the <code>?callback=?</code> however that would mean your temp webserver would need to be on the same domain as the page making the request.</p>",
            "accepted_answer_id": null,
            "answer_count": null,
            "comment_count": 6,
            "community_owned_date": null,
            "creation_date": 1343243633750000,
            "favorite_count": null,
            "last_activity_date": 1343243633750000,
            "last_edit_date": NaN,
            "last_editor_display_name": null,
            "last_editor_user_id": NaN,
            "owner_display_name": null,
            "owner_user_id": 400654,
            "parent_id": 11656868,
            "post_type_id": 2,
            "score": 1,
            "tags": "",
            "view_count": null
        },
        {
            "id": 3112592,
            "title": null,
            "body": "<p>Reference arguments were originally invented AFAIK for one thing: <strong>operator overloading semantics</strong>. For example operator[] just must return a reference.</p> <p>It was then a subject of great debate whether the 'concealed pointer' should be used for anything else ever. </p> <p>Many development convention documents of many firms said never use references. If you need a pointer say so .</p> <p>However it was then discovered that references have one major advantage (no not the syntax sugar). It is this: a reference is guaranteed to be valid unless you work really hard to break it.</p> <p>Personally I still don't understand why I cannot do this in C++:</p> <pre><code>int a1 a2; int &amp;b = a1; &amp;b = a2; // Error. address of referenced is not an lvalue. Why?! </code></pre>",
            "accepted_answer_id": null,
            "answer_count": null,
            "comment_count": 6,
            "community_owned_date": null,
            "creation_date": 1277402054163000,
            "favorite_count": null,
            "last_activity_date": 1436303301943000,
            "last_edit_date": 1436303301943000.0,
            "last_editor_display_name": null,
            "last_editor_user_id": 63550.0,
            "owner_display_name": null,
            "owner_user_id": 73656,
            "parent_id": 3112550,
            "post_type_id": 2,
            "score": 5,
            "tags": "",
            "view_count": null
        },
        {
            "id": 11273340,
            "title": null,
            "body": "<p><code>Ishoppingcart::addToCart()</code> states that the method does not take any parameter while the implementation <code>Shoppingcart::addToCart(Product $product)</code> requires that a parameter of type <code>Product</code> must be passed into the method. This means that both declarations are incompatible and while the implemented interface must be satisfied PHP throws the shown error.</p> <p>Solution would be to either change <code>Ishoppingcart::addToCart()</code> to <code>Ishoppingcart::addToCart(Product $product)</code> so that it requires a parameter of type <code>Product</code> or to change <code>Shoppingcart::addToCart(Product $product)</code> to allow no parameter to passed into the method: <code>Shoppingcart::addToCart(Product $product = null)</code>;</p> <p>The correct way depends on your application requirements.</p>",
            "accepted_answer_id": null,
            "answer_count": null,
            "comment_count": 6,
            "community_owned_date": null,
            "creation_date": 1341051808937000,
            "favorite_count": null,
            "last_activity_date": 1341051808937000,
            "last_edit_date": NaN,
            "last_editor_display_name": null,
            "last_editor_user_id": NaN,
            "owner_display_name": null,
            "owner_user_id": 11354,
            "parent_id": 11273313,
            "post_type_id": 2,
            "score": 14,
            "tags": "",
            "view_count": null
        }
    ]
}